// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MultiSelectAttributeFilterHandler should init attribute 1`] = `
Object {
  "description": "",
  "displayForms": undefined,
  "id": "attr.product.id",
  "production": true,
  "ref": Object {
    "uri": "/gdc/md/referenceworkspace/obj/1054",
  },
  "title": "Product",
  "type": "attribute",
  "uri": "/gdc/md/referenceworkspace/obj/1054",
}
`;

exports[`MultiSelectAttributeFilterHandler should load attribute and trigger cancel callback on another attribute call 1`] = `
Object {
  "description": "",
  "displayForms": undefined,
  "id": "attr.product.id",
  "production": true,
  "ref": Object {
    "uri": "/gdc/md/referenceworkspace/obj/1054",
  },
  "title": "Product",
  "type": "attribute",
  "uri": "/gdc/md/referenceworkspace/obj/1054",
}
`;

exports[`MultiSelectAttributeFilterHandler should load attribute and trigger cancel callback on another attribute call: first onAttributeLoadStart parameters 1`] = `
Array [
  Object {
    "correlation": "attributeToBeCanceled",
  },
]
`;

exports[`MultiSelectAttributeFilterHandler should load attribute and trigger cancel callback on another attribute call: getAttributeStatus after load 1`] = `"success"`;

exports[`MultiSelectAttributeFilterHandler should load attribute and trigger cancel callback on another attribute call: getAttributeStatus before load 1`] = `"pending"`;

exports[`MultiSelectAttributeFilterHandler should load attribute and trigger cancel callback on another attribute call: getAttributeStatus during another load 1`] = `"loading"`;

exports[`MultiSelectAttributeFilterHandler should load attribute and trigger cancel callback on another attribute call: getAttributeStatus during load 1`] = `"loading"`;

exports[`MultiSelectAttributeFilterHandler should load attribute and trigger cancel callback on another attribute call: onAttributeLoadCancel parameters 1`] = `
Array [
  Object {
    "correlation": "attributeToBeCanceled",
  },
]
`;

exports[`MultiSelectAttributeFilterHandler should load attribute and trigger cancel callback on another attribute call: second onAttributeLoadStart parameters 1`] = `
Array [
  Object {
    "correlation": "attributeSuccess",
  },
]
`;

exports[`MultiSelectAttributeFilterHandler should load attribute and trigger error callback 1`] = `undefined`;

exports[`MultiSelectAttributeFilterHandler should load attribute and trigger error callback: getAttributeStatus after load 1`] = `"error"`;

exports[`MultiSelectAttributeFilterHandler should load attribute and trigger error callback: getAttributeStatus before load 1`] = `"pending"`;

exports[`MultiSelectAttributeFilterHandler should load attribute and trigger error callback: getAttributeStatus during load 1`] = `"loading"`;

exports[`MultiSelectAttributeFilterHandler should load attribute and trigger error callback: onAttributeLoadError parameters 1`] = `
Array [
  Object {
    "correlation": "attributeError",
    "error": [Error: No attribute recording non-existing-displayForm],
  },
]
`;

exports[`MultiSelectAttributeFilterHandler should load attribute and trigger error callback: onAttributeLoadStart parameters 1`] = `
Array [
  Object {
    "correlation": "attributeError",
  },
]
`;

exports[`MultiSelectAttributeFilterHandler should load attribute and trigger success callback 1`] = `
Object {
  "description": "",
  "displayForms": undefined,
  "id": "attr.product.id",
  "production": true,
  "ref": Object {
    "uri": "/gdc/md/referenceworkspace/obj/1054",
  },
  "title": "Product",
  "type": "attribute",
  "uri": "/gdc/md/referenceworkspace/obj/1054",
}
`;

exports[`MultiSelectAttributeFilterHandler should load attribute and trigger success callback: getAttributeStatus after load 1`] = `"success"`;

exports[`MultiSelectAttributeFilterHandler should load attribute and trigger success callback: getAttributeStatus before load 1`] = `"pending"`;

exports[`MultiSelectAttributeFilterHandler should load attribute and trigger success callback: getAttributeStatus during load 1`] = `"loading"`;

exports[`MultiSelectAttributeFilterHandler should load attribute and trigger success callback: onAttributeLoadStart parameters 1`] = `
Array [
  Object {
    "correlation": "attributeSuccess",
  },
]
`;

exports[`MultiSelectAttributeFilterHandler should load attribute and trigger success callback: onAttributeLoadSuccess parameters 1`] = `
Array [
  Object {
    "attribute": Object {
      "description": "",
      "displayForms": undefined,
      "id": "attr.product.id",
      "production": true,
      "ref": Object {
        "uri": "/gdc/md/referenceworkspace/obj/1054",
      },
      "title": "Product",
      "type": "attribute",
      "uri": "/gdc/md/referenceworkspace/obj/1054",
    },
    "correlation": "attributeSuccess",
  },
]
`;
