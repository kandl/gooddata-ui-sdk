import { IElementsQueryAttributeFilter } from "@gooddata/sdk-backend-spi";
import { IAttributeElement, IAttributeMetadataObject, IAttributeFilter, IMeasure, IRelativeDateFilter, SortDirection } from "@gooddata/sdk-model";
import { GoodDataSdkError } from "@gooddata/sdk-ui";
import { AsyncOperationStatus, CallbackRegistration, Correlation, IAttributeFilterLoader, ILoadElementsOptions, OnInitStartCallbackPayload, OnInitSuccessCallbackPayload, OnInitErrorCallbackPayload, OnInitCancelCallbackPayload, OnLoadAttributeStartCallbackPayload, OnLoadAttributeSuccessCallbackPayload, OnLoadAttributeErrorCallbackPayload, OnLoadAttributeCancelCallbackPayload, OnLoadInitialElementsPageStartCallbackPayload, OnLoadInitialElementsPageSuccessCallbackPayload, OnLoadInitialElementsPageErrorCallbackPayload, OnLoadInitialElementsPageCancelCallbackPayload, OnLoadNextElementsPageStartCallbackPayload, OnLoadNextElementsPageSuccessCallbackPayload, OnLoadNextElementsPageErrorCallbackPayload, OnLoadNextElementsPageCancelCallbackPayload, OnLoadCustomElementsStartCallbackPayload, OnLoadCustomElementsSuccessCallbackPayload, OnLoadCustomElementsErrorCallbackPayload, OnLoadCustomElementsCancelCallbackPayload, OnInitTotalCountCancelCallbackPayload, OnInitTotalCountErrorCallbackPayload, OnInitTotalCountStartCallbackPayload, OnInitTotalCountSuccessCallbackPayload } from "../types/index.js";
import { AttributeFilterReduxBridge } from "./bridge.js";
import { AttributeFilterHandlerConfig } from "./types.js";
/**
 * @internal
 */
export declare class AttributeFilterLoader implements IAttributeFilterLoader {
    protected bridge: AttributeFilterReduxBridge;
    protected config: AttributeFilterHandlerConfig;
    protected constructor(config: AttributeFilterHandlerConfig);
    private validateStaticElementsLoad;
    init: (correlation?: Correlation) => void;
    onInitStart: CallbackRegistration<OnInitStartCallbackPayload>;
    onInitSuccess: CallbackRegistration<OnInitSuccessCallbackPayload>;
    onInitError: CallbackRegistration<OnInitErrorCallbackPayload>;
    onInitCancel: CallbackRegistration<OnInitCancelCallbackPayload>;
    getInitStatus: () => AsyncOperationStatus;
    getInitError: () => GoodDataSdkError | undefined;
    initTotalCount: (correlation?: Correlation) => void;
    getInitTotalCountStatus: () => AsyncOperationStatus;
    getInitTotalCountError: () => GoodDataSdkError | undefined;
    onInitTotalCountStart: CallbackRegistration<OnInitTotalCountStartCallbackPayload>;
    onInitTotalCountSuccess: CallbackRegistration<OnInitTotalCountSuccessCallbackPayload>;
    onInitTotalCountError: CallbackRegistration<OnInitTotalCountErrorCallbackPayload>;
    onInitTotalCountCancel: CallbackRegistration<OnInitTotalCountCancelCallbackPayload>;
    loadAttribute: (correlation?: Correlation) => void;
    cancelAttributeLoad: () => void;
    getAttribute: () => IAttributeMetadataObject | undefined;
    getAttributeError: () => GoodDataSdkError | undefined;
    getAttributeStatus: () => AsyncOperationStatus;
    onLoadAttributeStart: CallbackRegistration<OnLoadAttributeStartCallbackPayload>;
    onLoadAttributeSuccess: CallbackRegistration<OnLoadAttributeSuccessCallbackPayload>;
    onLoadAttributeError: CallbackRegistration<OnLoadAttributeErrorCallbackPayload>;
    onLoadAttributeCancel: CallbackRegistration<OnLoadAttributeCancelCallbackPayload>;
    loadInitialElementsPage: (correlation?: Correlation) => void;
    cancelInitialElementsPageLoad(): void;
    getInitialElementsPageStatus: () => AsyncOperationStatus;
    getInitialElementsPageError: () => GoodDataSdkError | undefined;
    onLoadInitialElementsPageStart: CallbackRegistration<OnLoadInitialElementsPageStartCallbackPayload>;
    onLoadInitialElementsPageSuccess: CallbackRegistration<OnLoadInitialElementsPageSuccessCallbackPayload>;
    onLoadInitialElementsPageError: CallbackRegistration<OnLoadInitialElementsPageErrorCallbackPayload>;
    onLoadInitialElementsPageCancel: CallbackRegistration<OnLoadInitialElementsPageCancelCallbackPayload>;
    loadNextElementsPage: (correlation?: Correlation) => void;
    cancelNextElementsPageLoad(): void;
    getNextElementsPageStatus: () => AsyncOperationStatus;
    getNextElementsPageError: () => GoodDataSdkError | undefined;
    onLoadNextElementsPageStart: CallbackRegistration<OnLoadNextElementsPageStartCallbackPayload>;
    onLoadNextElementsPageSuccess: CallbackRegistration<OnLoadNextElementsPageSuccessCallbackPayload>;
    onLoadNextElementsPageError: CallbackRegistration<OnLoadNextElementsPageErrorCallbackPayload>;
    onLoadNextElementsPageCancel: CallbackRegistration<OnLoadNextElementsPageCancelCallbackPayload>;
    loadCustomElements: (options: ILoadElementsOptions, correlation?: Correlation) => void;
    cancelCustomElementsLoad(correlation?: Correlation): void;
    onLoadCustomElementsStart: CallbackRegistration<OnLoadCustomElementsStartCallbackPayload>;
    onLoadCustomElementsSuccess: CallbackRegistration<OnLoadCustomElementsSuccessCallbackPayload>;
    onLoadCustomElementsError: CallbackRegistration<OnLoadCustomElementsErrorCallbackPayload>;
    onLoadCustomElementsCancel: CallbackRegistration<OnLoadCustomElementsCancelCallbackPayload>;
    getOffset: () => number;
    setSearch: (search: string) => void;
    getSearch: () => string;
    setLimit: (limit: number) => void;
    getLimit: () => number;
    setOrder: (order: SortDirection) => void;
    getOrder: () => SortDirection;
    setLimitingMeasures: (measures: IMeasure[]) => void;
    getLimitingMeasures: () => IMeasure[];
    setLimitingAttributeFilters: (filters: IElementsQueryAttributeFilter[]) => void;
    getLimitingAttributeFilters: () => IElementsQueryAttributeFilter[];
    setLimitingDateFilters: (filters: IRelativeDateFilter[]) => void;
    getLimitingDateFilters: () => IRelativeDateFilter[];
    getAllElements: () => IAttributeElement[];
    getElementsByKey: (keys: string[]) => IAttributeElement[];
    getTotalElementsCount: () => number;
    getTotalElementsCountWithCurrentSettings: () => number;
    getLimitingAttributeFiltersAttributes: () => IAttributeMetadataObject[];
    getFilter: () => IAttributeFilter;
    onUpdate: CallbackRegistration<void>;
}
