/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from "./configuration.js";
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import { RequestArgs, BaseAPI } from './base.js';
/**
 * Entity representing user in authentication system.
 * @export
 * @interface AuthUser
 */
export interface AuthUser {
    /**
     * Email - used as lookup (must be unique). For PUT method, it must be same as in URL
     * @type {string}
     * @memberof AuthUser
     */
    email: string;
    /**
     * User password. It is not returned by GET method.
     * @type {string}
     * @memberof AuthUser
     */
    password?: string;
    /**
     * User description, which will be visible in application.
     * @type {string}
     * @memberof AuthUser
     */
    displayName: string;
    /**
     * Field, which should be stored in metadata in authenticationId field. In PUT and POST method it must be not present, or equal to value calculated by backend (e.g. returned from previous GET).
     * @type {string}
     * @memberof AuthUser
     */
    authenticationId?: string;
}
/**
 *
 * @export
 * @interface FeatureFlagsContext
 */
export interface FeatureFlagsContext {
    /**
     *
     * @type {string}
     * @memberof FeatureFlagsContext
     */
    earlyAccess: string;
}
/**
 * Base Structure for feature flags
 * @export
 * @interface Features
 */
export interface Features {
    /**
     *
     * @type {FeatureFlagsContext}
     * @memberof Features
     */
    context: FeatureFlagsContext;
}
/**
 *
 * @export
 * @interface Invitation
 */
export interface Invitation {
    /**
     *
     * @type {string}
     * @memberof Invitation
     */
    email: string;
}
/**
 *
 * @export
 * @interface LiveFeatureFlagConfiguration
 */
export interface LiveFeatureFlagConfiguration {
    /**
     *
     * @type {string}
     * @memberof LiveFeatureFlagConfiguration
     */
    host: string;
    /**
     *
     * @type {string}
     * @memberof LiveFeatureFlagConfiguration
     */
    key: string;
}
/**
 * Structure for featureHub
 * @export
 * @interface LiveFeatures
 */
export interface LiveFeatures {
    /**
     *
     * @type {FeatureFlagsContext}
     * @memberof LiveFeatures
     */
    context: FeatureFlagsContext;
    /**
     *
     * @type {LiveFeatureFlagConfiguration}
     * @memberof LiveFeatures
     */
    configuration: LiveFeatureFlagConfiguration;
}
/**
 *
 * @export
 * @interface LiveFeaturesAllOf
 */
export interface LiveFeaturesAllOf {
    /**
     *
     * @type {LiveFeatureFlagConfiguration}
     * @memberof LiveFeaturesAllOf
     */
    configuration?: LiveFeatureFlagConfiguration;
}
/**
 * Matomo service.
 * @export
 * @interface MatomoService
 */
export interface MatomoService {
    /**
     * Telemetry host to send events to.
     * @type {string}
     * @memberof MatomoService
     */
    host: string;
    /**
     * Site ID on telemetry server.
     * @type {number}
     * @memberof MatomoService
     */
    siteId: number;
}
/**
 * OpenTelemetry service.
 * @export
 * @interface OpenTelemetryService
 */
export interface OpenTelemetryService {
    /**
     * Telemetry host to send events to.
     * @type {string}
     * @memberof OpenTelemetryService
     */
    host: string;
}
/**
 *
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    organizationId: string;
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    organizationName: string;
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    userId: string;
    /**
     *
     * @type {Telemetry}
     * @memberof Profile
     * @deprecated
     */
    telemetry?: Telemetry;
    /**
     *
     * @type {TelemetryConfig}
     * @memberof Profile
     */
    telemetryConfig: TelemetryConfig;
    /**
     *
     * @type {ProfileLinks}
     * @memberof Profile
     */
    links: ProfileLinks;
    /**
     *
     * @type {LiveFeatures | StaticFeatures}
     * @memberof Profile
     */
    features: LiveFeatures | StaticFeatures;
}
/**
 *
 * @export
 * @interface ProfileLinks
 */
export interface ProfileLinks {
    /**
     *
     * @type {string}
     * @memberof ProfileLinks
     */
    self: string;
    /**
     *
     * @type {string}
     * @memberof ProfileLinks
     */
    organization: string;
    /**
     *
     * @type {string}
     * @memberof ProfileLinks
     */
    user: string;
}
/**
 * Structure for offline feature flag
 * @export
 * @interface StaticFeatures
 */
export interface StaticFeatures {
    /**
     *
     * @type {FeatureFlagsContext}
     * @memberof StaticFeatures
     */
    context: FeatureFlagsContext;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof StaticFeatures
     */
    items: {
        [key: string]: string;
    };
}
/**
 *
 * @export
 * @interface StaticFeaturesAllOf
 */
export interface StaticFeaturesAllOf {
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof StaticFeaturesAllOf
     */
    items?: {
        [key: string]: string;
    };
}
/**
 * Telemetry configuration to be used by client.
 * @export
 * @interface Telemetry
 */
export interface Telemetry {
    /**
     * Telemetry host to send events to.
     * @type {string}
     * @memberof Telemetry
     */
    host: string;
    /**
     * Site ID on telemetry server.
     * @type {number}
     * @memberof Telemetry
     */
    siteId: number;
    /**
     * Identification of the deployment to be sent to telemetry server.
     * @type {string}
     * @memberof Telemetry
     */
    deploymentId: string;
    /**
     * Organization hash to be sent to telemetry server.
     * @type {string}
     * @memberof Telemetry
     */
    organizationHash: string;
    /**
     * User hash to be sent to telemetry server.
     * @type {string}
     * @memberof Telemetry
     */
    userHash: string;
}
/**
 * Telemetry-related configuration.
 * @export
 * @interface TelemetryConfig
 */
export interface TelemetryConfig {
    /**
     *
     * @type {TelemetryContext}
     * @memberof TelemetryConfig
     */
    context: TelemetryContext;
    /**
     *
     * @type {TelemetryServices}
     * @memberof TelemetryConfig
     */
    services: TelemetryServices;
}
/**
 * The telemetry context.
 * @export
 * @interface TelemetryContext
 */
export interface TelemetryContext {
    /**
     * Identification of the deployment.
     * @type {string}
     * @memberof TelemetryContext
     */
    deploymentId: string;
    /**
     * Organization hash.
     * @type {string}
     * @memberof TelemetryContext
     */
    organizationHash: string;
    /**
     * User hash.
     * @type {string}
     * @memberof TelemetryContext
     */
    userHash: string;
}
/**
 * Available telemetry services.
 * @export
 * @interface TelemetryServices
 */
export interface TelemetryServices {
    /**
     *
     * @type {MatomoService}
     * @memberof TelemetryServices
     */
    matomo?: MatomoService;
    /**
     *
     * @type {OpenTelemetryService}
     * @memberof TelemetryServices
     */
    openTelemetry?: OpenTelemetryService;
}
/**
 * ActionsApi - axios parameter creator
 * @export
 */
export declare const ActionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
     * @summary Invite User
     * @param {Invitation} invitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processInvitation: (invitation: Invitation, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ActionsApi - functional programming interface
 * @export
 */
export declare const ActionsApiFp: (configuration?: Configuration) => {
    /**
     * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
     * @summary Invite User
     * @param {Invitation} invitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processInvitation(invitation: Invitation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ActionsApi - factory interface
 * @export
 */
export declare const ActionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
     * @summary Invite User
     * @param {ActionsApiProcessInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processInvitation(requestParameters: ActionsApiProcessInvitationRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
};
/**
 * ActionsApi - interface
 * @export
 * @interface ActionsApi
 */
export interface ActionsApiInterface {
    /**
     * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
     * @summary Invite User
     * @param {ActionsApiProcessInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    processInvitation(requestParameters: ActionsApiProcessInvitationRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
}
/**
 * Request parameters for processInvitation operation in ActionsApi.
 * @export
 * @interface ActionsApiProcessInvitationRequest
 */
export interface ActionsApiProcessInvitationRequest {
    /**
     *
     * @type {Invitation}
     * @memberof ActionsApiProcessInvitation
     */
    readonly invitation: Invitation;
}
/**
 * ActionsApi - object-oriented interface
 * @export
 * @class ActionsApi
 * @extends {BaseAPI}
 */
export declare class ActionsApi extends BaseAPI implements ActionsApiInterface {
    /**
     * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
     * @summary Invite User
     * @param {ActionsApiProcessInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    processInvitation(requestParameters: ActionsApiProcessInvitationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export declare const AuthenticationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Create a user
     * @param {AuthUser} authUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: (authUser: AuthUser, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Delete a user
     * @param {string} userEmail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser: (userEmail: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a Profile including Organization and Current User Information.
     * @summary Get Profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfile: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Get a user
     * @param {string} userEmail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: (userEmail: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all users - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Update a user
     * @param {string} userEmail
     * @param {AuthUser} authUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser: (userEmail: string, authUser: AuthUser, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export declare const AuthenticationApiFp: (configuration?: Configuration) => {
    /**
     * Create a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Create a user
     * @param {AuthUser} authUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(authUser: AuthUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthUser>>;
    /**
     * Delete a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Delete a user
     * @param {string} userEmail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(userEmail: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns a Profile including Organization and Current User Information.
     * @summary Get Profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>>;
    /**
     * Get a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Get a user
     * @param {string} userEmail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(userEmail: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthUser>>;
    /**
     * Get all users - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuthUser>>>;
    /**
     * Update a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Update a user
     * @param {string} userEmail
     * @param {AuthUser} authUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(userEmail: string, authUser: AuthUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthUser>>;
};
/**
 * AuthenticationApi - factory interface
 * @export
 */
export declare const AuthenticationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Create a user
     * @param {AuthenticationApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(requestParameters: AuthenticationApiCreateUserRequest, options?: AxiosRequestConfig): AxiosPromise<AuthUser>;
    /**
     * Delete a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Delete a user
     * @param {AuthenticationApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(requestParameters: AuthenticationApiDeleteUserRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Returns a Profile including Organization and Current User Information.
     * @summary Get Profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfile(options?: AxiosRequestConfig): AxiosPromise<Profile>;
    /**
     * Get a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Get a user
     * @param {AuthenticationApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(requestParameters: AuthenticationApiGetUserRequest, options?: AxiosRequestConfig): AxiosPromise<AuthUser>;
    /**
     * Get all users - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(options?: AxiosRequestConfig): AxiosPromise<Array<AuthUser>>;
    /**
     * Update a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Update a user
     * @param {AuthenticationApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(requestParameters: AuthenticationApiUpdateUserRequest, options?: AxiosRequestConfig): AxiosPromise<AuthUser>;
};
/**
 * AuthenticationApi - interface
 * @export
 * @interface AuthenticationApi
 */
export interface AuthenticationApiInterface {
    /**
     * Create a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Create a user
     * @param {AuthenticationApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    createUser(requestParameters: AuthenticationApiCreateUserRequest, options?: AxiosRequestConfig): AxiosPromise<AuthUser>;
    /**
     * Delete a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Delete a user
     * @param {AuthenticationApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    deleteUser(requestParameters: AuthenticationApiDeleteUserRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Returns a Profile including Organization and Current User Information.
     * @summary Get Profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    getProfile(options?: AxiosRequestConfig): AxiosPromise<Profile>;
    /**
     * Get a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Get a user
     * @param {AuthenticationApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    getUser(requestParameters: AuthenticationApiGetUserRequest, options?: AxiosRequestConfig): AxiosPromise<AuthUser>;
    /**
     * Get all users - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    getUsers(options?: AxiosRequestConfig): AxiosPromise<Array<AuthUser>>;
    /**
     * Update a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Update a user
     * @param {AuthenticationApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    updateUser(requestParameters: AuthenticationApiUpdateUserRequest, options?: AxiosRequestConfig): AxiosPromise<AuthUser>;
}
/**
 * Request parameters for createUser operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiCreateUserRequest
 */
export interface AuthenticationApiCreateUserRequest {
    /**
     *
     * @type {AuthUser}
     * @memberof AuthenticationApiCreateUser
     */
    readonly authUser: AuthUser;
}
/**
 * Request parameters for deleteUser operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiDeleteUserRequest
 */
export interface AuthenticationApiDeleteUserRequest {
    /**
     *
     * @type {string}
     * @memberof AuthenticationApiDeleteUser
     */
    readonly userEmail: string;
}
/**
 * Request parameters for getUser operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiGetUserRequest
 */
export interface AuthenticationApiGetUserRequest {
    /**
     *
     * @type {string}
     * @memberof AuthenticationApiGetUser
     */
    readonly userEmail: string;
}
/**
 * Request parameters for updateUser operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiUpdateUserRequest
 */
export interface AuthenticationApiUpdateUserRequest {
    /**
     *
     * @type {string}
     * @memberof AuthenticationApiUpdateUser
     */
    readonly userEmail: string;
    /**
     *
     * @type {AuthUser}
     * @memberof AuthenticationApiUpdateUser
     */
    readonly authUser: AuthUser;
}
/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export declare class AuthenticationApi extends BaseAPI implements AuthenticationApiInterface {
    /**
     * Create a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Create a user
     * @param {AuthenticationApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    createUser(requestParameters: AuthenticationApiCreateUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthUser, any>>;
    /**
     * Delete a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Delete a user
     * @param {AuthenticationApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    deleteUser(requestParameters: AuthenticationApiDeleteUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns a Profile including Organization and Current User Information.
     * @summary Get Profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    getProfile(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Profile, any>>;
    /**
     * Get a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Get a user
     * @param {AuthenticationApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    getUser(requestParameters: AuthenticationApiGetUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthUser, any>>;
    /**
     * Get all users - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    getUsers(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthUser[], any>>;
    /**
     * Update a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Update a user
     * @param {AuthenticationApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    updateUser(requestParameters: AuthenticationApiUpdateUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthUser, any>>;
}
/**
 * UserAuthorizationApi - axios parameter creator
 * @export
 */
export declare const UserAuthorizationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Create a user
     * @param {AuthUser} authUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: (authUser: AuthUser, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Delete a user
     * @param {string} userEmail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser: (userEmail: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a Profile including Organization and Current User Information.
     * @summary Get Profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfile: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Get a user
     * @param {string} userEmail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: (userEmail: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get all users - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
     * @summary Invite User
     * @param {Invitation} invitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processInvitation: (invitation: Invitation, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Update a user
     * @param {string} userEmail
     * @param {AuthUser} authUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser: (userEmail: string, authUser: AuthUser, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserAuthorizationApi - functional programming interface
 * @export
 */
export declare const UserAuthorizationApiFp: (configuration?: Configuration) => {
    /**
     * Create a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Create a user
     * @param {AuthUser} authUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(authUser: AuthUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthUser>>;
    /**
     * Delete a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Delete a user
     * @param {string} userEmail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(userEmail: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Returns a Profile including Organization and Current User Information.
     * @summary Get Profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>>;
    /**
     * Get a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Get a user
     * @param {string} userEmail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(userEmail: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthUser>>;
    /**
     * Get all users - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuthUser>>>;
    /**
     * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
     * @summary Invite User
     * @param {Invitation} invitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processInvitation(invitation: Invitation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Update a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Update a user
     * @param {string} userEmail
     * @param {AuthUser} authUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(userEmail: string, authUser: AuthUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthUser>>;
};
/**
 * UserAuthorizationApi - factory interface
 * @export
 */
export declare const UserAuthorizationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Create a user
     * @param {UserAuthorizationApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(requestParameters: UserAuthorizationApiCreateUserRequest, options?: AxiosRequestConfig): AxiosPromise<AuthUser>;
    /**
     * Delete a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Delete a user
     * @param {UserAuthorizationApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(requestParameters: UserAuthorizationApiDeleteUserRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Returns a Profile including Organization and Current User Information.
     * @summary Get Profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfile(options?: AxiosRequestConfig): AxiosPromise<Profile>;
    /**
     * Get a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Get a user
     * @param {UserAuthorizationApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(requestParameters: UserAuthorizationApiGetUserRequest, options?: AxiosRequestConfig): AxiosPromise<AuthUser>;
    /**
     * Get all users - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(options?: AxiosRequestConfig): AxiosPromise<Array<AuthUser>>;
    /**
     * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
     * @summary Invite User
     * @param {UserAuthorizationApiProcessInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processInvitation(requestParameters: UserAuthorizationApiProcessInvitationRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Update a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Update a user
     * @param {UserAuthorizationApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(requestParameters: UserAuthorizationApiUpdateUserRequest, options?: AxiosRequestConfig): AxiosPromise<AuthUser>;
};
/**
 * UserAuthorizationApi - interface
 * @export
 * @interface UserAuthorizationApi
 */
export interface UserAuthorizationApiInterface {
    /**
     * Create a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Create a user
     * @param {UserAuthorizationApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApiInterface
     */
    createUser(requestParameters: UserAuthorizationApiCreateUserRequest, options?: AxiosRequestConfig): AxiosPromise<AuthUser>;
    /**
     * Delete a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Delete a user
     * @param {UserAuthorizationApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApiInterface
     */
    deleteUser(requestParameters: UserAuthorizationApiDeleteUserRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Returns a Profile including Organization and Current User Information.
     * @summary Get Profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApiInterface
     */
    getProfile(options?: AxiosRequestConfig): AxiosPromise<Profile>;
    /**
     * Get a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Get a user
     * @param {UserAuthorizationApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApiInterface
     */
    getUser(requestParameters: UserAuthorizationApiGetUserRequest, options?: AxiosRequestConfig): AxiosPromise<AuthUser>;
    /**
     * Get all users - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApiInterface
     */
    getUsers(options?: AxiosRequestConfig): AxiosPromise<Array<AuthUser>>;
    /**
     * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
     * @summary Invite User
     * @param {UserAuthorizationApiProcessInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApiInterface
     */
    processInvitation(requestParameters: UserAuthorizationApiProcessInvitationRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Update a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Update a user
     * @param {UserAuthorizationApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApiInterface
     */
    updateUser(requestParameters: UserAuthorizationApiUpdateUserRequest, options?: AxiosRequestConfig): AxiosPromise<AuthUser>;
}
/**
 * Request parameters for createUser operation in UserAuthorizationApi.
 * @export
 * @interface UserAuthorizationApiCreateUserRequest
 */
export interface UserAuthorizationApiCreateUserRequest {
    /**
     *
     * @type {AuthUser}
     * @memberof UserAuthorizationApiCreateUser
     */
    readonly authUser: AuthUser;
}
/**
 * Request parameters for deleteUser operation in UserAuthorizationApi.
 * @export
 * @interface UserAuthorizationApiDeleteUserRequest
 */
export interface UserAuthorizationApiDeleteUserRequest {
    /**
     *
     * @type {string}
     * @memberof UserAuthorizationApiDeleteUser
     */
    readonly userEmail: string;
}
/**
 * Request parameters for getUser operation in UserAuthorizationApi.
 * @export
 * @interface UserAuthorizationApiGetUserRequest
 */
export interface UserAuthorizationApiGetUserRequest {
    /**
     *
     * @type {string}
     * @memberof UserAuthorizationApiGetUser
     */
    readonly userEmail: string;
}
/**
 * Request parameters for processInvitation operation in UserAuthorizationApi.
 * @export
 * @interface UserAuthorizationApiProcessInvitationRequest
 */
export interface UserAuthorizationApiProcessInvitationRequest {
    /**
     *
     * @type {Invitation}
     * @memberof UserAuthorizationApiProcessInvitation
     */
    readonly invitation: Invitation;
}
/**
 * Request parameters for updateUser operation in UserAuthorizationApi.
 * @export
 * @interface UserAuthorizationApiUpdateUserRequest
 */
export interface UserAuthorizationApiUpdateUserRequest {
    /**
     *
     * @type {string}
     * @memberof UserAuthorizationApiUpdateUser
     */
    readonly userEmail: string;
    /**
     *
     * @type {AuthUser}
     * @memberof UserAuthorizationApiUpdateUser
     */
    readonly authUser: AuthUser;
}
/**
 * UserAuthorizationApi - object-oriented interface
 * @export
 * @class UserAuthorizationApi
 * @extends {BaseAPI}
 */
export declare class UserAuthorizationApi extends BaseAPI implements UserAuthorizationApiInterface {
    /**
     * Create a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Create a user
     * @param {UserAuthorizationApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApi
     */
    createUser(requestParameters: UserAuthorizationApiCreateUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthUser, any>>;
    /**
     * Delete a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Delete a user
     * @param {UserAuthorizationApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApi
     */
    deleteUser(requestParameters: UserAuthorizationApiDeleteUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Returns a Profile including Organization and Current User Information.
     * @summary Get Profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApi
     */
    getProfile(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Profile, any>>;
    /**
     * Get a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Get a user
     * @param {UserAuthorizationApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApi
     */
    getUser(requestParameters: UserAuthorizationApiGetUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthUser, any>>;
    /**
     * Get all users - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApi
     */
    getUsers(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthUser[], any>>;
    /**
     * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
     * @summary Invite User
     * @param {UserAuthorizationApiProcessInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApi
     */
    processInvitation(requestParameters: UserAuthorizationApiProcessInvitationRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Update a user
     * @param {UserAuthorizationApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApi
     */
    updateUser(requestParameters: UserAuthorizationApiUpdateUserRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthUser, any>>;
}
//# sourceMappingURL=api.d.ts.map