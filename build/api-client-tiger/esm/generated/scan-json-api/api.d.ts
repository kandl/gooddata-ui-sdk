/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from "./configuration.js";
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import { RequestArgs, BaseAPI } from './base.js';
/**
 * Warning related to single column.
 * @export
 * @interface ColumnWarning
 */
export interface ColumnWarning {
    /**
     * Column name.
     * @type {Array<string>}
     * @memberof ColumnWarning
     */
    name: Array<string>;
    /**
     * Warning message related to the column.
     * @type {Array<string>}
     * @memberof ColumnWarning
     */
    message: Array<string>;
}
/**
 * A parameter for testing data source connection
 * @export
 * @interface DataSourceParameter
 */
export interface DataSourceParameter {
    /**
     * Parameter name.
     * @type {string}
     * @memberof DataSourceParameter
     */
    name: string;
    /**
     * Parameter value.
     * @type {string}
     * @memberof DataSourceParameter
     */
    value: string;
}
/**
 * Result of getSchemata. Contains list of available DB schema names.
 * @export
 * @interface DataSourceSchemata
 */
export interface DataSourceSchemata {
    /**
     *
     * @type {Array<string>}
     * @memberof DataSourceSchemata
     */
    schemaNames: Array<string>;
}
/**
 * A table column.
 * @export
 * @interface DeclarativeColumn
 */
export interface DeclarativeColumn {
    /**
     * Column name
     * @type {string}
     * @memberof DeclarativeColumn
     */
    name: string;
    /**
     * Column type
     * @type {string}
     * @memberof DeclarativeColumn
     */
    dataType: DeclarativeColumnDataTypeEnum;
    /**
     * Is column part of primary key?
     * @type {boolean}
     * @memberof DeclarativeColumn
     */
    isPrimaryKey?: boolean;
    /**
     * Referenced table (Foreign key)
     * @type {string}
     * @memberof DeclarativeColumn
     */
    referencedTableId?: string;
    /**
     * Referenced table (Foreign key)
     * @type {string}
     * @memberof DeclarativeColumn
     */
    referencedTableColumn?: string;
}
export declare const DeclarativeColumnDataTypeEnum: {
    readonly INT: "INT";
    readonly STRING: "STRING";
    readonly DATE: "DATE";
    readonly NUMERIC: "NUMERIC";
    readonly TIMESTAMP: "TIMESTAMP";
    readonly TIMESTAMP_TZ: "TIMESTAMP_TZ";
    readonly BOOLEAN: "BOOLEAN";
};
export type DeclarativeColumnDataTypeEnum = typeof DeclarativeColumnDataTypeEnum[keyof typeof DeclarativeColumnDataTypeEnum];
/**
 * A database table.
 * @export
 * @interface DeclarativeTable
 */
export interface DeclarativeTable {
    /**
     * Table id.
     * @type {string}
     * @memberof DeclarativeTable
     */
    id: string;
    /**
     * Path to table.
     * @type {Array<string>}
     * @memberof DeclarativeTable
     */
    path: Array<string>;
    /**
     * Table type: TABLE or VIEW.
     * @type {string}
     * @memberof DeclarativeTable
     */
    type: string;
    /**
     * Table or view name prefix used in scan. Will be stripped when generating LDM.
     * @type {string}
     * @memberof DeclarativeTable
     */
    namePrefix?: string;
    /**
     * An array of physical columns
     * @type {Array<DeclarativeColumn>}
     * @memberof DeclarativeTable
     */
    columns: Array<DeclarativeColumn>;
}
/**
 * A physical data model (PDM) tables.
 * @export
 * @interface DeclarativeTables
 */
export interface DeclarativeTables {
    /**
     * An array of physical database tables.
     * @type {Array<DeclarativeTable>}
     * @memberof DeclarativeTables
     */
    tables: Array<DeclarativeTable>;
}
/**
 * A request containing all information critical to model scanning.
 * @export
 * @interface ScanRequest
 */
export interface ScanRequest {
    /**
     * A separator between prefixes and the names.
     * @type {string}
     * @memberof ScanRequest
     */
    separator: string;
    /**
     * A flag indicating whether the tables should be scanned.
     * @type {boolean}
     * @memberof ScanRequest
     */
    scanTables: boolean;
    /**
     * A flag indicating whether the views should be scanned.
     * @type {boolean}
     * @memberof ScanRequest
     */
    scanViews: boolean;
    /**
     * What schemata will be scanned.
     * @type {Array<string>}
     * @memberof ScanRequest
     */
    schemata?: Array<string>;
    /**
     * Tables starting with this prefix will be scanned. The prefix is then followed by the value of `separator` parameter. Given the table prefix is `out_table` and separator is `__`, the table with name like `out_table__customers` will be scanned.
     * @type {string}
     * @memberof ScanRequest
     */
    tablePrefix?: string;
    /**
     * Views starting with this prefix will be scanned. The prefix is then followed by the value of `separator` parameter. Given the view prefix is `out_view` and separator is `__`, the table with name like `out_view__us_customers` will be scanned.
     * @type {string}
     * @memberof ScanRequest
     */
    viewPrefix?: string;
}
/**
 * Result of scan of data source physical model.
 * @export
 * @interface ScanResultPdm
 */
export interface ScanResultPdm {
    /**
     *
     * @type {DeclarativeTables}
     * @memberof ScanResultPdm
     */
    pdm: DeclarativeTables;
    /**
     *
     * @type {Array<TableWarning>}
     * @memberof ScanResultPdm
     */
    warnings: Array<TableWarning>;
}
/**
 * A request with SQL query to by analyzed.
 * @export
 * @interface ScanSqlRequest
 */
export interface ScanSqlRequest {
    /**
     * SQL query to be analyzed.
     * @type {string}
     * @memberof ScanSqlRequest
     */
    sql: string;
}
/**
 * Result of scanSql. Consists of array of query columns including type. Sql query result data preview can be attached optionally
 * @export
 * @interface ScanSqlResponse
 */
export interface ScanSqlResponse {
    /**
     * Array of columns with types.
     * @type {Array<SqlColumn>}
     * @memberof ScanSqlResponse
     */
    columns: Array<SqlColumn>;
    /**
     * Array of rows where each row is another array of string values.
     * @type {Array<Array<string>>}
     * @memberof ScanSqlResponse
     */
    dataPreview?: Array<Array<string>>;
}
/**
 * A SQL query result column.
 * @export
 * @interface SqlColumn
 */
export interface SqlColumn {
    /**
     * Column name
     * @type {string}
     * @memberof SqlColumn
     */
    name: string;
    /**
     * Column type
     * @type {string}
     * @memberof SqlColumn
     */
    dataType: SqlColumnDataTypeEnum;
}
export declare const SqlColumnDataTypeEnum: {
    readonly INT: "INT";
    readonly STRING: "STRING";
    readonly DATE: "DATE";
    readonly NUMERIC: "NUMERIC";
    readonly TIMESTAMP: "TIMESTAMP";
    readonly TIMESTAMP_TZ: "TIMESTAMP_TZ";
    readonly BOOLEAN: "BOOLEAN";
};
export type SqlColumnDataTypeEnum = typeof SqlColumnDataTypeEnum[keyof typeof SqlColumnDataTypeEnum];
/**
 * Warnings related to single table.
 * @export
 * @interface TableWarning
 */
export interface TableWarning {
    /**
     * Table name.
     * @type {Array<string>}
     * @memberof TableWarning
     */
    name: Array<string>;
    /**
     * Warning message related to the table.
     * @type {Array<string>}
     * @memberof TableWarning
     */
    message?: Array<string>;
    /**
     *
     * @type {Array<ColumnWarning>}
     * @memberof TableWarning
     */
    columns: Array<ColumnWarning>;
}
/**
 * A request containing all information for testing data source definition.
 * @export
 * @interface TestDefinitionRequest
 */
export interface TestDefinitionRequest {
    /**
     * Type of database, where test should connect to.
     * @type {string}
     * @memberof TestDefinitionRequest
     */
    type: TestDefinitionRequestTypeEnum;
    /**
     * URL to database in JDBC format, where test should connect to.
     * @type {string}
     * @memberof TestDefinitionRequest
     */
    url?: string;
    /**
     * Database schema.
     * @type {string}
     * @memberof TestDefinitionRequest
     */
    schema?: string;
    /**
     * Database user name.
     * @type {string}
     * @memberof TestDefinitionRequest
     */
    username?: string;
    /**
     * Database user password.
     * @type {string}
     * @memberof TestDefinitionRequest
     */
    password?: string;
    /**
     * Secret for token based authentication for data sources which supports it.
     * @type {string}
     * @memberof TestDefinitionRequest
     */
    token?: string;
    /**
     *
     * @type {Array<DataSourceParameter>}
     * @memberof TestDefinitionRequest
     */
    parameters?: Array<DataSourceParameter>;
}
export declare const TestDefinitionRequestTypeEnum: {
    readonly POSTGRESQL: "POSTGRESQL";
    readonly REDSHIFT: "REDSHIFT";
    readonly VERTICA: "VERTICA";
    readonly SNOWFLAKE: "SNOWFLAKE";
    readonly ADS: "ADS";
    readonly BIGQUERY: "BIGQUERY";
    readonly MSSQL: "MSSQL";
    readonly PRESTO: "PRESTO";
    readonly DREMIO: "DREMIO";
    readonly DRILL: "DRILL";
    readonly GREENPLUM: "GREENPLUM";
    readonly AZURESQL: "AZURESQL";
    readonly SYNAPSESQL: "SYNAPSESQL";
    readonly DATABRICKS: "DATABRICKS";
};
export type TestDefinitionRequestTypeEnum = typeof TestDefinitionRequestTypeEnum[keyof typeof TestDefinitionRequestTypeEnum];
/**
 * A structure containing duration of the test queries run on a data source. It is omitted if an error happens.
 * @export
 * @interface TestQueryDuration
 */
export interface TestQueryDuration {
    /**
     * Field containing duration of a test select query on a data source. In milliseconds.
     * @type {number}
     * @memberof TestQueryDuration
     */
    simpleSelect: number;
    /**
     * Field containing duration of a test \'create table as select\' query on a datasource. In milliseconds. The field is omitted if a data source doesn\'t support caching.
     * @type {number}
     * @memberof TestQueryDuration
     */
    createCacheTable?: number;
}
/**
 * A request containing all information for testing existing data source.
 * @export
 * @interface TestRequest
 */
export interface TestRequest {
    /**
     * URL to database in JDBC format, where test should connect to.
     * @type {string}
     * @memberof TestRequest
     */
    url?: string;
    /**
     * Database schema.
     * @type {string}
     * @memberof TestRequest
     */
    schema?: string;
    /**
     * Database user name.
     * @type {string}
     * @memberof TestRequest
     */
    username?: string;
    /**
     * Database user password.
     * @type {string}
     * @memberof TestRequest
     */
    password?: string;
    /**
     * Secret for token based authentication for data sources which supports it.
     * @type {string}
     * @memberof TestRequest
     */
    token?: string;
    /**
     * Enable caching of intermediate results.
     * @type {boolean}
     * @memberof TestRequest
     */
    enableCaching?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof TestRequest
     */
    cachePath?: Array<string>;
    /**
     *
     * @type {Array<DataSourceParameter>}
     * @memberof TestRequest
     */
    parameters?: Array<DataSourceParameter>;
}
/**
 * Response from data source testing.
 * @export
 * @interface TestResponse
 */
export interface TestResponse {
    /**
     * A flag indicating whether test passed or not.
     * @type {boolean}
     * @memberof TestResponse
     */
    successful: boolean;
    /**
     * Field containing more details in case of a failure. Details are available to a privileged user only.
     * @type {string}
     * @memberof TestResponse
     */
    error?: string;
    /**
     *
     * @type {TestQueryDuration}
     * @memberof TestResponse
     */
    queryDurationMillis?: TestQueryDuration;
}
/**
 * ActionsApi - axios parameter creator
 * @export
 */
export declare const ActionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * It scans a database and reads metadata. The result of the request contains a list of schema names of a database.
     * @summary Get a list of schema names of a database
     * @param {string} dataSourceId Data source id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceSchemata: (dataSourceId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * It scans a database and transforms its metadata to a declarative definition of the physical data model (PDM). The result of the request contains the mentioned physical data model (PDM) of a database within warning, for example, about unsupported columns.
     * @summary Scan a database to get a physical data model (PDM)
     * @param {string} dataSourceId Data source id
     * @param {ScanRequest} scanRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scanDataSource: (dataSourceId: string, scanRequest: ScanRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * It executes SQL query against specified data source and extracts metadata. Metadata consist of column names and column data types. It can optionally provide also preview of data returned by SQL query
     * @summary Collect metadata about SQL query
     * @param {string} dataSourceId Data source id
     * @param {ScanSqlRequest} scanSqlRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scanSql: (dataSourceId: string, scanSqlRequest: ScanSqlRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Test if it is possible to connect to a database using an existing data source definition.
     * @summary Test data source connection by data source id
     * @param {string} dataSourceId Data source id
     * @param {TestRequest} testRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testDataSource: (dataSourceId: string, testRequest: TestRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Test if it is possible to connect to a database using a connection provided by the data source definition in the request body.
     * @summary Test connection by data source definition
     * @param {TestDefinitionRequest} testDefinitionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testDataSourceDefinition: (testDefinitionRequest: TestDefinitionRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ActionsApi - functional programming interface
 * @export
 */
export declare const ActionsApiFp: (configuration?: Configuration) => {
    /**
     * It scans a database and reads metadata. The result of the request contains a list of schema names of a database.
     * @summary Get a list of schema names of a database
     * @param {string} dataSourceId Data source id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceSchemata(dataSourceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataSourceSchemata>>;
    /**
     * It scans a database and transforms its metadata to a declarative definition of the physical data model (PDM). The result of the request contains the mentioned physical data model (PDM) of a database within warning, for example, about unsupported columns.
     * @summary Scan a database to get a physical data model (PDM)
     * @param {string} dataSourceId Data source id
     * @param {ScanRequest} scanRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scanDataSource(dataSourceId: string, scanRequest: ScanRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScanResultPdm>>;
    /**
     * It executes SQL query against specified data source and extracts metadata. Metadata consist of column names and column data types. It can optionally provide also preview of data returned by SQL query
     * @summary Collect metadata about SQL query
     * @param {string} dataSourceId Data source id
     * @param {ScanSqlRequest} scanSqlRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scanSql(dataSourceId: string, scanSqlRequest: ScanSqlRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScanSqlResponse>>;
    /**
     * Test if it is possible to connect to a database using an existing data source definition.
     * @summary Test data source connection by data source id
     * @param {string} dataSourceId Data source id
     * @param {TestRequest} testRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testDataSource(dataSourceId: string, testRequest: TestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestResponse>>;
    /**
     * Test if it is possible to connect to a database using a connection provided by the data source definition in the request body.
     * @summary Test connection by data source definition
     * @param {TestDefinitionRequest} testDefinitionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testDataSourceDefinition(testDefinitionRequest: TestDefinitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestResponse>>;
};
/**
 * ActionsApi - factory interface
 * @export
 */
export declare const ActionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * It scans a database and reads metadata. The result of the request contains a list of schema names of a database.
     * @summary Get a list of schema names of a database
     * @param {ActionsApiGetDataSourceSchemataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceSchemata(requestParameters: ActionsApiGetDataSourceSchemataRequest, options?: AxiosRequestConfig): AxiosPromise<DataSourceSchemata>;
    /**
     * It scans a database and transforms its metadata to a declarative definition of the physical data model (PDM). The result of the request contains the mentioned physical data model (PDM) of a database within warning, for example, about unsupported columns.
     * @summary Scan a database to get a physical data model (PDM)
     * @param {ActionsApiScanDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scanDataSource(requestParameters: ActionsApiScanDataSourceRequest, options?: AxiosRequestConfig): AxiosPromise<ScanResultPdm>;
    /**
     * It executes SQL query against specified data source and extracts metadata. Metadata consist of column names and column data types. It can optionally provide also preview of data returned by SQL query
     * @summary Collect metadata about SQL query
     * @param {ActionsApiScanSqlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scanSql(requestParameters: ActionsApiScanSqlRequest, options?: AxiosRequestConfig): AxiosPromise<ScanSqlResponse>;
    /**
     * Test if it is possible to connect to a database using an existing data source definition.
     * @summary Test data source connection by data source id
     * @param {ActionsApiTestDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testDataSource(requestParameters: ActionsApiTestDataSourceRequest, options?: AxiosRequestConfig): AxiosPromise<TestResponse>;
    /**
     * Test if it is possible to connect to a database using a connection provided by the data source definition in the request body.
     * @summary Test connection by data source definition
     * @param {ActionsApiTestDataSourceDefinitionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testDataSourceDefinition(requestParameters: ActionsApiTestDataSourceDefinitionRequest, options?: AxiosRequestConfig): AxiosPromise<TestResponse>;
};
/**
 * ActionsApi - interface
 * @export
 * @interface ActionsApi
 */
export interface ActionsApiInterface {
    /**
     * It scans a database and reads metadata. The result of the request contains a list of schema names of a database.
     * @summary Get a list of schema names of a database
     * @param {ActionsApiGetDataSourceSchemataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    getDataSourceSchemata(requestParameters: ActionsApiGetDataSourceSchemataRequest, options?: AxiosRequestConfig): AxiosPromise<DataSourceSchemata>;
    /**
     * It scans a database and transforms its metadata to a declarative definition of the physical data model (PDM). The result of the request contains the mentioned physical data model (PDM) of a database within warning, for example, about unsupported columns.
     * @summary Scan a database to get a physical data model (PDM)
     * @param {ActionsApiScanDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    scanDataSource(requestParameters: ActionsApiScanDataSourceRequest, options?: AxiosRequestConfig): AxiosPromise<ScanResultPdm>;
    /**
     * It executes SQL query against specified data source and extracts metadata. Metadata consist of column names and column data types. It can optionally provide also preview of data returned by SQL query
     * @summary Collect metadata about SQL query
     * @param {ActionsApiScanSqlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    scanSql(requestParameters: ActionsApiScanSqlRequest, options?: AxiosRequestConfig): AxiosPromise<ScanSqlResponse>;
    /**
     * Test if it is possible to connect to a database using an existing data source definition.
     * @summary Test data source connection by data source id
     * @param {ActionsApiTestDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    testDataSource(requestParameters: ActionsApiTestDataSourceRequest, options?: AxiosRequestConfig): AxiosPromise<TestResponse>;
    /**
     * Test if it is possible to connect to a database using a connection provided by the data source definition in the request body.
     * @summary Test connection by data source definition
     * @param {ActionsApiTestDataSourceDefinitionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    testDataSourceDefinition(requestParameters: ActionsApiTestDataSourceDefinitionRequest, options?: AxiosRequestConfig): AxiosPromise<TestResponse>;
}
/**
 * Request parameters for getDataSourceSchemata operation in ActionsApi.
 * @export
 * @interface ActionsApiGetDataSourceSchemataRequest
 */
export interface ActionsApiGetDataSourceSchemataRequest {
    /**
     * Data source id
     * @type {string}
     * @memberof ActionsApiGetDataSourceSchemata
     */
    readonly dataSourceId: string;
}
/**
 * Request parameters for scanDataSource operation in ActionsApi.
 * @export
 * @interface ActionsApiScanDataSourceRequest
 */
export interface ActionsApiScanDataSourceRequest {
    /**
     * Data source id
     * @type {string}
     * @memberof ActionsApiScanDataSource
     */
    readonly dataSourceId: string;
    /**
     *
     * @type {ScanRequest}
     * @memberof ActionsApiScanDataSource
     */
    readonly scanRequest: ScanRequest;
}
/**
 * Request parameters for scanSql operation in ActionsApi.
 * @export
 * @interface ActionsApiScanSqlRequest
 */
export interface ActionsApiScanSqlRequest {
    /**
     * Data source id
     * @type {string}
     * @memberof ActionsApiScanSql
     */
    readonly dataSourceId: string;
    /**
     *
     * @type {ScanSqlRequest}
     * @memberof ActionsApiScanSql
     */
    readonly scanSqlRequest: ScanSqlRequest;
}
/**
 * Request parameters for testDataSource operation in ActionsApi.
 * @export
 * @interface ActionsApiTestDataSourceRequest
 */
export interface ActionsApiTestDataSourceRequest {
    /**
     * Data source id
     * @type {string}
     * @memberof ActionsApiTestDataSource
     */
    readonly dataSourceId: string;
    /**
     *
     * @type {TestRequest}
     * @memberof ActionsApiTestDataSource
     */
    readonly testRequest: TestRequest;
}
/**
 * Request parameters for testDataSourceDefinition operation in ActionsApi.
 * @export
 * @interface ActionsApiTestDataSourceDefinitionRequest
 */
export interface ActionsApiTestDataSourceDefinitionRequest {
    /**
     *
     * @type {TestDefinitionRequest}
     * @memberof ActionsApiTestDataSourceDefinition
     */
    readonly testDefinitionRequest: TestDefinitionRequest;
}
/**
 * ActionsApi - object-oriented interface
 * @export
 * @class ActionsApi
 * @extends {BaseAPI}
 */
export declare class ActionsApi extends BaseAPI implements ActionsApiInterface {
    /**
     * It scans a database and reads metadata. The result of the request contains a list of schema names of a database.
     * @summary Get a list of schema names of a database
     * @param {ActionsApiGetDataSourceSchemataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    getDataSourceSchemata(requestParameters: ActionsApiGetDataSourceSchemataRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DataSourceSchemata, any>>;
    /**
     * It scans a database and transforms its metadata to a declarative definition of the physical data model (PDM). The result of the request contains the mentioned physical data model (PDM) of a database within warning, for example, about unsupported columns.
     * @summary Scan a database to get a physical data model (PDM)
     * @param {ActionsApiScanDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    scanDataSource(requestParameters: ActionsApiScanDataSourceRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScanResultPdm, any>>;
    /**
     * It executes SQL query against specified data source and extracts metadata. Metadata consist of column names and column data types. It can optionally provide also preview of data returned by SQL query
     * @summary Collect metadata about SQL query
     * @param {ActionsApiScanSqlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    scanSql(requestParameters: ActionsApiScanSqlRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScanSqlResponse, any>>;
    /**
     * Test if it is possible to connect to a database using an existing data source definition.
     * @summary Test data source connection by data source id
     * @param {ActionsApiTestDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    testDataSource(requestParameters: ActionsApiTestDataSourceRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TestResponse, any>>;
    /**
     * Test if it is possible to connect to a database using a connection provided by the data source definition in the request body.
     * @summary Test connection by data source definition
     * @param {ActionsApiTestDataSourceDefinitionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    testDataSourceDefinition(requestParameters: ActionsApiTestDataSourceDefinitionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TestResponse, any>>;
}
/**
 * ScanningApi - axios parameter creator
 * @export
 */
export declare const ScanningApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * It scans a database and reads metadata. The result of the request contains a list of schema names of a database.
     * @summary Get a list of schema names of a database
     * @param {string} dataSourceId Data source id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceSchemata: (dataSourceId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * It scans a database and transforms its metadata to a declarative definition of the physical data model (PDM). The result of the request contains the mentioned physical data model (PDM) of a database within warning, for example, about unsupported columns.
     * @summary Scan a database to get a physical data model (PDM)
     * @param {string} dataSourceId Data source id
     * @param {ScanRequest} scanRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scanDataSource: (dataSourceId: string, scanRequest: ScanRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * It executes SQL query against specified data source and extracts metadata. Metadata consist of column names and column data types. It can optionally provide also preview of data returned by SQL query
     * @summary Collect metadata about SQL query
     * @param {string} dataSourceId Data source id
     * @param {ScanSqlRequest} scanSqlRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scanSql: (dataSourceId: string, scanSqlRequest: ScanSqlRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ScanningApi - functional programming interface
 * @export
 */
export declare const ScanningApiFp: (configuration?: Configuration) => {
    /**
     * It scans a database and reads metadata. The result of the request contains a list of schema names of a database.
     * @summary Get a list of schema names of a database
     * @param {string} dataSourceId Data source id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceSchemata(dataSourceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataSourceSchemata>>;
    /**
     * It scans a database and transforms its metadata to a declarative definition of the physical data model (PDM). The result of the request contains the mentioned physical data model (PDM) of a database within warning, for example, about unsupported columns.
     * @summary Scan a database to get a physical data model (PDM)
     * @param {string} dataSourceId Data source id
     * @param {ScanRequest} scanRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scanDataSource(dataSourceId: string, scanRequest: ScanRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScanResultPdm>>;
    /**
     * It executes SQL query against specified data source and extracts metadata. Metadata consist of column names and column data types. It can optionally provide also preview of data returned by SQL query
     * @summary Collect metadata about SQL query
     * @param {string} dataSourceId Data source id
     * @param {ScanSqlRequest} scanSqlRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scanSql(dataSourceId: string, scanSqlRequest: ScanSqlRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScanSqlResponse>>;
};
/**
 * ScanningApi - factory interface
 * @export
 */
export declare const ScanningApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * It scans a database and reads metadata. The result of the request contains a list of schema names of a database.
     * @summary Get a list of schema names of a database
     * @param {ScanningApiGetDataSourceSchemataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceSchemata(requestParameters: ScanningApiGetDataSourceSchemataRequest, options?: AxiosRequestConfig): AxiosPromise<DataSourceSchemata>;
    /**
     * It scans a database and transforms its metadata to a declarative definition of the physical data model (PDM). The result of the request contains the mentioned physical data model (PDM) of a database within warning, for example, about unsupported columns.
     * @summary Scan a database to get a physical data model (PDM)
     * @param {ScanningApiScanDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scanDataSource(requestParameters: ScanningApiScanDataSourceRequest, options?: AxiosRequestConfig): AxiosPromise<ScanResultPdm>;
    /**
     * It executes SQL query against specified data source and extracts metadata. Metadata consist of column names and column data types. It can optionally provide also preview of data returned by SQL query
     * @summary Collect metadata about SQL query
     * @param {ScanningApiScanSqlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scanSql(requestParameters: ScanningApiScanSqlRequest, options?: AxiosRequestConfig): AxiosPromise<ScanSqlResponse>;
};
/**
 * ScanningApi - interface
 * @export
 * @interface ScanningApi
 */
export interface ScanningApiInterface {
    /**
     * It scans a database and reads metadata. The result of the request contains a list of schema names of a database.
     * @summary Get a list of schema names of a database
     * @param {ScanningApiGetDataSourceSchemataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScanningApiInterface
     */
    getDataSourceSchemata(requestParameters: ScanningApiGetDataSourceSchemataRequest, options?: AxiosRequestConfig): AxiosPromise<DataSourceSchemata>;
    /**
     * It scans a database and transforms its metadata to a declarative definition of the physical data model (PDM). The result of the request contains the mentioned physical data model (PDM) of a database within warning, for example, about unsupported columns.
     * @summary Scan a database to get a physical data model (PDM)
     * @param {ScanningApiScanDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScanningApiInterface
     */
    scanDataSource(requestParameters: ScanningApiScanDataSourceRequest, options?: AxiosRequestConfig): AxiosPromise<ScanResultPdm>;
    /**
     * It executes SQL query against specified data source and extracts metadata. Metadata consist of column names and column data types. It can optionally provide also preview of data returned by SQL query
     * @summary Collect metadata about SQL query
     * @param {ScanningApiScanSqlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScanningApiInterface
     */
    scanSql(requestParameters: ScanningApiScanSqlRequest, options?: AxiosRequestConfig): AxiosPromise<ScanSqlResponse>;
}
/**
 * Request parameters for getDataSourceSchemata operation in ScanningApi.
 * @export
 * @interface ScanningApiGetDataSourceSchemataRequest
 */
export interface ScanningApiGetDataSourceSchemataRequest {
    /**
     * Data source id
     * @type {string}
     * @memberof ScanningApiGetDataSourceSchemata
     */
    readonly dataSourceId: string;
}
/**
 * Request parameters for scanDataSource operation in ScanningApi.
 * @export
 * @interface ScanningApiScanDataSourceRequest
 */
export interface ScanningApiScanDataSourceRequest {
    /**
     * Data source id
     * @type {string}
     * @memberof ScanningApiScanDataSource
     */
    readonly dataSourceId: string;
    /**
     *
     * @type {ScanRequest}
     * @memberof ScanningApiScanDataSource
     */
    readonly scanRequest: ScanRequest;
}
/**
 * Request parameters for scanSql operation in ScanningApi.
 * @export
 * @interface ScanningApiScanSqlRequest
 */
export interface ScanningApiScanSqlRequest {
    /**
     * Data source id
     * @type {string}
     * @memberof ScanningApiScanSql
     */
    readonly dataSourceId: string;
    /**
     *
     * @type {ScanSqlRequest}
     * @memberof ScanningApiScanSql
     */
    readonly scanSqlRequest: ScanSqlRequest;
}
/**
 * ScanningApi - object-oriented interface
 * @export
 * @class ScanningApi
 * @extends {BaseAPI}
 */
export declare class ScanningApi extends BaseAPI implements ScanningApiInterface {
    /**
     * It scans a database and reads metadata. The result of the request contains a list of schema names of a database.
     * @summary Get a list of schema names of a database
     * @param {ScanningApiGetDataSourceSchemataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScanningApi
     */
    getDataSourceSchemata(requestParameters: ScanningApiGetDataSourceSchemataRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<DataSourceSchemata, any>>;
    /**
     * It scans a database and transforms its metadata to a declarative definition of the physical data model (PDM). The result of the request contains the mentioned physical data model (PDM) of a database within warning, for example, about unsupported columns.
     * @summary Scan a database to get a physical data model (PDM)
     * @param {ScanningApiScanDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScanningApi
     */
    scanDataSource(requestParameters: ScanningApiScanDataSourceRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScanResultPdm, any>>;
    /**
     * It executes SQL query against specified data source and extracts metadata. Metadata consist of column names and column data types. It can optionally provide also preview of data returned by SQL query
     * @summary Collect metadata about SQL query
     * @param {ScanningApiScanSqlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScanningApi
     */
    scanSql(requestParameters: ScanningApiScanSqlRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ScanSqlResponse, any>>;
}
/**
 * TestConnectionApi - axios parameter creator
 * @export
 */
export declare const TestConnectionApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Test if it is possible to connect to a database using an existing data source definition.
     * @summary Test data source connection by data source id
     * @param {string} dataSourceId Data source id
     * @param {TestRequest} testRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testDataSource: (dataSourceId: string, testRequest: TestRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Test if it is possible to connect to a database using a connection provided by the data source definition in the request body.
     * @summary Test connection by data source definition
     * @param {TestDefinitionRequest} testDefinitionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testDataSourceDefinition: (testDefinitionRequest: TestDefinitionRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TestConnectionApi - functional programming interface
 * @export
 */
export declare const TestConnectionApiFp: (configuration?: Configuration) => {
    /**
     * Test if it is possible to connect to a database using an existing data source definition.
     * @summary Test data source connection by data source id
     * @param {string} dataSourceId Data source id
     * @param {TestRequest} testRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testDataSource(dataSourceId: string, testRequest: TestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestResponse>>;
    /**
     * Test if it is possible to connect to a database using a connection provided by the data source definition in the request body.
     * @summary Test connection by data source definition
     * @param {TestDefinitionRequest} testDefinitionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testDataSourceDefinition(testDefinitionRequest: TestDefinitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestResponse>>;
};
/**
 * TestConnectionApi - factory interface
 * @export
 */
export declare const TestConnectionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Test if it is possible to connect to a database using an existing data source definition.
     * @summary Test data source connection by data source id
     * @param {TestConnectionApiTestDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testDataSource(requestParameters: TestConnectionApiTestDataSourceRequest, options?: AxiosRequestConfig): AxiosPromise<TestResponse>;
    /**
     * Test if it is possible to connect to a database using a connection provided by the data source definition in the request body.
     * @summary Test connection by data source definition
     * @param {TestConnectionApiTestDataSourceDefinitionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    testDataSourceDefinition(requestParameters: TestConnectionApiTestDataSourceDefinitionRequest, options?: AxiosRequestConfig): AxiosPromise<TestResponse>;
};
/**
 * TestConnectionApi - interface
 * @export
 * @interface TestConnectionApi
 */
export interface TestConnectionApiInterface {
    /**
     * Test if it is possible to connect to a database using an existing data source definition.
     * @summary Test data source connection by data source id
     * @param {TestConnectionApiTestDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestConnectionApiInterface
     */
    testDataSource(requestParameters: TestConnectionApiTestDataSourceRequest, options?: AxiosRequestConfig): AxiosPromise<TestResponse>;
    /**
     * Test if it is possible to connect to a database using a connection provided by the data source definition in the request body.
     * @summary Test connection by data source definition
     * @param {TestConnectionApiTestDataSourceDefinitionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestConnectionApiInterface
     */
    testDataSourceDefinition(requestParameters: TestConnectionApiTestDataSourceDefinitionRequest, options?: AxiosRequestConfig): AxiosPromise<TestResponse>;
}
/**
 * Request parameters for testDataSource operation in TestConnectionApi.
 * @export
 * @interface TestConnectionApiTestDataSourceRequest
 */
export interface TestConnectionApiTestDataSourceRequest {
    /**
     * Data source id
     * @type {string}
     * @memberof TestConnectionApiTestDataSource
     */
    readonly dataSourceId: string;
    /**
     *
     * @type {TestRequest}
     * @memberof TestConnectionApiTestDataSource
     */
    readonly testRequest: TestRequest;
}
/**
 * Request parameters for testDataSourceDefinition operation in TestConnectionApi.
 * @export
 * @interface TestConnectionApiTestDataSourceDefinitionRequest
 */
export interface TestConnectionApiTestDataSourceDefinitionRequest {
    /**
     *
     * @type {TestDefinitionRequest}
     * @memberof TestConnectionApiTestDataSourceDefinition
     */
    readonly testDefinitionRequest: TestDefinitionRequest;
}
/**
 * TestConnectionApi - object-oriented interface
 * @export
 * @class TestConnectionApi
 * @extends {BaseAPI}
 */
export declare class TestConnectionApi extends BaseAPI implements TestConnectionApiInterface {
    /**
     * Test if it is possible to connect to a database using an existing data source definition.
     * @summary Test data source connection by data source id
     * @param {TestConnectionApiTestDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestConnectionApi
     */
    testDataSource(requestParameters: TestConnectionApiTestDataSourceRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TestResponse, any>>;
    /**
     * Test if it is possible to connect to a database using a connection provided by the data source definition in the request body.
     * @summary Test connection by data source definition
     * @param {TestConnectionApiTestDataSourceDefinitionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestConnectionApi
     */
    testDataSourceDefinition(requestParameters: TestConnectionApiTestDataSourceDefinitionRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TestResponse, any>>;
}
//# sourceMappingURL=api.d.ts.map