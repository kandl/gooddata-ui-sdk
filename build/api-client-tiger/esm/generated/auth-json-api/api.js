/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from "axios";
// Some imports not used depending on template conditions, we also need prettier-ignore so that the import does not get split and ts-ignore still works
// prettier-ignore
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, toPathString, createRequestFunction } from './common.js';
// Some imports not used depending on template conditions, we also need prettier-ignore so that the import does not get split and ts-ignore still works
// prettier-ignore
// @ts-ignore
import { BASE_PATH, BaseAPI } from './base.js';
/**
 * ActionsApi - axios parameter creator
 * @export
 */
export const ActionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
         * @summary Invite User
         * @param {Invitation} invitation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processInvitation: async (invitation, options = {}) => {
            // verify required parameter 'invitation' is not null or undefined
            assertParamExists("processInvitation", "invitation", invitation);
            const localVarPath = `/api/v1/actions/invite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof invitation !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(invitation !== undefined ? invitation : {})
                : invitation || "";
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ActionsApi - functional programming interface
 * @export
 */
export const ActionsApiFp = function (configuration) {
    const localVarAxiosParamCreator = ActionsApiAxiosParamCreator(configuration);
    return {
        /**
         * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
         * @summary Invite User
         * @param {Invitation} invitation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processInvitation(invitation, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processInvitation(invitation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * ActionsApi - factory interface
 * @export
 */
export const ActionsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ActionsApiFp(configuration);
    return {
        /**
         * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
         * @summary Invite User
         * @param {ActionsApiProcessInvitationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processInvitation(requestParameters, options) {
            return localVarFp
                .processInvitation(requestParameters.invitation, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * ActionsApi - object-oriented interface
 * @export
 * @class ActionsApi
 * @extends {BaseAPI}
 */
export class ActionsApi extends BaseAPI {
    /**
     * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
     * @summary Invite User
     * @param {ActionsApiProcessInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    processInvitation(requestParameters, options) {
        return ActionsApiFp(this.configuration)
            .processInvitation(requestParameters.invitation, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Create a user
         * @param {AuthUser} authUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (authUser, options = {}) => {
            // verify required parameter 'authUser' is not null or undefined
            assertParamExists("createUser", "authUser", authUser);
            const localVarPath = `/api/v1/auth/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof authUser !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(authUser !== undefined ? authUser : {})
                : authUser || "";
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Delete a user
         * @param {string} userEmail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userEmail, options = {}) => {
            // verify required parameter 'userEmail' is not null or undefined
            assertParamExists("deleteUser", "userEmail", userEmail);
            const localVarPath = `/api/v1/auth/users/{userEmail}`.replace(`{${"userEmail"}}`, encodeURIComponent(String(userEmail)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Profile including Organization and Current User Information.
         * @summary Get Profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: async (options = {}) => {
            const localVarPath = `/api/v1/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Get a user
         * @param {string} userEmail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (userEmail, options = {}) => {
            // verify required parameter 'userEmail' is not null or undefined
            assertParamExists("getUser", "userEmail", userEmail);
            const localVarPath = `/api/v1/auth/users/{userEmail}`.replace(`{${"userEmail"}}`, encodeURIComponent(String(userEmail)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all users - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options = {}) => {
            const localVarPath = `/api/v1/auth/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Update a user
         * @param {string} userEmail
         * @param {AuthUser} authUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userEmail, authUser, options = {}) => {
            // verify required parameter 'userEmail' is not null or undefined
            assertParamExists("updateUser", "userEmail", userEmail);
            // verify required parameter 'authUser' is not null or undefined
            assertParamExists("updateUser", "authUser", authUser);
            const localVarPath = `/api/v1/auth/users/{userEmail}`.replace(`{${"userEmail"}}`, encodeURIComponent(String(userEmail)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "PUT" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof authUser !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(authUser !== undefined ? authUser : {})
                : authUser || "";
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function (configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Create a user
         * @param {AuthUser} authUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(authUser, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(authUser, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Delete a user
         * @param {string} userEmail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userEmail, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userEmail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a Profile including Organization and Current User Information.
         * @summary Get Profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Get a user
         * @param {string} userEmail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(userEmail, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(userEmail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all users - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Update a user
         * @param {string} userEmail
         * @param {AuthUser} authUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userEmail, authUser, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(userEmail, authUser, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration, basePath, axios) {
    const localVarFp = AuthenticationApiFp(configuration);
    return {
        /**
         * Create a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Create a user
         * @param {AuthenticationApiCreateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(requestParameters, options) {
            return localVarFp
                .createUser(requestParameters.authUser, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Delete a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Delete a user
         * @param {AuthenticationApiDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(requestParameters, options) {
            return localVarFp
                .deleteUser(requestParameters.userEmail, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Returns a Profile including Organization and Current User Information.
         * @summary Get Profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(options) {
            return localVarFp.getProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Get a user
         * @param {AuthenticationApiGetUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(requestParameters, options) {
            return localVarFp
                .getUser(requestParameters.userEmail, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get all users - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options) {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * Update a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Update a user
         * @param {AuthenticationApiUpdateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(requestParameters, options) {
            return localVarFp
                .updateUser(requestParameters.userEmail, requestParameters.authUser, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * Create a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Create a user
     * @param {AuthenticationApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    createUser(requestParameters, options) {
        return AuthenticationApiFp(this.configuration)
            .createUser(requestParameters.authUser, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Delete a user
     * @param {AuthenticationApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    deleteUser(requestParameters, options) {
        return AuthenticationApiFp(this.configuration)
            .deleteUser(requestParameters.userEmail, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a Profile including Organization and Current User Information.
     * @summary Get Profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    getProfile(options) {
        return AuthenticationApiFp(this.configuration)
            .getProfile(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Get a user
     * @param {AuthenticationApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    getUser(requestParameters, options) {
        return AuthenticationApiFp(this.configuration)
            .getUser(requestParameters.userEmail, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all users - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    getUsers(options) {
        return AuthenticationApiFp(this.configuration)
            .getUsers(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Update a user
     * @param {AuthenticationApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    updateUser(requestParameters, options) {
        return AuthenticationApiFp(this.configuration)
            .updateUser(requestParameters.userEmail, requestParameters.authUser, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
/**
 * UserAuthorizationApi - axios parameter creator
 * @export
 */
export const UserAuthorizationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Create a user
         * @param {AuthUser} authUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (authUser, options = {}) => {
            // verify required parameter 'authUser' is not null or undefined
            assertParamExists("createUser", "authUser", authUser);
            const localVarPath = `/api/v1/auth/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof authUser !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(authUser !== undefined ? authUser : {})
                : authUser || "";
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Delete a user
         * @param {string} userEmail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userEmail, options = {}) => {
            // verify required parameter 'userEmail' is not null or undefined
            assertParamExists("deleteUser", "userEmail", userEmail);
            const localVarPath = `/api/v1/auth/users/{userEmail}`.replace(`{${"userEmail"}}`, encodeURIComponent(String(userEmail)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Profile including Organization and Current User Information.
         * @summary Get Profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: async (options = {}) => {
            const localVarPath = `/api/v1/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Get a user
         * @param {string} userEmail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (userEmail, options = {}) => {
            // verify required parameter 'userEmail' is not null or undefined
            assertParamExists("getUser", "userEmail", userEmail);
            const localVarPath = `/api/v1/auth/users/{userEmail}`.replace(`{${"userEmail"}}`, encodeURIComponent(String(userEmail)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all users - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options = {}) => {
            const localVarPath = `/api/v1/auth/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
         * @summary Invite User
         * @param {Invitation} invitation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processInvitation: async (invitation, options = {}) => {
            // verify required parameter 'invitation' is not null or undefined
            assertParamExists("processInvitation", "invitation", invitation);
            const localVarPath = `/api/v1/actions/invite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof invitation !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(invitation !== undefined ? invitation : {})
                : invitation || "";
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Update a user
         * @param {string} userEmail
         * @param {AuthUser} authUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userEmail, authUser, options = {}) => {
            // verify required parameter 'userEmail' is not null or undefined
            assertParamExists("updateUser", "userEmail", userEmail);
            // verify required parameter 'authUser' is not null or undefined
            assertParamExists("updateUser", "authUser", authUser);
            const localVarPath = `/api/v1/auth/users/{userEmail}`.replace(`{${"userEmail"}}`, encodeURIComponent(String(userEmail)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: "PUT" }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter["Content-Type"] = "application/json";
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            const needsSerialization = typeof authUser !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(authUser !== undefined ? authUser : {})
                : authUser || "";
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * UserAuthorizationApi - functional programming interface
 * @export
 */
export const UserAuthorizationApiFp = function (configuration) {
    const localVarAxiosParamCreator = UserAuthorizationApiAxiosParamCreator(configuration);
    return {
        /**
         * Create a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Create a user
         * @param {AuthUser} authUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(authUser, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(authUser, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Delete a user
         * @param {string} userEmail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userEmail, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userEmail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a Profile including Organization and Current User Information.
         * @summary Get Profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Get a user
         * @param {string} userEmail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(userEmail, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(userEmail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all users - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
         * @summary Invite User
         * @param {Invitation} invitation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processInvitation(invitation, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processInvitation(invitation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Update a user
         * @param {string} userEmail
         * @param {AuthUser} authUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userEmail, authUser, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(userEmail, authUser, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * UserAuthorizationApi - factory interface
 * @export
 */
export const UserAuthorizationApiFactory = function (configuration, basePath, axios) {
    const localVarFp = UserAuthorizationApiFp(configuration);
    return {
        /**
         * Create a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Create a user
         * @param {UserAuthorizationApiCreateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(requestParameters, options) {
            return localVarFp
                .createUser(requestParameters.authUser, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Delete a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Delete a user
         * @param {UserAuthorizationApiDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(requestParameters, options) {
            return localVarFp
                .deleteUser(requestParameters.userEmail, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Returns a Profile including Organization and Current User Information.
         * @summary Get Profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(options) {
            return localVarFp.getProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Get a user
         * @param {UserAuthorizationApiGetUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(requestParameters, options) {
            return localVarFp
                .getUser(requestParameters.userEmail, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get all users - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options) {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
         * @summary Invite User
         * @param {UserAuthorizationApiProcessInvitationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processInvitation(requestParameters, options) {
            return localVarFp
                .processInvitation(requestParameters.invitation, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Update a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
         * @summary Update a user
         * @param {UserAuthorizationApiUpdateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(requestParameters, options) {
            return localVarFp
                .updateUser(requestParameters.userEmail, requestParameters.authUser, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * UserAuthorizationApi - object-oriented interface
 * @export
 * @class UserAuthorizationApi
 * @extends {BaseAPI}
 */
export class UserAuthorizationApi extends BaseAPI {
    /**
     * Create a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Create a user
     * @param {UserAuthorizationApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApi
     */
    createUser(requestParameters, options) {
        return UserAuthorizationApiFp(this.configuration)
            .createUser(requestParameters.authUser, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Delete a user
     * @param {UserAuthorizationApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApi
     */
    deleteUser(requestParameters, options) {
        return UserAuthorizationApiFp(this.configuration)
            .deleteUser(requestParameters.userEmail, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a Profile including Organization and Current User Information.
     * @summary Get Profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApi
     */
    getProfile(options) {
        return UserAuthorizationApiFp(this.configuration)
            .getProfile(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Get a user
     * @param {UserAuthorizationApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApi
     */
    getUser(requestParameters, options) {
        return UserAuthorizationApiFp(this.configuration)
            .getUser(requestParameters.userEmail, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all users - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApi
     */
    getUsers(options) {
        return UserAuthorizationApiFp(this.configuration)
            .getUsers(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
     * @summary Invite User
     * @param {UserAuthorizationApiProcessInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApi
     */
    processInvitation(requestParameters, options) {
        return UserAuthorizationApiFp(this.configuration)
            .processInvitation(requestParameters.invitation, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a user - dedicated endpoint for user management in the internal OIDC provider. GoodData.CN specific
     * @summary Update a user
     * @param {UserAuthorizationApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAuthorizationApi
     */
    updateUser(requestParameters, options) {
        return UserAuthorizationApiFp(this.configuration)
            .updateUser(requestParameters.userEmail, requestParameters.authUser, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=api.js.map