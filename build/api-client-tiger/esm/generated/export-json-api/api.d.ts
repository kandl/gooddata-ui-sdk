/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from "./configuration.js";
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import { RequestArgs, BaseAPI } from './base.js';
/**
 * Custom label object override.
 * @export
 * @interface CustomLabel
 */
export interface CustomLabel {
    /**
     * Override value.
     * @type {string}
     * @memberof CustomLabel
     */
    title: string;
}
/**
 * Custom metric object override.
 * @export
 * @interface CustomMetric
 */
export interface CustomMetric {
    /**
     * Metric title override.
     * @type {string}
     * @memberof CustomMetric
     */
    title: string;
    /**
     * Format override.
     * @type {string}
     * @memberof CustomMetric
     */
    format: string;
}
/**
 * Custom cell value overrides (IDs will be replaced with specified values).
 * @export
 * @interface CustomOverride
 */
export interface CustomOverride {
    /**
     * Map of CustomLabels with keys used as placeholders in document.
     * @type {{ [key: string]: CustomLabel; }}
     * @memberof CustomOverride
     */
    labels?: {
        [key: string]: CustomLabel;
    };
    /**
     * Map of CustomMetrics with keys used as placeholders in document.
     * @type {{ [key: string]: CustomMetric; }}
     * @memberof CustomOverride
     */
    metrics?: {
        [key: string]: CustomMetric;
    };
}
/**
 *
 * @export
 * @interface ExportResponse
 */
export interface ExportResponse {
    /**
     *
     * @type {string}
     * @memberof ExportResponse
     */
    exportResult: string;
}
/**
 * Export request object describing the export properties and metadata for pdf exports.
 * @export
 * @interface PdfExportRequest
 */
export interface PdfExportRequest {
    /**
     * File name to be used for retrieving the pdf document.
     * @type {string}
     * @memberof PdfExportRequest
     */
    fileName: string;
    /**
     * Dashboard identifier
     * @type {string}
     * @memberof PdfExportRequest
     */
    dashboardId: string;
    /**
     * Metadata definition in open form JSON format.
     * @type {object}
     * @memberof PdfExportRequest
     */
    metadata?: object;
}
/**
 * XLSX specific settings.
 * @export
 * @interface Settings
 */
export interface Settings {
    /**
     * Merge equal headers in neighbouring cells.
     * @type {boolean}
     * @memberof Settings
     */
    mergeHeaders: boolean;
    /**
     * Print applied filters on top of the document.
     * @type {boolean}
     * @memberof Settings
     */
    showFilters: boolean;
}
/**
 * Export request object describing the export properties and overrides for tabular exports.
 * @export
 * @interface TabularExportRequest
 */
export interface TabularExportRequest {
    /**
     * Expected file format.
     * @type {string}
     * @memberof TabularExportRequest
     */
    format: TabularExportRequestFormatEnum;
    /**
     * Execution result identifier.
     * @type {string}
     * @memberof TabularExportRequest
     */
    executionResult: string;
    /**
     * Filename of downloaded file without extension.
     * @type {string}
     * @memberof TabularExportRequest
     */
    fileName: string;
    /**
     *
     * @type {Settings}
     * @memberof TabularExportRequest
     */
    settings?: Settings;
    /**
     *
     * @type {CustomOverride}
     * @memberof TabularExportRequest
     */
    customOverride?: CustomOverride;
}
export declare const TabularExportRequestFormatEnum: {
    readonly CSV: "CSV";
    readonly XLSX: "XLSX";
};
export type TabularExportRequestFormatEnum = typeof TabularExportRequestFormatEnum[keyof typeof TabularExportRequestFormatEnum];
/**
 * ActionsApi - axios parameter creator
 * @export
 */
export declare const ActionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * An visual export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create visual - pdf export request
     * @param {string} workspaceId
     * @param {PdfExportRequest} pdfExportRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPdfExport: (workspaceId: string, pdfExportRequest: PdfExportRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create tabular export request
     * @param {string} workspaceId
     * @param {TabularExportRequest} tabularExportRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTabularExport: (workspaceId: string, tabularExportRequest: TabularExportRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns 202 until original POST export request is not processed.Returns 200 with exported data once the export is done.
     * @summary Retrieve exported files
     * @param {string} workspaceId
     * @param {string} exportId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExportedFile: (workspaceId: string, exportId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoints serves as a cache for user defined metadata for the front end ui to retrieve them, if one was created using the POST ../export/visual endpoint. The metadata structure is not verified. If metadata for given {exportId} has been found, endpoint returns the value 200 else 404.
     * @summary Retrieve metadata context
     * @param {string} workspaceId
     * @param {string} exportId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetadata: (workspaceId: string, exportId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
     * @summary Retrieve exported files
     * @param {string} workspaceId
     * @param {string} exportId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTabularExport: (workspaceId: string, exportId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ActionsApi - functional programming interface
 * @export
 */
export declare const ActionsApiFp: (configuration?: Configuration) => {
    /**
     * An visual export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create visual - pdf export request
     * @param {string} workspaceId
     * @param {PdfExportRequest} pdfExportRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPdfExport(workspaceId: string, pdfExportRequest: PdfExportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportResponse>>;
    /**
     * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create tabular export request
     * @param {string} workspaceId
     * @param {TabularExportRequest} tabularExportRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTabularExport(workspaceId: string, tabularExportRequest: TabularExportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportResponse>>;
    /**
     * Returns 202 until original POST export request is not processed.Returns 200 with exported data once the export is done.
     * @summary Retrieve exported files
     * @param {string} workspaceId
     * @param {string} exportId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExportedFile(workspaceId: string, exportId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoints serves as a cache for user defined metadata for the front end ui to retrieve them, if one was created using the POST ../export/visual endpoint. The metadata structure is not verified. If metadata for given {exportId} has been found, endpoint returns the value 200 else 404.
     * @summary Retrieve metadata context
     * @param {string} workspaceId
     * @param {string} exportId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetadata(workspaceId: string, exportId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
     * @summary Retrieve exported files
     * @param {string} workspaceId
     * @param {string} exportId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTabularExport(workspaceId: string, exportId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ActionsApi - factory interface
 * @export
 */
export declare const ActionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * An visual export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create visual - pdf export request
     * @param {ActionsApiCreatePdfExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPdfExport(requestParameters: ActionsApiCreatePdfExportRequest, options?: AxiosRequestConfig): AxiosPromise<ExportResponse>;
    /**
     * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create tabular export request
     * @param {ActionsApiCreateTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTabularExport(requestParameters: ActionsApiCreateTabularExportRequest, options?: AxiosRequestConfig): AxiosPromise<ExportResponse>;
    /**
     * Returns 202 until original POST export request is not processed.Returns 200 with exported data once the export is done.
     * @summary Retrieve exported files
     * @param {ActionsApiGetExportedFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExportedFile(requestParameters: ActionsApiGetExportedFileRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * This endpoints serves as a cache for user defined metadata for the front end ui to retrieve them, if one was created using the POST ../export/visual endpoint. The metadata structure is not verified. If metadata for given {exportId} has been found, endpoint returns the value 200 else 404.
     * @summary Retrieve metadata context
     * @param {ActionsApiGetMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetadata(requestParameters: ActionsApiGetMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
     * @summary Retrieve exported files
     * @param {ActionsApiGetTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTabularExport(requestParameters: ActionsApiGetTabularExportRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
};
/**
 * ActionsApi - interface
 * @export
 * @interface ActionsApi
 */
export interface ActionsApiInterface {
    /**
     * An visual export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create visual - pdf export request
     * @param {ActionsApiCreatePdfExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    createPdfExport(requestParameters: ActionsApiCreatePdfExportRequest, options?: AxiosRequestConfig): AxiosPromise<ExportResponse>;
    /**
     * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create tabular export request
     * @param {ActionsApiCreateTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    createTabularExport(requestParameters: ActionsApiCreateTabularExportRequest, options?: AxiosRequestConfig): AxiosPromise<ExportResponse>;
    /**
     * Returns 202 until original POST export request is not processed.Returns 200 with exported data once the export is done.
     * @summary Retrieve exported files
     * @param {ActionsApiGetExportedFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    getExportedFile(requestParameters: ActionsApiGetExportedFileRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * This endpoints serves as a cache for user defined metadata for the front end ui to retrieve them, if one was created using the POST ../export/visual endpoint. The metadata structure is not verified. If metadata for given {exportId} has been found, endpoint returns the value 200 else 404.
     * @summary Retrieve metadata context
     * @param {ActionsApiGetMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    getMetadata(requestParameters: ActionsApiGetMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
     * @summary Retrieve exported files
     * @param {ActionsApiGetTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    getTabularExport(requestParameters: ActionsApiGetTabularExportRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
}
/**
 * Request parameters for createPdfExport operation in ActionsApi.
 * @export
 * @interface ActionsApiCreatePdfExportRequest
 */
export interface ActionsApiCreatePdfExportRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiCreatePdfExport
     */
    readonly workspaceId: string;
    /**
     *
     * @type {PdfExportRequest}
     * @memberof ActionsApiCreatePdfExport
     */
    readonly pdfExportRequest: PdfExportRequest;
}
/**
 * Request parameters for createTabularExport operation in ActionsApi.
 * @export
 * @interface ActionsApiCreateTabularExportRequest
 */
export interface ActionsApiCreateTabularExportRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiCreateTabularExport
     */
    readonly workspaceId: string;
    /**
     *
     * @type {TabularExportRequest}
     * @memberof ActionsApiCreateTabularExport
     */
    readonly tabularExportRequest: TabularExportRequest;
}
/**
 * Request parameters for getExportedFile operation in ActionsApi.
 * @export
 * @interface ActionsApiGetExportedFileRequest
 */
export interface ActionsApiGetExportedFileRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiGetExportedFile
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof ActionsApiGetExportedFile
     */
    readonly exportId: string;
}
/**
 * Request parameters for getMetadata operation in ActionsApi.
 * @export
 * @interface ActionsApiGetMetadataRequest
 */
export interface ActionsApiGetMetadataRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiGetMetadata
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof ActionsApiGetMetadata
     */
    readonly exportId: string;
}
/**
 * Request parameters for getTabularExport operation in ActionsApi.
 * @export
 * @interface ActionsApiGetTabularExportRequest
 */
export interface ActionsApiGetTabularExportRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiGetTabularExport
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof ActionsApiGetTabularExport
     */
    readonly exportId: string;
}
/**
 * ActionsApi - object-oriented interface
 * @export
 * @class ActionsApi
 * @extends {BaseAPI}
 */
export declare class ActionsApi extends BaseAPI implements ActionsApiInterface {
    /**
     * An visual export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create visual - pdf export request
     * @param {ActionsApiCreatePdfExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    createPdfExport(requestParameters: ActionsApiCreatePdfExportRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ExportResponse, any>>;
    /**
     * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create tabular export request
     * @param {ActionsApiCreateTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    createTabularExport(requestParameters: ActionsApiCreateTabularExportRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ExportResponse, any>>;
    /**
     * Returns 202 until original POST export request is not processed.Returns 200 with exported data once the export is done.
     * @summary Retrieve exported files
     * @param {ActionsApiGetExportedFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    getExportedFile(requestParameters: ActionsApiGetExportedFileRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This endpoints serves as a cache for user defined metadata for the front end ui to retrieve them, if one was created using the POST ../export/visual endpoint. The metadata structure is not verified. If metadata for given {exportId} has been found, endpoint returns the value 200 else 404.
     * @summary Retrieve metadata context
     * @param {ActionsApiGetMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    getMetadata(requestParameters: ActionsApiGetMetadataRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
     * @summary Retrieve exported files
     * @param {ActionsApiGetTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    getTabularExport(requestParameters: ActionsApiGetTabularExportRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * ComputationApi - axios parameter creator
 * @export
 */
export declare const ComputationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create tabular export request
     * @param {string} workspaceId
     * @param {TabularExportRequest} tabularExportRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTabularExport: (workspaceId: string, tabularExportRequest: TabularExportRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
     * @summary Retrieve exported files
     * @param {string} workspaceId
     * @param {string} exportId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTabularExport: (workspaceId: string, exportId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ComputationApi - functional programming interface
 * @export
 */
export declare const ComputationApiFp: (configuration?: Configuration) => {
    /**
     * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create tabular export request
     * @param {string} workspaceId
     * @param {TabularExportRequest} tabularExportRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTabularExport(workspaceId: string, tabularExportRequest: TabularExportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportResponse>>;
    /**
     * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
     * @summary Retrieve exported files
     * @param {string} workspaceId
     * @param {string} exportId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTabularExport(workspaceId: string, exportId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ComputationApi - factory interface
 * @export
 */
export declare const ComputationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create tabular export request
     * @param {ComputationApiCreateTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTabularExport(requestParameters: ComputationApiCreateTabularExportRequest, options?: AxiosRequestConfig): AxiosPromise<ExportResponse>;
    /**
     * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
     * @summary Retrieve exported files
     * @param {ComputationApiGetTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTabularExport(requestParameters: ComputationApiGetTabularExportRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
};
/**
 * ComputationApi - interface
 * @export
 * @interface ComputationApi
 */
export interface ComputationApiInterface {
    /**
     * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create tabular export request
     * @param {ComputationApiCreateTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComputationApiInterface
     */
    createTabularExport(requestParameters: ComputationApiCreateTabularExportRequest, options?: AxiosRequestConfig): AxiosPromise<ExportResponse>;
    /**
     * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
     * @summary Retrieve exported files
     * @param {ComputationApiGetTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComputationApiInterface
     */
    getTabularExport(requestParameters: ComputationApiGetTabularExportRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
}
/**
 * Request parameters for createTabularExport operation in ComputationApi.
 * @export
 * @interface ComputationApiCreateTabularExportRequest
 */
export interface ComputationApiCreateTabularExportRequest {
    /**
     *
     * @type {string}
     * @memberof ComputationApiCreateTabularExport
     */
    readonly workspaceId: string;
    /**
     *
     * @type {TabularExportRequest}
     * @memberof ComputationApiCreateTabularExport
     */
    readonly tabularExportRequest: TabularExportRequest;
}
/**
 * Request parameters for getTabularExport operation in ComputationApi.
 * @export
 * @interface ComputationApiGetTabularExportRequest
 */
export interface ComputationApiGetTabularExportRequest {
    /**
     *
     * @type {string}
     * @memberof ComputationApiGetTabularExport
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof ComputationApiGetTabularExport
     */
    readonly exportId: string;
}
/**
 * ComputationApi - object-oriented interface
 * @export
 * @class ComputationApi
 * @extends {BaseAPI}
 */
export declare class ComputationApi extends BaseAPI implements ComputationApiInterface {
    /**
     * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create tabular export request
     * @param {ComputationApiCreateTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComputationApi
     */
    createTabularExport(requestParameters: ComputationApiCreateTabularExportRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ExportResponse, any>>;
    /**
     * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
     * @summary Retrieve exported files
     * @param {ComputationApiGetTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComputationApi
     */
    getTabularExport(requestParameters: ComputationApiGetTabularExportRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * ExportingApi - axios parameter creator
 * @export
 */
export declare const ExportingApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * An visual export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create visual - pdf export request
     * @param {string} workspaceId
     * @param {PdfExportRequest} pdfExportRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPdfExport: (workspaceId: string, pdfExportRequest: PdfExportRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns 202 until original POST export request is not processed.Returns 200 with exported data once the export is done.
     * @summary Retrieve exported files
     * @param {string} workspaceId
     * @param {string} exportId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExportedFile: (workspaceId: string, exportId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * This endpoints serves as a cache for user defined metadata for the front end ui to retrieve them, if one was created using the POST ../export/visual endpoint. The metadata structure is not verified. If metadata for given {exportId} has been found, endpoint returns the value 200 else 404.
     * @summary Retrieve metadata context
     * @param {string} workspaceId
     * @param {string} exportId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetadata: (workspaceId: string, exportId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ExportingApi - functional programming interface
 * @export
 */
export declare const ExportingApiFp: (configuration?: Configuration) => {
    /**
     * An visual export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create visual - pdf export request
     * @param {string} workspaceId
     * @param {PdfExportRequest} pdfExportRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPdfExport(workspaceId: string, pdfExportRequest: PdfExportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportResponse>>;
    /**
     * Returns 202 until original POST export request is not processed.Returns 200 with exported data once the export is done.
     * @summary Retrieve exported files
     * @param {string} workspaceId
     * @param {string} exportId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExportedFile(workspaceId: string, exportId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * This endpoints serves as a cache for user defined metadata for the front end ui to retrieve them, if one was created using the POST ../export/visual endpoint. The metadata structure is not verified. If metadata for given {exportId} has been found, endpoint returns the value 200 else 404.
     * @summary Retrieve metadata context
     * @param {string} workspaceId
     * @param {string} exportId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetadata(workspaceId: string, exportId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ExportingApi - factory interface
 * @export
 */
export declare const ExportingApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * An visual export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create visual - pdf export request
     * @param {ExportingApiCreatePdfExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPdfExport(requestParameters: ExportingApiCreatePdfExportRequest, options?: AxiosRequestConfig): AxiosPromise<ExportResponse>;
    /**
     * Returns 202 until original POST export request is not processed.Returns 200 with exported data once the export is done.
     * @summary Retrieve exported files
     * @param {ExportingApiGetExportedFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExportedFile(requestParameters: ExportingApiGetExportedFileRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * This endpoints serves as a cache for user defined metadata for the front end ui to retrieve them, if one was created using the POST ../export/visual endpoint. The metadata structure is not verified. If metadata for given {exportId} has been found, endpoint returns the value 200 else 404.
     * @summary Retrieve metadata context
     * @param {ExportingApiGetMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetadata(requestParameters: ExportingApiGetMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
};
/**
 * ExportingApi - interface
 * @export
 * @interface ExportingApi
 */
export interface ExportingApiInterface {
    /**
     * An visual export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create visual - pdf export request
     * @param {ExportingApiCreatePdfExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportingApiInterface
     */
    createPdfExport(requestParameters: ExportingApiCreatePdfExportRequest, options?: AxiosRequestConfig): AxiosPromise<ExportResponse>;
    /**
     * Returns 202 until original POST export request is not processed.Returns 200 with exported data once the export is done.
     * @summary Retrieve exported files
     * @param {ExportingApiGetExportedFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportingApiInterface
     */
    getExportedFile(requestParameters: ExportingApiGetExportedFileRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * This endpoints serves as a cache for user defined metadata for the front end ui to retrieve them, if one was created using the POST ../export/visual endpoint. The metadata structure is not verified. If metadata for given {exportId} has been found, endpoint returns the value 200 else 404.
     * @summary Retrieve metadata context
     * @param {ExportingApiGetMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportingApiInterface
     */
    getMetadata(requestParameters: ExportingApiGetMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
}
/**
 * Request parameters for createPdfExport operation in ExportingApi.
 * @export
 * @interface ExportingApiCreatePdfExportRequest
 */
export interface ExportingApiCreatePdfExportRequest {
    /**
     *
     * @type {string}
     * @memberof ExportingApiCreatePdfExport
     */
    readonly workspaceId: string;
    /**
     *
     * @type {PdfExportRequest}
     * @memberof ExportingApiCreatePdfExport
     */
    readonly pdfExportRequest: PdfExportRequest;
}
/**
 * Request parameters for getExportedFile operation in ExportingApi.
 * @export
 * @interface ExportingApiGetExportedFileRequest
 */
export interface ExportingApiGetExportedFileRequest {
    /**
     *
     * @type {string}
     * @memberof ExportingApiGetExportedFile
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof ExportingApiGetExportedFile
     */
    readonly exportId: string;
}
/**
 * Request parameters for getMetadata operation in ExportingApi.
 * @export
 * @interface ExportingApiGetMetadataRequest
 */
export interface ExportingApiGetMetadataRequest {
    /**
     *
     * @type {string}
     * @memberof ExportingApiGetMetadata
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof ExportingApiGetMetadata
     */
    readonly exportId: string;
}
/**
 * ExportingApi - object-oriented interface
 * @export
 * @class ExportingApi
 * @extends {BaseAPI}
 */
export declare class ExportingApi extends BaseAPI implements ExportingApiInterface {
    /**
     * An visual export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create visual - pdf export request
     * @param {ExportingApiCreatePdfExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportingApi
     */
    createPdfExport(requestParameters: ExportingApiCreatePdfExportRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ExportResponse, any>>;
    /**
     * Returns 202 until original POST export request is not processed.Returns 200 with exported data once the export is done.
     * @summary Retrieve exported files
     * @param {ExportingApiGetExportedFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportingApi
     */
    getExportedFile(requestParameters: ExportingApiGetExportedFileRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * This endpoints serves as a cache for user defined metadata for the front end ui to retrieve them, if one was created using the POST ../export/visual endpoint. The metadata structure is not verified. If metadata for given {exportId} has been found, endpoint returns the value 200 else 404.
     * @summary Retrieve metadata context
     * @param {ExportingApiGetMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportingApi
     */
    getMetadata(requestParameters: ExportingApiGetMetadataRequest, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
//# sourceMappingURL=api.d.ts.map