/**
 * This package provides low-level functions for communication with GoodData Cloud and GoodData.CN.
 *
 * @remarks
 * The package is used by `@gooddata/sdk-backend-tiger`, which you should use instead of directly using
 * `@gooddata/api-client-tiger` whenever possible.
 * For the similar package for the GoodData platform, see `@gooddata/api-client-bear`.
 *
 * @packageDocumentation
 */

import { AxiosInstance } from 'axios';
import { AxiosPromise } from 'axios';
import { AxiosRequestConfig } from 'axios';
import { AxiosResponse } from 'axios';
import { IBucket } from '@gooddata/sdk-model';
import { IDashboardDateFilterConfig } from '@gooddata/sdk-model';
import { IDashboardLayout } from '@gooddata/sdk-model';
import { IFilter } from '@gooddata/sdk-model';
import { IFilterContext as IFilterContext_2 } from '@gooddata/sdk-model';
import { ISortItem } from '@gooddata/sdk-model';
import { ObjRef } from '@gooddata/sdk-model';
import { VisualizationProperties } from '@gooddata/sdk-model';

/**
 * A datetime filter specifying exact from and to values.
 * @export
 * @interface AbsoluteDateFilter
 */
export declare interface AbsoluteDateFilter {
    /**
     *
     * @type {AbsoluteDateFilterAbsoluteDateFilter}
     * @memberof AbsoluteDateFilter
     */
    absoluteDateFilter: AbsoluteDateFilterAbsoluteDateFilter;
}

/**
 *
 * @export
 * @interface AbsoluteDateFilterAbsoluteDateFilter
 */
export declare interface AbsoluteDateFilterAbsoluteDateFilter {
    /**
     *
     * @type {string}
     * @memberof AbsoluteDateFilterAbsoluteDateFilter
     */
    from: string;
    /**
     *
     * @type {string}
     * @memberof AbsoluteDateFilterAbsoluteDateFilter
     */
    to: string;
    /**
     *
     * @type {boolean}
     * @memberof AbsoluteDateFilterAbsoluteDateFilter
     */
    applyOnResult?: boolean;
    /**
     *
     * @type {AfmObjectIdentifierDataset}
     * @memberof AbsoluteDateFilterAbsoluteDateFilter
     */
    dataset: AfmObjectIdentifierDataset;
}

/**
 * @type AbstractMeasureValueFilter
 * @export
 */
export declare type AbstractMeasureValueFilter = ComparisonMeasureValueFilter | RangeMeasureValueFilter | RankingFilter;

/**
 * ActionsApi - object-oriented interface
 * @export
 * @class ActionsApi
 * @extends {BaseAPI}
 */
export declare class ActionsApi extends MetadataBaseApi implements ActionsApiInterface {
    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    allPlatformUsage(options?: AxiosRequestConfig): Promise<AxiosResponse<PlatformUsage[], any>>;
    /**
     *
     * @summary Get Available Assignees
     * @param {ActionsApiAvailableAssigneesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    availableAssignees(requestParameters: ActionsApiAvailableAssigneesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<AvailableAssignees, any>>;
    /**
     * Finds entities with given ID in hierarchy (e.g. to check possible future conflicts).
     * @summary Finds entities with given ID in hierarchy.
     * @param {ActionsApiCheckEntityOverridesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    checkEntityOverrides(requestParameters: ActionsApiCheckEntityOverridesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<IdentifierDuplications[], any>>;
    /**
     *
     * @summary Get Dashboard Permissions
     * @param {ActionsApiDashboardPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    dashboardPermissions(requestParameters: ActionsApiDashboardPermissionsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DashboardPermissions, any>>;
    /**
     * Generate logical data model (LDM) from physical data model (PDM) stored in data source.
     * @summary Generate logical data model (LDM) from physical data model (PDM)
     * @param {ActionsApiGenerateLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    generateLogicalModel(requestParameters: ActionsApiGenerateLogicalModelRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeModel, any>>;
    /**
     * Computes the dependent entities graph
     * @summary Computes the dependent entities graph
     * @param {ActionsApiGetDependentEntitiesGraphRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    getDependentEntitiesGraph(requestParameters: ActionsApiGetDependentEntitiesGraphRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DependentEntitiesResponse, any>>;
    /**
     * Computes the dependent entities graph from given entry points
     * @summary Computes the dependent entities graph from given entry points
     * @param {ActionsApiGetDependentEntitiesGraphFromEntryPointsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    getDependentEntitiesGraphFromEntryPoints(requestParameters: ActionsApiGetDependentEntitiesGraphFromEntryPointsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DependentEntitiesResponse, any>>;
    /**
     * Finds API identifier conflicts in given workspace hierarchy.
     * @summary Finds API identifier conflicts in given workspace hierarchy.
     * @param {ActionsApiInheritedEntityConflictsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    inheritedEntityConflicts(requestParameters: ActionsApiInheritedEntityConflictsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<IdentifierDuplications[], any>>;
    /**
     * Get used entity prefixes in hierarchy of parent workspaces
     * @summary Get used entity prefixes in hierarchy
     * @param {ActionsApiInheritedEntityPrefixesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    inheritedEntityPrefixes(requestParameters: ActionsApiInheritedEntityPrefixesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<string[], any>>;
    /**
     *
     * @summary Manage Permissions for a Dashboard
     * @param {ActionsApiManageDashboardPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    manageDashboardPermissions(requestParameters: ActionsApiManageDashboardPermissionsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Finds API identifier overrides in given workspace hierarchy.
     * @summary Finds API identifier overrides in given workspace hierarchy.
     * @param {ActionsApiOverriddenChildEntitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    overriddenChildEntities(requestParameters: ActionsApiOverriddenChildEntitiesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<IdentifierDuplications[], any>>;
    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage for particular items.
     * @param {ActionsApiParticularPlatformUsageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    particularPlatformUsage(requestParameters: ActionsApiParticularPlatformUsageRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<PlatformUsage[], any>>;
    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {ActionsApiRegisterUploadNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    registerUploadNotification(requestParameters: ActionsApiRegisterUploadNotificationRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Resolves values of available entitlements for the organization.
     * @summary Values for all public entitlements.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    resolveAllEntitlements(options?: AxiosRequestConfig): Promise<AxiosResponse<ApiEntitlement[], any>>;
    /**
     * Resolves values for all settings without workspace by current user, organization, or default settings.
     * @summary Values for all settings without workspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    resolveAllSettingsWithoutWorkspace(options?: AxiosRequestConfig): Promise<AxiosResponse<ResolvedSetting[], any>>;
    /**
     * Resolves values for requested entitlements in the organization.
     * @summary Values for requested public entitlements.
     * @param {ActionsApiResolveRequestedEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    resolveRequestedEntitlements(requestParameters: ActionsApiResolveRequestedEntitlementsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ApiEntitlement[], any>>;
    /**
     * Resolves values for selected settings without workspace by current user, organization, or default settings.
     * @summary Values for selected settings without workspace.
     * @param {ActionsApiResolveSettingsWithoutWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    resolveSettingsWithoutWorkspace(requestParameters: ActionsApiResolveSettingsWithoutWorkspaceRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ResolvedSetting[], any>>;
    /**
     * Resolves values for all settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for all settings.
     * @param {ActionsApiWorkspaceResolveAllSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    workspaceResolveAllSettings(requestParameters: ActionsApiWorkspaceResolveAllSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ResolvedSetting[], any>>;
    /**
     * Resolves value for selected settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for selected settings.
     * @param {ActionsApiWorkspaceResolveSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    workspaceResolveSettings(requestParameters: ActionsApiWorkspaceResolveSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ResolvedSetting[], any>>;
}

/**
 * Request parameters for availableAssignees operation in ActionsApi.
 * @export
 * @interface ActionsApiAvailableAssigneesRequest
 */
export declare interface ActionsApiAvailableAssigneesRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiAvailableAssignees
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof ActionsApiAvailableAssignees
     */
    readonly dashboardId: string;
}

/**
 * ActionsApi - axios parameter creator
 * @export
 */
export declare const ActionsApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    allPlatformUsage: (options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get Available Assignees
     * @param {string} workspaceId
     * @param {string} dashboardId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    availableAssignees: (workspaceId: string, dashboardId: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Finds entities with given ID in hierarchy (e.g. to check possible future conflicts).
     * @summary Finds entities with given ID in hierarchy.
     * @param {string} workspaceId
     * @param {Array<HierarchyObjectIdentification>} hierarchyObjectIdentification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkEntityOverrides: (workspaceId: string, hierarchyObjectIdentification: Array<HierarchyObjectIdentification>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get Dashboard Permissions
     * @param {string} workspaceId
     * @param {string} dashboardId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardPermissions: (workspaceId: string, dashboardId: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Generate logical data model (LDM) from physical data model (PDM) stored in data source.
     * @summary Generate logical data model (LDM) from physical data model (PDM)
     * @param {string} dataSourceId
     * @param {GenerateLdmRequest} generateLdmRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateLogicalModel: (dataSourceId: string, generateLdmRequest: GenerateLdmRequest, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Computes the dependent entities graph
     * @summary Computes the dependent entities graph
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDependentEntitiesGraph: (workspaceId: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Computes the dependent entities graph from given entry points
     * @summary Computes the dependent entities graph from given entry points
     * @param {string} workspaceId
     * @param {DependentEntitiesRequest} dependentEntitiesRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDependentEntitiesGraphFromEntryPoints: (workspaceId: string, dependentEntitiesRequest: DependentEntitiesRequest, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Finds API identifier conflicts in given workspace hierarchy.
     * @summary Finds API identifier conflicts in given workspace hierarchy.
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inheritedEntityConflicts: (workspaceId: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Get used entity prefixes in hierarchy of parent workspaces
     * @summary Get used entity prefixes in hierarchy
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inheritedEntityPrefixes: (workspaceId: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Manage Permissions for a Dashboard
     * @param {string} workspaceId
     * @param {string} dashboardId
     * @param {Array<PermissionsForAssignee>} permissionsForAssignee
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    manageDashboardPermissions: (workspaceId: string, dashboardId: string, permissionsForAssignee: Array<PermissionsForAssignee>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Finds API identifier overrides in given workspace hierarchy.
     * @summary Finds API identifier overrides in given workspace hierarchy.
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    overriddenChildEntities: (workspaceId: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage for particular items.
     * @param {PlatformUsageRequest} platformUsageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    particularPlatformUsage: (platformUsageRequest: PlatformUsageRequest, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerUploadNotification: (dataSourceId: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Resolves values of available entitlements for the organization.
     * @summary Values for all public entitlements.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveAllEntitlements: (options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Resolves values for all settings without workspace by current user, organization, or default settings.
     * @summary Values for all settings without workspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveAllSettingsWithoutWorkspace: (options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Resolves values for requested entitlements in the organization.
     * @summary Values for requested public entitlements.
     * @param {EntitlementsRequest} entitlementsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveRequestedEntitlements: (entitlementsRequest: EntitlementsRequest, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Resolves values for selected settings without workspace by current user, organization, or default settings.
     * @summary Values for selected settings without workspace.
     * @param {ResolveSettingsRequest} resolveSettingsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveSettingsWithoutWorkspace: (resolveSettingsRequest: ResolveSettingsRequest, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Resolves values for all settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for all settings.
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceResolveAllSettings: (workspaceId: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Resolves value for selected settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for selected settings.
     * @param {string} workspaceId
     * @param {ResolveSettingsRequest} resolveSettingsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceResolveSettings: (workspaceId: string, resolveSettingsRequest: ResolveSettingsRequest, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * Request parameters for checkEntityOverrides operation in ActionsApi.
 * @export
 * @interface ActionsApiCheckEntityOverridesRequest
 */
export declare interface ActionsApiCheckEntityOverridesRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiCheckEntityOverrides
     */
    readonly workspaceId: string;
    /**
     *
     * @type {Array<HierarchyObjectIdentification>}
     * @memberof ActionsApiCheckEntityOverrides
     */
    readonly hierarchyObjectIdentification: Array<HierarchyObjectIdentification>;
}

/**
 * Request parameters for computeLabelElementsPost operation in ActionsApi.
 * @export
 * @interface ActionsApiComputeLabelElementsPostRequest
 */
export declare interface ActionsApiComputeLabelElementsPostRequest {
    /**
     * Workspace identifier
     * @type {string}
     * @memberof ActionsApiComputeLabelElementsPost
     */
    readonly workspaceId: string;
    /**
     *
     * @type {ElementsRequest}
     * @memberof ActionsApiComputeLabelElementsPost
     */
    readonly elementsRequest: ElementsRequest;
    /**
     * Request page with this offset. Must be positive integer. The API is limited to the maximum of 10000 items. Therefore this parameter is limited to this number as well.
     * @type {number}
     * @memberof ActionsApiComputeLabelElementsPost
     */
    readonly offset?: number;
    /**
     * Return only this number of items. Must be positive integer. The API is limited to the maximum of 10000 items. Therefore this parameter is limited to this number as well.
     * @type {number}
     * @memberof ActionsApiComputeLabelElementsPost
     */
    readonly limit?: number;
    /**
     * Ignore all caches during execution of current request.
     * @type {boolean}
     * @memberof ActionsApiComputeLabelElementsPost
     */
    readonly skipCache?: boolean;
}

/**
 * Request parameters for computeReport operation in ActionsApi.
 * @export
 * @interface ActionsApiComputeReportRequest
 */
export declare interface ActionsApiComputeReportRequest {
    /**
     * Workspace identifier
     * @type {string}
     * @memberof ActionsApiComputeReport
     */
    readonly workspaceId: string;
    /**
     *
     * @type {AfmExecution}
     * @memberof ActionsApiComputeReport
     */
    readonly afmExecution: AfmExecution;
    /**
     * Ignore all caches during execution of current request.
     * @type {boolean}
     * @memberof ActionsApiComputeReport
     */
    readonly skipCache?: boolean;
    /**
     *
     * @type {string}
     * @memberof ActionsApiComputeReport
     */
    readonly timestamp?: string;
}

/**
 * Request parameters for computeValidDescendants operation in ActionsApi.
 * @export
 * @interface ActionsApiComputeValidDescendantsRequest
 */
export declare interface ActionsApiComputeValidDescendantsRequest {
    /**
     * Workspace identifier
     * @type {string}
     * @memberof ActionsApiComputeValidDescendants
     */
    readonly workspaceId: string;
    /**
     *
     * @type {AfmValidDescendantsQuery}
     * @memberof ActionsApiComputeValidDescendants
     */
    readonly afmValidDescendantsQuery: AfmValidDescendantsQuery;
}

/**
 * Request parameters for computeValidObjects operation in ActionsApi.
 * @export
 * @interface ActionsApiComputeValidObjectsRequest
 */
export declare interface ActionsApiComputeValidObjectsRequest {
    /**
     * Workspace identifier
     * @type {string}
     * @memberof ActionsApiComputeValidObjects
     */
    readonly workspaceId: string;
    /**
     *
     * @type {AfmValidObjectsQuery}
     * @memberof ActionsApiComputeValidObjects
     */
    readonly afmValidObjectsQuery: AfmValidObjectsQuery;
}

/**
 * Request parameters for createPdfExport operation in ActionsApi.
 * @export
 * @interface ActionsApiCreatePdfExportRequest
 */
export declare interface ActionsApiCreatePdfExportRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiCreatePdfExport
     */
    readonly workspaceId: string;
    /**
     *
     * @type {PdfExportRequest}
     * @memberof ActionsApiCreatePdfExport
     */
    readonly pdfExportRequest: PdfExportRequest;
}

/**
 * Request parameters for createTabularExport operation in ActionsApi.
 * @export
 * @interface ActionsApiCreateTabularExportRequest
 */
export declare interface ActionsApiCreateTabularExportRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiCreateTabularExport
     */
    readonly workspaceId: string;
    /**
     *
     * @type {TabularExportRequest}
     * @memberof ActionsApiCreateTabularExport
     */
    readonly tabularExportRequest: TabularExportRequest;
}

/**
 * Request parameters for dashboardPermissions operation in ActionsApi.
 * @export
 * @interface ActionsApiDashboardPermissionsRequest
 */
export declare interface ActionsApiDashboardPermissionsRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiDashboardPermissions
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof ActionsApiDashboardPermissions
     */
    readonly dashboardId: string;
}

/**
 * Request parameters for explainAFM operation in ActionsApi.
 * @export
 * @interface ActionsApiExplainAFMRequest
 */
export declare interface ActionsApiExplainAFMRequest {
    /**
     * Workspace identifier
     * @type {string}
     * @memberof ActionsApiExplainAFM
     */
    readonly workspaceId: string;
    /**
     *
     * @type {AfmExecution}
     * @memberof ActionsApiExplainAFM
     */
    readonly afmExecution: AfmExecution;
    /**
     * Requested explain type. If not specified all types are bundled in a ZIP archive.  &#x60;MAQL&#x60; - MAQL Abstract Syntax Tree, execution dimensions and related info  &#x60;GRPC_MODEL&#x60; - Datasets used in execution  &#x60;GRPC_MODEL_SVG&#x60; - Generated SVG image of the datasets  &#x60;WDF&#x60; - Workspace data filters in execution workspace context  &#x60;QT&#x60; - Query Tree, created from MAQL AST using Logical Data Model,  contains all information needed to generate SQL  &#x60;QT_SVG&#x60; - Generated SVG image of the Query Tree  &#x60;OPT_QT&#x60; - Optimized Query Tree  &#x60;OPT_QT_SVG&#x60; - Generated SVG image of the Optimized Query Tree  &#x60;SQL&#x60; - Final SQL to be executed  &#x60;SETTINGS&#x60; - Settings used to execute explain request
     * @type {'MAQL' | 'GRPC_MODEL' | 'GRPC_MODEL_SVG' | 'WDF' | 'QT' | 'QT_SVG' | 'OPT_QT' | 'OPT_QT_SVG' | 'SQL' | 'SETTINGS'}
     * @memberof ActionsApiExplainAFM
     */
    readonly explainType?: "MAQL" | "GRPC_MODEL" | "GRPC_MODEL_SVG" | "WDF" | "QT" | "QT_SVG" | "OPT_QT" | "OPT_QT_SVG" | "SQL" | "SETTINGS";
}

/**
 * ActionsApi - factory interface
 * @export
 */
export declare const ActionsApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    allPlatformUsage(options?: AxiosRequestConfig): AxiosPromise<Array<PlatformUsage>>;
    /**
     *
     * @summary Get Available Assignees
     * @param {ActionsApiAvailableAssigneesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    availableAssignees(requestParameters: ActionsApiAvailableAssigneesRequest, options?: AxiosRequestConfig): AxiosPromise<AvailableAssignees>;
    /**
     * Finds entities with given ID in hierarchy (e.g. to check possible future conflicts).
     * @summary Finds entities with given ID in hierarchy.
     * @param {ActionsApiCheckEntityOverridesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkEntityOverrides(requestParameters: ActionsApiCheckEntityOverridesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<IdentifierDuplications>>;
    /**
     *
     * @summary Get Dashboard Permissions
     * @param {ActionsApiDashboardPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardPermissions(requestParameters: ActionsApiDashboardPermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<DashboardPermissions>;
    /**
     * Generate logical data model (LDM) from physical data model (PDM) stored in data source.
     * @summary Generate logical data model (LDM) from physical data model (PDM)
     * @param {ActionsApiGenerateLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateLogicalModel(requestParameters: ActionsApiGenerateLogicalModelRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeModel>;
    /**
     * Computes the dependent entities graph
     * @summary Computes the dependent entities graph
     * @param {ActionsApiGetDependentEntitiesGraphRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDependentEntitiesGraph(requestParameters: ActionsApiGetDependentEntitiesGraphRequest, options?: AxiosRequestConfig): AxiosPromise<DependentEntitiesResponse>;
    /**
     * Computes the dependent entities graph from given entry points
     * @summary Computes the dependent entities graph from given entry points
     * @param {ActionsApiGetDependentEntitiesGraphFromEntryPointsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDependentEntitiesGraphFromEntryPoints(requestParameters: ActionsApiGetDependentEntitiesGraphFromEntryPointsRequest, options?: AxiosRequestConfig): AxiosPromise<DependentEntitiesResponse>;
    /**
     * Finds API identifier conflicts in given workspace hierarchy.
     * @summary Finds API identifier conflicts in given workspace hierarchy.
     * @param {ActionsApiInheritedEntityConflictsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inheritedEntityConflicts(requestParameters: ActionsApiInheritedEntityConflictsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<IdentifierDuplications>>;
    /**
     * Get used entity prefixes in hierarchy of parent workspaces
     * @summary Get used entity prefixes in hierarchy
     * @param {ActionsApiInheritedEntityPrefixesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inheritedEntityPrefixes(requestParameters: ActionsApiInheritedEntityPrefixesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<string>>;
    /**
     *
     * @summary Manage Permissions for a Dashboard
     * @param {ActionsApiManageDashboardPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    manageDashboardPermissions(requestParameters: ActionsApiManageDashboardPermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Finds API identifier overrides in given workspace hierarchy.
     * @summary Finds API identifier overrides in given workspace hierarchy.
     * @param {ActionsApiOverriddenChildEntitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    overriddenChildEntities(requestParameters: ActionsApiOverriddenChildEntitiesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<IdentifierDuplications>>;
    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage for particular items.
     * @param {ActionsApiParticularPlatformUsageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    particularPlatformUsage(requestParameters: ActionsApiParticularPlatformUsageRequest, options?: AxiosRequestConfig): AxiosPromise<Array<PlatformUsage>>;
    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {ActionsApiRegisterUploadNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerUploadNotification(requestParameters: ActionsApiRegisterUploadNotificationRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Resolves values of available entitlements for the organization.
     * @summary Values for all public entitlements.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveAllEntitlements(options?: AxiosRequestConfig): AxiosPromise<Array<ApiEntitlement>>;
    /**
     * Resolves values for all settings without workspace by current user, organization, or default settings.
     * @summary Values for all settings without workspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveAllSettingsWithoutWorkspace(options?: AxiosRequestConfig): AxiosPromise<Array<ResolvedSetting>>;
    /**
     * Resolves values for requested entitlements in the organization.
     * @summary Values for requested public entitlements.
     * @param {ActionsApiResolveRequestedEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveRequestedEntitlements(requestParameters: ActionsApiResolveRequestedEntitlementsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ApiEntitlement>>;
    /**
     * Resolves values for selected settings without workspace by current user, organization, or default settings.
     * @summary Values for selected settings without workspace.
     * @param {ActionsApiResolveSettingsWithoutWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveSettingsWithoutWorkspace(requestParameters: ActionsApiResolveSettingsWithoutWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ResolvedSetting>>;
    /**
     * Resolves values for all settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for all settings.
     * @param {ActionsApiWorkspaceResolveAllSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceResolveAllSettings(requestParameters: ActionsApiWorkspaceResolveAllSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ResolvedSetting>>;
    /**
     * Resolves value for selected settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for selected settings.
     * @param {ActionsApiWorkspaceResolveSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceResolveSettings(requestParameters: ActionsApiWorkspaceResolveSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ResolvedSetting>>;
};

/**
 * ActionsApi - functional programming interface
 * @export
 */
export declare const ActionsApiFp: (configuration?: MetadataConfiguration) => {
    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    allPlatformUsage(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlatformUsage>>>;
    /**
     *
     * @summary Get Available Assignees
     * @param {string} workspaceId
     * @param {string} dashboardId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    availableAssignees(workspaceId: string, dashboardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvailableAssignees>>;
    /**
     * Finds entities with given ID in hierarchy (e.g. to check possible future conflicts).
     * @summary Finds entities with given ID in hierarchy.
     * @param {string} workspaceId
     * @param {Array<HierarchyObjectIdentification>} hierarchyObjectIdentification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkEntityOverrides(workspaceId: string, hierarchyObjectIdentification: Array<HierarchyObjectIdentification>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdentifierDuplications>>>;
    /**
     *
     * @summary Get Dashboard Permissions
     * @param {string} workspaceId
     * @param {string} dashboardId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardPermissions(workspaceId: string, dashboardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardPermissions>>;
    /**
     * Generate logical data model (LDM) from physical data model (PDM) stored in data source.
     * @summary Generate logical data model (LDM) from physical data model (PDM)
     * @param {string} dataSourceId
     * @param {GenerateLdmRequest} generateLdmRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateLogicalModel(dataSourceId: string, generateLdmRequest: GenerateLdmRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeModel>>;
    /**
     * Computes the dependent entities graph
     * @summary Computes the dependent entities graph
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDependentEntitiesGraph(workspaceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DependentEntitiesResponse>>;
    /**
     * Computes the dependent entities graph from given entry points
     * @summary Computes the dependent entities graph from given entry points
     * @param {string} workspaceId
     * @param {DependentEntitiesRequest} dependentEntitiesRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDependentEntitiesGraphFromEntryPoints(workspaceId: string, dependentEntitiesRequest: DependentEntitiesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DependentEntitiesResponse>>;
    /**
     * Finds API identifier conflicts in given workspace hierarchy.
     * @summary Finds API identifier conflicts in given workspace hierarchy.
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inheritedEntityConflicts(workspaceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdentifierDuplications>>>;
    /**
     * Get used entity prefixes in hierarchy of parent workspaces
     * @summary Get used entity prefixes in hierarchy
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inheritedEntityPrefixes(workspaceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>>;
    /**
     *
     * @summary Manage Permissions for a Dashboard
     * @param {string} workspaceId
     * @param {string} dashboardId
     * @param {Array<PermissionsForAssignee>} permissionsForAssignee
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    manageDashboardPermissions(workspaceId: string, dashboardId: string, permissionsForAssignee: Array<PermissionsForAssignee>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Finds API identifier overrides in given workspace hierarchy.
     * @summary Finds API identifier overrides in given workspace hierarchy.
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    overriddenChildEntities(workspaceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdentifierDuplications>>>;
    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage for particular items.
     * @param {PlatformUsageRequest} platformUsageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    particularPlatformUsage(platformUsageRequest: PlatformUsageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlatformUsage>>>;
    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerUploadNotification(dataSourceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Resolves values of available entitlements for the organization.
     * @summary Values for all public entitlements.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveAllEntitlements(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiEntitlement>>>;
    /**
     * Resolves values for all settings without workspace by current user, organization, or default settings.
     * @summary Values for all settings without workspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveAllSettingsWithoutWorkspace(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResolvedSetting>>>;
    /**
     * Resolves values for requested entitlements in the organization.
     * @summary Values for requested public entitlements.
     * @param {EntitlementsRequest} entitlementsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveRequestedEntitlements(entitlementsRequest: EntitlementsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiEntitlement>>>;
    /**
     * Resolves values for selected settings without workspace by current user, organization, or default settings.
     * @summary Values for selected settings without workspace.
     * @param {ResolveSettingsRequest} resolveSettingsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveSettingsWithoutWorkspace(resolveSettingsRequest: ResolveSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResolvedSetting>>>;
    /**
     * Resolves values for all settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for all settings.
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceResolveAllSettings(workspaceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResolvedSetting>>>;
    /**
     * Resolves value for selected settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for selected settings.
     * @param {string} workspaceId
     * @param {ResolveSettingsRequest} resolveSettingsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceResolveSettings(workspaceId: string, resolveSettingsRequest: ResolveSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResolvedSetting>>>;
};

/**
 * Request parameters for generateLogicalModel operation in ActionsApi.
 * @export
 * @interface ActionsApiGenerateLogicalModelRequest
 */
export declare interface ActionsApiGenerateLogicalModelRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiGenerateLogicalModel
     */
    readonly dataSourceId: string;
    /**
     *
     * @type {GenerateLdmRequest}
     * @memberof ActionsApiGenerateLogicalModel
     */
    readonly generateLdmRequest: GenerateLdmRequest;
}

/**
 * Request parameters for getDataSourceSchemata operation in ActionsApi.
 * @export
 * @interface ActionsApiGetDataSourceSchemataRequest
 */
export declare interface ActionsApiGetDataSourceSchemataRequest {
    /**
     * Data source id
     * @type {string}
     * @memberof ActionsApiGetDataSourceSchemata
     */
    readonly dataSourceId: string;
}

/**
 * Request parameters for getDependentEntitiesGraphFromEntryPoints operation in ActionsApi.
 * @export
 * @interface ActionsApiGetDependentEntitiesGraphFromEntryPointsRequest
 */
export declare interface ActionsApiGetDependentEntitiesGraphFromEntryPointsRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiGetDependentEntitiesGraphFromEntryPoints
     */
    readonly workspaceId: string;
    /**
     *
     * @type {DependentEntitiesRequest}
     * @memberof ActionsApiGetDependentEntitiesGraphFromEntryPoints
     */
    readonly dependentEntitiesRequest: DependentEntitiesRequest;
}

/**
 * Request parameters for getDependentEntitiesGraph operation in ActionsApi.
 * @export
 * @interface ActionsApiGetDependentEntitiesGraphRequest
 */
export declare interface ActionsApiGetDependentEntitiesGraphRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiGetDependentEntitiesGraph
     */
    readonly workspaceId: string;
}

/**
 * Request parameters for getExportedFile operation in ActionsApi.
 * @export
 * @interface ActionsApiGetExportedFileRequest
 */
export declare interface ActionsApiGetExportedFileRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiGetExportedFile
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof ActionsApiGetExportedFile
     */
    readonly exportId: string;
}

/**
 * Request parameters for getMetadata operation in ActionsApi.
 * @export
 * @interface ActionsApiGetMetadataRequest
 */
export declare interface ActionsApiGetMetadataRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiGetMetadata
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof ActionsApiGetMetadata
     */
    readonly exportId: string;
}

/**
 * Request parameters for getTabularExport operation in ActionsApi.
 * @export
 * @interface ActionsApiGetTabularExportRequest
 */
export declare interface ActionsApiGetTabularExportRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiGetTabularExport
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof ActionsApiGetTabularExport
     */
    readonly exportId: string;
}

/**
 * Request parameters for inheritedEntityConflicts operation in ActionsApi.
 * @export
 * @interface ActionsApiInheritedEntityConflictsRequest
 */
export declare interface ActionsApiInheritedEntityConflictsRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiInheritedEntityConflicts
     */
    readonly workspaceId: string;
}

/**
 * Request parameters for inheritedEntityPrefixes operation in ActionsApi.
 * @export
 * @interface ActionsApiInheritedEntityPrefixesRequest
 */
export declare interface ActionsApiInheritedEntityPrefixesRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiInheritedEntityPrefixes
     */
    readonly workspaceId: string;
}

/**
 * ActionsApi - interface
 * @export
 * @interface ActionsApi
 */
export declare interface ActionsApiInterface {
    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    allPlatformUsage(options?: AxiosRequestConfig): AxiosPromise<Array<PlatformUsage>>;
    /**
     *
     * @summary Get Available Assignees
     * @param {ActionsApiAvailableAssigneesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    availableAssignees(requestParameters: ActionsApiAvailableAssigneesRequest, options?: AxiosRequestConfig): AxiosPromise<AvailableAssignees>;
    /**
     * Finds entities with given ID in hierarchy (e.g. to check possible future conflicts).
     * @summary Finds entities with given ID in hierarchy.
     * @param {ActionsApiCheckEntityOverridesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    checkEntityOverrides(requestParameters: ActionsApiCheckEntityOverridesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<IdentifierDuplications>>;
    /**
     *
     * @summary Get Dashboard Permissions
     * @param {ActionsApiDashboardPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    dashboardPermissions(requestParameters: ActionsApiDashboardPermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<DashboardPermissions>;
    /**
     * Generate logical data model (LDM) from physical data model (PDM) stored in data source.
     * @summary Generate logical data model (LDM) from physical data model (PDM)
     * @param {ActionsApiGenerateLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    generateLogicalModel(requestParameters: ActionsApiGenerateLogicalModelRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeModel>;
    /**
     * Computes the dependent entities graph
     * @summary Computes the dependent entities graph
     * @param {ActionsApiGetDependentEntitiesGraphRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    getDependentEntitiesGraph(requestParameters: ActionsApiGetDependentEntitiesGraphRequest, options?: AxiosRequestConfig): AxiosPromise<DependentEntitiesResponse>;
    /**
     * Computes the dependent entities graph from given entry points
     * @summary Computes the dependent entities graph from given entry points
     * @param {ActionsApiGetDependentEntitiesGraphFromEntryPointsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    getDependentEntitiesGraphFromEntryPoints(requestParameters: ActionsApiGetDependentEntitiesGraphFromEntryPointsRequest, options?: AxiosRequestConfig): AxiosPromise<DependentEntitiesResponse>;
    /**
     * Finds API identifier conflicts in given workspace hierarchy.
     * @summary Finds API identifier conflicts in given workspace hierarchy.
     * @param {ActionsApiInheritedEntityConflictsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    inheritedEntityConflicts(requestParameters: ActionsApiInheritedEntityConflictsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<IdentifierDuplications>>;
    /**
     * Get used entity prefixes in hierarchy of parent workspaces
     * @summary Get used entity prefixes in hierarchy
     * @param {ActionsApiInheritedEntityPrefixesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    inheritedEntityPrefixes(requestParameters: ActionsApiInheritedEntityPrefixesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<string>>;
    /**
     *
     * @summary Manage Permissions for a Dashboard
     * @param {ActionsApiManageDashboardPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    manageDashboardPermissions(requestParameters: ActionsApiManageDashboardPermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Finds API identifier overrides in given workspace hierarchy.
     * @summary Finds API identifier overrides in given workspace hierarchy.
     * @param {ActionsApiOverriddenChildEntitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    overriddenChildEntities(requestParameters: ActionsApiOverriddenChildEntitiesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<IdentifierDuplications>>;
    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage for particular items.
     * @param {ActionsApiParticularPlatformUsageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    particularPlatformUsage(requestParameters: ActionsApiParticularPlatformUsageRequest, options?: AxiosRequestConfig): AxiosPromise<Array<PlatformUsage>>;
    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {ActionsApiRegisterUploadNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    registerUploadNotification(requestParameters: ActionsApiRegisterUploadNotificationRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Resolves values of available entitlements for the organization.
     * @summary Values for all public entitlements.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    resolveAllEntitlements(options?: AxiosRequestConfig): AxiosPromise<Array<ApiEntitlement>>;
    /**
     * Resolves values for all settings without workspace by current user, organization, or default settings.
     * @summary Values for all settings without workspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    resolveAllSettingsWithoutWorkspace(options?: AxiosRequestConfig): AxiosPromise<Array<ResolvedSetting>>;
    /**
     * Resolves values for requested entitlements in the organization.
     * @summary Values for requested public entitlements.
     * @param {ActionsApiResolveRequestedEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    resolveRequestedEntitlements(requestParameters: ActionsApiResolveRequestedEntitlementsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ApiEntitlement>>;
    /**
     * Resolves values for selected settings without workspace by current user, organization, or default settings.
     * @summary Values for selected settings without workspace.
     * @param {ActionsApiResolveSettingsWithoutWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    resolveSettingsWithoutWorkspace(requestParameters: ActionsApiResolveSettingsWithoutWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ResolvedSetting>>;
    /**
     * Resolves values for all settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for all settings.
     * @param {ActionsApiWorkspaceResolveAllSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    workspaceResolveAllSettings(requestParameters: ActionsApiWorkspaceResolveAllSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ResolvedSetting>>;
    /**
     * Resolves value for selected settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for selected settings.
     * @param {ActionsApiWorkspaceResolveSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    workspaceResolveSettings(requestParameters: ActionsApiWorkspaceResolveSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ResolvedSetting>>;
}

/**
 * Request parameters for manageDashboardPermissions operation in ActionsApi.
 * @export
 * @interface ActionsApiManageDashboardPermissionsRequest
 */
export declare interface ActionsApiManageDashboardPermissionsRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiManageDashboardPermissions
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof ActionsApiManageDashboardPermissions
     */
    readonly dashboardId: string;
    /**
     *
     * @type {Array<PermissionsForAssignee>}
     * @memberof ActionsApiManageDashboardPermissions
     */
    readonly permissionsForAssignee: Array<PermissionsForAssignee>;
}

/**
 * Request parameters for overriddenChildEntities operation in ActionsApi.
 * @export
 * @interface ActionsApiOverriddenChildEntitiesRequest
 */
export declare interface ActionsApiOverriddenChildEntitiesRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiOverriddenChildEntities
     */
    readonly workspaceId: string;
}

/**
 * Request parameters for particularPlatformUsage operation in ActionsApi.
 * @export
 * @interface ActionsApiParticularPlatformUsageRequest
 */
export declare interface ActionsApiParticularPlatformUsageRequest {
    /**
     *
     * @type {PlatformUsageRequest}
     * @memberof ActionsApiParticularPlatformUsage
     */
    readonly platformUsageRequest: PlatformUsageRequest;
}

/**
 * Request parameters for processInvitation operation in ActionsApi.
 * @export
 * @interface ActionsApiProcessInvitationRequest
 */
export declare interface ActionsApiProcessInvitationRequest {
    /**
     *
     * @type {Invitation}
     * @memberof ActionsApiProcessInvitation
     */
    readonly invitation: Invitation;
}

/**
 * Request parameters for registerUploadNotification operation in ActionsApi.
 * @export
 * @interface ActionsApiRegisterUploadNotificationRequest
 */
export declare interface ActionsApiRegisterUploadNotificationRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiRegisterUploadNotification
     */
    readonly dataSourceId: string;
}

/**
 * Request parameters for resolveRequestedEntitlements operation in ActionsApi.
 * @export
 * @interface ActionsApiResolveRequestedEntitlementsRequest
 */
export declare interface ActionsApiResolveRequestedEntitlementsRequest {
    /**
     *
     * @type {EntitlementsRequest}
     * @memberof ActionsApiResolveRequestedEntitlements
     */
    readonly entitlementsRequest: EntitlementsRequest;
}

/**
 * Request parameters for resolveSettingsWithoutWorkspace operation in ActionsApi.
 * @export
 * @interface ActionsApiResolveSettingsWithoutWorkspaceRequest
 */
export declare interface ActionsApiResolveSettingsWithoutWorkspaceRequest {
    /**
     *
     * @type {ResolveSettingsRequest}
     * @memberof ActionsApiResolveSettingsWithoutWorkspace
     */
    readonly resolveSettingsRequest: ResolveSettingsRequest;
}

/**
 * Request parameters for retrieveExecutionMetadata operation in ActionsApi.
 * @export
 * @interface ActionsApiRetrieveExecutionMetadataRequest
 */
export declare interface ActionsApiRetrieveExecutionMetadataRequest {
    /**
     * Workspace identifier
     * @type {string}
     * @memberof ActionsApiRetrieveExecutionMetadata
     */
    readonly workspaceId: string;
    /**
     * Result ID
     * @type {string}
     * @memberof ActionsApiRetrieveExecutionMetadata
     */
    readonly resultId: string;
}

/**
 * Request parameters for retrieveResult operation in ActionsApi.
 * @export
 * @interface ActionsApiRetrieveResultRequest
 */
export declare interface ActionsApiRetrieveResultRequest {
    /**
     * Workspace identifier
     * @type {string}
     * @memberof ActionsApiRetrieveResult
     */
    readonly workspaceId: string;
    /**
     * Result ID
     * @type {string}
     * @memberof ActionsApiRetrieveResult
     */
    readonly resultId: string;
    /**
     * Request page with these offsets. Format is offset&#x3D;1,2,3,... - one offset for each dimensions in ResultSpec from originating AFM.
     * @type {Array<number>}
     * @memberof ActionsApiRetrieveResult
     */
    readonly offset?: Array<number>;
    /**
     * Return only this number of items. Format is limit&#x3D;1,2,3,... - one limit for each dimensions in ResultSpec from originating AFM.
     * @type {Array<number>}
     * @memberof ActionsApiRetrieveResult
     */
    readonly limit?: Array<number>;
    /**
     * Identifiers of the dimensions where grand total data should not be returned for this request. A grand total will not be returned if all of its totalDimensions are in excludedTotalDimensions.
     * @type {Array<string>}
     * @memberof ActionsApiRetrieveResult
     */
    readonly excludedTotalDimensions?: Array<string>;
}

/**
 * Request parameters for scanDataSource operation in ActionsApi.
 * @export
 * @interface ActionsApiScanDataSourceRequest
 */
export declare interface ActionsApiScanDataSourceRequest {
    /**
     * Data source id
     * @type {string}
     * @memberof ActionsApiScanDataSource
     */
    readonly dataSourceId: string;
    /**
     *
     * @type {ScanRequest}
     * @memberof ActionsApiScanDataSource
     */
    readonly scanRequest: ScanRequest;
}

/**
 * Request parameters for scanSql operation in ActionsApi.
 * @export
 * @interface ActionsApiScanSqlRequest
 */
export declare interface ActionsApiScanSqlRequest {
    /**
     * Data source id
     * @type {string}
     * @memberof ActionsApiScanSql
     */
    readonly dataSourceId: string;
    /**
     *
     * @type {ScanSqlRequest}
     * @memberof ActionsApiScanSql
     */
    readonly scanSqlRequest: ScanSqlRequest;
}

/**
 * Request parameters for testDataSourceDefinition operation in ActionsApi.
 * @export
 * @interface ActionsApiTestDataSourceDefinitionRequest
 */
export declare interface ActionsApiTestDataSourceDefinitionRequest {
    /**
     *
     * @type {TestDefinitionRequest}
     * @memberof ActionsApiTestDataSourceDefinition
     */
    readonly testDefinitionRequest: TestDefinitionRequest;
}

/**
 * Request parameters for testDataSource operation in ActionsApi.
 * @export
 * @interface ActionsApiTestDataSourceRequest
 */
export declare interface ActionsApiTestDataSourceRequest {
    /**
     * Data source id
     * @type {string}
     * @memberof ActionsApiTestDataSource
     */
    readonly dataSourceId: string;
    /**
     *
     * @type {TestRequest}
     * @memberof ActionsApiTestDataSource
     */
    readonly testRequest: TestRequest;
}

/**
 * Request parameters for workspaceResolveAllSettings operation in ActionsApi.
 * @export
 * @interface ActionsApiWorkspaceResolveAllSettingsRequest
 */
export declare interface ActionsApiWorkspaceResolveAllSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiWorkspaceResolveAllSettings
     */
    readonly workspaceId: string;
}

/**
 * Request parameters for workspaceResolveSettings operation in ActionsApi.
 * @export
 * @interface ActionsApiWorkspaceResolveSettingsRequest
 */
export declare interface ActionsApiWorkspaceResolveSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof ActionsApiWorkspaceResolveSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {ResolveSettingsRequest}
     * @memberof ActionsApiWorkspaceResolveSettings
     */
    readonly resolveSettingsRequest: ResolveSettingsRequest;
}

/**
 * Top level executable entity. Combination of [A]ttributes, [F]ilters & [M]etrics.
 * @export
 * @interface AFM
 */
export declare interface AFM {
    /**
     * Attributes to be used in the computation.
     * @type {Array<AttributeItem>}
     * @memberof AFM
     */
    attributes: Array<AttributeItem>;
    /**
     * Various filter types to filter execution result.
     * @type {Array<FilterDefinition>}
     * @memberof AFM
     */
    filters: Array<FilterDefinition>;
    /**
     * Metrics to be computed.
     * @type {Array<MeasureItem>}
     * @memberof AFM
     */
    measures: Array<MeasureItem>;
    /**
     * Metrics to be referenced from other AFM objects (e.g. filters) but not included in the result.
     * @type {Array<MeasureItem>}
     * @memberof AFM
     */
    auxMeasures?: Array<MeasureItem>;
}

/**
 * ActionsApi - object-oriented interface
 * @export
 * @class ActionsApi
 * @extends {BaseAPI}
 */
export declare class AfmActionsApi extends LabelElementsBaseApi implements AfmActionsApiInterface {
    /**
     * Returns paged list of elements (values) of given label satisfying given filtering criteria.
     * @summary Listing of label values. The resulting data are limited by the static platform limit to the maximum of 10000 rows.
     * @param {ActionsApiComputeLabelElementsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    computeLabelElementsPost(requestParameters: ActionsApiComputeLabelElementsPostRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ElementsResponse, any>>;
    /**
     * AFM is a combination of attributes, measures and filters that describe a query you want to execute.
     * @summary Executes analytical request and returns link to the result
     * @param {ActionsApiComputeReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    computeReport(requestParameters: ActionsApiComputeReportRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<AfmExecutionResponse, any>>;
    /**
     * (BETA) Returns map of lists of attributes that can be used as descendants of the given attributes.
     * @summary (BETA) Valid descendants
     * @param {ActionsApiComputeValidDescendantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    computeValidDescendants(requestParameters: ActionsApiComputeValidDescendantsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<AfmValidDescendantsResponse, any>>;
    /**
     * Returns list containing attributes, facts, or metrics, which can be added to given AFM while still keeping it computable.
     * @summary Valid objects
     * @param {ActionsApiComputeValidObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    computeValidObjects(requestParameters: ActionsApiComputeValidObjectsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<AfmValidObjectsResponse, any>>;
    /**
     * The resource provides static structures needed for investigation of a problem with given AFM.
     * @summary AFM explain resource.
     * @param {ActionsApiExplainAFMRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    explainAFM(requestParameters: ActionsApiExplainAFMRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<any, any>>;
    /**
     * The resource provides execution result\'s metadata as AFM and resultSpec used in execution request and an executionResponse
     * @summary Get a single execution result\'s metadata.
     * @param {ActionsApiRetrieveExecutionMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    retrieveExecutionMetadata(requestParameters: ActionsApiRetrieveExecutionMetadataRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ResultCacheMetadata, any>>;
    /**
     * Gets a single execution result.
     * @summary Get a single execution result
     * @param {ActionsApiRetrieveResultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    retrieveResult(requestParameters: ActionsApiRetrieveResultRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ExecutionResult, any>>;
}

/**
 * ActionsApi - axios parameter creator
 * @export
 */
export declare const AfmActionsApiAxiosParamCreator: (configuration?: LabelElementsConfiguration) => {
    /**
     * Returns paged list of elements (values) of given label satisfying given filtering criteria.
     * @summary Listing of label values. The resulting data are limited by the static platform limit to the maximum of 10000 rows.
     * @param {string} workspaceId Workspace identifier
     * @param {ElementsRequest} elementsRequest
     * @param {number} [offset] Request page with this offset. Must be positive integer. The API is limited to the maximum of 10000 items. Therefore this parameter is limited to this number as well.
     * @param {number} [limit] Return only this number of items. Must be positive integer. The API is limited to the maximum of 10000 items. Therefore this parameter is limited to this number as well.
     * @param {boolean} [skipCache] Ignore all caches during execution of current request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    computeLabelElementsPost: (workspaceId: string, elementsRequest: ElementsRequest, offset?: number, limit?: number, skipCache?: boolean, options?: AxiosRequestConfig) => Promise<LabelElementsRequestArgs>;
    /**
     * AFM is a combination of attributes, measures and filters that describe a query you want to execute.
     * @summary Executes analytical request and returns link to the result
     * @param {string} workspaceId Workspace identifier
     * @param {AfmExecution} afmExecution
     * @param {boolean} [skipCache] Ignore all caches during execution of current request.
     * @param {string} [timestamp]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    computeReport: (workspaceId: string, afmExecution: AfmExecution, skipCache?: boolean, timestamp?: string, options?: AxiosRequestConfig) => Promise<LabelElementsRequestArgs>;
    /**
     * (BETA) Returns map of lists of attributes that can be used as descendants of the given attributes.
     * @summary (BETA) Valid descendants
     * @param {string} workspaceId Workspace identifier
     * @param {AfmValidDescendantsQuery} afmValidDescendantsQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    computeValidDescendants: (workspaceId: string, afmValidDescendantsQuery: AfmValidDescendantsQuery, options?: AxiosRequestConfig) => Promise<LabelElementsRequestArgs>;
    /**
     * Returns list containing attributes, facts, or metrics, which can be added to given AFM while still keeping it computable.
     * @summary Valid objects
     * @param {string} workspaceId Workspace identifier
     * @param {AfmValidObjectsQuery} afmValidObjectsQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    computeValidObjects: (workspaceId: string, afmValidObjectsQuery: AfmValidObjectsQuery, options?: AxiosRequestConfig) => Promise<LabelElementsRequestArgs>;
    /**
     * The resource provides static structures needed for investigation of a problem with given AFM.
     * @summary AFM explain resource.
     * @param {string} workspaceId Workspace identifier
     * @param {AfmExecution} afmExecution
     * @param {'MAQL' | 'GRPC_MODEL' | 'GRPC_MODEL_SVG' | 'WDF' | 'QT' | 'QT_SVG' | 'OPT_QT' | 'OPT_QT_SVG' | 'SQL' | 'SETTINGS'} [explainType] Requested explain type. If not specified all types are bundled in a ZIP archive.  &#x60;MAQL&#x60; - MAQL Abstract Syntax Tree, execution dimensions and related info  &#x60;GRPC_MODEL&#x60; - Datasets used in execution  &#x60;GRPC_MODEL_SVG&#x60; - Generated SVG image of the datasets  &#x60;WDF&#x60; - Workspace data filters in execution workspace context  &#x60;QT&#x60; - Query Tree, created from MAQL AST using Logical Data Model,  contains all information needed to generate SQL  &#x60;QT_SVG&#x60; - Generated SVG image of the Query Tree  &#x60;OPT_QT&#x60; - Optimized Query Tree  &#x60;OPT_QT_SVG&#x60; - Generated SVG image of the Optimized Query Tree  &#x60;SQL&#x60; - Final SQL to be executed  &#x60;SETTINGS&#x60; - Settings used to execute explain request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explainAFM: (workspaceId: string, afmExecution: AfmExecution, explainType?: "MAQL" | "GRPC_MODEL" | "GRPC_MODEL_SVG" | "WDF" | "QT" | "QT_SVG" | "OPT_QT" | "OPT_QT_SVG" | "SQL" | "SETTINGS", options?: AxiosRequestConfig) => Promise<LabelElementsRequestArgs>;
    /**
     * The resource provides execution result\'s metadata as AFM and resultSpec used in execution request and an executionResponse
     * @summary Get a single execution result\'s metadata.
     * @param {string} workspaceId Workspace identifier
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveExecutionMetadata: (workspaceId: string, resultId: string, options?: AxiosRequestConfig) => Promise<LabelElementsRequestArgs>;
    /**
     * Gets a single execution result.
     * @summary Get a single execution result
     * @param {string} workspaceId Workspace identifier
     * @param {string} resultId Result ID
     * @param {Array<number>} [offset] Request page with these offsets. Format is offset&#x3D;1,2,3,... - one offset for each dimensions in ResultSpec from originating AFM.
     * @param {Array<number>} [limit] Return only this number of items. Format is limit&#x3D;1,2,3,... - one limit for each dimensions in ResultSpec from originating AFM.
     * @param {Array<string>} [excludedTotalDimensions] Identifiers of the dimensions where grand total data should not be returned for this request. A grand total will not be returned if all of its totalDimensions are in excludedTotalDimensions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveResult: (workspaceId: string, resultId: string, offset?: Array<number>, limit?: Array<number>, excludedTotalDimensions?: Array<string>, options?: AxiosRequestConfig) => Promise<LabelElementsRequestArgs>;
};

/**
 * ActionsApi - factory interface
 * @export
 */
export declare const AfmActionsApiFactory: (configuration?: LabelElementsConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns paged list of elements (values) of given label satisfying given filtering criteria.
     * @summary Listing of label values. The resulting data are limited by the static platform limit to the maximum of 10000 rows.
     * @param {ActionsApiComputeLabelElementsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    computeLabelElementsPost(requestParameters: ActionsApiComputeLabelElementsPostRequest, options?: AxiosRequestConfig): AxiosPromise<ElementsResponse>;
    /**
     * AFM is a combination of attributes, measures and filters that describe a query you want to execute.
     * @summary Executes analytical request and returns link to the result
     * @param {ActionsApiComputeReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    computeReport(requestParameters: ActionsApiComputeReportRequest, options?: AxiosRequestConfig): AxiosPromise<AfmExecutionResponse>;
    /**
     * (BETA) Returns map of lists of attributes that can be used as descendants of the given attributes.
     * @summary (BETA) Valid descendants
     * @param {ActionsApiComputeValidDescendantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    computeValidDescendants(requestParameters: ActionsApiComputeValidDescendantsRequest, options?: AxiosRequestConfig): AxiosPromise<AfmValidDescendantsResponse>;
    /**
     * Returns list containing attributes, facts, or metrics, which can be added to given AFM while still keeping it computable.
     * @summary Valid objects
     * @param {ActionsApiComputeValidObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    computeValidObjects(requestParameters: ActionsApiComputeValidObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<AfmValidObjectsResponse>;
    /**
     * The resource provides static structures needed for investigation of a problem with given AFM.
     * @summary AFM explain resource.
     * @param {ActionsApiExplainAFMRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explainAFM(requestParameters: ActionsApiExplainAFMRequest, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * The resource provides execution result\'s metadata as AFM and resultSpec used in execution request and an executionResponse
     * @summary Get a single execution result\'s metadata.
     * @param {ActionsApiRetrieveExecutionMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveExecutionMetadata(requestParameters: ActionsApiRetrieveExecutionMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<ResultCacheMetadata>;
    /**
     * Gets a single execution result.
     * @summary Get a single execution result
     * @param {ActionsApiRetrieveResultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveResult(requestParameters: ActionsApiRetrieveResultRequest, options?: AxiosRequestConfig): AxiosPromise<ExecutionResult>;
};

/**
 * ActionsApi - functional programming interface
 * @export
 */
export declare const AfmActionsApiFp: (configuration?: LabelElementsConfiguration) => {
    /**
     * Returns paged list of elements (values) of given label satisfying given filtering criteria.
     * @summary Listing of label values. The resulting data are limited by the static platform limit to the maximum of 10000 rows.
     * @param {string} workspaceId Workspace identifier
     * @param {ElementsRequest} elementsRequest
     * @param {number} [offset] Request page with this offset. Must be positive integer. The API is limited to the maximum of 10000 items. Therefore this parameter is limited to this number as well.
     * @param {number} [limit] Return only this number of items. Must be positive integer. The API is limited to the maximum of 10000 items. Therefore this parameter is limited to this number as well.
     * @param {boolean} [skipCache] Ignore all caches during execution of current request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    computeLabelElementsPost(workspaceId: string, elementsRequest: ElementsRequest, offset?: number, limit?: number, skipCache?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElementsResponse>>;
    /**
     * AFM is a combination of attributes, measures and filters that describe a query you want to execute.
     * @summary Executes analytical request and returns link to the result
     * @param {string} workspaceId Workspace identifier
     * @param {AfmExecution} afmExecution
     * @param {boolean} [skipCache] Ignore all caches during execution of current request.
     * @param {string} [timestamp]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    computeReport(workspaceId: string, afmExecution: AfmExecution, skipCache?: boolean, timestamp?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AfmExecutionResponse>>;
    /**
     * (BETA) Returns map of lists of attributes that can be used as descendants of the given attributes.
     * @summary (BETA) Valid descendants
     * @param {string} workspaceId Workspace identifier
     * @param {AfmValidDescendantsQuery} afmValidDescendantsQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    computeValidDescendants(workspaceId: string, afmValidDescendantsQuery: AfmValidDescendantsQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AfmValidDescendantsResponse>>;
    /**
     * Returns list containing attributes, facts, or metrics, which can be added to given AFM while still keeping it computable.
     * @summary Valid objects
     * @param {string} workspaceId Workspace identifier
     * @param {AfmValidObjectsQuery} afmValidObjectsQuery
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    computeValidObjects(workspaceId: string, afmValidObjectsQuery: AfmValidObjectsQuery, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AfmValidObjectsResponse>>;
    /**
     * The resource provides static structures needed for investigation of a problem with given AFM.
     * @summary AFM explain resource.
     * @param {string} workspaceId Workspace identifier
     * @param {AfmExecution} afmExecution
     * @param {'MAQL' | 'GRPC_MODEL' | 'GRPC_MODEL_SVG' | 'WDF' | 'QT' | 'QT_SVG' | 'OPT_QT' | 'OPT_QT_SVG' | 'SQL' | 'SETTINGS'} [explainType] Requested explain type. If not specified all types are bundled in a ZIP archive.  &#x60;MAQL&#x60; - MAQL Abstract Syntax Tree, execution dimensions and related info  &#x60;GRPC_MODEL&#x60; - Datasets used in execution  &#x60;GRPC_MODEL_SVG&#x60; - Generated SVG image of the datasets  &#x60;WDF&#x60; - Workspace data filters in execution workspace context  &#x60;QT&#x60; - Query Tree, created from MAQL AST using Logical Data Model,  contains all information needed to generate SQL  &#x60;QT_SVG&#x60; - Generated SVG image of the Query Tree  &#x60;OPT_QT&#x60; - Optimized Query Tree  &#x60;OPT_QT_SVG&#x60; - Generated SVG image of the Optimized Query Tree  &#x60;SQL&#x60; - Final SQL to be executed  &#x60;SETTINGS&#x60; - Settings used to execute explain request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    explainAFM(workspaceId: string, afmExecution: AfmExecution, explainType?: "MAQL" | "GRPC_MODEL" | "GRPC_MODEL_SVG" | "WDF" | "QT" | "QT_SVG" | "OPT_QT" | "OPT_QT_SVG" | "SQL" | "SETTINGS", options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * The resource provides execution result\'s metadata as AFM and resultSpec used in execution request and an executionResponse
     * @summary Get a single execution result\'s metadata.
     * @param {string} workspaceId Workspace identifier
     * @param {string} resultId Result ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveExecutionMetadata(workspaceId: string, resultId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultCacheMetadata>>;
    /**
     * Gets a single execution result.
     * @summary Get a single execution result
     * @param {string} workspaceId Workspace identifier
     * @param {string} resultId Result ID
     * @param {Array<number>} [offset] Request page with these offsets. Format is offset&#x3D;1,2,3,... - one offset for each dimensions in ResultSpec from originating AFM.
     * @param {Array<number>} [limit] Return only this number of items. Format is limit&#x3D;1,2,3,... - one limit for each dimensions in ResultSpec from originating AFM.
     * @param {Array<string>} [excludedTotalDimensions] Identifiers of the dimensions where grand total data should not be returned for this request. A grand total will not be returned if all of its totalDimensions are in excludedTotalDimensions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    retrieveResult(workspaceId: string, resultId: string, offset?: Array<number>, limit?: Array<number>, excludedTotalDimensions?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecutionResult>>;
};

/**
 * ActionsApi - interface
 * @export
 * @interface ActionsApi
 */
export declare interface AfmActionsApiInterface {
    /**
     * Returns paged list of elements (values) of given label satisfying given filtering criteria.
     * @summary Listing of label values. The resulting data are limited by the static platform limit to the maximum of 10000 rows.
     * @param {ActionsApiComputeLabelElementsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    computeLabelElementsPost(requestParameters: ActionsApiComputeLabelElementsPostRequest, options?: AxiosRequestConfig): AxiosPromise<ElementsResponse>;
    /**
     * AFM is a combination of attributes, measures and filters that describe a query you want to execute.
     * @summary Executes analytical request and returns link to the result
     * @param {ActionsApiComputeReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    computeReport(requestParameters: ActionsApiComputeReportRequest, options?: AxiosRequestConfig): AxiosPromise<AfmExecutionResponse>;
    /**
     * (BETA) Returns map of lists of attributes that can be used as descendants of the given attributes.
     * @summary (BETA) Valid descendants
     * @param {ActionsApiComputeValidDescendantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    computeValidDescendants(requestParameters: ActionsApiComputeValidDescendantsRequest, options?: AxiosRequestConfig): AxiosPromise<AfmValidDescendantsResponse>;
    /**
     * Returns list containing attributes, facts, or metrics, which can be added to given AFM while still keeping it computable.
     * @summary Valid objects
     * @param {ActionsApiComputeValidObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    computeValidObjects(requestParameters: ActionsApiComputeValidObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<AfmValidObjectsResponse>;
    /**
     * The resource provides static structures needed for investigation of a problem with given AFM.
     * @summary AFM explain resource.
     * @param {ActionsApiExplainAFMRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    explainAFM(requestParameters: ActionsApiExplainAFMRequest, options?: AxiosRequestConfig): AxiosPromise<any>;
    /**
     * The resource provides execution result\'s metadata as AFM and resultSpec used in execution request and an executionResponse
     * @summary Get a single execution result\'s metadata.
     * @param {ActionsApiRetrieveExecutionMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    retrieveExecutionMetadata(requestParameters: ActionsApiRetrieveExecutionMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<ResultCacheMetadata>;
    /**
     * Gets a single execution result.
     * @summary Get a single execution result
     * @param {ActionsApiRetrieveResultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    retrieveResult(requestParameters: ActionsApiRetrieveResultRequest, options?: AxiosRequestConfig): AxiosPromise<ExecutionResult>;
}

/**
 *
 * @export
 * @interface AfmExecution
 */
export declare interface AfmExecution {
    /**
     *
     * @type {AFM}
     * @memberof AfmExecution
     */
    execution: AFM;
    /**
     *
     * @type {ResultSpec}
     * @memberof AfmExecution
     */
    resultSpec: ResultSpec;
    /**
     *
     * @type {ExecutionSettings}
     * @memberof AfmExecution
     */
    settings?: ExecutionSettings;
}

/**
 *
 * @export
 * @interface AfmExecutionResponse
 */
export declare interface AfmExecutionResponse {
    /**
     *
     * @type {ExecutionResponse}
     * @memberof AfmExecutionResponse
     */
    executionResponse: ExecutionResponse;
}

/**
 * @type AfmIdentifier
 * @export
 */
export declare type AfmIdentifier = AfmLocalIdentifier | AfmObjectIdentifier;

/**
 *
 * @export
 * @interface AfmLocalIdentifier
 */
export declare interface AfmLocalIdentifier {
    /**
     *
     * @type {string}
     * @memberof AfmLocalIdentifier
     */
    localIdentifier: string;
}

/**
 * ObjectIdentifier with `identifier` wrapper. This serves to distinguish MD object identifiers in AFM request from local identifiers.
 * @export
 * @interface AfmObjectIdentifier
 */
export declare interface AfmObjectIdentifier {
    /**
     *
     * @type {AfmObjectIdentifierIdentifier}
     * @memberof AfmObjectIdentifier
     */
    identifier: AfmObjectIdentifierIdentifier;
}

/**
 *
 * @export
 * @interface AfmObjectIdentifierAttribute
 */
export declare interface AfmObjectIdentifierAttribute {
    /**
     *
     * @type {AfmObjectIdentifierAttributeIdentifier}
     * @memberof AfmObjectIdentifierAttribute
     */
    identifier: AfmObjectIdentifierAttributeIdentifier;
}

/**
 *
 * @export
 * @interface AfmObjectIdentifierAttributeIdentifier
 */
export declare interface AfmObjectIdentifierAttributeIdentifier {
    /**
     *
     * @type {string}
     * @memberof AfmObjectIdentifierAttributeIdentifier
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof AfmObjectIdentifierAttributeIdentifier
     */
    type: AfmObjectIdentifierAttributeIdentifierTypeEnum;
}

export declare const AfmObjectIdentifierAttributeIdentifierTypeEnum: {
    readonly ATTRIBUTE: "attribute";
};

export declare type AfmObjectIdentifierAttributeIdentifierTypeEnum = typeof AfmObjectIdentifierAttributeIdentifierTypeEnum[keyof typeof AfmObjectIdentifierAttributeIdentifierTypeEnum];

/**
 *
 * @export
 * @interface AfmObjectIdentifierCore
 */
export declare interface AfmObjectIdentifierCore {
    /**
     *
     * @type {AfmObjectIdentifierCoreIdentifier}
     * @memberof AfmObjectIdentifierCore
     */
    identifier: AfmObjectIdentifierCoreIdentifier;
}

/**
 *
 * @export
 * @interface AfmObjectIdentifierCoreIdentifier
 */
export declare interface AfmObjectIdentifierCoreIdentifier {
    /**
     *
     * @type {string}
     * @memberof AfmObjectIdentifierCoreIdentifier
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof AfmObjectIdentifierCoreIdentifier
     */
    type: AfmObjectIdentifierCoreIdentifierTypeEnum;
}

export declare const AfmObjectIdentifierCoreIdentifierTypeEnum: {
    readonly ATTRIBUTE: "attribute";
    readonly LABEL: "label";
    readonly FACT: "fact";
    readonly METRIC: "metric";
};

export declare type AfmObjectIdentifierCoreIdentifierTypeEnum = typeof AfmObjectIdentifierCoreIdentifierTypeEnum[keyof typeof AfmObjectIdentifierCoreIdentifierTypeEnum];

/**
 *
 * @export
 * @interface AfmObjectIdentifierDataset
 */
export declare interface AfmObjectIdentifierDataset {
    /**
     *
     * @type {AfmObjectIdentifierDatasetIdentifier}
     * @memberof AfmObjectIdentifierDataset
     */
    identifier: AfmObjectIdentifierDatasetIdentifier;
}

/**
 *
 * @export
 * @interface AfmObjectIdentifierDatasetIdentifier
 */
export declare interface AfmObjectIdentifierDatasetIdentifier {
    /**
     *
     * @type {string}
     * @memberof AfmObjectIdentifierDatasetIdentifier
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof AfmObjectIdentifierDatasetIdentifier
     */
    type: AfmObjectIdentifierDatasetIdentifierTypeEnum;
}

export declare const AfmObjectIdentifierDatasetIdentifierTypeEnum: {
    readonly DATASET: "dataset";
};

export declare type AfmObjectIdentifierDatasetIdentifierTypeEnum = typeof AfmObjectIdentifierDatasetIdentifierTypeEnum[keyof typeof AfmObjectIdentifierDatasetIdentifierTypeEnum];

/**
 *
 * @export
 * @interface AfmObjectIdentifierIdentifier
 */
export declare interface AfmObjectIdentifierIdentifier {
    /**
     *
     * @type {string}
     * @memberof AfmObjectIdentifierIdentifier
     */
    type: AfmObjectIdentifierIdentifierTypeEnum;
    /**
     *
     * @type {string}
     * @memberof AfmObjectIdentifierIdentifier
     */
    id: string;
}

export declare const AfmObjectIdentifierIdentifierTypeEnum: {
    readonly ANALYTICAL_DASHBOARD: "analyticalDashboard";
    readonly ATTRIBUTE: "attribute";
    readonly DASHBOARD_PLUGIN: "dashboardPlugin";
    readonly DATASET: "dataset";
    readonly FACT: "fact";
    readonly LABEL: "label";
    readonly METRIC: "metric";
    readonly PROMPT: "prompt";
    readonly VISUALIZATION_OBJECT: "visualizationObject";
    readonly FILTER_CONTEXT: "filterContext";
};

export declare type AfmObjectIdentifierIdentifierTypeEnum = typeof AfmObjectIdentifierIdentifierTypeEnum[keyof typeof AfmObjectIdentifierIdentifierTypeEnum];

/**
 *
 * @export
 * @interface AfmObjectIdentifierLabel
 */
export declare interface AfmObjectIdentifierLabel {
    /**
     *
     * @type {AfmObjectIdentifierLabelIdentifier}
     * @memberof AfmObjectIdentifierLabel
     */
    identifier: AfmObjectIdentifierLabelIdentifier;
}

/**
 *
 * @export
 * @interface AfmObjectIdentifierLabelIdentifier
 */
export declare interface AfmObjectIdentifierLabelIdentifier {
    /**
     *
     * @type {string}
     * @memberof AfmObjectIdentifierLabelIdentifier
     */
    type: AfmObjectIdentifierLabelIdentifierTypeEnum;
    /**
     *
     * @type {string}
     * @memberof AfmObjectIdentifierLabelIdentifier
     */
    id: string;
}

export declare const AfmObjectIdentifierLabelIdentifierTypeEnum: {
    readonly LABEL: "label";
};

export declare type AfmObjectIdentifierLabelIdentifierTypeEnum = typeof AfmObjectIdentifierLabelIdentifierTypeEnum[keyof typeof AfmObjectIdentifierLabelIdentifierTypeEnum];

/**
 * Entity describing the valid descendants request.
 * @export
 * @interface AfmValidDescendantsQuery
 */
export declare interface AfmValidDescendantsQuery {
    /**
     * List of identifiers of the attributes to get the valid descendants for.
     * @type {Array<AfmObjectIdentifierAttribute>}
     * @memberof AfmValidDescendantsQuery
     */
    attributes: Array<AfmObjectIdentifierAttribute>;
}

/**
 * Entity describing the valid descendants response.
 * @export
 * @interface AfmValidDescendantsResponse
 */
export declare interface AfmValidDescendantsResponse {
    /**
     * Map of attribute identifiers to list of valid descendants identifiers.
     * @type {{ [key: string]: Array<AfmObjectIdentifierAttribute>; }}
     * @memberof AfmValidDescendantsResponse
     */
    validDescendants: {
        [key: string]: Array<AfmObjectIdentifierAttribute>;
    };
}

/**
 * Entity holding AFM and list of object types whose validity should be computed.
 * @export
 * @interface AfmValidObjectsQuery
 */
export declare interface AfmValidObjectsQuery {
    /**
     *
     * @type {Array<string>}
     * @memberof AfmValidObjectsQuery
     */
    types: Array<AfmValidObjectsQueryTypesEnum>;
    /**
     *
     * @type {AFM}
     * @memberof AfmValidObjectsQuery
     */
    afm: AFM;
}

export declare const AfmValidObjectsQueryTypesEnum: {
    readonly FACTS: "facts";
    readonly ATTRIBUTES: "attributes";
    readonly MEASURES: "measures";
    readonly UNRECOGNIZED: "UNRECOGNIZED";
};

export declare type AfmValidObjectsQueryTypesEnum = typeof AfmValidObjectsQueryTypesEnum[keyof typeof AfmValidObjectsQueryTypesEnum];

/**
 * All objects of specified types valid with respect to given AFM.
 * @export
 * @interface AfmValidObjectsResponse
 */
export declare interface AfmValidObjectsResponse {
    /**
     *
     * @type {Array<RestApiIdentifier>}
     * @memberof AfmValidObjectsResponse
     */
    items: Array<RestApiIdentifier>;
}

declare namespace AnalyticalDashboardModelV1 {
    export {
        isAnalyticalDashboard,
        isFilterContext,
        IAnalyticalDashboard,
        IFilterContext
    }
}
export { AnalyticalDashboardModelV1 }

declare namespace AnalyticalDashboardModelV2 {
    export {
        isAnalyticalDashboard_2 as isAnalyticalDashboard,
        isFilterContext_2 as isFilterContext,
        isDashboardPlugin,
        isDashboardPluginLink,
        IAnalyticalDashboard_2 as IAnalyticalDashboard,
        IFilterContext_3 as IFilterContext,
        IDashboardPlugin,
        IDashboardPluginLink
    }
}
export { AnalyticalDashboardModelV2 }

/**
 * AnalyticsModelApi - object-oriented interface
 * @export
 * @class AnalyticsModelApi
 * @extends {BaseAPI}
 */
export declare class AnalyticsModelApi extends MetadataBaseApi implements AnalyticsModelApiInterface {
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {AnalyticsModelApiGetAnalyticsModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsModelApi
     */
    getAnalyticsModel(requestParameters: AnalyticsModelApiGetAnalyticsModelRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeAnalytics, any>>;
    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {AnalyticsModelApiSetAnalyticsModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsModelApi
     */
    setAnalyticsModel(requestParameters: AnalyticsModelApiSetAnalyticsModelRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
}

/**
 * AnalyticsModelApi - axios parameter creator
 * @export
 */
export declare const AnalyticsModelApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {string} workspaceId
     * @param {Array<'ACTIVITY_INFO'>} [exclude]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAnalyticsModel: (workspaceId: string, exclude?: Array<"ACTIVITY_INFO">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {string} workspaceId
     * @param {DeclarativeAnalytics} declarativeAnalytics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAnalyticsModel: (workspaceId: string, declarativeAnalytics: DeclarativeAnalytics, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * AnalyticsModelApi - factory interface
 * @export
 */
export declare const AnalyticsModelApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {AnalyticsModelApiGetAnalyticsModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAnalyticsModel(requestParameters: AnalyticsModelApiGetAnalyticsModelRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeAnalytics>;
    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {AnalyticsModelApiSetAnalyticsModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAnalyticsModel(requestParameters: AnalyticsModelApiSetAnalyticsModelRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
};

/**
 * AnalyticsModelApi - functional programming interface
 * @export
 */
export declare const AnalyticsModelApiFp: (configuration?: MetadataConfiguration) => {
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {string} workspaceId
     * @param {Array<'ACTIVITY_INFO'>} [exclude]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAnalyticsModel(workspaceId: string, exclude?: Array<"ACTIVITY_INFO">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeAnalytics>>;
    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {string} workspaceId
     * @param {DeclarativeAnalytics} declarativeAnalytics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAnalyticsModel(workspaceId: string, declarativeAnalytics: DeclarativeAnalytics, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};

/**
 * Request parameters for getAnalyticsModel operation in AnalyticsModelApi.
 * @export
 * @interface AnalyticsModelApiGetAnalyticsModelRequest
 */
export declare interface AnalyticsModelApiGetAnalyticsModelRequest {
    /**
     *
     * @type {string}
     * @memberof AnalyticsModelApiGetAnalyticsModel
     */
    readonly workspaceId: string;
    /**
     *
     * @type {Array<'ACTIVITY_INFO'>}
     * @memberof AnalyticsModelApiGetAnalyticsModel
     */
    readonly exclude?: Array<"ACTIVITY_INFO">;
}

/**
 * AnalyticsModelApi - interface
 * @export
 * @interface AnalyticsModelApi
 */
export declare interface AnalyticsModelApiInterface {
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {AnalyticsModelApiGetAnalyticsModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsModelApiInterface
     */
    getAnalyticsModel(requestParameters: AnalyticsModelApiGetAnalyticsModelRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeAnalytics>;
    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {AnalyticsModelApiSetAnalyticsModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsModelApiInterface
     */
    setAnalyticsModel(requestParameters: AnalyticsModelApiSetAnalyticsModelRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
}

/**
 * Request parameters for setAnalyticsModel operation in AnalyticsModelApi.
 * @export
 * @interface AnalyticsModelApiSetAnalyticsModelRequest
 */
export declare interface AnalyticsModelApiSetAnalyticsModelRequest {
    /**
     *
     * @type {string}
     * @memberof AnalyticsModelApiSetAnalyticsModel
     */
    readonly workspaceId: string;
    /**
     *
     * @type {DeclarativeAnalytics}
     * @memberof AnalyticsModelApiSetAnalyticsModel
     */
    readonly declarativeAnalytics: DeclarativeAnalytics;
}

/**
 *
 * @export
 * @interface ApiEntitlement
 */
export declare interface ApiEntitlement {
    /**
     *
     * @type {string}
     * @memberof ApiEntitlement
     */
    name: ApiEntitlementNameEnum;
    /**
     *
     * @type {string}
     * @memberof ApiEntitlement
     */
    value?: string;
    /**
     *
     * @type {string}
     * @memberof ApiEntitlement
     */
    expiry?: string;
}

export declare const ApiEntitlementNameEnum: {
    readonly CACHE_STRATEGY: "CacheStrategy";
    readonly CONTRACT: "Contract";
    readonly CUSTOM_THEMING: "CustomTheming";
    readonly EXTRA_CACHE: "ExtraCache";
    readonly PDF_EXPORTS: "PdfExports";
    readonly MANAGED_OIDC: "ManagedOIDC";
    readonly UI_LOCALIZATION: "UiLocalization";
    readonly TIER: "Tier";
    readonly USER_COUNT: "UserCount";
    readonly UNLIMITED_USERS: "UnlimitedUsers";
    readonly UNLIMITED_WORKSPACES: "UnlimitedWorkspaces";
    readonly WHITE_LABELING: "WhiteLabeling";
    readonly WORKSPACE_COUNT: "WorkspaceCount";
};

export declare type ApiEntitlementNameEnum = typeof ApiEntitlementNameEnum[keyof typeof ApiEntitlementNameEnum];

/**
 * APITokensApi - object-oriented interface
 * @export
 * @class APITokensApi
 * @extends {BaseAPI}
 */
export declare class APITokensApi extends MetadataBaseApi implements APITokensApiInterface {
    /**
     *
     * @summary Post a new API token for the user
     * @param {APITokensApiCreateEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APITokensApi
     */
    createEntityApiTokens(requestParameters: APITokensApiCreateEntityApiTokensRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiApiTokenOutDocument, any>>;
    /**
     *
     * @summary Delete an API Token for a user
     * @param {APITokensApiDeleteEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APITokensApi
     */
    deleteEntityApiTokens(requestParameters: APITokensApiDeleteEntityApiTokensRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary List all api tokens for a user
     * @param {APITokensApiGetAllEntitiesApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APITokensApi
     */
    getAllEntitiesApiTokens(requestParameters: APITokensApiGetAllEntitiesApiTokensRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiApiTokenOutList, any>>;
    /**
     *
     * @summary Get an API Token for a user
     * @param {APITokensApiGetEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APITokensApi
     */
    getEntityApiTokens(requestParameters: APITokensApiGetEntityApiTokensRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiApiTokenOutDocument, any>>;
    /**
     *
     * @summary Put new API token for the user
     * @param {APITokensApiUpdateEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APITokensApi
     */
    updateEntityApiTokens(requestParameters: APITokensApiUpdateEntityApiTokensRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiApiTokenOutDocument, any>>;
}

/**
 * APITokensApi - axios parameter creator
 * @export
 */
export declare const APITokensApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post a new API token for the user
     * @param {string} userId
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityApiTokens: (userId: string, jsonApiApiTokenInDocument: JsonApiApiTokenInDocument, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete an API Token for a user
     * @param {string} userId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityApiTokens: (userId: string, id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary List all api tokens for a user
     * @param {string} userId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesApiTokens: (userId: string, filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get an API Token for a user
     * @param {string} userId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityApiTokens: (userId: string, id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put new API token for the user
     * @param {string} userId
     * @param {string} id
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityApiTokens: (userId: string, id: string, jsonApiApiTokenInDocument: JsonApiApiTokenInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * Request parameters for createEntityApiTokens operation in APITokensApi.
 * @export
 * @interface APITokensApiCreateEntityApiTokensRequest
 */
export declare interface APITokensApiCreateEntityApiTokensRequest {
    /**
     *
     * @type {string}
     * @memberof APITokensApiCreateEntityApiTokens
     */
    readonly userId: string;
    /**
     *
     * @type {JsonApiApiTokenInDocument}
     * @memberof APITokensApiCreateEntityApiTokens
     */
    readonly jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
}

/**
 * Request parameters for deleteEntityApiTokens operation in APITokensApi.
 * @export
 * @interface APITokensApiDeleteEntityApiTokensRequest
 */
export declare interface APITokensApiDeleteEntityApiTokensRequest {
    /**
     *
     * @type {string}
     * @memberof APITokensApiDeleteEntityApiTokens
     */
    readonly userId: string;
    /**
     *
     * @type {string}
     * @memberof APITokensApiDeleteEntityApiTokens
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof APITokensApiDeleteEntityApiTokens
     */
    readonly filter?: string;
}

/**
 * APITokensApi - factory interface
 * @export
 */
export declare const APITokensApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Post a new API token for the user
     * @param {APITokensApiCreateEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityApiTokens(requestParameters: APITokensApiCreateEntityApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @summary Delete an API Token for a user
     * @param {APITokensApiDeleteEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityApiTokens(requestParameters: APITokensApiDeleteEntityApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary List all api tokens for a user
     * @param {APITokensApiGetAllEntitiesApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesApiTokens(requestParameters: APITokensApiGetAllEntitiesApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiApiTokenOutList>;
    /**
     *
     * @summary Get an API Token for a user
     * @param {APITokensApiGetEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityApiTokens(requestParameters: APITokensApiGetEntityApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @summary Put new API token for the user
     * @param {APITokensApiUpdateEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityApiTokens(requestParameters: APITokensApiUpdateEntityApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiApiTokenOutDocument>;
};

/**
 * APITokensApi - functional programming interface
 * @export
 */
export declare const APITokensApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post a new API token for the user
     * @param {string} userId
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityApiTokens(userId: string, jsonApiApiTokenInDocument: JsonApiApiTokenInDocument, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiApiTokenOutDocument>>;
    /**
     *
     * @summary Delete an API Token for a user
     * @param {string} userId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityApiTokens(userId: string, id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary List all api tokens for a user
     * @param {string} userId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesApiTokens(userId: string, filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiApiTokenOutList>>;
    /**
     *
     * @summary Get an API Token for a user
     * @param {string} userId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityApiTokens(userId: string, id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiApiTokenOutDocument>>;
    /**
     *
     * @summary Put new API token for the user
     * @param {string} userId
     * @param {string} id
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityApiTokens(userId: string, id: string, jsonApiApiTokenInDocument: JsonApiApiTokenInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiApiTokenOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesApiTokens operation in APITokensApi.
 * @export
 * @interface APITokensApiGetAllEntitiesApiTokensRequest
 */
export declare interface APITokensApiGetAllEntitiesApiTokensRequest {
    /**
     *
     * @type {string}
     * @memberof APITokensApiGetAllEntitiesApiTokens
     */
    readonly userId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof APITokensApiGetAllEntitiesApiTokens
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof APITokensApiGetAllEntitiesApiTokens
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof APITokensApiGetAllEntitiesApiTokens
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof APITokensApiGetAllEntitiesApiTokens
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getEntityApiTokens operation in APITokensApi.
 * @export
 * @interface APITokensApiGetEntityApiTokensRequest
 */
export declare interface APITokensApiGetEntityApiTokensRequest {
    /**
     *
     * @type {string}
     * @memberof APITokensApiGetEntityApiTokens
     */
    readonly userId: string;
    /**
     *
     * @type {string}
     * @memberof APITokensApiGetEntityApiTokens
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof APITokensApiGetEntityApiTokens
     */
    readonly filter?: string;
}

/**
 * APITokensApi - interface
 * @export
 * @interface APITokensApi
 */
export declare interface APITokensApiInterface {
    /**
     *
     * @summary Post a new API token for the user
     * @param {APITokensApiCreateEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APITokensApiInterface
     */
    createEntityApiTokens(requestParameters: APITokensApiCreateEntityApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @summary Delete an API Token for a user
     * @param {APITokensApiDeleteEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APITokensApiInterface
     */
    deleteEntityApiTokens(requestParameters: APITokensApiDeleteEntityApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary List all api tokens for a user
     * @param {APITokensApiGetAllEntitiesApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APITokensApiInterface
     */
    getAllEntitiesApiTokens(requestParameters: APITokensApiGetAllEntitiesApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiApiTokenOutList>;
    /**
     *
     * @summary Get an API Token for a user
     * @param {APITokensApiGetEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APITokensApiInterface
     */
    getEntityApiTokens(requestParameters: APITokensApiGetEntityApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @summary Put new API token for the user
     * @param {APITokensApiUpdateEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APITokensApiInterface
     */
    updateEntityApiTokens(requestParameters: APITokensApiUpdateEntityApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiApiTokenOutDocument>;
}

/**
 * Request parameters for updateEntityApiTokens operation in APITokensApi.
 * @export
 * @interface APITokensApiUpdateEntityApiTokensRequest
 */
export declare interface APITokensApiUpdateEntityApiTokensRequest {
    /**
     *
     * @type {string}
     * @memberof APITokensApiUpdateEntityApiTokens
     */
    readonly userId: string;
    /**
     *
     * @type {string}
     * @memberof APITokensApiUpdateEntityApiTokens
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiApiTokenInDocument}
     * @memberof APITokensApiUpdateEntityApiTokens
     */
    readonly jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof APITokensApiUpdateEntityApiTokens
     */
    readonly filter?: string;
}

/**
 * AppearanceApi - object-oriented interface
 * @export
 * @class AppearanceApi
 * @extends {BaseAPI}
 */
export declare class AppearanceApi extends MetadataBaseApi implements AppearanceApiInterface {
    /**
     *
     * @summary Post Color Pallettes
     * @param {AppearanceApiCreateEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppearanceApi
     */
    createEntityColorPalettes(requestParameters: AppearanceApiCreateEntityColorPalettesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiColorPaletteOutDocument, any>>;
    /**
     *
     * @summary Post Theming
     * @param {AppearanceApiCreateEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppearanceApi
     */
    createEntityThemes(requestParameters: AppearanceApiCreateEntityThemesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiThemeOutDocument, any>>;
    /**
     *
     * @summary Delete a Color Pallette
     * @param {AppearanceApiDeleteEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppearanceApi
     */
    deleteEntityColorPalettes(requestParameters: AppearanceApiDeleteEntityColorPalettesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete Theming
     * @param {AppearanceApiDeleteEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppearanceApi
     */
    deleteEntityThemes(requestParameters: AppearanceApiDeleteEntityThemesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Get all Color Pallettes
     * @param {AppearanceApiGetAllEntitiesColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppearanceApi
     */
    getAllEntitiesColorPalettes(requestParameters?: AppearanceApiGetAllEntitiesColorPalettesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiColorPaletteOutList, any>>;
    /**
     *
     * @summary Get all Theming entities
     * @param {AppearanceApiGetAllEntitiesThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppearanceApi
     */
    getAllEntitiesThemes(requestParameters?: AppearanceApiGetAllEntitiesThemesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiThemeOutList, any>>;
    /**
     *
     * @summary Get Color Pallette
     * @param {AppearanceApiGetEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppearanceApi
     */
    getEntityColorPalettes(requestParameters: AppearanceApiGetEntityColorPalettesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiColorPaletteOutDocument, any>>;
    /**
     *
     * @summary Get Theming
     * @param {AppearanceApiGetEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppearanceApi
     */
    getEntityThemes(requestParameters: AppearanceApiGetEntityThemesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiThemeOutDocument, any>>;
    /**
     *
     * @summary Patch Color Pallette
     * @param {AppearanceApiPatchEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppearanceApi
     */
    patchEntityColorPalettes(requestParameters: AppearanceApiPatchEntityColorPalettesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiColorPaletteOutDocument, any>>;
    /**
     *
     * @summary Patch Theming
     * @param {AppearanceApiPatchEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppearanceApi
     */
    patchEntityThemes(requestParameters: AppearanceApiPatchEntityThemesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiThemeOutDocument, any>>;
    /**
     *
     * @summary Put Color Pallette
     * @param {AppearanceApiUpdateEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppearanceApi
     */
    updateEntityColorPalettes(requestParameters: AppearanceApiUpdateEntityColorPalettesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiColorPaletteOutDocument, any>>;
    /**
     *
     * @summary Put Theming
     * @param {AppearanceApiUpdateEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppearanceApi
     */
    updateEntityThemes(requestParameters: AppearanceApiUpdateEntityThemesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiThemeOutDocument, any>>;
}

/**
 * AppearanceApi - axios parameter creator
 * @export
 */
export declare const AppearanceApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post Color Pallettes
     * @param {JsonApiColorPaletteInDocument} jsonApiColorPaletteInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityColorPalettes: (jsonApiColorPaletteInDocument: JsonApiColorPaletteInDocument, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Theming
     * @param {JsonApiThemeInDocument} jsonApiThemeInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityThemes: (jsonApiThemeInDocument: JsonApiThemeInDocument, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Color Pallette
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityColorPalettes: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete Theming
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityThemes: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Color Pallettes
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesColorPalettes: (filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Theming entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesThemes: (filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get Color Pallette
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityColorPalettes: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get Theming
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityThemes: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch Color Pallette
     * @param {string} id
     * @param {JsonApiColorPalettePatchDocument} jsonApiColorPalettePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityColorPalettes: (id: string, jsonApiColorPalettePatchDocument: JsonApiColorPalettePatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch Theming
     * @param {string} id
     * @param {JsonApiThemePatchDocument} jsonApiThemePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityThemes: (id: string, jsonApiThemePatchDocument: JsonApiThemePatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put Color Pallette
     * @param {string} id
     * @param {JsonApiColorPaletteInDocument} jsonApiColorPaletteInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityColorPalettes: (id: string, jsonApiColorPaletteInDocument: JsonApiColorPaletteInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put Theming
     * @param {string} id
     * @param {JsonApiThemeInDocument} jsonApiThemeInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityThemes: (id: string, jsonApiThemeInDocument: JsonApiThemeInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * Request parameters for createEntityColorPalettes operation in AppearanceApi.
 * @export
 * @interface AppearanceApiCreateEntityColorPalettesRequest
 */
export declare interface AppearanceApiCreateEntityColorPalettesRequest {
    /**
     *
     * @type {JsonApiColorPaletteInDocument}
     * @memberof AppearanceApiCreateEntityColorPalettes
     */
    readonly jsonApiColorPaletteInDocument: JsonApiColorPaletteInDocument;
}

/**
 * Request parameters for createEntityThemes operation in AppearanceApi.
 * @export
 * @interface AppearanceApiCreateEntityThemesRequest
 */
export declare interface AppearanceApiCreateEntityThemesRequest {
    /**
     *
     * @type {JsonApiThemeInDocument}
     * @memberof AppearanceApiCreateEntityThemes
     */
    readonly jsonApiThemeInDocument: JsonApiThemeInDocument;
}

/**
 * Request parameters for deleteEntityColorPalettes operation in AppearanceApi.
 * @export
 * @interface AppearanceApiDeleteEntityColorPalettesRequest
 */
export declare interface AppearanceApiDeleteEntityColorPalettesRequest {
    /**
     *
     * @type {string}
     * @memberof AppearanceApiDeleteEntityColorPalettes
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof AppearanceApiDeleteEntityColorPalettes
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityThemes operation in AppearanceApi.
 * @export
 * @interface AppearanceApiDeleteEntityThemesRequest
 */
export declare interface AppearanceApiDeleteEntityThemesRequest {
    /**
     *
     * @type {string}
     * @memberof AppearanceApiDeleteEntityThemes
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof AppearanceApiDeleteEntityThemes
     */
    readonly filter?: string;
}

/**
 * AppearanceApi - factory interface
 * @export
 */
export declare const AppearanceApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Post Color Pallettes
     * @param {AppearanceApiCreateEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityColorPalettes(requestParameters: AppearanceApiCreateEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutDocument>;
    /**
     *
     * @summary Post Theming
     * @param {AppearanceApiCreateEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityThemes(requestParameters: AppearanceApiCreateEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutDocument>;
    /**
     *
     * @summary Delete a Color Pallette
     * @param {AppearanceApiDeleteEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityColorPalettes(requestParameters: AppearanceApiDeleteEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete Theming
     * @param {AppearanceApiDeleteEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityThemes(requestParameters: AppearanceApiDeleteEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all Color Pallettes
     * @param {AppearanceApiGetAllEntitiesColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesColorPalettes(requestParameters: AppearanceApiGetAllEntitiesColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutList>;
    /**
     *
     * @summary Get all Theming entities
     * @param {AppearanceApiGetAllEntitiesThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesThemes(requestParameters: AppearanceApiGetAllEntitiesThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutList>;
    /**
     *
     * @summary Get Color Pallette
     * @param {AppearanceApiGetEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityColorPalettes(requestParameters: AppearanceApiGetEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutDocument>;
    /**
     *
     * @summary Get Theming
     * @param {AppearanceApiGetEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityThemes(requestParameters: AppearanceApiGetEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutDocument>;
    /**
     *
     * @summary Patch Color Pallette
     * @param {AppearanceApiPatchEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityColorPalettes(requestParameters: AppearanceApiPatchEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutDocument>;
    /**
     *
     * @summary Patch Theming
     * @param {AppearanceApiPatchEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityThemes(requestParameters: AppearanceApiPatchEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutDocument>;
    /**
     *
     * @summary Put Color Pallette
     * @param {AppearanceApiUpdateEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityColorPalettes(requestParameters: AppearanceApiUpdateEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutDocument>;
    /**
     *
     * @summary Put Theming
     * @param {AppearanceApiUpdateEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityThemes(requestParameters: AppearanceApiUpdateEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutDocument>;
};

/**
 * AppearanceApi - functional programming interface
 * @export
 */
export declare const AppearanceApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post Color Pallettes
     * @param {JsonApiColorPaletteInDocument} jsonApiColorPaletteInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityColorPalettes(jsonApiColorPaletteInDocument: JsonApiColorPaletteInDocument, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiColorPaletteOutDocument>>;
    /**
     *
     * @summary Post Theming
     * @param {JsonApiThemeInDocument} jsonApiThemeInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityThemes(jsonApiThemeInDocument: JsonApiThemeInDocument, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiThemeOutDocument>>;
    /**
     *
     * @summary Delete a Color Pallette
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityColorPalettes(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete Theming
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityThemes(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get all Color Pallettes
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesColorPalettes(filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiColorPaletteOutList>>;
    /**
     *
     * @summary Get all Theming entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesThemes(filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiThemeOutList>>;
    /**
     *
     * @summary Get Color Pallette
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityColorPalettes(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiColorPaletteOutDocument>>;
    /**
     *
     * @summary Get Theming
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityThemes(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiThemeOutDocument>>;
    /**
     *
     * @summary Patch Color Pallette
     * @param {string} id
     * @param {JsonApiColorPalettePatchDocument} jsonApiColorPalettePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityColorPalettes(id: string, jsonApiColorPalettePatchDocument: JsonApiColorPalettePatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiColorPaletteOutDocument>>;
    /**
     *
     * @summary Patch Theming
     * @param {string} id
     * @param {JsonApiThemePatchDocument} jsonApiThemePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityThemes(id: string, jsonApiThemePatchDocument: JsonApiThemePatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiThemeOutDocument>>;
    /**
     *
     * @summary Put Color Pallette
     * @param {string} id
     * @param {JsonApiColorPaletteInDocument} jsonApiColorPaletteInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityColorPalettes(id: string, jsonApiColorPaletteInDocument: JsonApiColorPaletteInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiColorPaletteOutDocument>>;
    /**
     *
     * @summary Put Theming
     * @param {string} id
     * @param {JsonApiThemeInDocument} jsonApiThemeInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityThemes(id: string, jsonApiThemeInDocument: JsonApiThemeInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiThemeOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesColorPalettes operation in AppearanceApi.
 * @export
 * @interface AppearanceApiGetAllEntitiesColorPalettesRequest
 */
export declare interface AppearanceApiGetAllEntitiesColorPalettesRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof AppearanceApiGetAllEntitiesColorPalettes
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof AppearanceApiGetAllEntitiesColorPalettes
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof AppearanceApiGetAllEntitiesColorPalettes
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof AppearanceApiGetAllEntitiesColorPalettes
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesThemes operation in AppearanceApi.
 * @export
 * @interface AppearanceApiGetAllEntitiesThemesRequest
 */
export declare interface AppearanceApiGetAllEntitiesThemesRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof AppearanceApiGetAllEntitiesThemes
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof AppearanceApiGetAllEntitiesThemes
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof AppearanceApiGetAllEntitiesThemes
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof AppearanceApiGetAllEntitiesThemes
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getEntityColorPalettes operation in AppearanceApi.
 * @export
 * @interface AppearanceApiGetEntityColorPalettesRequest
 */
export declare interface AppearanceApiGetEntityColorPalettesRequest {
    /**
     *
     * @type {string}
     * @memberof AppearanceApiGetEntityColorPalettes
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof AppearanceApiGetEntityColorPalettes
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityThemes operation in AppearanceApi.
 * @export
 * @interface AppearanceApiGetEntityThemesRequest
 */
export declare interface AppearanceApiGetEntityThemesRequest {
    /**
     *
     * @type {string}
     * @memberof AppearanceApiGetEntityThemes
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof AppearanceApiGetEntityThemes
     */
    readonly filter?: string;
}

/**
 * AppearanceApi - interface
 * @export
 * @interface AppearanceApi
 */
export declare interface AppearanceApiInterface {
    /**
     *
     * @summary Post Color Pallettes
     * @param {AppearanceApiCreateEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppearanceApiInterface
     */
    createEntityColorPalettes(requestParameters: AppearanceApiCreateEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutDocument>;
    /**
     *
     * @summary Post Theming
     * @param {AppearanceApiCreateEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppearanceApiInterface
     */
    createEntityThemes(requestParameters: AppearanceApiCreateEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutDocument>;
    /**
     *
     * @summary Delete a Color Pallette
     * @param {AppearanceApiDeleteEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppearanceApiInterface
     */
    deleteEntityColorPalettes(requestParameters: AppearanceApiDeleteEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete Theming
     * @param {AppearanceApiDeleteEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppearanceApiInterface
     */
    deleteEntityThemes(requestParameters: AppearanceApiDeleteEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all Color Pallettes
     * @param {AppearanceApiGetAllEntitiesColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppearanceApiInterface
     */
    getAllEntitiesColorPalettes(requestParameters: AppearanceApiGetAllEntitiesColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutList>;
    /**
     *
     * @summary Get all Theming entities
     * @param {AppearanceApiGetAllEntitiesThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppearanceApiInterface
     */
    getAllEntitiesThemes(requestParameters: AppearanceApiGetAllEntitiesThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutList>;
    /**
     *
     * @summary Get Color Pallette
     * @param {AppearanceApiGetEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppearanceApiInterface
     */
    getEntityColorPalettes(requestParameters: AppearanceApiGetEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutDocument>;
    /**
     *
     * @summary Get Theming
     * @param {AppearanceApiGetEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppearanceApiInterface
     */
    getEntityThemes(requestParameters: AppearanceApiGetEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutDocument>;
    /**
     *
     * @summary Patch Color Pallette
     * @param {AppearanceApiPatchEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppearanceApiInterface
     */
    patchEntityColorPalettes(requestParameters: AppearanceApiPatchEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutDocument>;
    /**
     *
     * @summary Patch Theming
     * @param {AppearanceApiPatchEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppearanceApiInterface
     */
    patchEntityThemes(requestParameters: AppearanceApiPatchEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutDocument>;
    /**
     *
     * @summary Put Color Pallette
     * @param {AppearanceApiUpdateEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppearanceApiInterface
     */
    updateEntityColorPalettes(requestParameters: AppearanceApiUpdateEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutDocument>;
    /**
     *
     * @summary Put Theming
     * @param {AppearanceApiUpdateEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppearanceApiInterface
     */
    updateEntityThemes(requestParameters: AppearanceApiUpdateEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutDocument>;
}

/**
 * Request parameters for patchEntityColorPalettes operation in AppearanceApi.
 * @export
 * @interface AppearanceApiPatchEntityColorPalettesRequest
 */
export declare interface AppearanceApiPatchEntityColorPalettesRequest {
    /**
     *
     * @type {string}
     * @memberof AppearanceApiPatchEntityColorPalettes
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiColorPalettePatchDocument}
     * @memberof AppearanceApiPatchEntityColorPalettes
     */
    readonly jsonApiColorPalettePatchDocument: JsonApiColorPalettePatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof AppearanceApiPatchEntityColorPalettes
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityThemes operation in AppearanceApi.
 * @export
 * @interface AppearanceApiPatchEntityThemesRequest
 */
export declare interface AppearanceApiPatchEntityThemesRequest {
    /**
     *
     * @type {string}
     * @memberof AppearanceApiPatchEntityThemes
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiThemePatchDocument}
     * @memberof AppearanceApiPatchEntityThemes
     */
    readonly jsonApiThemePatchDocument: JsonApiThemePatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof AppearanceApiPatchEntityThemes
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityColorPalettes operation in AppearanceApi.
 * @export
 * @interface AppearanceApiUpdateEntityColorPalettesRequest
 */
export declare interface AppearanceApiUpdateEntityColorPalettesRequest {
    /**
     *
     * @type {string}
     * @memberof AppearanceApiUpdateEntityColorPalettes
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiColorPaletteInDocument}
     * @memberof AppearanceApiUpdateEntityColorPalettes
     */
    readonly jsonApiColorPaletteInDocument: JsonApiColorPaletteInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof AppearanceApiUpdateEntityColorPalettes
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityThemes operation in AppearanceApi.
 * @export
 * @interface AppearanceApiUpdateEntityThemesRequest
 */
export declare interface AppearanceApiUpdateEntityThemesRequest {
    /**
     *
     * @type {string}
     * @memberof AppearanceApiUpdateEntityThemes
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiThemeInDocument}
     * @memberof AppearanceApiUpdateEntityThemes
     */
    readonly jsonApiThemeInDocument: JsonApiThemeInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof AppearanceApiUpdateEntityThemes
     */
    readonly filter?: string;
}

/**
 * Metric representing arithmetics between metrics.
 * @export
 * @interface ArithmeticMeasureDefinition
 */
export declare interface ArithmeticMeasureDefinition {
    /**
     *
     * @type {ArithmeticMeasureDefinitionArithmeticMeasure}
     * @memberof ArithmeticMeasureDefinition
     */
    arithmeticMeasure: ArithmeticMeasureDefinitionArithmeticMeasure;
}

/**
 *
 * @export
 * @interface ArithmeticMeasureDefinitionArithmeticMeasure
 */
export declare interface ArithmeticMeasureDefinitionArithmeticMeasure {
    /**
     * List of metrics to apply arithmetic operation by chosen operator.
     * @type {Array<AfmLocalIdentifier>}
     * @memberof ArithmeticMeasureDefinitionArithmeticMeasure
     */
    measureIdentifiers: Array<AfmLocalIdentifier>;
    /**
     * Arithmetic operator describing operation between metrics.
     * @type {string}
     * @memberof ArithmeticMeasureDefinitionArithmeticMeasure
     */
    operator: ArithmeticMeasureDefinitionArithmeticMeasureOperatorEnum;
}

export declare const ArithmeticMeasureDefinitionArithmeticMeasureOperatorEnum: {
    readonly SUM: "SUM";
    readonly DIFFERENCE: "DIFFERENCE";
    readonly MULTIPLICATION: "MULTIPLICATION";
    readonly RATIO: "RATIO";
    readonly CHANGE: "CHANGE";
};

export declare type ArithmeticMeasureDefinitionArithmeticMeasureOperatorEnum = typeof ArithmeticMeasureDefinitionArithmeticMeasureOperatorEnum[keyof typeof ArithmeticMeasureDefinitionArithmeticMeasureOperatorEnum];

/**
 * Identifier of a user or user-group.
 * @export
 * @interface AssigneeIdentifier
 */
export declare interface AssigneeIdentifier {
    /**
     *
     * @type {string}
     * @memberof AssigneeIdentifier
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof AssigneeIdentifier
     */
    type: AssigneeIdentifierTypeEnum;
}

export declare const AssigneeIdentifierTypeEnum: {
    readonly USER: "user";
    readonly USER_GROUP: "userGroup";
};

export declare type AssigneeIdentifierTypeEnum = typeof AssigneeIdentifierTypeEnum[keyof typeof AssigneeIdentifierTypeEnum];

/**
 *
 * @export
 * @interface AttributeExecutionResultHeader
 */
export declare interface AttributeExecutionResultHeader {
    /**
     *
     * @type {AttributeResultHeader}
     * @memberof AttributeExecutionResultHeader
     */
    attributeHeader: AttributeResultHeader;
}

/**
 * @type AttributeFilter
 * Abstract filter definition type attributes
 * @export
 */
export declare type AttributeFilter = NegativeAttributeFilter | PositiveAttributeFilter;

/**
 * Filter on specific set of label values.
 * @export
 * @interface AttributeFilterElements
 */
export declare interface AttributeFilterElements {
    /**
     * Set of label values.
     * @type {Array<string>}
     * @memberof AttributeFilterElements
     */
    values: Array<string | null>;
}

/**
 *
 * @export
 * @interface AttributeFormat
 */
export declare interface AttributeFormat {
    /**
     * Format locale
     * @type {string}
     * @memberof AttributeFormat
     */
    locale: string;
    /**
     * Format pattern
     * @type {string}
     * @memberof AttributeFormat
     */
    pattern: string;
}

/**
 *
 * @export
 * @interface AttributeHeaderOut
 */
export declare interface AttributeHeaderOut {
    /**
     *
     * @type {AttributeHeaderOutAttributeHeader}
     * @memberof AttributeHeaderOut
     */
    attributeHeader: AttributeHeaderOutAttributeHeader;
}

/**
 *
 * @export
 * @interface AttributeHeaderOutAttributeHeader
 */
export declare interface AttributeHeaderOutAttributeHeader {
    /**
     *
     * @type {string}
     * @memberof AttributeHeaderOutAttributeHeader
     */
    localIdentifier: string;
    /**
     *
     * @type {RestApiIdentifier}
     * @memberof AttributeHeaderOutAttributeHeader
     */
    label: RestApiIdentifier;
    /**
     *
     * @type {string}
     * @memberof AttributeHeaderOutAttributeHeader
     */
    labelName: string;
    /**
     *
     * @type {RestApiIdentifier}
     * @memberof AttributeHeaderOutAttributeHeader
     */
    attribute: RestApiIdentifier;
    /**
     *
     * @type {string}
     * @memberof AttributeHeaderOutAttributeHeader
     */
    attributeName: string;
    /**
     *
     * @type {string}
     * @memberof AttributeHeaderOutAttributeHeader
     */
    granularity?: AttributeHeaderOutAttributeHeaderGranularityEnum;
    /**
     *
     * @type {RestApiIdentifier}
     * @memberof AttributeHeaderOutAttributeHeader
     */
    primaryLabel: RestApiIdentifier;
    /**
     *
     * @type {AttributeFormat}
     * @memberof AttributeHeaderOutAttributeHeader
     */
    format?: AttributeFormat;
}

export declare const AttributeHeaderOutAttributeHeaderGranularityEnum: {
    readonly MINUTE: "MINUTE";
    readonly HOUR: "HOUR";
    readonly DAY: "DAY";
    readonly WEEK: "WEEK";
    readonly MONTH: "MONTH";
    readonly QUARTER: "QUARTER";
    readonly YEAR: "YEAR";
    readonly MINUTE_OF_HOUR: "MINUTE_OF_HOUR";
    readonly HOUR_OF_DAY: "HOUR_OF_DAY";
    readonly DAY_OF_WEEK: "DAY_OF_WEEK";
    readonly DAY_OF_MONTH: "DAY_OF_MONTH";
    readonly DAY_OF_YEAR: "DAY_OF_YEAR";
    readonly WEEK_OF_YEAR: "WEEK_OF_YEAR";
    readonly MONTH_OF_YEAR: "MONTH_OF_YEAR";
    readonly QUARTER_OF_YEAR: "QUARTER_OF_YEAR";
};

export declare type AttributeHeaderOutAttributeHeaderGranularityEnum = typeof AttributeHeaderOutAttributeHeaderGranularityEnum[keyof typeof AttributeHeaderOutAttributeHeaderGranularityEnum];

/**
 * AttributeHierarchiesApi - object-oriented interface
 * @export
 * @class AttributeHierarchiesApi
 * @extends {BaseAPI}
 */
export declare class AttributeHierarchiesApi extends MetadataBaseApi implements AttributeHierarchiesApiInterface {
    /**
     *
     * @summary Post Attribute Hierarchies
     * @param {AttributeHierarchiesApiCreateEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeHierarchiesApi
     */
    createEntityAttributeHierarchies(requestParameters: AttributeHierarchiesApiCreateEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAttributeHierarchyOutDocument, any>>;
    /**
     *
     * @summary Delete an Attribute Hierarchy
     * @param {AttributeHierarchiesApiDeleteEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeHierarchiesApi
     */
    deleteEntityAttributeHierarchies(requestParameters: AttributeHierarchiesApiDeleteEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Get all Attribute Hierarchies
     * @param {AttributeHierarchiesApiGetAllEntitiesAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeHierarchiesApi
     */
    getAllEntitiesAttributeHierarchies(requestParameters: AttributeHierarchiesApiGetAllEntitiesAttributeHierarchiesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAttributeHierarchyOutList, any>>;
    /**
     *
     * @summary Get an Attribute Hierarchy
     * @param {AttributeHierarchiesApiGetEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeHierarchiesApi
     */
    getEntityAttributeHierarchies(requestParameters: AttributeHierarchiesApiGetEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAttributeHierarchyOutDocument, any>>;
    /**
     *
     * @summary Patch an Attribute Hierarchy
     * @param {AttributeHierarchiesApiPatchEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeHierarchiesApi
     */
    patchEntityAttributeHierarchies(requestParameters: AttributeHierarchiesApiPatchEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAttributeHierarchyOutDocument, any>>;
    /**
     *
     * @summary Put an Attribute Hierarchy
     * @param {AttributeHierarchiesApiUpdateEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeHierarchiesApi
     */
    updateEntityAttributeHierarchies(requestParameters: AttributeHierarchiesApiUpdateEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAttributeHierarchyOutDocument, any>>;
}

/**
 * AttributeHierarchiesApi - axios parameter creator
 * @export
 */
export declare const AttributeHierarchiesApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post Attribute Hierarchies
     * @param {string} workspaceId
     * @param {JsonApiAttributeHierarchyInDocument} jsonApiAttributeHierarchyInDocument
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityAttributeHierarchies: (workspaceId: string, jsonApiAttributeHierarchyInDocument: JsonApiAttributeHierarchyInDocument, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete an Attribute Hierarchy
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityAttributeHierarchies: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Attribute Hierarchies
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAttributeHierarchies: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get an Attribute Hierarchy
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAttributeHierarchies: (workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch an Attribute Hierarchy
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAttributeHierarchyPatchDocument} jsonApiAttributeHierarchyPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityAttributeHierarchies: (workspaceId: string, objectId: string, jsonApiAttributeHierarchyPatchDocument: JsonApiAttributeHierarchyPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put an Attribute Hierarchy
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAttributeHierarchyInDocument} jsonApiAttributeHierarchyInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityAttributeHierarchies: (workspaceId: string, objectId: string, jsonApiAttributeHierarchyInDocument: JsonApiAttributeHierarchyInDocument, filter?: string, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * Request parameters for createEntityAttributeHierarchies operation in AttributeHierarchiesApi.
 * @export
 * @interface AttributeHierarchiesApiCreateEntityAttributeHierarchiesRequest
 */
export declare interface AttributeHierarchiesApiCreateEntityAttributeHierarchiesRequest {
    /**
     *
     * @type {string}
     * @memberof AttributeHierarchiesApiCreateEntityAttributeHierarchies
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyInDocument}
     * @memberof AttributeHierarchiesApiCreateEntityAttributeHierarchies
     */
    readonly jsonApiAttributeHierarchyInDocument: JsonApiAttributeHierarchyInDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof AttributeHierarchiesApiCreateEntityAttributeHierarchies
     */
    readonly include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof AttributeHierarchiesApiCreateEntityAttributeHierarchies
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for deleteEntityAttributeHierarchies operation in AttributeHierarchiesApi.
 * @export
 * @interface AttributeHierarchiesApiDeleteEntityAttributeHierarchiesRequest
 */
export declare interface AttributeHierarchiesApiDeleteEntityAttributeHierarchiesRequest {
    /**
     *
     * @type {string}
     * @memberof AttributeHierarchiesApiDeleteEntityAttributeHierarchies
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof AttributeHierarchiesApiDeleteEntityAttributeHierarchies
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof AttributeHierarchiesApiDeleteEntityAttributeHierarchies
     */
    readonly filter?: string;
}

/**
 * AttributeHierarchiesApi - factory interface
 * @export
 */
export declare const AttributeHierarchiesApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Post Attribute Hierarchies
     * @param {AttributeHierarchiesApiCreateEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityAttributeHierarchies(requestParameters: AttributeHierarchiesApiCreateEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutDocument>;
    /**
     *
     * @summary Delete an Attribute Hierarchy
     * @param {AttributeHierarchiesApiDeleteEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityAttributeHierarchies(requestParameters: AttributeHierarchiesApiDeleteEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all Attribute Hierarchies
     * @param {AttributeHierarchiesApiGetAllEntitiesAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAttributeHierarchies(requestParameters: AttributeHierarchiesApiGetAllEntitiesAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutList>;
    /**
     *
     * @summary Get an Attribute Hierarchy
     * @param {AttributeHierarchiesApiGetEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAttributeHierarchies(requestParameters: AttributeHierarchiesApiGetEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutDocument>;
    /**
     *
     * @summary Patch an Attribute Hierarchy
     * @param {AttributeHierarchiesApiPatchEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityAttributeHierarchies(requestParameters: AttributeHierarchiesApiPatchEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutDocument>;
    /**
     *
     * @summary Put an Attribute Hierarchy
     * @param {AttributeHierarchiesApiUpdateEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityAttributeHierarchies(requestParameters: AttributeHierarchiesApiUpdateEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutDocument>;
};

/**
 * AttributeHierarchiesApi - functional programming interface
 * @export
 */
export declare const AttributeHierarchiesApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post Attribute Hierarchies
     * @param {string} workspaceId
     * @param {JsonApiAttributeHierarchyInDocument} jsonApiAttributeHierarchyInDocument
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityAttributeHierarchies(workspaceId: string, jsonApiAttributeHierarchyInDocument: JsonApiAttributeHierarchyInDocument, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeHierarchyOutDocument>>;
    /**
     *
     * @summary Delete an Attribute Hierarchy
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityAttributeHierarchies(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get all Attribute Hierarchies
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAttributeHierarchies(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeHierarchyOutList>>;
    /**
     *
     * @summary Get an Attribute Hierarchy
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAttributeHierarchies(workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeHierarchyOutDocument>>;
    /**
     *
     * @summary Patch an Attribute Hierarchy
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAttributeHierarchyPatchDocument} jsonApiAttributeHierarchyPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityAttributeHierarchies(workspaceId: string, objectId: string, jsonApiAttributeHierarchyPatchDocument: JsonApiAttributeHierarchyPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeHierarchyOutDocument>>;
    /**
     *
     * @summary Put an Attribute Hierarchy
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAttributeHierarchyInDocument} jsonApiAttributeHierarchyInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityAttributeHierarchies(workspaceId: string, objectId: string, jsonApiAttributeHierarchyInDocument: JsonApiAttributeHierarchyInDocument, filter?: string, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeHierarchyOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesAttributeHierarchies operation in AttributeHierarchiesApi.
 * @export
 * @interface AttributeHierarchiesApiGetAllEntitiesAttributeHierarchiesRequest
 */
export declare interface AttributeHierarchiesApiGetAllEntitiesAttributeHierarchiesRequest {
    /**
     *
     * @type {string}
     * @memberof AttributeHierarchiesApiGetAllEntitiesAttributeHierarchies
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof AttributeHierarchiesApiGetAllEntitiesAttributeHierarchies
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof AttributeHierarchiesApiGetAllEntitiesAttributeHierarchies
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof AttributeHierarchiesApiGetAllEntitiesAttributeHierarchies
     */
    readonly include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof AttributeHierarchiesApiGetAllEntitiesAttributeHierarchies
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof AttributeHierarchiesApiGetAllEntitiesAttributeHierarchies
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof AttributeHierarchiesApiGetAllEntitiesAttributeHierarchies
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof AttributeHierarchiesApiGetAllEntitiesAttributeHierarchies
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof AttributeHierarchiesApiGetAllEntitiesAttributeHierarchies
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityAttributeHierarchies operation in AttributeHierarchiesApi.
 * @export
 * @interface AttributeHierarchiesApiGetEntityAttributeHierarchiesRequest
 */
export declare interface AttributeHierarchiesApiGetEntityAttributeHierarchiesRequest {
    /**
     *
     * @type {string}
     * @memberof AttributeHierarchiesApiGetEntityAttributeHierarchies
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof AttributeHierarchiesApiGetEntityAttributeHierarchies
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof AttributeHierarchiesApiGetEntityAttributeHierarchies
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof AttributeHierarchiesApiGetEntityAttributeHierarchies
     */
    readonly include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof AttributeHierarchiesApiGetEntityAttributeHierarchies
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof AttributeHierarchiesApiGetEntityAttributeHierarchies
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * AttributeHierarchiesApi - interface
 * @export
 * @interface AttributeHierarchiesApi
 */
export declare interface AttributeHierarchiesApiInterface {
    /**
     *
     * @summary Post Attribute Hierarchies
     * @param {AttributeHierarchiesApiCreateEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeHierarchiesApiInterface
     */
    createEntityAttributeHierarchies(requestParameters: AttributeHierarchiesApiCreateEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutDocument>;
    /**
     *
     * @summary Delete an Attribute Hierarchy
     * @param {AttributeHierarchiesApiDeleteEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeHierarchiesApiInterface
     */
    deleteEntityAttributeHierarchies(requestParameters: AttributeHierarchiesApiDeleteEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all Attribute Hierarchies
     * @param {AttributeHierarchiesApiGetAllEntitiesAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeHierarchiesApiInterface
     */
    getAllEntitiesAttributeHierarchies(requestParameters: AttributeHierarchiesApiGetAllEntitiesAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutList>;
    /**
     *
     * @summary Get an Attribute Hierarchy
     * @param {AttributeHierarchiesApiGetEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeHierarchiesApiInterface
     */
    getEntityAttributeHierarchies(requestParameters: AttributeHierarchiesApiGetEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutDocument>;
    /**
     *
     * @summary Patch an Attribute Hierarchy
     * @param {AttributeHierarchiesApiPatchEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeHierarchiesApiInterface
     */
    patchEntityAttributeHierarchies(requestParameters: AttributeHierarchiesApiPatchEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutDocument>;
    /**
     *
     * @summary Put an Attribute Hierarchy
     * @param {AttributeHierarchiesApiUpdateEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributeHierarchiesApiInterface
     */
    updateEntityAttributeHierarchies(requestParameters: AttributeHierarchiesApiUpdateEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutDocument>;
}

/**
 * Request parameters for patchEntityAttributeHierarchies operation in AttributeHierarchiesApi.
 * @export
 * @interface AttributeHierarchiesApiPatchEntityAttributeHierarchiesRequest
 */
export declare interface AttributeHierarchiesApiPatchEntityAttributeHierarchiesRequest {
    /**
     *
     * @type {string}
     * @memberof AttributeHierarchiesApiPatchEntityAttributeHierarchies
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof AttributeHierarchiesApiPatchEntityAttributeHierarchies
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyPatchDocument}
     * @memberof AttributeHierarchiesApiPatchEntityAttributeHierarchies
     */
    readonly jsonApiAttributeHierarchyPatchDocument: JsonApiAttributeHierarchyPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof AttributeHierarchiesApiPatchEntityAttributeHierarchies
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof AttributeHierarchiesApiPatchEntityAttributeHierarchies
     */
    readonly include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for updateEntityAttributeHierarchies operation in AttributeHierarchiesApi.
 * @export
 * @interface AttributeHierarchiesApiUpdateEntityAttributeHierarchiesRequest
 */
export declare interface AttributeHierarchiesApiUpdateEntityAttributeHierarchiesRequest {
    /**
     *
     * @type {string}
     * @memberof AttributeHierarchiesApiUpdateEntityAttributeHierarchies
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof AttributeHierarchiesApiUpdateEntityAttributeHierarchies
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyInDocument}
     * @memberof AttributeHierarchiesApiUpdateEntityAttributeHierarchies
     */
    readonly jsonApiAttributeHierarchyInDocument: JsonApiAttributeHierarchyInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof AttributeHierarchiesApiUpdateEntityAttributeHierarchies
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof AttributeHierarchiesApiUpdateEntityAttributeHierarchies
     */
    readonly include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 *
 * @export
 * @interface AttributeItem
 */
export declare interface AttributeItem {
    /**
     *
     * @type {string}
     * @memberof AttributeItem
     */
    localIdentifier: string;
    /**
     *
     * @type {AfmObjectIdentifierLabel}
     * @memberof AttributeItem
     */
    label: AfmObjectIdentifierLabel;
    /**
     * Specifies that the label should be outer-joined.
     * @type {boolean}
     * @memberof AttributeItem
     */
    showAllValues?: boolean;
}

/**
 * Header containing the information related to attributes.
 * @export
 * @interface AttributeResultHeader
 */
export declare interface AttributeResultHeader {
    /**
     * A value of the current attribute label.
     * @type {string}
     * @memberof AttributeResultHeader
     */
    labelValue: string;
    /**
     * A value of the primary attribute label.
     * @type {string}
     * @memberof AttributeResultHeader
     */
    primaryLabelValue: string;
}

/**
 * AttributesApi - object-oriented interface
 * @export
 * @class AttributesApi
 * @extends {BaseAPI}
 */
export declare class AttributesApi extends MetadataBaseApi implements AttributesApiInterface {
    /**
     *
     * @summary Get all Attributes
     * @param {AttributesApiGetAllEntitiesAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    getAllEntitiesAttributes(requestParameters: AttributesApiGetAllEntitiesAttributesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAttributeOutList, any>>;
    /**
     *
     * @summary Get an Attribute
     * @param {AttributesApiGetEntityAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApi
     */
    getEntityAttributes(requestParameters: AttributesApiGetEntityAttributesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAttributeOutDocument, any>>;
}

/**
 * AttributesApi - axios parameter creator
 * @export
 */
export declare const AttributesApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Get all Attributes
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'attributeHierarchies' | 'dataset' | 'defaultView' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAttributes: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"datasets" | "labels" | "attributeHierarchies" | "dataset" | "defaultView" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get an Attribute
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'attributeHierarchies' | 'dataset' | 'defaultView' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAttributes: (workspaceId: string, objectId: string, filter?: string, include?: Array<"datasets" | "labels" | "attributeHierarchies" | "dataset" | "defaultView" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * AttributesApi - factory interface
 * @export
 */
export declare const AttributesApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get all Attributes
     * @param {AttributesApiGetAllEntitiesAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAttributes(requestParameters: AttributesApiGetAllEntitiesAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeOutList>;
    /**
     *
     * @summary Get an Attribute
     * @param {AttributesApiGetEntityAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAttributes(requestParameters: AttributesApiGetEntityAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeOutDocument>;
};

/**
 * AttributesApi - functional programming interface
 * @export
 */
export declare const AttributesApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Get all Attributes
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'attributeHierarchies' | 'dataset' | 'defaultView' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAttributes(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"datasets" | "labels" | "attributeHierarchies" | "dataset" | "defaultView" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeOutList>>;
    /**
     *
     * @summary Get an Attribute
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'attributeHierarchies' | 'dataset' | 'defaultView' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAttributes(workspaceId: string, objectId: string, filter?: string, include?: Array<"datasets" | "labels" | "attributeHierarchies" | "dataset" | "defaultView" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesAttributes operation in AttributesApi.
 * @export
 * @interface AttributesApiGetAllEntitiesAttributesRequest
 */
export declare interface AttributesApiGetAllEntitiesAttributesRequest {
    /**
     *
     * @type {string}
     * @memberof AttributesApiGetAllEntitiesAttributes
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof AttributesApiGetAllEntitiesAttributes
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof AttributesApiGetAllEntitiesAttributes
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'datasets' | 'labels' | 'attributeHierarchies' | 'dataset' | 'defaultView' | 'ALL'>}
     * @memberof AttributesApiGetAllEntitiesAttributes
     */
    readonly include?: Array<"datasets" | "labels" | "attributeHierarchies" | "dataset" | "defaultView" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof AttributesApiGetAllEntitiesAttributes
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof AttributesApiGetAllEntitiesAttributes
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof AttributesApiGetAllEntitiesAttributes
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof AttributesApiGetAllEntitiesAttributes
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof AttributesApiGetAllEntitiesAttributes
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityAttributes operation in AttributesApi.
 * @export
 * @interface AttributesApiGetEntityAttributesRequest
 */
export declare interface AttributesApiGetEntityAttributesRequest {
    /**
     *
     * @type {string}
     * @memberof AttributesApiGetEntityAttributes
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof AttributesApiGetEntityAttributes
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof AttributesApiGetEntityAttributes
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'datasets' | 'labels' | 'attributeHierarchies' | 'dataset' | 'defaultView' | 'ALL'>}
     * @memberof AttributesApiGetEntityAttributes
     */
    readonly include?: Array<"datasets" | "labels" | "attributeHierarchies" | "dataset" | "defaultView" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof AttributesApiGetEntityAttributes
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof AttributesApiGetEntityAttributes
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * AttributesApi - interface
 * @export
 * @interface AttributesApi
 */
export declare interface AttributesApiInterface {
    /**
     *
     * @summary Get all Attributes
     * @param {AttributesApiGetAllEntitiesAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApiInterface
     */
    getAllEntitiesAttributes(requestParameters: AttributesApiGetAllEntitiesAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeOutList>;
    /**
     *
     * @summary Get an Attribute
     * @param {AttributesApiGetEntityAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttributesApiInterface
     */
    getEntityAttributes(requestParameters: AttributesApiGetEntityAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeOutDocument>;
}

/**
 * ActionsApi - factory interface
 * @export
 */
export declare const AuthActionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
     * @summary Invite User
     * @param {ActionsApiProcessInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processInvitation(requestParameters: ActionsApiProcessInvitationRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
};

/**
 * ActionsApi - interface
 * @export
 * @interface ActionsApi
 */
export declare interface AuthActionsApiInterface {
    /**
     * Puts a new invitation requirement into the invitation generator queue. This is a GoodData Cloud specific endpoint.
     * @summary Invite User
     * @param {ActionsApiProcessInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    processInvitation(requestParameters: ActionsApiProcessInvitationRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
}

/**
 *
 * @export
 * @interface AvailableAssignees
 */
export declare interface AvailableAssignees {
    /**
     * List of users
     * @type {Array<UserAssignee>}
     * @memberof AvailableAssignees
     */
    users: Array<UserAssignee>;
    /**
     * List of user groups
     * @type {Array<UserGroupAssignee>}
     * @memberof AvailableAssignees
     */
    userGroups: Array<UserGroupAssignee>;
}

/**
 * AvailableDriversApi - object-oriented interface
 * @export
 * @class AvailableDriversApi
 * @extends {BaseAPI}
 */
export declare class AvailableDriversApi extends MetadataBaseApi implements AvailableDriversApiInterface {
    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailableDriversApi
     */
    getDataSourceDrivers(options?: AxiosRequestConfig): Promise<AxiosResponse<    {
    [key: string]: string;
    }, any>>;
}

/**
 * AvailableDriversApi - axios parameter creator
 * @export
 */
export declare const AvailableDriversApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceDrivers: (options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * AvailableDriversApi - factory interface
 * @export
 */
export declare const AvailableDriversApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceDrivers(options?: AxiosRequestConfig): AxiosPromise<{
        [key: string]: string;
    }>;
};

/**
 * AvailableDriversApi - functional programming interface
 * @export
 */
export declare const AvailableDriversApiFp: (configuration?: MetadataConfiguration) => {
    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceDrivers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: string;
    }>>;
};

/**
 * AvailableDriversApi - interface
 * @export
 * @interface AvailableDriversApi
 */
export declare interface AvailableDriversApiInterface {
    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailableDriversApiInterface
     */
    getDataSourceDrivers(options?: AxiosRequestConfig): AxiosPromise<{
        [key: string]: string;
    }>;
}

/**
 * Warning related to single column.
 * @export
 * @interface ColumnWarning
 */
export declare interface ColumnWarning {
    /**
     * Column name.
     * @type {Array<string>}
     * @memberof ColumnWarning
     */
    name: Array<string>;
    /**
     * Warning message related to the column.
     * @type {Array<string>}
     * @memberof ColumnWarning
     */
    message: Array<string>;
}

/**
 * Filter the result by comparing specified metric to given constant value, using given comparison operator.
 * @export
 * @interface ComparisonMeasureValueFilter
 */
export declare interface ComparisonMeasureValueFilter {
    /**
     *
     * @type {ComparisonMeasureValueFilterComparisonMeasureValueFilter}
     * @memberof ComparisonMeasureValueFilter
     */
    comparisonMeasureValueFilter: ComparisonMeasureValueFilterComparisonMeasureValueFilter;
}

/**
 *
 * @export
 * @interface ComparisonMeasureValueFilterComparisonMeasureValueFilter
 */
export declare interface ComparisonMeasureValueFilterComparisonMeasureValueFilter {
    /**
     *
     * @type {number}
     * @memberof ComparisonMeasureValueFilterComparisonMeasureValueFilter
     */
    treatNullValuesAs?: number;
    /**
     *
     * @type {string}
     * @memberof ComparisonMeasureValueFilterComparisonMeasureValueFilter
     */
    operator: ComparisonMeasureValueFilterComparisonMeasureValueFilterOperatorEnum;
    /**
     *
     * @type {number}
     * @memberof ComparisonMeasureValueFilterComparisonMeasureValueFilter
     */
    value: number;
    /**
     *
     * @type {boolean}
     * @memberof ComparisonMeasureValueFilterComparisonMeasureValueFilter
     */
    applyOnResult?: boolean;
    /**
     *
     * @type {AfmIdentifier}
     * @memberof ComparisonMeasureValueFilterComparisonMeasureValueFilter
     */
    measure: AfmIdentifier;
}

export declare const ComparisonMeasureValueFilterComparisonMeasureValueFilterOperatorEnum: {
    readonly GREATER_THAN: "GREATER_THAN";
    readonly GREATER_THAN_OR_EQUAL_TO: "GREATER_THAN_OR_EQUAL_TO";
    readonly LESS_THAN: "LESS_THAN";
    readonly LESS_THAN_OR_EQUAL_TO: "LESS_THAN_OR_EQUAL_TO";
    readonly EQUAL_TO: "EQUAL_TO";
    readonly NOT_EQUAL_TO: "NOT_EQUAL_TO";
};

export declare type ComparisonMeasureValueFilterComparisonMeasureValueFilterOperatorEnum = typeof ComparisonMeasureValueFilterComparisonMeasureValueFilterOperatorEnum[keyof typeof ComparisonMeasureValueFilterComparisonMeasureValueFilterOperatorEnum];

export declare class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;
    constructor(param?: ConfigurationParameters);
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    isJsonMime(mime: string): boolean;
}

/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
export declare interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

/**
 * ContextFiltersApi - object-oriented interface
 * @export
 * @class ContextFiltersApi
 * @extends {BaseAPI}
 */
export declare class ContextFiltersApi extends MetadataBaseApi implements ContextFiltersApiInterface {
    /**
     *
     * @summary Post Context Filters
     * @param {ContextFiltersApiCreateEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextFiltersApi
     */
    createEntityFilterContexts(requestParameters: ContextFiltersApiCreateEntityFilterContextsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiFilterContextOutDocument, any>>;
    /**
     *
     * @summary Delete a Context Filter
     * @param {ContextFiltersApiDeleteEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextFiltersApi
     */
    deleteEntityFilterContexts(requestParameters: ContextFiltersApiDeleteEntityFilterContextsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Get all Context Filters
     * @param {ContextFiltersApiGetAllEntitiesFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextFiltersApi
     */
    getAllEntitiesFilterContexts(requestParameters: ContextFiltersApiGetAllEntitiesFilterContextsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiFilterContextOutList, any>>;
    /**
     *
     * @summary Get a Context Filter
     * @param {ContextFiltersApiGetEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextFiltersApi
     */
    getEntityFilterContexts(requestParameters: ContextFiltersApiGetEntityFilterContextsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiFilterContextOutDocument, any>>;
    /**
     *
     * @summary Patch a Context Filter
     * @param {ContextFiltersApiPatchEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextFiltersApi
     */
    patchEntityFilterContexts(requestParameters: ContextFiltersApiPatchEntityFilterContextsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiFilterContextOutDocument, any>>;
    /**
     *
     * @summary Put a Context Filter
     * @param {ContextFiltersApiUpdateEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextFiltersApi
     */
    updateEntityFilterContexts(requestParameters: ContextFiltersApiUpdateEntityFilterContextsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiFilterContextOutDocument, any>>;
}

/**
 * ContextFiltersApi - axios parameter creator
 * @export
 */
export declare const ContextFiltersApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post Context Filters
     * @param {string} workspaceId
     * @param {JsonApiFilterContextPostOptionalIdDocument} jsonApiFilterContextPostOptionalIdDocument
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityFilterContexts: (workspaceId: string, jsonApiFilterContextPostOptionalIdDocument: JsonApiFilterContextPostOptionalIdDocument, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Context Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityFilterContexts: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Context Filters
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFilterContexts: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Context Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFilterContexts: (workspaceId: string, objectId: string, filter?: string, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Context Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextPatchDocument} jsonApiFilterContextPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityFilterContexts: (workspaceId: string, objectId: string, jsonApiFilterContextPatchDocument: JsonApiFilterContextPatchDocument, filter?: string, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a Context Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityFilterContexts: (workspaceId: string, objectId: string, jsonApiFilterContextInDocument: JsonApiFilterContextInDocument, filter?: string, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * Request parameters for createEntityFilterContexts operation in ContextFiltersApi.
 * @export
 * @interface ContextFiltersApiCreateEntityFilterContextsRequest
 */
export declare interface ContextFiltersApiCreateEntityFilterContextsRequest {
    /**
     *
     * @type {string}
     * @memberof ContextFiltersApiCreateEntityFilterContexts
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiFilterContextPostOptionalIdDocument}
     * @memberof ContextFiltersApiCreateEntityFilterContexts
     */
    readonly jsonApiFilterContextPostOptionalIdDocument: JsonApiFilterContextPostOptionalIdDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>}
     * @memberof ContextFiltersApiCreateEntityFilterContexts
     */
    readonly include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof ContextFiltersApiCreateEntityFilterContexts
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for deleteEntityFilterContexts operation in ContextFiltersApi.
 * @export
 * @interface ContextFiltersApiDeleteEntityFilterContextsRequest
 */
export declare interface ContextFiltersApiDeleteEntityFilterContextsRequest {
    /**
     *
     * @type {string}
     * @memberof ContextFiltersApiDeleteEntityFilterContexts
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof ContextFiltersApiDeleteEntityFilterContexts
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof ContextFiltersApiDeleteEntityFilterContexts
     */
    readonly filter?: string;
}

/**
 * ContextFiltersApi - factory interface
 * @export
 */
export declare const ContextFiltersApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Post Context Filters
     * @param {ContextFiltersApiCreateEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityFilterContexts(requestParameters: ContextFiltersApiCreateEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @summary Delete a Context Filter
     * @param {ContextFiltersApiDeleteEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityFilterContexts(requestParameters: ContextFiltersApiDeleteEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all Context Filters
     * @param {ContextFiltersApiGetAllEntitiesFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFilterContexts(requestParameters: ContextFiltersApiGetAllEntitiesFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutList>;
    /**
     *
     * @summary Get a Context Filter
     * @param {ContextFiltersApiGetEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFilterContexts(requestParameters: ContextFiltersApiGetEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @summary Patch a Context Filter
     * @param {ContextFiltersApiPatchEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityFilterContexts(requestParameters: ContextFiltersApiPatchEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @summary Put a Context Filter
     * @param {ContextFiltersApiUpdateEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityFilterContexts(requestParameters: ContextFiltersApiUpdateEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutDocument>;
};

/**
 * ContextFiltersApi - functional programming interface
 * @export
 */
export declare const ContextFiltersApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post Context Filters
     * @param {string} workspaceId
     * @param {JsonApiFilterContextPostOptionalIdDocument} jsonApiFilterContextPostOptionalIdDocument
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityFilterContexts(workspaceId: string, jsonApiFilterContextPostOptionalIdDocument: JsonApiFilterContextPostOptionalIdDocument, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutDocument>>;
    /**
     *
     * @summary Delete a Context Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityFilterContexts(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get all Context Filters
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFilterContexts(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutList>>;
    /**
     *
     * @summary Get a Context Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFilterContexts(workspaceId: string, objectId: string, filter?: string, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutDocument>>;
    /**
     *
     * @summary Patch a Context Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextPatchDocument} jsonApiFilterContextPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityFilterContexts(workspaceId: string, objectId: string, jsonApiFilterContextPatchDocument: JsonApiFilterContextPatchDocument, filter?: string, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutDocument>>;
    /**
     *
     * @summary Put a Context Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityFilterContexts(workspaceId: string, objectId: string, jsonApiFilterContextInDocument: JsonApiFilterContextInDocument, filter?: string, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesFilterContexts operation in ContextFiltersApi.
 * @export
 * @interface ContextFiltersApiGetAllEntitiesFilterContextsRequest
 */
export declare interface ContextFiltersApiGetAllEntitiesFilterContextsRequest {
    /**
     *
     * @type {string}
     * @memberof ContextFiltersApiGetAllEntitiesFilterContexts
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof ContextFiltersApiGetAllEntitiesFilterContexts
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof ContextFiltersApiGetAllEntitiesFilterContexts
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>}
     * @memberof ContextFiltersApiGetAllEntitiesFilterContexts
     */
    readonly include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof ContextFiltersApiGetAllEntitiesFilterContexts
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof ContextFiltersApiGetAllEntitiesFilterContexts
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof ContextFiltersApiGetAllEntitiesFilterContexts
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof ContextFiltersApiGetAllEntitiesFilterContexts
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof ContextFiltersApiGetAllEntitiesFilterContexts
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityFilterContexts operation in ContextFiltersApi.
 * @export
 * @interface ContextFiltersApiGetEntityFilterContextsRequest
 */
export declare interface ContextFiltersApiGetEntityFilterContextsRequest {
    /**
     *
     * @type {string}
     * @memberof ContextFiltersApiGetEntityFilterContexts
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof ContextFiltersApiGetEntityFilterContexts
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof ContextFiltersApiGetEntityFilterContexts
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>}
     * @memberof ContextFiltersApiGetEntityFilterContexts
     */
    readonly include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof ContextFiltersApiGetEntityFilterContexts
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof ContextFiltersApiGetEntityFilterContexts
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * ContextFiltersApi - interface
 * @export
 * @interface ContextFiltersApi
 */
export declare interface ContextFiltersApiInterface {
    /**
     *
     * @summary Post Context Filters
     * @param {ContextFiltersApiCreateEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextFiltersApiInterface
     */
    createEntityFilterContexts(requestParameters: ContextFiltersApiCreateEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @summary Delete a Context Filter
     * @param {ContextFiltersApiDeleteEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextFiltersApiInterface
     */
    deleteEntityFilterContexts(requestParameters: ContextFiltersApiDeleteEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all Context Filters
     * @param {ContextFiltersApiGetAllEntitiesFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextFiltersApiInterface
     */
    getAllEntitiesFilterContexts(requestParameters: ContextFiltersApiGetAllEntitiesFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutList>;
    /**
     *
     * @summary Get a Context Filter
     * @param {ContextFiltersApiGetEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextFiltersApiInterface
     */
    getEntityFilterContexts(requestParameters: ContextFiltersApiGetEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @summary Patch a Context Filter
     * @param {ContextFiltersApiPatchEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextFiltersApiInterface
     */
    patchEntityFilterContexts(requestParameters: ContextFiltersApiPatchEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @summary Put a Context Filter
     * @param {ContextFiltersApiUpdateEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContextFiltersApiInterface
     */
    updateEntityFilterContexts(requestParameters: ContextFiltersApiUpdateEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutDocument>;
}

/**
 * Request parameters for patchEntityFilterContexts operation in ContextFiltersApi.
 * @export
 * @interface ContextFiltersApiPatchEntityFilterContextsRequest
 */
export declare interface ContextFiltersApiPatchEntityFilterContextsRequest {
    /**
     *
     * @type {string}
     * @memberof ContextFiltersApiPatchEntityFilterContexts
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof ContextFiltersApiPatchEntityFilterContexts
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiFilterContextPatchDocument}
     * @memberof ContextFiltersApiPatchEntityFilterContexts
     */
    readonly jsonApiFilterContextPatchDocument: JsonApiFilterContextPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof ContextFiltersApiPatchEntityFilterContexts
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>}
     * @memberof ContextFiltersApiPatchEntityFilterContexts
     */
    readonly include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
}

/**
 * Request parameters for updateEntityFilterContexts operation in ContextFiltersApi.
 * @export
 * @interface ContextFiltersApiUpdateEntityFilterContextsRequest
 */
export declare interface ContextFiltersApiUpdateEntityFilterContextsRequest {
    /**
     *
     * @type {string}
     * @memberof ContextFiltersApiUpdateEntityFilterContexts
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof ContextFiltersApiUpdateEntityFilterContexts
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiFilterContextInDocument}
     * @memberof ContextFiltersApiUpdateEntityFilterContexts
     */
    readonly jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof ContextFiltersApiUpdateEntityFilterContexts
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>}
     * @memberof ContextFiltersApiUpdateEntityFilterContexts
     */
    readonly include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
}

/**
 * CookieSecurityConfigurationApi - object-oriented interface
 * @export
 * @class CookieSecurityConfigurationApi
 * @extends {BaseAPI}
 */
export declare class CookieSecurityConfigurationApi extends MetadataBaseApi implements CookieSecurityConfigurationApiInterface {
    /**
     *
     * @summary Get CookieSecurityConfiguration
     * @param {CookieSecurityConfigurationApiGetEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CookieSecurityConfigurationApi
     */
    getEntityCookieSecurityConfigurations(requestParameters: CookieSecurityConfigurationApiGetEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCookieSecurityConfigurationOutDocument, any>>;
    /**
     *
     * @summary Patch CookieSecurityConfiguration
     * @param {CookieSecurityConfigurationApiPatchEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CookieSecurityConfigurationApi
     */
    patchEntityCookieSecurityConfigurations(requestParameters: CookieSecurityConfigurationApiPatchEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCookieSecurityConfigurationOutDocument, any>>;
    /**
     *
     * @summary Put CookieSecurityConfiguration
     * @param {CookieSecurityConfigurationApiUpdateEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CookieSecurityConfigurationApi
     */
    updateEntityCookieSecurityConfigurations(requestParameters: CookieSecurityConfigurationApiUpdateEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCookieSecurityConfigurationOutDocument, any>>;
}

/**
 * CookieSecurityConfigurationApi - axios parameter creator
 * @export
 */
export declare const CookieSecurityConfigurationApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Get CookieSecurityConfiguration
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCookieSecurityConfigurations: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch CookieSecurityConfiguration
     * @param {string} id
     * @param {JsonApiCookieSecurityConfigurationPatchDocument} jsonApiCookieSecurityConfigurationPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCookieSecurityConfigurations: (id: string, jsonApiCookieSecurityConfigurationPatchDocument: JsonApiCookieSecurityConfigurationPatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put CookieSecurityConfiguration
     * @param {string} id
     * @param {JsonApiCookieSecurityConfigurationInDocument} jsonApiCookieSecurityConfigurationInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCookieSecurityConfigurations: (id: string, jsonApiCookieSecurityConfigurationInDocument: JsonApiCookieSecurityConfigurationInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * CookieSecurityConfigurationApi - factory interface
 * @export
 */
export declare const CookieSecurityConfigurationApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get CookieSecurityConfiguration
     * @param {CookieSecurityConfigurationApiGetEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCookieSecurityConfigurations(requestParameters: CookieSecurityConfigurationApiGetEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @summary Patch CookieSecurityConfiguration
     * @param {CookieSecurityConfigurationApiPatchEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCookieSecurityConfigurations(requestParameters: CookieSecurityConfigurationApiPatchEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @summary Put CookieSecurityConfiguration
     * @param {CookieSecurityConfigurationApiUpdateEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCookieSecurityConfigurations(requestParameters: CookieSecurityConfigurationApiUpdateEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
};

/**
 * CookieSecurityConfigurationApi - functional programming interface
 * @export
 */
export declare const CookieSecurityConfigurationApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Get CookieSecurityConfiguration
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCookieSecurityConfigurations(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>>;
    /**
     *
     * @summary Patch CookieSecurityConfiguration
     * @param {string} id
     * @param {JsonApiCookieSecurityConfigurationPatchDocument} jsonApiCookieSecurityConfigurationPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCookieSecurityConfigurations(id: string, jsonApiCookieSecurityConfigurationPatchDocument: JsonApiCookieSecurityConfigurationPatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>>;
    /**
     *
     * @summary Put CookieSecurityConfiguration
     * @param {string} id
     * @param {JsonApiCookieSecurityConfigurationInDocument} jsonApiCookieSecurityConfigurationInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCookieSecurityConfigurations(id: string, jsonApiCookieSecurityConfigurationInDocument: JsonApiCookieSecurityConfigurationInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>>;
};

/**
 * Request parameters for getEntityCookieSecurityConfigurations operation in CookieSecurityConfigurationApi.
 * @export
 * @interface CookieSecurityConfigurationApiGetEntityCookieSecurityConfigurationsRequest
 */
export declare interface CookieSecurityConfigurationApiGetEntityCookieSecurityConfigurationsRequest {
    /**
     *
     * @type {string}
     * @memberof CookieSecurityConfigurationApiGetEntityCookieSecurityConfigurations
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof CookieSecurityConfigurationApiGetEntityCookieSecurityConfigurations
     */
    readonly filter?: string;
}

/**
 * CookieSecurityConfigurationApi - interface
 * @export
 * @interface CookieSecurityConfigurationApi
 */
export declare interface CookieSecurityConfigurationApiInterface {
    /**
     *
     * @summary Get CookieSecurityConfiguration
     * @param {CookieSecurityConfigurationApiGetEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CookieSecurityConfigurationApiInterface
     */
    getEntityCookieSecurityConfigurations(requestParameters: CookieSecurityConfigurationApiGetEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @summary Patch CookieSecurityConfiguration
     * @param {CookieSecurityConfigurationApiPatchEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CookieSecurityConfigurationApiInterface
     */
    patchEntityCookieSecurityConfigurations(requestParameters: CookieSecurityConfigurationApiPatchEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @summary Put CookieSecurityConfiguration
     * @param {CookieSecurityConfigurationApiUpdateEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CookieSecurityConfigurationApiInterface
     */
    updateEntityCookieSecurityConfigurations(requestParameters: CookieSecurityConfigurationApiUpdateEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
}

/**
 * Request parameters for patchEntityCookieSecurityConfigurations operation in CookieSecurityConfigurationApi.
 * @export
 * @interface CookieSecurityConfigurationApiPatchEntityCookieSecurityConfigurationsRequest
 */
export declare interface CookieSecurityConfigurationApiPatchEntityCookieSecurityConfigurationsRequest {
    /**
     *
     * @type {string}
     * @memberof CookieSecurityConfigurationApiPatchEntityCookieSecurityConfigurations
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiCookieSecurityConfigurationPatchDocument}
     * @memberof CookieSecurityConfigurationApiPatchEntityCookieSecurityConfigurations
     */
    readonly jsonApiCookieSecurityConfigurationPatchDocument: JsonApiCookieSecurityConfigurationPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof CookieSecurityConfigurationApiPatchEntityCookieSecurityConfigurations
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityCookieSecurityConfigurations operation in CookieSecurityConfigurationApi.
 * @export
 * @interface CookieSecurityConfigurationApiUpdateEntityCookieSecurityConfigurationsRequest
 */
export declare interface CookieSecurityConfigurationApiUpdateEntityCookieSecurityConfigurationsRequest {
    /**
     *
     * @type {string}
     * @memberof CookieSecurityConfigurationApiUpdateEntityCookieSecurityConfigurations
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiCookieSecurityConfigurationInDocument}
     * @memberof CookieSecurityConfigurationApiUpdateEntityCookieSecurityConfigurations
     */
    readonly jsonApiCookieSecurityConfigurationInDocument: JsonApiCookieSecurityConfigurationInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof CookieSecurityConfigurationApiUpdateEntityCookieSecurityConfigurations
     */
    readonly filter?: string;
}

/**
 * CSPDirectivesApi - object-oriented interface
 * @export
 * @class CSPDirectivesApi
 * @extends {BaseAPI}
 */
export declare class CSPDirectivesApi extends MetadataBaseApi implements CSPDirectivesApiInterface {
    /**
     *  Context Security Police Directive
     * @summary Post CSP Directives
     * @param {CSPDirectivesApiCreateEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CSPDirectivesApi
     */
    createEntityCspDirectives(requestParameters: CSPDirectivesApiCreateEntityCspDirectivesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCspDirectiveOutDocument, any>>;
    /**
     *  Context Security Police Directive
     * @summary Delete CSP Directives
     * @param {CSPDirectivesApiDeleteEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CSPDirectivesApi
     */
    deleteEntityCspDirectives(requestParameters: CSPDirectivesApiDeleteEntityCspDirectivesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {CSPDirectivesApiGetAllEntitiesCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CSPDirectivesApi
     */
    getAllEntitiesCspDirectives(requestParameters?: CSPDirectivesApiGetAllEntitiesCspDirectivesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCspDirectiveOutList, any>>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {CSPDirectivesApiGetEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CSPDirectivesApi
     */
    getEntityCspDirectives(requestParameters: CSPDirectivesApiGetEntityCspDirectivesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCspDirectiveOutDocument, any>>;
    /**
     *  Context Security Police Directive
     * @summary Patch CSP Directives
     * @param {CSPDirectivesApiPatchEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CSPDirectivesApi
     */
    patchEntityCspDirectives(requestParameters: CSPDirectivesApiPatchEntityCspDirectivesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCspDirectiveOutDocument, any>>;
    /**
     *  Context Security Police Directive
     * @summary Put CSP Directives
     * @param {CSPDirectivesApiUpdateEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CSPDirectivesApi
     */
    updateEntityCspDirectives(requestParameters: CSPDirectivesApiUpdateEntityCspDirectivesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCspDirectiveOutDocument, any>>;
}

/**
 * CSPDirectivesApi - axios parameter creator
 * @export
 */
export declare const CSPDirectivesApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *  Context Security Police Directive
     * @summary Post CSP Directives
     * @param {JsonApiCspDirectiveInDocument} jsonApiCspDirectiveInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityCspDirectives: (jsonApiCspDirectiveInDocument: JsonApiCspDirectiveInDocument, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *  Context Security Police Directive
     * @summary Delete CSP Directives
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityCspDirectives: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesCspDirectives: (filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCspDirectives: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *  Context Security Police Directive
     * @summary Patch CSP Directives
     * @param {string} id
     * @param {JsonApiCspDirectivePatchDocument} jsonApiCspDirectivePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCspDirectives: (id: string, jsonApiCspDirectivePatchDocument: JsonApiCspDirectivePatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *  Context Security Police Directive
     * @summary Put CSP Directives
     * @param {string} id
     * @param {JsonApiCspDirectiveInDocument} jsonApiCspDirectiveInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCspDirectives: (id: string, jsonApiCspDirectiveInDocument: JsonApiCspDirectiveInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * Request parameters for createEntityCspDirectives operation in CSPDirectivesApi.
 * @export
 * @interface CSPDirectivesApiCreateEntityCspDirectivesRequest
 */
export declare interface CSPDirectivesApiCreateEntityCspDirectivesRequest {
    /**
     *
     * @type {JsonApiCspDirectiveInDocument}
     * @memberof CSPDirectivesApiCreateEntityCspDirectives
     */
    readonly jsonApiCspDirectiveInDocument: JsonApiCspDirectiveInDocument;
}

/**
 * Request parameters for deleteEntityCspDirectives operation in CSPDirectivesApi.
 * @export
 * @interface CSPDirectivesApiDeleteEntityCspDirectivesRequest
 */
export declare interface CSPDirectivesApiDeleteEntityCspDirectivesRequest {
    /**
     *
     * @type {string}
     * @memberof CSPDirectivesApiDeleteEntityCspDirectives
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof CSPDirectivesApiDeleteEntityCspDirectives
     */
    readonly filter?: string;
}

/**
 * CSPDirectivesApi - factory interface
 * @export
 */
export declare const CSPDirectivesApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *  Context Security Police Directive
     * @summary Post CSP Directives
     * @param {CSPDirectivesApiCreateEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityCspDirectives(requestParameters: CSPDirectivesApiCreateEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutDocument>;
    /**
     *  Context Security Police Directive
     * @summary Delete CSP Directives
     * @param {CSPDirectivesApiDeleteEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityCspDirectives(requestParameters: CSPDirectivesApiDeleteEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {CSPDirectivesApiGetAllEntitiesCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesCspDirectives(requestParameters: CSPDirectivesApiGetAllEntitiesCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutList>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {CSPDirectivesApiGetEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCspDirectives(requestParameters: CSPDirectivesApiGetEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutDocument>;
    /**
     *  Context Security Police Directive
     * @summary Patch CSP Directives
     * @param {CSPDirectivesApiPatchEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCspDirectives(requestParameters: CSPDirectivesApiPatchEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutDocument>;
    /**
     *  Context Security Police Directive
     * @summary Put CSP Directives
     * @param {CSPDirectivesApiUpdateEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCspDirectives(requestParameters: CSPDirectivesApiUpdateEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutDocument>;
};

/**
 * CSPDirectivesApi - functional programming interface
 * @export
 */
export declare const CSPDirectivesApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *  Context Security Police Directive
     * @summary Post CSP Directives
     * @param {JsonApiCspDirectiveInDocument} jsonApiCspDirectiveInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityCspDirectives(jsonApiCspDirectiveInDocument: JsonApiCspDirectiveInDocument, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCspDirectiveOutDocument>>;
    /**
     *  Context Security Police Directive
     * @summary Delete CSP Directives
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityCspDirectives(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesCspDirectives(filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCspDirectiveOutList>>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCspDirectives(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCspDirectiveOutDocument>>;
    /**
     *  Context Security Police Directive
     * @summary Patch CSP Directives
     * @param {string} id
     * @param {JsonApiCspDirectivePatchDocument} jsonApiCspDirectivePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCspDirectives(id: string, jsonApiCspDirectivePatchDocument: JsonApiCspDirectivePatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCspDirectiveOutDocument>>;
    /**
     *  Context Security Police Directive
     * @summary Put CSP Directives
     * @param {string} id
     * @param {JsonApiCspDirectiveInDocument} jsonApiCspDirectiveInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCspDirectives(id: string, jsonApiCspDirectiveInDocument: JsonApiCspDirectiveInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCspDirectiveOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesCspDirectives operation in CSPDirectivesApi.
 * @export
 * @interface CSPDirectivesApiGetAllEntitiesCspDirectivesRequest
 */
export declare interface CSPDirectivesApiGetAllEntitiesCspDirectivesRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof CSPDirectivesApiGetAllEntitiesCspDirectives
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof CSPDirectivesApiGetAllEntitiesCspDirectives
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof CSPDirectivesApiGetAllEntitiesCspDirectives
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof CSPDirectivesApiGetAllEntitiesCspDirectives
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getEntityCspDirectives operation in CSPDirectivesApi.
 * @export
 * @interface CSPDirectivesApiGetEntityCspDirectivesRequest
 */
export declare interface CSPDirectivesApiGetEntityCspDirectivesRequest {
    /**
     *
     * @type {string}
     * @memberof CSPDirectivesApiGetEntityCspDirectives
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof CSPDirectivesApiGetEntityCspDirectives
     */
    readonly filter?: string;
}

/**
 * CSPDirectivesApi - interface
 * @export
 * @interface CSPDirectivesApi
 */
export declare interface CSPDirectivesApiInterface {
    /**
     *  Context Security Police Directive
     * @summary Post CSP Directives
     * @param {CSPDirectivesApiCreateEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CSPDirectivesApiInterface
     */
    createEntityCspDirectives(requestParameters: CSPDirectivesApiCreateEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutDocument>;
    /**
     *  Context Security Police Directive
     * @summary Delete CSP Directives
     * @param {CSPDirectivesApiDeleteEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CSPDirectivesApiInterface
     */
    deleteEntityCspDirectives(requestParameters: CSPDirectivesApiDeleteEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {CSPDirectivesApiGetAllEntitiesCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CSPDirectivesApiInterface
     */
    getAllEntitiesCspDirectives(requestParameters: CSPDirectivesApiGetAllEntitiesCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutList>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {CSPDirectivesApiGetEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CSPDirectivesApiInterface
     */
    getEntityCspDirectives(requestParameters: CSPDirectivesApiGetEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutDocument>;
    /**
     *  Context Security Police Directive
     * @summary Patch CSP Directives
     * @param {CSPDirectivesApiPatchEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CSPDirectivesApiInterface
     */
    patchEntityCspDirectives(requestParameters: CSPDirectivesApiPatchEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutDocument>;
    /**
     *  Context Security Police Directive
     * @summary Put CSP Directives
     * @param {CSPDirectivesApiUpdateEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CSPDirectivesApiInterface
     */
    updateEntityCspDirectives(requestParameters: CSPDirectivesApiUpdateEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutDocument>;
}

/**
 * Request parameters for patchEntityCspDirectives operation in CSPDirectivesApi.
 * @export
 * @interface CSPDirectivesApiPatchEntityCspDirectivesRequest
 */
export declare interface CSPDirectivesApiPatchEntityCspDirectivesRequest {
    /**
     *
     * @type {string}
     * @memberof CSPDirectivesApiPatchEntityCspDirectives
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiCspDirectivePatchDocument}
     * @memberof CSPDirectivesApiPatchEntityCspDirectives
     */
    readonly jsonApiCspDirectivePatchDocument: JsonApiCspDirectivePatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof CSPDirectivesApiPatchEntityCspDirectives
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityCspDirectives operation in CSPDirectivesApi.
 * @export
 * @interface CSPDirectivesApiUpdateEntityCspDirectivesRequest
 */
export declare interface CSPDirectivesApiUpdateEntityCspDirectivesRequest {
    /**
     *
     * @type {string}
     * @memberof CSPDirectivesApiUpdateEntityCspDirectives
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiCspDirectiveInDocument}
     * @memberof CSPDirectivesApiUpdateEntityCspDirectives
     */
    readonly jsonApiCspDirectiveInDocument: JsonApiCspDirectiveInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof CSPDirectivesApiUpdateEntityCspDirectives
     */
    readonly filter?: string;
}

/**
 * Custom label object override.
 * @export
 * @interface CustomLabel
 */
export declare interface CustomLabel {
    /**
     * Override value.
     * @type {string}
     * @memberof CustomLabel
     */
    title: string;
}

/**
 * Custom metric object override.
 * @export
 * @interface CustomMetric
 */
export declare interface CustomMetric {
    /**
     * Metric title override.
     * @type {string}
     * @memberof CustomMetric
     */
    title: string;
    /**
     * Format override.
     * @type {string}
     * @memberof CustomMetric
     */
    format: string;
}

/**
 * Custom cell value overrides (IDs will be replaced with specified values).
 * @export
 * @interface CustomOverride
 */
export declare interface CustomOverride {
    /**
     * Map of CustomLabels with keys used as placeholders in document.
     * @type {{ [key: string]: CustomLabel; }}
     * @memberof CustomOverride
     */
    labels?: {
        [key: string]: CustomLabel;
    };
    /**
     * Map of CustomMetrics with keys used as placeholders in document.
     * @type {{ [key: string]: CustomMetric; }}
     * @memberof CustomOverride
     */
    metrics?: {
        [key: string]: CustomMetric;
    };
}

/**
 *
 * @export
 * @interface DashboardPermissions
 */
export declare interface DashboardPermissions {
    /**
     * List of users
     * @type {Array<UserPermission>}
     * @memberof DashboardPermissions
     */
    users: Array<UserPermission>;
    /**
     * List of user groups
     * @type {Array<UserGroupPermission>}
     * @memberof DashboardPermissions
     */
    userGroups: Array<UserGroupPermission>;
}

/**
 * DashboardsApi - object-oriented interface
 * @export
 * @class DashboardsApi
 * @extends {BaseAPI}
 */
export declare class DashboardsApi extends MetadataBaseApi implements DashboardsApiInterface {
    /**
     *
     * @summary Post Dashboards
     * @param {DashboardsApiCreateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    createEntityAnalyticalDashboards(requestParameters: DashboardsApiCreateEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAnalyticalDashboardOutDocument, any>>;
    /**
     *
     * @summary Delete a Dashboard
     * @param {DashboardsApiDeleteEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    deleteEntityAnalyticalDashboards(requestParameters: DashboardsApiDeleteEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Get all Dashboards
     * @param {DashboardsApiGetAllEntitiesAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    getAllEntitiesAnalyticalDashboards(requestParameters: DashboardsApiGetAllEntitiesAnalyticalDashboardsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAnalyticalDashboardOutList, any>>;
    /**
     *
     * @summary Get a Dashboard
     * @param {DashboardsApiGetEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    getEntityAnalyticalDashboards(requestParameters: DashboardsApiGetEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAnalyticalDashboardOutDocument, any>>;
    /**
     *
     * @summary Patch a Dashboard
     * @param {DashboardsApiPatchEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    patchEntityAnalyticalDashboards(requestParameters: DashboardsApiPatchEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAnalyticalDashboardOutDocument, any>>;
    /**
     *
     * @summary Put Dashboards
     * @param {DashboardsApiUpdateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApi
     */
    updateEntityAnalyticalDashboards(requestParameters: DashboardsApiUpdateEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAnalyticalDashboardOutDocument, any>>;
}

/**
 * DashboardsApi - axios parameter creator
 * @export
 */
export declare const DashboardsApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post Dashboards
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardPostOptionalIdDocument} jsonApiAnalyticalDashboardPostOptionalIdDocument
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityAnalyticalDashboards: (workspaceId: string, jsonApiAnalyticalDashboardPostOptionalIdDocument: JsonApiAnalyticalDashboardPostOptionalIdDocument, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Dashboard
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityAnalyticalDashboards: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Dashboards
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAnalyticalDashboards: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Dashboard
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAnalyticalDashboards: (workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Dashboard
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardPatchDocument} jsonApiAnalyticalDashboardPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityAnalyticalDashboards: (workspaceId: string, objectId: string, jsonApiAnalyticalDashboardPatchDocument: JsonApiAnalyticalDashboardPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put Dashboards
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityAnalyticalDashboards: (workspaceId: string, objectId: string, jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument, filter?: string, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * Request parameters for createEntityAnalyticalDashboards operation in DashboardsApi.
 * @export
 * @interface DashboardsApiCreateEntityAnalyticalDashboardsRequest
 */
export declare interface DashboardsApiCreateEntityAnalyticalDashboardsRequest {
    /**
     *
     * @type {string}
     * @memberof DashboardsApiCreateEntityAnalyticalDashboards
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPostOptionalIdDocument}
     * @memberof DashboardsApiCreateEntityAnalyticalDashboards
     */
    readonly jsonApiAnalyticalDashboardPostOptionalIdDocument: JsonApiAnalyticalDashboardPostOptionalIdDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof DashboardsApiCreateEntityAnalyticalDashboards
     */
    readonly include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>}
     * @memberof DashboardsApiCreateEntityAnalyticalDashboards
     */
    readonly metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">;
}

/**
 * Request parameters for deleteEntityAnalyticalDashboards operation in DashboardsApi.
 * @export
 * @interface DashboardsApiDeleteEntityAnalyticalDashboardsRequest
 */
export declare interface DashboardsApiDeleteEntityAnalyticalDashboardsRequest {
    /**
     *
     * @type {string}
     * @memberof DashboardsApiDeleteEntityAnalyticalDashboards
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof DashboardsApiDeleteEntityAnalyticalDashboards
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DashboardsApiDeleteEntityAnalyticalDashboards
     */
    readonly filter?: string;
}

/**
 * DashboardsApi - factory interface
 * @export
 */
export declare const DashboardsApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Post Dashboards
     * @param {DashboardsApiCreateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityAnalyticalDashboards(requestParameters: DashboardsApiCreateEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @summary Delete a Dashboard
     * @param {DashboardsApiDeleteEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityAnalyticalDashboards(requestParameters: DashboardsApiDeleteEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all Dashboards
     * @param {DashboardsApiGetAllEntitiesAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAnalyticalDashboards(requestParameters: DashboardsApiGetAllEntitiesAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutList>;
    /**
     *
     * @summary Get a Dashboard
     * @param {DashboardsApiGetEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAnalyticalDashboards(requestParameters: DashboardsApiGetEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @summary Patch a Dashboard
     * @param {DashboardsApiPatchEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityAnalyticalDashboards(requestParameters: DashboardsApiPatchEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @summary Put Dashboards
     * @param {DashboardsApiUpdateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityAnalyticalDashboards(requestParameters: DashboardsApiUpdateEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
};

/**
 * DashboardsApi - functional programming interface
 * @export
 */
export declare const DashboardsApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post Dashboards
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardPostOptionalIdDocument} jsonApiAnalyticalDashboardPostOptionalIdDocument
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityAnalyticalDashboards(workspaceId: string, jsonApiAnalyticalDashboardPostOptionalIdDocument: JsonApiAnalyticalDashboardPostOptionalIdDocument, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument>>;
    /**
     *
     * @summary Delete a Dashboard
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityAnalyticalDashboards(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get all Dashboards
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAnalyticalDashboards(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutList>>;
    /**
     *
     * @summary Get a Dashboard
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAnalyticalDashboards(workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument>>;
    /**
     *
     * @summary Patch a Dashboard
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardPatchDocument} jsonApiAnalyticalDashboardPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityAnalyticalDashboards(workspaceId: string, objectId: string, jsonApiAnalyticalDashboardPatchDocument: JsonApiAnalyticalDashboardPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument>>;
    /**
     *
     * @summary Put Dashboards
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityAnalyticalDashboards(workspaceId: string, objectId: string, jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument, filter?: string, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesAnalyticalDashboards operation in DashboardsApi.
 * @export
 * @interface DashboardsApiGetAllEntitiesAnalyticalDashboardsRequest
 */
export declare interface DashboardsApiGetAllEntitiesAnalyticalDashboardsRequest {
    /**
     *
     * @type {string}
     * @memberof DashboardsApiGetAllEntitiesAnalyticalDashboards
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof DashboardsApiGetAllEntitiesAnalyticalDashboards
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DashboardsApiGetAllEntitiesAnalyticalDashboards
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof DashboardsApiGetAllEntitiesAnalyticalDashboards
     */
    readonly include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof DashboardsApiGetAllEntitiesAnalyticalDashboards
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof DashboardsApiGetAllEntitiesAnalyticalDashboards
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof DashboardsApiGetAllEntitiesAnalyticalDashboards
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof DashboardsApiGetAllEntitiesAnalyticalDashboards
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>}
     * @memberof DashboardsApiGetAllEntitiesAnalyticalDashboards
     */
    readonly metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityAnalyticalDashboards operation in DashboardsApi.
 * @export
 * @interface DashboardsApiGetEntityAnalyticalDashboardsRequest
 */
export declare interface DashboardsApiGetEntityAnalyticalDashboardsRequest {
    /**
     *
     * @type {string}
     * @memberof DashboardsApiGetEntityAnalyticalDashboards
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof DashboardsApiGetEntityAnalyticalDashboards
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DashboardsApiGetEntityAnalyticalDashboards
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof DashboardsApiGetEntityAnalyticalDashboards
     */
    readonly include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof DashboardsApiGetEntityAnalyticalDashboards
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>}
     * @memberof DashboardsApiGetEntityAnalyticalDashboards
     */
    readonly metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">;
}

/**
 * DashboardsApi - interface
 * @export
 * @interface DashboardsApi
 */
export declare interface DashboardsApiInterface {
    /**
     *
     * @summary Post Dashboards
     * @param {DashboardsApiCreateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApiInterface
     */
    createEntityAnalyticalDashboards(requestParameters: DashboardsApiCreateEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @summary Delete a Dashboard
     * @param {DashboardsApiDeleteEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApiInterface
     */
    deleteEntityAnalyticalDashboards(requestParameters: DashboardsApiDeleteEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all Dashboards
     * @param {DashboardsApiGetAllEntitiesAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApiInterface
     */
    getAllEntitiesAnalyticalDashboards(requestParameters: DashboardsApiGetAllEntitiesAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutList>;
    /**
     *
     * @summary Get a Dashboard
     * @param {DashboardsApiGetEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApiInterface
     */
    getEntityAnalyticalDashboards(requestParameters: DashboardsApiGetEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @summary Patch a Dashboard
     * @param {DashboardsApiPatchEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApiInterface
     */
    patchEntityAnalyticalDashboards(requestParameters: DashboardsApiPatchEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @summary Put Dashboards
     * @param {DashboardsApiUpdateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DashboardsApiInterface
     */
    updateEntityAnalyticalDashboards(requestParameters: DashboardsApiUpdateEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
}

/**
 * Request parameters for patchEntityAnalyticalDashboards operation in DashboardsApi.
 * @export
 * @interface DashboardsApiPatchEntityAnalyticalDashboardsRequest
 */
export declare interface DashboardsApiPatchEntityAnalyticalDashboardsRequest {
    /**
     *
     * @type {string}
     * @memberof DashboardsApiPatchEntityAnalyticalDashboards
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof DashboardsApiPatchEntityAnalyticalDashboards
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPatchDocument}
     * @memberof DashboardsApiPatchEntityAnalyticalDashboards
     */
    readonly jsonApiAnalyticalDashboardPatchDocument: JsonApiAnalyticalDashboardPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DashboardsApiPatchEntityAnalyticalDashboards
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof DashboardsApiPatchEntityAnalyticalDashboards
     */
    readonly include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for updateEntityAnalyticalDashboards operation in DashboardsApi.
 * @export
 * @interface DashboardsApiUpdateEntityAnalyticalDashboardsRequest
 */
export declare interface DashboardsApiUpdateEntityAnalyticalDashboardsRequest {
    /**
     *
     * @type {string}
     * @memberof DashboardsApiUpdateEntityAnalyticalDashboards
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof DashboardsApiUpdateEntityAnalyticalDashboards
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardInDocument}
     * @memberof DashboardsApiUpdateEntityAnalyticalDashboards
     */
    readonly jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DashboardsApiUpdateEntityAnalyticalDashboards
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof DashboardsApiUpdateEntityAnalyticalDashboards
     */
    readonly include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Mapping from dimension items (either \'localIdentifier\' from \'AttributeItem\', or \"measureGroup\") to their respective values. This effectively specifies the path (location) of the data column used for sorting. Therefore values for all dimension items must be specified.
 * @export
 * @interface DataColumnLocator
 */
export declare interface DataColumnLocator {
    /**
     * Mapping from dimension items (either \'localIdentifier\' from \'AttributeItem\', or \"measureGroup\") to their respective values. This effectively specifies the path (location) of the data column used for sorting. Therefore values for all dimension items must be specified.
     * @type {{ [key: string]: string; }}
     * @memberof DataColumnLocator
     */
    properties: {
        [key: string]: string;
    };
}

/**
 *
 * @export
 * @interface DataColumnLocators
 */
export declare interface DataColumnLocators {
    /**
     * Mapping from dimensions to data column locators.
     * @type {{ [key: string]: DataColumnLocator; }}
     * @memberof DataColumnLocators
     */
    properties?: {
        [key: string]: DataColumnLocator;
    };
}

/**
 * DataFiltersApi - object-oriented interface
 * @export
 * @class DataFiltersApi
 * @extends {BaseAPI}
 */
export declare class DataFiltersApi extends MetadataBaseApi implements DataFiltersApiInterface {
    /**
     *
     * @summary Post User Data Filters
     * @param {DataFiltersApiCreateEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApi
     */
    createEntityUserDataFilters(requestParameters: DataFiltersApiCreateEntityUserDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserDataFilterOutDocument, any>>;
    /**
     *
     * @summary Post Settings for Workspace Data Filters
     * @param {DataFiltersApiCreateEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApi
     */
    createEntityWorkspaceDataFilterSettings(requestParameters: DataFiltersApiCreateEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterSettingOutDocument, any>>;
    /**
     *
     * @summary Post Workspace Data Filters
     * @param {DataFiltersApiCreateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApi
     */
    createEntityWorkspaceDataFilters(requestParameters: DataFiltersApiCreateEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterOutDocument, any>>;
    /**
     *
     * @summary Delete a User Data Filter
     * @param {DataFiltersApiDeleteEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApi
     */
    deleteEntityUserDataFilters(requestParameters: DataFiltersApiDeleteEntityUserDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a Settings for Workspace Data Filter
     * @param {DataFiltersApiDeleteEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApi
     */
    deleteEntityWorkspaceDataFilterSettings(requestParameters: DataFiltersApiDeleteEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a Workspace Data Filter
     * @param {DataFiltersApiDeleteEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApi
     */
    deleteEntityWorkspaceDataFilters(requestParameters: DataFiltersApiDeleteEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Get all User Data Filters
     * @param {DataFiltersApiGetAllEntitiesUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApi
     */
    getAllEntitiesUserDataFilters(requestParameters: DataFiltersApiGetAllEntitiesUserDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserDataFilterOutList, any>>;
    /**
     *
     * @summary Get all Settings for Workspace Data Filters
     * @param {DataFiltersApiGetAllEntitiesWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApi
     */
    getAllEntitiesWorkspaceDataFilterSettings(requestParameters: DataFiltersApiGetAllEntitiesWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterSettingOutList, any>>;
    /**
     *
     * @summary Get all Workspace Data Filters
     * @param {DataFiltersApiGetAllEntitiesWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApi
     */
    getAllEntitiesWorkspaceDataFilters(requestParameters: DataFiltersApiGetAllEntitiesWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterOutList, any>>;
    /**
     *
     * @summary Get a User Data Filter
     * @param {DataFiltersApiGetEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApi
     */
    getEntityUserDataFilters(requestParameters: DataFiltersApiGetEntityUserDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserDataFilterOutDocument, any>>;
    /**
     *
     * @summary Get a Setting for Workspace Data Filter
     * @param {DataFiltersApiGetEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApi
     */
    getEntityWorkspaceDataFilterSettings(requestParameters: DataFiltersApiGetEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterSettingOutDocument, any>>;
    /**
     *
     * @summary Get a Workspace Data Filter
     * @param {DataFiltersApiGetEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApi
     */
    getEntityWorkspaceDataFilters(requestParameters: DataFiltersApiGetEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterOutDocument, any>>;
    /**
     * Retrieve all workspaces and related workspace data filters (and their settings / values).
     * @summary Get workspace data filters for all workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApi
     */
    getWorkspaceDataFiltersLayout(options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeWorkspaceDataFilters, any>>;
    /**
     *
     * @summary Patch a User Data Filter
     * @param {DataFiltersApiPatchEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApi
     */
    patchEntityUserDataFilters(requestParameters: DataFiltersApiPatchEntityUserDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserDataFilterOutDocument, any>>;
    /**
     *
     * @summary Patch a Settings for Workspace Data Filter
     * @param {DataFiltersApiPatchEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApi
     */
    patchEntityWorkspaceDataFilterSettings(requestParameters: DataFiltersApiPatchEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterSettingOutDocument, any>>;
    /**
     *
     * @summary Patch a Workspace Data Filter
     * @param {DataFiltersApiPatchEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApi
     */
    patchEntityWorkspaceDataFilters(requestParameters: DataFiltersApiPatchEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterOutDocument, any>>;
    /**
     * Sets workspace data filters in all workspaces in entire organization.
     * @summary Set all workspace data filters
     * @param {DataFiltersApiSetWorkspaceDataFiltersLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApi
     */
    setWorkspaceDataFiltersLayout(requestParameters: DataFiltersApiSetWorkspaceDataFiltersLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Put a User Data Filter
     * @param {DataFiltersApiUpdateEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApi
     */
    updateEntityUserDataFilters(requestParameters: DataFiltersApiUpdateEntityUserDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserDataFilterOutDocument, any>>;
    /**
     *
     * @summary Put a Settings for Workspace Data Filter
     * @param {DataFiltersApiUpdateEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApi
     */
    updateEntityWorkspaceDataFilterSettings(requestParameters: DataFiltersApiUpdateEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterSettingOutDocument, any>>;
    /**
     *
     * @summary Put a Workspace Data Filter
     * @param {DataFiltersApiUpdateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApi
     */
    updateEntityWorkspaceDataFilters(requestParameters: DataFiltersApiUpdateEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterOutDocument, any>>;
}

/**
 * DataFiltersApi - axios parameter creator
 * @export
 */
export declare const DataFiltersApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post User Data Filters
     * @param {string} workspaceId
     * @param {JsonApiUserDataFilterPostOptionalIdDocument} jsonApiUserDataFilterPostOptionalIdDocument
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserDataFilters: (workspaceId: string, jsonApiUserDataFilterPostOptionalIdDocument: JsonApiUserDataFilterPostOptionalIdDocument, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Settings for Workspace Data Filters
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterSettingInDocument} jsonApiWorkspaceDataFilterSettingInDocument
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceDataFilterSettings: (workspaceId: string, jsonApiWorkspaceDataFilterSettingInDocument: JsonApiWorkspaceDataFilterSettingInDocument, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Workspace Data Filters
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceDataFilters: (workspaceId: string, jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a User Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserDataFilters: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Settings for Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceDataFilterSettings: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceDataFilters: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all User Data Filters
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserDataFilters: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Settings for Workspace Data Filters
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilterSettings: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Workspace Data Filters
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilters: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a User Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserDataFilters: (workspaceId: string, objectId: string, filter?: string, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Setting for Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilterSettings: (workspaceId: string, objectId: string, filter?: string, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, xGDCVALIDATERELATIONS?: boolean, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilters: (workspaceId: string, objectId: string, filter?: string, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, xGDCVALIDATERELATIONS?: boolean, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Retrieve all workspaces and related workspace data filters (and their settings / values).
     * @summary Get workspace data filters for all workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceDataFiltersLayout: (options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a User Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiUserDataFilterPatchDocument} jsonApiUserDataFilterPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUserDataFilters: (workspaceId: string, objectId: string, jsonApiUserDataFilterPatchDocument: JsonApiUserDataFilterPatchDocument, filter?: string, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Settings for Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterSettingPatchDocument} jsonApiWorkspaceDataFilterSettingPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceDataFilterSettings: (workspaceId: string, objectId: string, jsonApiWorkspaceDataFilterSettingPatchDocument: JsonApiWorkspaceDataFilterSettingPatchDocument, filter?: string, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterPatchDocument} jsonApiWorkspaceDataFilterPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceDataFilters: (workspaceId: string, objectId: string, jsonApiWorkspaceDataFilterPatchDocument: JsonApiWorkspaceDataFilterPatchDocument, filter?: string, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Sets workspace data filters in all workspaces in entire organization.
     * @summary Set all workspace data filters
     * @param {DeclarativeWorkspaceDataFilters} declarativeWorkspaceDataFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspaceDataFiltersLayout: (declarativeWorkspaceDataFilters: DeclarativeWorkspaceDataFilters, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a User Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiUserDataFilterInDocument} jsonApiUserDataFilterInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserDataFilters: (workspaceId: string, objectId: string, jsonApiUserDataFilterInDocument: JsonApiUserDataFilterInDocument, filter?: string, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a Settings for Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterSettingInDocument} jsonApiWorkspaceDataFilterSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceDataFilterSettings: (workspaceId: string, objectId: string, jsonApiWorkspaceDataFilterSettingInDocument: JsonApiWorkspaceDataFilterSettingInDocument, filter?: string, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceDataFilters: (workspaceId: string, objectId: string, jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument, filter?: string, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * Request parameters for createEntityUserDataFilters operation in DataFiltersApi.
 * @export
 * @interface DataFiltersApiCreateEntityUserDataFiltersRequest
 */
export declare interface DataFiltersApiCreateEntityUserDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiCreateEntityUserDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiUserDataFilterPostOptionalIdDocument}
     * @memberof DataFiltersApiCreateEntityUserDataFilters
     */
    readonly jsonApiUserDataFilterPostOptionalIdDocument: JsonApiUserDataFilterPostOptionalIdDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>}
     * @memberof DataFiltersApiCreateEntityUserDataFilters
     */
    readonly include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof DataFiltersApiCreateEntityUserDataFilters
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for createEntityWorkspaceDataFilterSettings operation in DataFiltersApi.
 * @export
 * @interface DataFiltersApiCreateEntityWorkspaceDataFilterSettingsRequest
 */
export declare interface DataFiltersApiCreateEntityWorkspaceDataFilterSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiCreateEntityWorkspaceDataFilterSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingInDocument}
     * @memberof DataFiltersApiCreateEntityWorkspaceDataFilterSettings
     */
    readonly jsonApiWorkspaceDataFilterSettingInDocument: JsonApiWorkspaceDataFilterSettingInDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>}
     * @memberof DataFiltersApiCreateEntityWorkspaceDataFilterSettings
     */
    readonly include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;
}

/**
 * Request parameters for createEntityWorkspaceDataFilters operation in DataFiltersApi.
 * @export
 * @interface DataFiltersApiCreateEntityWorkspaceDataFiltersRequest
 */
export declare interface DataFiltersApiCreateEntityWorkspaceDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiCreateEntityWorkspaceDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInDocument}
     * @memberof DataFiltersApiCreateEntityWorkspaceDataFilters
     */
    readonly jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>}
     * @memberof DataFiltersApiCreateEntityWorkspaceDataFilters
     */
    readonly include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
}

/**
 * Request parameters for deleteEntityUserDataFilters operation in DataFiltersApi.
 * @export
 * @interface DataFiltersApiDeleteEntityUserDataFiltersRequest
 */
export declare interface DataFiltersApiDeleteEntityUserDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiDeleteEntityUserDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiDeleteEntityUserDataFilters
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataFiltersApiDeleteEntityUserDataFilters
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityWorkspaceDataFilterSettings operation in DataFiltersApi.
 * @export
 * @interface DataFiltersApiDeleteEntityWorkspaceDataFilterSettingsRequest
 */
export declare interface DataFiltersApiDeleteEntityWorkspaceDataFilterSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiDeleteEntityWorkspaceDataFilterSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiDeleteEntityWorkspaceDataFilterSettings
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataFiltersApiDeleteEntityWorkspaceDataFilterSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityWorkspaceDataFilters operation in DataFiltersApi.
 * @export
 * @interface DataFiltersApiDeleteEntityWorkspaceDataFiltersRequest
 */
export declare interface DataFiltersApiDeleteEntityWorkspaceDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiDeleteEntityWorkspaceDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiDeleteEntityWorkspaceDataFilters
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataFiltersApiDeleteEntityWorkspaceDataFilters
     */
    readonly filter?: string;
}

/**
 * DataFiltersApi - factory interface
 * @export
 */
export declare const DataFiltersApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Post User Data Filters
     * @param {DataFiltersApiCreateEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserDataFilters(requestParameters: DataFiltersApiCreateEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutDocument>;
    /**
     *
     * @summary Post Settings for Workspace Data Filters
     * @param {DataFiltersApiCreateEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceDataFilterSettings(requestParameters: DataFiltersApiCreateEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @summary Post Workspace Data Filters
     * @param {DataFiltersApiCreateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceDataFilters(requestParameters: DataFiltersApiCreateEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @summary Delete a User Data Filter
     * @param {DataFiltersApiDeleteEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserDataFilters(requestParameters: DataFiltersApiDeleteEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Settings for Workspace Data Filter
     * @param {DataFiltersApiDeleteEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceDataFilterSettings(requestParameters: DataFiltersApiDeleteEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Workspace Data Filter
     * @param {DataFiltersApiDeleteEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceDataFilters(requestParameters: DataFiltersApiDeleteEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all User Data Filters
     * @param {DataFiltersApiGetAllEntitiesUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserDataFilters(requestParameters: DataFiltersApiGetAllEntitiesUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutList>;
    /**
     *
     * @summary Get all Settings for Workspace Data Filters
     * @param {DataFiltersApiGetAllEntitiesWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilterSettings(requestParameters: DataFiltersApiGetAllEntitiesWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList>;
    /**
     *
     * @summary Get all Workspace Data Filters
     * @param {DataFiltersApiGetAllEntitiesWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilters(requestParameters: DataFiltersApiGetAllEntitiesWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutList>;
    /**
     *
     * @summary Get a User Data Filter
     * @param {DataFiltersApiGetEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserDataFilters(requestParameters: DataFiltersApiGetEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutDocument>;
    /**
     *
     * @summary Get a Setting for Workspace Data Filter
     * @param {DataFiltersApiGetEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilterSettings(requestParameters: DataFiltersApiGetEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @summary Get a Workspace Data Filter
     * @param {DataFiltersApiGetEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilters(requestParameters: DataFiltersApiGetEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     * Retrieve all workspaces and related workspace data filters (and their settings / values).
     * @summary Get workspace data filters for all workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceDataFiltersLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeWorkspaceDataFilters>;
    /**
     *
     * @summary Patch a User Data Filter
     * @param {DataFiltersApiPatchEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUserDataFilters(requestParameters: DataFiltersApiPatchEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutDocument>;
    /**
     *
     * @summary Patch a Settings for Workspace Data Filter
     * @param {DataFiltersApiPatchEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceDataFilterSettings(requestParameters: DataFiltersApiPatchEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @summary Patch a Workspace Data Filter
     * @param {DataFiltersApiPatchEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceDataFilters(requestParameters: DataFiltersApiPatchEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     * Sets workspace data filters in all workspaces in entire organization.
     * @summary Set all workspace data filters
     * @param {DataFiltersApiSetWorkspaceDataFiltersLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspaceDataFiltersLayout(requestParameters: DataFiltersApiSetWorkspaceDataFiltersLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Put a User Data Filter
     * @param {DataFiltersApiUpdateEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserDataFilters(requestParameters: DataFiltersApiUpdateEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutDocument>;
    /**
     *
     * @summary Put a Settings for Workspace Data Filter
     * @param {DataFiltersApiUpdateEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceDataFilterSettings(requestParameters: DataFiltersApiUpdateEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @summary Put a Workspace Data Filter
     * @param {DataFiltersApiUpdateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceDataFilters(requestParameters: DataFiltersApiUpdateEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
};

/**
 * DataFiltersApi - functional programming interface
 * @export
 */
export declare const DataFiltersApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post User Data Filters
     * @param {string} workspaceId
     * @param {JsonApiUserDataFilterPostOptionalIdDocument} jsonApiUserDataFilterPostOptionalIdDocument
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserDataFilters(workspaceId: string, jsonApiUserDataFilterPostOptionalIdDocument: JsonApiUserDataFilterPostOptionalIdDocument, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserDataFilterOutDocument>>;
    /**
     *
     * @summary Post Settings for Workspace Data Filters
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterSettingInDocument} jsonApiWorkspaceDataFilterSettingInDocument
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceDataFilterSettings(workspaceId: string, jsonApiWorkspaceDataFilterSettingInDocument: JsonApiWorkspaceDataFilterSettingInDocument, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>>;
    /**
     *
     * @summary Post Workspace Data Filters
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceDataFilters(workspaceId: string, jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>>;
    /**
     *
     * @summary Delete a User Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserDataFilters(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a Settings for Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceDataFilterSettings(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceDataFilters(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get all User Data Filters
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserDataFilters(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserDataFilterOutList>>;
    /**
     *
     * @summary Get all Settings for Workspace Data Filters
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilterSettings(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList>>;
    /**
     *
     * @summary Get all Workspace Data Filters
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilters(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutList>>;
    /**
     *
     * @summary Get a User Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserDataFilters(workspaceId: string, objectId: string, filter?: string, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserDataFilterOutDocument>>;
    /**
     *
     * @summary Get a Setting for Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilterSettings(workspaceId: string, objectId: string, filter?: string, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, xGDCVALIDATERELATIONS?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>>;
    /**
     *
     * @summary Get a Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilters(workspaceId: string, objectId: string, filter?: string, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, xGDCVALIDATERELATIONS?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>>;
    /**
     * Retrieve all workspaces and related workspace data filters (and their settings / values).
     * @summary Get workspace data filters for all workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceDataFiltersLayout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeWorkspaceDataFilters>>;
    /**
     *
     * @summary Patch a User Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiUserDataFilterPatchDocument} jsonApiUserDataFilterPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUserDataFilters(workspaceId: string, objectId: string, jsonApiUserDataFilterPatchDocument: JsonApiUserDataFilterPatchDocument, filter?: string, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserDataFilterOutDocument>>;
    /**
     *
     * @summary Patch a Settings for Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterSettingPatchDocument} jsonApiWorkspaceDataFilterSettingPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceDataFilterSettings(workspaceId: string, objectId: string, jsonApiWorkspaceDataFilterSettingPatchDocument: JsonApiWorkspaceDataFilterSettingPatchDocument, filter?: string, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>>;
    /**
     *
     * @summary Patch a Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterPatchDocument} jsonApiWorkspaceDataFilterPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceDataFilters(workspaceId: string, objectId: string, jsonApiWorkspaceDataFilterPatchDocument: JsonApiWorkspaceDataFilterPatchDocument, filter?: string, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>>;
    /**
     * Sets workspace data filters in all workspaces in entire organization.
     * @summary Set all workspace data filters
     * @param {DeclarativeWorkspaceDataFilters} declarativeWorkspaceDataFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspaceDataFiltersLayout(declarativeWorkspaceDataFilters: DeclarativeWorkspaceDataFilters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Put a User Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiUserDataFilterInDocument} jsonApiUserDataFilterInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserDataFilters(workspaceId: string, objectId: string, jsonApiUserDataFilterInDocument: JsonApiUserDataFilterInDocument, filter?: string, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserDataFilterOutDocument>>;
    /**
     *
     * @summary Put a Settings for Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterSettingInDocument} jsonApiWorkspaceDataFilterSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceDataFilterSettings(workspaceId: string, objectId: string, jsonApiWorkspaceDataFilterSettingInDocument: JsonApiWorkspaceDataFilterSettingInDocument, filter?: string, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>>;
    /**
     *
     * @summary Put a Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceDataFilters(workspaceId: string, objectId: string, jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument, filter?: string, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesUserDataFilters operation in DataFiltersApi.
 * @export
 * @interface DataFiltersApiGetAllEntitiesUserDataFiltersRequest
 */
export declare interface DataFiltersApiGetAllEntitiesUserDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiGetAllEntitiesUserDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof DataFiltersApiGetAllEntitiesUserDataFilters
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataFiltersApiGetAllEntitiesUserDataFilters
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>}
     * @memberof DataFiltersApiGetAllEntitiesUserDataFilters
     */
    readonly include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof DataFiltersApiGetAllEntitiesUserDataFilters
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof DataFiltersApiGetAllEntitiesUserDataFilters
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof DataFiltersApiGetAllEntitiesUserDataFilters
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof DataFiltersApiGetAllEntitiesUserDataFilters
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof DataFiltersApiGetAllEntitiesUserDataFilters
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesWorkspaceDataFilterSettings operation in DataFiltersApi.
 * @export
 * @interface DataFiltersApiGetAllEntitiesWorkspaceDataFilterSettingsRequest
 */
export declare interface DataFiltersApiGetAllEntitiesWorkspaceDataFilterSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof DataFiltersApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataFiltersApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>}
     * @memberof DataFiltersApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof DataFiltersApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof DataFiltersApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof DataFiltersApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof DataFiltersApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getAllEntitiesWorkspaceDataFilters operation in DataFiltersApi.
 * @export
 * @interface DataFiltersApiGetAllEntitiesWorkspaceDataFiltersRequest
 */
export declare interface DataFiltersApiGetAllEntitiesWorkspaceDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof DataFiltersApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataFiltersApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>}
     * @memberof DataFiltersApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof DataFiltersApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof DataFiltersApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof DataFiltersApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof DataFiltersApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getEntityUserDataFilters operation in DataFiltersApi.
 * @export
 * @interface DataFiltersApiGetEntityUserDataFiltersRequest
 */
export declare interface DataFiltersApiGetEntityUserDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiGetEntityUserDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiGetEntityUserDataFilters
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataFiltersApiGetEntityUserDataFilters
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>}
     * @memberof DataFiltersApiGetEntityUserDataFilters
     */
    readonly include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof DataFiltersApiGetEntityUserDataFilters
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof DataFiltersApiGetEntityUserDataFilters
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityWorkspaceDataFilterSettings operation in DataFiltersApi.
 * @export
 * @interface DataFiltersApiGetEntityWorkspaceDataFilterSettingsRequest
 */
export declare interface DataFiltersApiGetEntityWorkspaceDataFilterSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiGetEntityWorkspaceDataFilterSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiGetEntityWorkspaceDataFilterSettings
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataFiltersApiGetEntityWorkspaceDataFilterSettings
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>}
     * @memberof DataFiltersApiGetEntityWorkspaceDataFilterSettings
     */
    readonly include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof DataFiltersApiGetEntityWorkspaceDataFilterSettings
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getEntityWorkspaceDataFilters operation in DataFiltersApi.
 * @export
 * @interface DataFiltersApiGetEntityWorkspaceDataFiltersRequest
 */
export declare interface DataFiltersApiGetEntityWorkspaceDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiGetEntityWorkspaceDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiGetEntityWorkspaceDataFilters
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataFiltersApiGetEntityWorkspaceDataFilters
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>}
     * @memberof DataFiltersApiGetEntityWorkspaceDataFilters
     */
    readonly include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof DataFiltersApiGetEntityWorkspaceDataFilters
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * DataFiltersApi - interface
 * @export
 * @interface DataFiltersApi
 */
export declare interface DataFiltersApiInterface {
    /**
     *
     * @summary Post User Data Filters
     * @param {DataFiltersApiCreateEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApiInterface
     */
    createEntityUserDataFilters(requestParameters: DataFiltersApiCreateEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutDocument>;
    /**
     *
     * @summary Post Settings for Workspace Data Filters
     * @param {DataFiltersApiCreateEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApiInterface
     */
    createEntityWorkspaceDataFilterSettings(requestParameters: DataFiltersApiCreateEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @summary Post Workspace Data Filters
     * @param {DataFiltersApiCreateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApiInterface
     */
    createEntityWorkspaceDataFilters(requestParameters: DataFiltersApiCreateEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @summary Delete a User Data Filter
     * @param {DataFiltersApiDeleteEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApiInterface
     */
    deleteEntityUserDataFilters(requestParameters: DataFiltersApiDeleteEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Settings for Workspace Data Filter
     * @param {DataFiltersApiDeleteEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApiInterface
     */
    deleteEntityWorkspaceDataFilterSettings(requestParameters: DataFiltersApiDeleteEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Workspace Data Filter
     * @param {DataFiltersApiDeleteEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApiInterface
     */
    deleteEntityWorkspaceDataFilters(requestParameters: DataFiltersApiDeleteEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all User Data Filters
     * @param {DataFiltersApiGetAllEntitiesUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApiInterface
     */
    getAllEntitiesUserDataFilters(requestParameters: DataFiltersApiGetAllEntitiesUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutList>;
    /**
     *
     * @summary Get all Settings for Workspace Data Filters
     * @param {DataFiltersApiGetAllEntitiesWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApiInterface
     */
    getAllEntitiesWorkspaceDataFilterSettings(requestParameters: DataFiltersApiGetAllEntitiesWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList>;
    /**
     *
     * @summary Get all Workspace Data Filters
     * @param {DataFiltersApiGetAllEntitiesWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApiInterface
     */
    getAllEntitiesWorkspaceDataFilters(requestParameters: DataFiltersApiGetAllEntitiesWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutList>;
    /**
     *
     * @summary Get a User Data Filter
     * @param {DataFiltersApiGetEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApiInterface
     */
    getEntityUserDataFilters(requestParameters: DataFiltersApiGetEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutDocument>;
    /**
     *
     * @summary Get a Setting for Workspace Data Filter
     * @param {DataFiltersApiGetEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApiInterface
     */
    getEntityWorkspaceDataFilterSettings(requestParameters: DataFiltersApiGetEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @summary Get a Workspace Data Filter
     * @param {DataFiltersApiGetEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApiInterface
     */
    getEntityWorkspaceDataFilters(requestParameters: DataFiltersApiGetEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     * Retrieve all workspaces and related workspace data filters (and their settings / values).
     * @summary Get workspace data filters for all workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApiInterface
     */
    getWorkspaceDataFiltersLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeWorkspaceDataFilters>;
    /**
     *
     * @summary Patch a User Data Filter
     * @param {DataFiltersApiPatchEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApiInterface
     */
    patchEntityUserDataFilters(requestParameters: DataFiltersApiPatchEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutDocument>;
    /**
     *
     * @summary Patch a Settings for Workspace Data Filter
     * @param {DataFiltersApiPatchEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApiInterface
     */
    patchEntityWorkspaceDataFilterSettings(requestParameters: DataFiltersApiPatchEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @summary Patch a Workspace Data Filter
     * @param {DataFiltersApiPatchEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApiInterface
     */
    patchEntityWorkspaceDataFilters(requestParameters: DataFiltersApiPatchEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     * Sets workspace data filters in all workspaces in entire organization.
     * @summary Set all workspace data filters
     * @param {DataFiltersApiSetWorkspaceDataFiltersLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApiInterface
     */
    setWorkspaceDataFiltersLayout(requestParameters: DataFiltersApiSetWorkspaceDataFiltersLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Put a User Data Filter
     * @param {DataFiltersApiUpdateEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApiInterface
     */
    updateEntityUserDataFilters(requestParameters: DataFiltersApiUpdateEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutDocument>;
    /**
     *
     * @summary Put a Settings for Workspace Data Filter
     * @param {DataFiltersApiUpdateEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApiInterface
     */
    updateEntityWorkspaceDataFilterSettings(requestParameters: DataFiltersApiUpdateEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @summary Put a Workspace Data Filter
     * @param {DataFiltersApiUpdateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataFiltersApiInterface
     */
    updateEntityWorkspaceDataFilters(requestParameters: DataFiltersApiUpdateEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
}

/**
 * Request parameters for patchEntityUserDataFilters operation in DataFiltersApi.
 * @export
 * @interface DataFiltersApiPatchEntityUserDataFiltersRequest
 */
export declare interface DataFiltersApiPatchEntityUserDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiPatchEntityUserDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiPatchEntityUserDataFilters
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiUserDataFilterPatchDocument}
     * @memberof DataFiltersApiPatchEntityUserDataFilters
     */
    readonly jsonApiUserDataFilterPatchDocument: JsonApiUserDataFilterPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataFiltersApiPatchEntityUserDataFilters
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>}
     * @memberof DataFiltersApiPatchEntityUserDataFilters
     */
    readonly include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">;
}

/**
 * Request parameters for patchEntityWorkspaceDataFilterSettings operation in DataFiltersApi.
 * @export
 * @interface DataFiltersApiPatchEntityWorkspaceDataFilterSettingsRequest
 */
export declare interface DataFiltersApiPatchEntityWorkspaceDataFilterSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiPatchEntityWorkspaceDataFilterSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiPatchEntityWorkspaceDataFilterSettings
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingPatchDocument}
     * @memberof DataFiltersApiPatchEntityWorkspaceDataFilterSettings
     */
    readonly jsonApiWorkspaceDataFilterSettingPatchDocument: JsonApiWorkspaceDataFilterSettingPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataFiltersApiPatchEntityWorkspaceDataFilterSettings
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>}
     * @memberof DataFiltersApiPatchEntityWorkspaceDataFilterSettings
     */
    readonly include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;
}

/**
 * Request parameters for patchEntityWorkspaceDataFilters operation in DataFiltersApi.
 * @export
 * @interface DataFiltersApiPatchEntityWorkspaceDataFiltersRequest
 */
export declare interface DataFiltersApiPatchEntityWorkspaceDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiPatchEntityWorkspaceDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiPatchEntityWorkspaceDataFilters
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterPatchDocument}
     * @memberof DataFiltersApiPatchEntityWorkspaceDataFilters
     */
    readonly jsonApiWorkspaceDataFilterPatchDocument: JsonApiWorkspaceDataFilterPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataFiltersApiPatchEntityWorkspaceDataFilters
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>}
     * @memberof DataFiltersApiPatchEntityWorkspaceDataFilters
     */
    readonly include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
}

/**
 * Request parameters for setWorkspaceDataFiltersLayout operation in DataFiltersApi.
 * @export
 * @interface DataFiltersApiSetWorkspaceDataFiltersLayoutRequest
 */
export declare interface DataFiltersApiSetWorkspaceDataFiltersLayoutRequest {
    /**
     *
     * @type {DeclarativeWorkspaceDataFilters}
     * @memberof DataFiltersApiSetWorkspaceDataFiltersLayout
     */
    readonly declarativeWorkspaceDataFilters: DeclarativeWorkspaceDataFilters;
}

/**
 * Request parameters for updateEntityUserDataFilters operation in DataFiltersApi.
 * @export
 * @interface DataFiltersApiUpdateEntityUserDataFiltersRequest
 */
export declare interface DataFiltersApiUpdateEntityUserDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiUpdateEntityUserDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiUpdateEntityUserDataFilters
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiUserDataFilterInDocument}
     * @memberof DataFiltersApiUpdateEntityUserDataFilters
     */
    readonly jsonApiUserDataFilterInDocument: JsonApiUserDataFilterInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataFiltersApiUpdateEntityUserDataFilters
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>}
     * @memberof DataFiltersApiUpdateEntityUserDataFilters
     */
    readonly include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">;
}

/**
 * Request parameters for updateEntityWorkspaceDataFilterSettings operation in DataFiltersApi.
 * @export
 * @interface DataFiltersApiUpdateEntityWorkspaceDataFilterSettingsRequest
 */
export declare interface DataFiltersApiUpdateEntityWorkspaceDataFilterSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiUpdateEntityWorkspaceDataFilterSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiUpdateEntityWorkspaceDataFilterSettings
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingInDocument}
     * @memberof DataFiltersApiUpdateEntityWorkspaceDataFilterSettings
     */
    readonly jsonApiWorkspaceDataFilterSettingInDocument: JsonApiWorkspaceDataFilterSettingInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataFiltersApiUpdateEntityWorkspaceDataFilterSettings
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>}
     * @memberof DataFiltersApiUpdateEntityWorkspaceDataFilterSettings
     */
    readonly include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;
}

/**
 * Request parameters for updateEntityWorkspaceDataFilters operation in DataFiltersApi.
 * @export
 * @interface DataFiltersApiUpdateEntityWorkspaceDataFiltersRequest
 */
export declare interface DataFiltersApiUpdateEntityWorkspaceDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiUpdateEntityWorkspaceDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof DataFiltersApiUpdateEntityWorkspaceDataFilters
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInDocument}
     * @memberof DataFiltersApiUpdateEntityWorkspaceDataFilters
     */
    readonly jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataFiltersApiUpdateEntityWorkspaceDataFilters
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>}
     * @memberof DataFiltersApiUpdateEntityWorkspaceDataFilters
     */
    readonly include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
}

/**
 *
 * @export
 * @interface DatasetReferenceIdentifier
 */
export declare interface DatasetReferenceIdentifier {
    /**
     *
     * @type {string}
     * @memberof DatasetReferenceIdentifier
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof DatasetReferenceIdentifier
     */
    type: DatasetReferenceIdentifierTypeEnum;
}

export declare const DatasetReferenceIdentifierTypeEnum: {
    readonly DATASET: "dataset";
};

export declare type DatasetReferenceIdentifierTypeEnum = typeof DatasetReferenceIdentifierTypeEnum[keyof typeof DatasetReferenceIdentifierTypeEnum];

/**
 * DatasetsApi - object-oriented interface
 * @export
 * @class DatasetsApi
 * @extends {BaseAPI}
 */
export declare class DatasetsApi extends MetadataBaseApi implements DatasetsApiInterface {
    /**
     *
     * @summary Get all Datasets
     * @param {DatasetsApiGetAllEntitiesDatasetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    getAllEntitiesDatasets(requestParameters: DatasetsApiGetAllEntitiesDatasetsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDatasetOutList, any>>;
    /**
     *
     * @summary Get a Dataset
     * @param {DatasetsApiGetEntityDatasetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApi
     */
    getEntityDatasets(requestParameters: DatasetsApiGetEntityDatasetsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDatasetOutDocument, any>>;
}

/**
 * DatasetsApi - axios parameter creator
 * @export
 */
export declare const DatasetsApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Get all Datasets
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'workspaceDataFilters' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDatasets: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"attributes" | "facts" | "datasets" | "workspaceDataFilters" | "references" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Dataset
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'workspaceDataFilters' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDatasets: (workspaceId: string, objectId: string, filter?: string, include?: Array<"attributes" | "facts" | "datasets" | "workspaceDataFilters" | "references" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * DatasetsApi - factory interface
 * @export
 */
export declare const DatasetsApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get all Datasets
     * @param {DatasetsApiGetAllEntitiesDatasetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDatasets(requestParameters: DatasetsApiGetAllEntitiesDatasetsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDatasetOutList>;
    /**
     *
     * @summary Get a Dataset
     * @param {DatasetsApiGetEntityDatasetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDatasets(requestParameters: DatasetsApiGetEntityDatasetsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDatasetOutDocument>;
};

/**
 * DatasetsApi - functional programming interface
 * @export
 */
export declare const DatasetsApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Get all Datasets
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'workspaceDataFilters' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDatasets(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"attributes" | "facts" | "datasets" | "workspaceDataFilters" | "references" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDatasetOutList>>;
    /**
     *
     * @summary Get a Dataset
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'workspaceDataFilters' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDatasets(workspaceId: string, objectId: string, filter?: string, include?: Array<"attributes" | "facts" | "datasets" | "workspaceDataFilters" | "references" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDatasetOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesDatasets operation in DatasetsApi.
 * @export
 * @interface DatasetsApiGetAllEntitiesDatasetsRequest
 */
export declare interface DatasetsApiGetAllEntitiesDatasetsRequest {
    /**
     *
     * @type {string}
     * @memberof DatasetsApiGetAllEntitiesDatasets
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof DatasetsApiGetAllEntitiesDatasets
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DatasetsApiGetAllEntitiesDatasets
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'facts' | 'datasets' | 'workspaceDataFilters' | 'references' | 'ALL'>}
     * @memberof DatasetsApiGetAllEntitiesDatasets
     */
    readonly include?: Array<"attributes" | "facts" | "datasets" | "workspaceDataFilters" | "references" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof DatasetsApiGetAllEntitiesDatasets
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof DatasetsApiGetAllEntitiesDatasets
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof DatasetsApiGetAllEntitiesDatasets
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof DatasetsApiGetAllEntitiesDatasets
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof DatasetsApiGetAllEntitiesDatasets
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityDatasets operation in DatasetsApi.
 * @export
 * @interface DatasetsApiGetEntityDatasetsRequest
 */
export declare interface DatasetsApiGetEntityDatasetsRequest {
    /**
     *
     * @type {string}
     * @memberof DatasetsApiGetEntityDatasets
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof DatasetsApiGetEntityDatasets
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DatasetsApiGetEntityDatasets
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'facts' | 'datasets' | 'workspaceDataFilters' | 'references' | 'ALL'>}
     * @memberof DatasetsApiGetEntityDatasets
     */
    readonly include?: Array<"attributes" | "facts" | "datasets" | "workspaceDataFilters" | "references" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof DatasetsApiGetEntityDatasets
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof DatasetsApiGetEntityDatasets
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * DatasetsApi - interface
 * @export
 * @interface DatasetsApi
 */
export declare interface DatasetsApiInterface {
    /**
     *
     * @summary Get all Datasets
     * @param {DatasetsApiGetAllEntitiesDatasetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApiInterface
     */
    getAllEntitiesDatasets(requestParameters: DatasetsApiGetAllEntitiesDatasetsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDatasetOutList>;
    /**
     *
     * @summary Get a Dataset
     * @param {DatasetsApiGetEntityDatasetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetsApiInterface
     */
    getEntityDatasets(requestParameters: DatasetsApiGetEntityDatasetsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDatasetOutDocument>;
}

/**
 * Identifier of a workspace data filter.
 * @export
 * @interface DatasetWorkspaceDataFilterIdentifier
 */
export declare interface DatasetWorkspaceDataFilterIdentifier {
    /**
     * Workspace Data Filters ID.
     * @type {string}
     * @memberof DatasetWorkspaceDataFilterIdentifier
     */
    id: string;
    /**
     * Filter type.
     * @type {string}
     * @memberof DatasetWorkspaceDataFilterIdentifier
     */
    type: DatasetWorkspaceDataFilterIdentifierTypeEnum;
}

export declare const DatasetWorkspaceDataFilterIdentifierTypeEnum: {
    readonly WORKSPACE_DATA_FILTER: "workspaceDataFilter";
};

export declare type DatasetWorkspaceDataFilterIdentifierTypeEnum = typeof DatasetWorkspaceDataFilterIdentifierTypeEnum[keyof typeof DatasetWorkspaceDataFilterIdentifierTypeEnum];

/**
 * DataSourceDeclarativeAPIsApi - object-oriented interface
 * @export
 * @class DataSourceDeclarativeAPIsApi
 * @extends {BaseAPI}
 */
export declare class DataSourceDeclarativeAPIsApi extends MetadataBaseApi implements DataSourceDeclarativeAPIsApiInterface {
    /**
     * Retrieve all data sources including related physical model.
     * @summary Get all data sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceDeclarativeAPIsApi
     */
    getDataSourcesLayout(options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeDataSources, any>>;
    /**
     * Set all data sources including related physical model.
     * @summary Put all data sources
     * @param {DataSourceDeclarativeAPIsApiPutDataSourcesLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceDeclarativeAPIsApi
     */
    putDataSourcesLayout(requestParameters: DataSourceDeclarativeAPIsApiPutDataSourcesLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
}

/**
 * DataSourceDeclarativeAPIsApi - axios parameter creator
 * @export
 */
export declare const DataSourceDeclarativeAPIsApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     * Retrieve all data sources including related physical model.
     * @summary Get all data sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourcesLayout: (options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Set all data sources including related physical model.
     * @summary Put all data sources
     * @param {DeclarativeDataSources} declarativeDataSources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putDataSourcesLayout: (declarativeDataSources: DeclarativeDataSources, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * DataSourceDeclarativeAPIsApi - factory interface
 * @export
 */
export declare const DataSourceDeclarativeAPIsApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieve all data sources including related physical model.
     * @summary Get all data sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourcesLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeDataSources>;
    /**
     * Set all data sources including related physical model.
     * @summary Put all data sources
     * @param {DataSourceDeclarativeAPIsApiPutDataSourcesLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putDataSourcesLayout(requestParameters: DataSourceDeclarativeAPIsApiPutDataSourcesLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
};

/**
 * DataSourceDeclarativeAPIsApi - functional programming interface
 * @export
 */
export declare const DataSourceDeclarativeAPIsApiFp: (configuration?: MetadataConfiguration) => {
    /**
     * Retrieve all data sources including related physical model.
     * @summary Get all data sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourcesLayout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeDataSources>>;
    /**
     * Set all data sources including related physical model.
     * @summary Put all data sources
     * @param {DeclarativeDataSources} declarativeDataSources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putDataSourcesLayout(declarativeDataSources: DeclarativeDataSources, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};

/**
 * DataSourceDeclarativeAPIsApi - interface
 * @export
 * @interface DataSourceDeclarativeAPIsApi
 */
export declare interface DataSourceDeclarativeAPIsApiInterface {
    /**
     * Retrieve all data sources including related physical model.
     * @summary Get all data sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceDeclarativeAPIsApiInterface
     */
    getDataSourcesLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeDataSources>;
    /**
     * Set all data sources including related physical model.
     * @summary Put all data sources
     * @param {DataSourceDeclarativeAPIsApiPutDataSourcesLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceDeclarativeAPIsApiInterface
     */
    putDataSourcesLayout(requestParameters: DataSourceDeclarativeAPIsApiPutDataSourcesLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
}

/**
 * Request parameters for putDataSourcesLayout operation in DataSourceDeclarativeAPIsApi.
 * @export
 * @interface DataSourceDeclarativeAPIsApiPutDataSourcesLayoutRequest
 */
export declare interface DataSourceDeclarativeAPIsApiPutDataSourcesLayoutRequest {
    /**
     *
     * @type {DeclarativeDataSources}
     * @memberof DataSourceDeclarativeAPIsApiPutDataSourcesLayout
     */
    readonly declarativeDataSources: DeclarativeDataSources;
}

/**
 * DataSourceEntitiesControllerApi - object-oriented interface
 * @export
 * @class DataSourceEntitiesControllerApi
 * @extends {BaseAPI}
 */
export declare class DataSourceEntitiesControllerApi extends MetadataBaseApi implements DataSourceEntitiesControllerApiInterface {
    /**
     *
     * @param {DataSourceEntitiesControllerApiGetAllEntitiesDataSourceTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntitiesControllerApi
     */
    getAllEntitiesDataSourceTables(requestParameters: DataSourceEntitiesControllerApiGetAllEntitiesDataSourceTablesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceTableOutList, any>>;
    /**
     *
     * @param {DataSourceEntitiesControllerApiGetEntityDataSourceTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntitiesControllerApi
     */
    getEntityDataSourceTables(requestParameters: DataSourceEntitiesControllerApiGetEntityDataSourceTablesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceTableOutDocument, any>>;
}

/**
 * DataSourceEntitiesControllerApi - axios parameter creator
 * @export
 */
export declare const DataSourceEntitiesControllerApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @param {string} dataSourceId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSourceTables: (dataSourceId: string, filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @param {string} dataSourceId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSourceTables: (dataSourceId: string, id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * DataSourceEntitiesControllerApi - factory interface
 * @export
 */
export declare const DataSourceEntitiesControllerApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {DataSourceEntitiesControllerApiGetAllEntitiesDataSourceTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSourceTables(requestParameters: DataSourceEntitiesControllerApiGetAllEntitiesDataSourceTablesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceTableOutList>;
    /**
     *
     * @param {DataSourceEntitiesControllerApiGetEntityDataSourceTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSourceTables(requestParameters: DataSourceEntitiesControllerApiGetEntityDataSourceTablesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceTableOutDocument>;
};

/**
 * DataSourceEntitiesControllerApi - functional programming interface
 * @export
 */
export declare const DataSourceEntitiesControllerApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @param {string} dataSourceId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSourceTables(dataSourceId: string, filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceTableOutList>>;
    /**
     *
     * @param {string} dataSourceId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSourceTables(dataSourceId: string, id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceTableOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesDataSourceTables operation in DataSourceEntitiesControllerApi.
 * @export
 * @interface DataSourceEntitiesControllerApiGetAllEntitiesDataSourceTablesRequest
 */
export declare interface DataSourceEntitiesControllerApiGetAllEntitiesDataSourceTablesRequest {
    /**
     *
     * @type {string}
     * @memberof DataSourceEntitiesControllerApiGetAllEntitiesDataSourceTables
     */
    readonly dataSourceId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataSourceEntitiesControllerApiGetAllEntitiesDataSourceTables
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof DataSourceEntitiesControllerApiGetAllEntitiesDataSourceTables
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof DataSourceEntitiesControllerApiGetAllEntitiesDataSourceTables
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof DataSourceEntitiesControllerApiGetAllEntitiesDataSourceTables
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getEntityDataSourceTables operation in DataSourceEntitiesControllerApi.
 * @export
 * @interface DataSourceEntitiesControllerApiGetEntityDataSourceTablesRequest
 */
export declare interface DataSourceEntitiesControllerApiGetEntityDataSourceTablesRequest {
    /**
     *
     * @type {string}
     * @memberof DataSourceEntitiesControllerApiGetEntityDataSourceTables
     */
    readonly dataSourceId: string;
    /**
     *
     * @type {string}
     * @memberof DataSourceEntitiesControllerApiGetEntityDataSourceTables
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataSourceEntitiesControllerApiGetEntityDataSourceTables
     */
    readonly filter?: string;
}

/**
 * DataSourceEntitiesControllerApi - interface
 * @export
 * @interface DataSourceEntitiesControllerApi
 */
export declare interface DataSourceEntitiesControllerApiInterface {
    /**
     *
     * @param {DataSourceEntitiesControllerApiGetAllEntitiesDataSourceTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntitiesControllerApiInterface
     */
    getAllEntitiesDataSourceTables(requestParameters: DataSourceEntitiesControllerApiGetAllEntitiesDataSourceTablesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceTableOutList>;
    /**
     *
     * @param {DataSourceEntitiesControllerApiGetEntityDataSourceTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntitiesControllerApiInterface
     */
    getEntityDataSourceTables(requestParameters: DataSourceEntitiesControllerApiGetEntityDataSourceTablesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceTableOutDocument>;
}

/**
 * DataSourceEntityAPIsApi - object-oriented interface
 * @export
 * @class DataSourceEntityAPIsApi
 * @extends {BaseAPI}
 */
export declare class DataSourceEntityAPIsApi extends MetadataBaseApi implements DataSourceEntityAPIsApiInterface {
    /**
     * Data Source - represents data source for the workspace
     * @summary Post Data Sources
     * @param {DataSourceEntityAPIsApiCreateEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntityAPIsApi
     */
    createEntityDataSources(requestParameters: DataSourceEntityAPIsApiCreateEntityDataSourcesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceOutDocument, any>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Delete Data Source entity
     * @param {DataSourceEntityAPIsApiDeleteEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntityAPIsApi
     */
    deleteEntityDataSources(requestParameters: DataSourceEntityAPIsApiDeleteEntityDataSourcesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Get all Data Source Identifiers
     * @param {DataSourceEntityAPIsApiGetAllEntitiesDataSourceIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntityAPIsApi
     */
    getAllEntitiesDataSourceIdentifiers(requestParameters?: DataSourceEntityAPIsApiGetAllEntitiesDataSourceIdentifiersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceIdentifierOutList, any>>;
    /**
     *
     * @param {DataSourceEntityAPIsApiGetAllEntitiesDataSourceTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntityAPIsApi
     */
    getAllEntitiesDataSourceTables(requestParameters: DataSourceEntityAPIsApiGetAllEntitiesDataSourceTablesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceTableOutList, any>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entities
     * @param {DataSourceEntityAPIsApiGetAllEntitiesDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntityAPIsApi
     */
    getAllEntitiesDataSources(requestParameters?: DataSourceEntityAPIsApiGetAllEntitiesDataSourcesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceOutList, any>>;
    /**
     *
     * @summary Get Data Source Identifier
     * @param {DataSourceEntityAPIsApiGetEntityDataSourceIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntityAPIsApi
     */
    getEntityDataSourceIdentifiers(requestParameters: DataSourceEntityAPIsApiGetEntityDataSourceIdentifiersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceIdentifierOutDocument, any>>;
    /**
     *
     * @param {DataSourceEntityAPIsApiGetEntityDataSourceTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntityAPIsApi
     */
    getEntityDataSourceTables(requestParameters: DataSourceEntityAPIsApiGetEntityDataSourceTablesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceTableOutDocument, any>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entity
     * @param {DataSourceEntityAPIsApiGetEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntityAPIsApi
     */
    getEntityDataSources(requestParameters: DataSourceEntityAPIsApiGetEntityDataSourcesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceOutDocument, any>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Patch Data Source entity
     * @param {DataSourceEntityAPIsApiPatchEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntityAPIsApi
     */
    patchEntityDataSources(requestParameters: DataSourceEntityAPIsApiPatchEntityDataSourcesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceOutDocument, any>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Put Data Source entity
     * @param {DataSourceEntityAPIsApiUpdateEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntityAPIsApi
     */
    updateEntityDataSources(requestParameters: DataSourceEntityAPIsApiUpdateEntityDataSourcesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceOutDocument, any>>;
}

/**
 * DataSourceEntityAPIsApi - axios parameter creator
 * @export
 */
export declare const DataSourceEntityAPIsApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     * Data Source - represents data source for the workspace
     * @summary Post Data Sources
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDataSources: (jsonApiDataSourceInDocument: JsonApiDataSourceInDocument, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Delete Data Source entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDataSources: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Data Source Identifiers
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSourceIdentifiers: (filter?: string, page?: number, size?: number, sort?: Array<string>, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @param {string} dataSourceId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSourceTables: (dataSourceId: string, filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSources: (filter?: string, page?: number, size?: number, sort?: Array<string>, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get Data Source Identifier
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSourceIdentifiers: (id: string, filter?: string, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @param {string} dataSourceId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSourceTables: (dataSourceId: string, id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSources: (id: string, filter?: string, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Patch Data Source entity
     * @param {string} id
     * @param {JsonApiDataSourcePatchDocument} jsonApiDataSourcePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityDataSources: (id: string, jsonApiDataSourcePatchDocument: JsonApiDataSourcePatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Put Data Source entity
     * @param {string} id
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDataSources: (id: string, jsonApiDataSourceInDocument: JsonApiDataSourceInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * Request parameters for createEntityDataSources operation in DataSourceEntityAPIsApi.
 * @export
 * @interface DataSourceEntityAPIsApiCreateEntityDataSourcesRequest
 */
export declare interface DataSourceEntityAPIsApiCreateEntityDataSourcesRequest {
    /**
     *
     * @type {JsonApiDataSourceInDocument}
     * @memberof DataSourceEntityAPIsApiCreateEntityDataSources
     */
    readonly jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'all' | 'ALL'>}
     * @memberof DataSourceEntityAPIsApiCreateEntityDataSources
     */
    readonly metaInclude?: Array<"permissions" | "all" | "ALL">;
}

/**
 * Request parameters for deleteEntityDataSources operation in DataSourceEntityAPIsApi.
 * @export
 * @interface DataSourceEntityAPIsApiDeleteEntityDataSourcesRequest
 */
export declare interface DataSourceEntityAPIsApiDeleteEntityDataSourcesRequest {
    /**
     *
     * @type {string}
     * @memberof DataSourceEntityAPIsApiDeleteEntityDataSources
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataSourceEntityAPIsApiDeleteEntityDataSources
     */
    readonly filter?: string;
}

/**
 * DataSourceEntityAPIsApi - factory interface
 * @export
 */
export declare const DataSourceEntityAPIsApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Data Source - represents data source for the workspace
     * @summary Post Data Sources
     * @param {DataSourceEntityAPIsApiCreateEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDataSources(requestParameters: DataSourceEntityAPIsApiCreateEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Delete Data Source entity
     * @param {DataSourceEntityAPIsApiDeleteEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDataSources(requestParameters: DataSourceEntityAPIsApiDeleteEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all Data Source Identifiers
     * @param {DataSourceEntityAPIsApiGetAllEntitiesDataSourceIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSourceIdentifiers(requestParameters: DataSourceEntityAPIsApiGetAllEntitiesDataSourceIdentifiersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceIdentifierOutList>;
    /**
     *
     * @param {DataSourceEntityAPIsApiGetAllEntitiesDataSourceTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSourceTables(requestParameters: DataSourceEntityAPIsApiGetAllEntitiesDataSourceTablesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceTableOutList>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entities
     * @param {DataSourceEntityAPIsApiGetAllEntitiesDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSources(requestParameters: DataSourceEntityAPIsApiGetAllEntitiesDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutList>;
    /**
     *
     * @summary Get Data Source Identifier
     * @param {DataSourceEntityAPIsApiGetEntityDataSourceIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSourceIdentifiers(requestParameters: DataSourceEntityAPIsApiGetEntityDataSourceIdentifiersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceIdentifierOutDocument>;
    /**
     *
     * @param {DataSourceEntityAPIsApiGetEntityDataSourceTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSourceTables(requestParameters: DataSourceEntityAPIsApiGetEntityDataSourceTablesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceTableOutDocument>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entity
     * @param {DataSourceEntityAPIsApiGetEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSources(requestParameters: DataSourceEntityAPIsApiGetEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Patch Data Source entity
     * @param {DataSourceEntityAPIsApiPatchEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityDataSources(requestParameters: DataSourceEntityAPIsApiPatchEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Put Data Source entity
     * @param {DataSourceEntityAPIsApiUpdateEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDataSources(requestParameters: DataSourceEntityAPIsApiUpdateEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutDocument>;
};

/**
 * DataSourceEntityAPIsApi - functional programming interface
 * @export
 */
export declare const DataSourceEntityAPIsApiFp: (configuration?: MetadataConfiguration) => {
    /**
     * Data Source - represents data source for the workspace
     * @summary Post Data Sources
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDataSources(jsonApiDataSourceInDocument: JsonApiDataSourceInDocument, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutDocument>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Delete Data Source entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDataSources(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get all Data Source Identifiers
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSourceIdentifiers(filter?: string, page?: number, size?: number, sort?: Array<string>, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceIdentifierOutList>>;
    /**
     *
     * @param {string} dataSourceId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSourceTables(dataSourceId: string, filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceTableOutList>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSources(filter?: string, page?: number, size?: number, sort?: Array<string>, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutList>>;
    /**
     *
     * @summary Get Data Source Identifier
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSourceIdentifiers(id: string, filter?: string, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceIdentifierOutDocument>>;
    /**
     *
     * @param {string} dataSourceId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSourceTables(dataSourceId: string, id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceTableOutDocument>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSources(id: string, filter?: string, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutDocument>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Patch Data Source entity
     * @param {string} id
     * @param {JsonApiDataSourcePatchDocument} jsonApiDataSourcePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityDataSources(id: string, jsonApiDataSourcePatchDocument: JsonApiDataSourcePatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutDocument>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Put Data Source entity
     * @param {string} id
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDataSources(id: string, jsonApiDataSourceInDocument: JsonApiDataSourceInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesDataSourceIdentifiers operation in DataSourceEntityAPIsApi.
 * @export
 * @interface DataSourceEntityAPIsApiGetAllEntitiesDataSourceIdentifiersRequest
 */
export declare interface DataSourceEntityAPIsApiGetAllEntitiesDataSourceIdentifiersRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataSourceEntityAPIsApiGetAllEntitiesDataSourceIdentifiers
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof DataSourceEntityAPIsApiGetAllEntitiesDataSourceIdentifiers
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof DataSourceEntityAPIsApiGetAllEntitiesDataSourceIdentifiers
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof DataSourceEntityAPIsApiGetAllEntitiesDataSourceIdentifiers
     */
    readonly sort?: Array<string>;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'all' | 'ALL'>}
     * @memberof DataSourceEntityAPIsApiGetAllEntitiesDataSourceIdentifiers
     */
    readonly metaInclude?: Array<"permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesDataSources operation in DataSourceEntityAPIsApi.
 * @export
 * @interface DataSourceEntityAPIsApiGetAllEntitiesDataSourcesRequest
 */
export declare interface DataSourceEntityAPIsApiGetAllEntitiesDataSourcesRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataSourceEntityAPIsApiGetAllEntitiesDataSources
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof DataSourceEntityAPIsApiGetAllEntitiesDataSources
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof DataSourceEntityAPIsApiGetAllEntitiesDataSources
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof DataSourceEntityAPIsApiGetAllEntitiesDataSources
     */
    readonly sort?: Array<string>;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'all' | 'ALL'>}
     * @memberof DataSourceEntityAPIsApiGetAllEntitiesDataSources
     */
    readonly metaInclude?: Array<"permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesDataSourceTables operation in DataSourceEntityAPIsApi.
 * @export
 * @interface DataSourceEntityAPIsApiGetAllEntitiesDataSourceTablesRequest
 */
export declare interface DataSourceEntityAPIsApiGetAllEntitiesDataSourceTablesRequest {
    /**
     *
     * @type {string}
     * @memberof DataSourceEntityAPIsApiGetAllEntitiesDataSourceTables
     */
    readonly dataSourceId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataSourceEntityAPIsApiGetAllEntitiesDataSourceTables
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof DataSourceEntityAPIsApiGetAllEntitiesDataSourceTables
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof DataSourceEntityAPIsApiGetAllEntitiesDataSourceTables
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof DataSourceEntityAPIsApiGetAllEntitiesDataSourceTables
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getEntityDataSourceIdentifiers operation in DataSourceEntityAPIsApi.
 * @export
 * @interface DataSourceEntityAPIsApiGetEntityDataSourceIdentifiersRequest
 */
export declare interface DataSourceEntityAPIsApiGetEntityDataSourceIdentifiersRequest {
    /**
     *
     * @type {string}
     * @memberof DataSourceEntityAPIsApiGetEntityDataSourceIdentifiers
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataSourceEntityAPIsApiGetEntityDataSourceIdentifiers
     */
    readonly filter?: string;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'all' | 'ALL'>}
     * @memberof DataSourceEntityAPIsApiGetEntityDataSourceIdentifiers
     */
    readonly metaInclude?: Array<"permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityDataSources operation in DataSourceEntityAPIsApi.
 * @export
 * @interface DataSourceEntityAPIsApiGetEntityDataSourcesRequest
 */
export declare interface DataSourceEntityAPIsApiGetEntityDataSourcesRequest {
    /**
     *
     * @type {string}
     * @memberof DataSourceEntityAPIsApiGetEntityDataSources
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataSourceEntityAPIsApiGetEntityDataSources
     */
    readonly filter?: string;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'all' | 'ALL'>}
     * @memberof DataSourceEntityAPIsApiGetEntityDataSources
     */
    readonly metaInclude?: Array<"permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityDataSourceTables operation in DataSourceEntityAPIsApi.
 * @export
 * @interface DataSourceEntityAPIsApiGetEntityDataSourceTablesRequest
 */
export declare interface DataSourceEntityAPIsApiGetEntityDataSourceTablesRequest {
    /**
     *
     * @type {string}
     * @memberof DataSourceEntityAPIsApiGetEntityDataSourceTables
     */
    readonly dataSourceId: string;
    /**
     *
     * @type {string}
     * @memberof DataSourceEntityAPIsApiGetEntityDataSourceTables
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataSourceEntityAPIsApiGetEntityDataSourceTables
     */
    readonly filter?: string;
}

/**
 * DataSourceEntityAPIsApi - interface
 * @export
 * @interface DataSourceEntityAPIsApi
 */
export declare interface DataSourceEntityAPIsApiInterface {
    /**
     * Data Source - represents data source for the workspace
     * @summary Post Data Sources
     * @param {DataSourceEntityAPIsApiCreateEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntityAPIsApiInterface
     */
    createEntityDataSources(requestParameters: DataSourceEntityAPIsApiCreateEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Delete Data Source entity
     * @param {DataSourceEntityAPIsApiDeleteEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntityAPIsApiInterface
     */
    deleteEntityDataSources(requestParameters: DataSourceEntityAPIsApiDeleteEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all Data Source Identifiers
     * @param {DataSourceEntityAPIsApiGetAllEntitiesDataSourceIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntityAPIsApiInterface
     */
    getAllEntitiesDataSourceIdentifiers(requestParameters: DataSourceEntityAPIsApiGetAllEntitiesDataSourceIdentifiersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceIdentifierOutList>;
    /**
     *
     * @param {DataSourceEntityAPIsApiGetAllEntitiesDataSourceTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntityAPIsApiInterface
     */
    getAllEntitiesDataSourceTables(requestParameters: DataSourceEntityAPIsApiGetAllEntitiesDataSourceTablesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceTableOutList>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entities
     * @param {DataSourceEntityAPIsApiGetAllEntitiesDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntityAPIsApiInterface
     */
    getAllEntitiesDataSources(requestParameters: DataSourceEntityAPIsApiGetAllEntitiesDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutList>;
    /**
     *
     * @summary Get Data Source Identifier
     * @param {DataSourceEntityAPIsApiGetEntityDataSourceIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntityAPIsApiInterface
     */
    getEntityDataSourceIdentifiers(requestParameters: DataSourceEntityAPIsApiGetEntityDataSourceIdentifiersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceIdentifierOutDocument>;
    /**
     *
     * @param {DataSourceEntityAPIsApiGetEntityDataSourceTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntityAPIsApiInterface
     */
    getEntityDataSourceTables(requestParameters: DataSourceEntityAPIsApiGetEntityDataSourceTablesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceTableOutDocument>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entity
     * @param {DataSourceEntityAPIsApiGetEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntityAPIsApiInterface
     */
    getEntityDataSources(requestParameters: DataSourceEntityAPIsApiGetEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Patch Data Source entity
     * @param {DataSourceEntityAPIsApiPatchEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntityAPIsApiInterface
     */
    patchEntityDataSources(requestParameters: DataSourceEntityAPIsApiPatchEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Put Data Source entity
     * @param {DataSourceEntityAPIsApiUpdateEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataSourceEntityAPIsApiInterface
     */
    updateEntityDataSources(requestParameters: DataSourceEntityAPIsApiUpdateEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutDocument>;
}

/**
 * Request parameters for patchEntityDataSources operation in DataSourceEntityAPIsApi.
 * @export
 * @interface DataSourceEntityAPIsApiPatchEntityDataSourcesRequest
 */
export declare interface DataSourceEntityAPIsApiPatchEntityDataSourcesRequest {
    /**
     *
     * @type {string}
     * @memberof DataSourceEntityAPIsApiPatchEntityDataSources
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiDataSourcePatchDocument}
     * @memberof DataSourceEntityAPIsApiPatchEntityDataSources
     */
    readonly jsonApiDataSourcePatchDocument: JsonApiDataSourcePatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataSourceEntityAPIsApiPatchEntityDataSources
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityDataSources operation in DataSourceEntityAPIsApi.
 * @export
 * @interface DataSourceEntityAPIsApiUpdateEntityDataSourcesRequest
 */
export declare interface DataSourceEntityAPIsApiUpdateEntityDataSourcesRequest {
    /**
     *
     * @type {string}
     * @memberof DataSourceEntityAPIsApiUpdateEntityDataSources
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiDataSourceInDocument}
     * @memberof DataSourceEntityAPIsApiUpdateEntityDataSources
     */
    readonly jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof DataSourceEntityAPIsApiUpdateEntityDataSources
     */
    readonly filter?: string;
}

/**
 * A parameter for testing data source connection
 * @export
 * @interface DataSourceParameter
 */
export declare interface DataSourceParameter {
    /**
     * Parameter name.
     * @type {string}
     * @memberof DataSourceParameter
     */
    name: string;
    /**
     * Parameter value.
     * @type {string}
     * @memberof DataSourceParameter
     */
    value: string;
}

/**
 * Result of getSchemata. Contains list of available DB schema names.
 * @export
 * @interface DataSourceSchemata
 */
export declare interface DataSourceSchemata {
    /**
     *
     * @type {Array<string>}
     * @memberof DataSourceSchemata
     */
    schemaNames: Array<string>;
}

/**
 * An id of the table from PDM mapped to this dataset. Including ID of data source.
 * @export
 * @interface DataSourceTableIdentifier
 */
export declare interface DataSourceTableIdentifier {
    /**
     * ID of table.
     * @type {string}
     * @memberof DataSourceTableIdentifier
     */
    id: string;
    /**
     * Data source ID.
     * @type {string}
     * @memberof DataSourceTableIdentifier
     */
    dataSourceId: string;
    /**
     * Data source entity type.
     * @type {string}
     * @memberof DataSourceTableIdentifier
     */
    type: DataSourceTableIdentifierTypeEnum;
    /**
     * Path to table.
     * @type {Array<string>}
     * @memberof DataSourceTableIdentifier
     */
    path?: Array<string> | null;
}

export declare const DataSourceTableIdentifierTypeEnum: {
    readonly DATA_SOURCE: "dataSource";
};

export declare type DataSourceTableIdentifierTypeEnum = typeof DataSourceTableIdentifierTypeEnum[keyof typeof DataSourceTableIdentifierTypeEnum];

/**
 * @type DateFilter
 * Abstract filter definition type for dates
 * @export
 */
export declare type DateFilter = AbsoluteDateFilter | RelativeDateFilter;

/**
 *
 * @export
 * @interface DeclarativeAnalyticalDashboard
 */
export declare interface DeclarativeAnalyticalDashboard {
    /**
     * Analytical dashboard ID.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboard
     */
    id: string;
    /**
     * Analytical dashboard title.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboard
     */
    title: string;
    /**
     * Analytical dashboard description.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboard
     */
    description?: string;
    /**
     * A definition of the metric in JSON format.
     * @type {object}
     * @memberof DeclarativeAnalyticalDashboard
     */
    content: object;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeAnalyticalDashboard
     */
    tags?: Array<string>;
    /**
     * A list of permissions.
     * @type {Array<DeclarativeAnalyticalDashboardPermission>}
     * @memberof DeclarativeAnalyticalDashboard
     */
    permissions?: Array<DeclarativeAnalyticalDashboardPermission>;
    /**
     *
     * @type {DeclarativeUserIdentifier}
     * @memberof DeclarativeAnalyticalDashboard
     */
    createdBy?: DeclarativeUserIdentifier;
    /**
     *
     * @type {DeclarativeUserIdentifier}
     * @memberof DeclarativeAnalyticalDashboard
     */
    modifiedBy?: DeclarativeUserIdentifier;
    /**
     * Time of the last entity modification.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboard
     */
    modifiedAt?: string | null;
    /**
     * Time of the entity creation.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboard
     */
    createdAt?: string | null;
}

/**
 *
 * @export
 * @interface DeclarativeAnalyticalDashboardExtension
 */
export declare interface DeclarativeAnalyticalDashboardExtension {
    /**
     * Analytical dashboard ID.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboardExtension
     */
    id: string;
    /**
     * A list of permissions.
     * @type {Array<DeclarativeAnalyticalDashboardPermission>}
     * @memberof DeclarativeAnalyticalDashboardExtension
     */
    permissions: Array<DeclarativeAnalyticalDashboardPermission>;
}

/**
 * Analytical dashboard permission.
 * @export
 * @interface DeclarativeAnalyticalDashboardPermission
 */
export declare interface DeclarativeAnalyticalDashboardPermission {
    /**
     * Permission name.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboardPermission
     */
    name: DeclarativeAnalyticalDashboardPermissionNameEnum;
    /**
     *
     * @type {AssigneeIdentifier}
     * @memberof DeclarativeAnalyticalDashboardPermission
     */
    assignee: AssigneeIdentifier;
}

export declare const DeclarativeAnalyticalDashboardPermissionNameEnum: {
    readonly EDIT: "EDIT";
    readonly SHARE: "SHARE";
    readonly VIEW: "VIEW";
};

export declare type DeclarativeAnalyticalDashboardPermissionNameEnum = typeof DeclarativeAnalyticalDashboardPermissionNameEnum[keyof typeof DeclarativeAnalyticalDashboardPermissionNameEnum];

/**
 * Entities describing users\' view on data.
 * @export
 * @interface DeclarativeAnalytics
 */
export declare interface DeclarativeAnalytics {
    /**
     *
     * @type {DeclarativeAnalyticsLayer}
     * @memberof DeclarativeAnalytics
     */
    analytics?: DeclarativeAnalyticsLayer;
}

/**
 *
 * @export
 * @interface DeclarativeAnalyticsLayer
 */
export declare interface DeclarativeAnalyticsLayer {
    /**
     * A list of analytical dashboards available in the model.
     * @type {Array<DeclarativeAnalyticalDashboard>}
     * @memberof DeclarativeAnalyticsLayer
     */
    analyticalDashboards?: Array<DeclarativeAnalyticalDashboard>;
    /**
     * A list of filter contexts available in the model.
     * @type {Array<DeclarativeFilterContext>}
     * @memberof DeclarativeAnalyticsLayer
     */
    filterContexts?: Array<DeclarativeFilterContext>;
    /**
     * A list of metrics available in the model.
     * @type {Array<DeclarativeMetric>}
     * @memberof DeclarativeAnalyticsLayer
     */
    metrics?: Array<DeclarativeMetric>;
    /**
     * A list of visualization objects available in the model.
     * @type {Array<DeclarativeVisualizationObject>}
     * @memberof DeclarativeAnalyticsLayer
     */
    visualizationObjects?: Array<DeclarativeVisualizationObject>;
    /**
     * A list of dashboard plugins available in the model.
     * @type {Array<DeclarativeDashboardPlugin>}
     * @memberof DeclarativeAnalyticsLayer
     */
    dashboardPlugins?: Array<DeclarativeDashboardPlugin>;
    /**
     * A list of dashboard permissions assigned to a related dashboard.
     * @type {Array<DeclarativeAnalyticalDashboardExtension>}
     * @memberof DeclarativeAnalyticsLayer
     */
    analyticalDashboardExtensions?: Array<DeclarativeAnalyticalDashboardExtension>;
}

/**
 * A dataset attribute.
 * @export
 * @interface DeclarativeAttribute
 */
export declare interface DeclarativeAttribute {
    /**
     * Attribute ID.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    id: string;
    /**
     * Attribute title.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    title: string;
    /**
     * Attribute description.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    description?: string;
    /**
     * An array of attribute labels.
     * @type {Array<DeclarativeLabel>}
     * @memberof DeclarativeAttribute
     */
    labels: Array<DeclarativeLabel>;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeAttribute
     */
    tags?: Array<string>;
    /**
     * Attribute sort column.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    sortColumn?: string;
    /**
     * Attribute sort direction.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    sortDirection?: DeclarativeAttributeSortDirectionEnum;
    /**
     *
     * @type {LabelIdentifier}
     * @memberof DeclarativeAttribute
     */
    defaultView?: LabelIdentifier;
    /**
     * A name of the source column that is the primary label
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    sourceColumn: string;
    /**
     * A type of the source column
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    sourceColumnDataType?: DeclarativeAttributeSourceColumnDataTypeEnum;
}

export declare const DeclarativeAttributeSortDirectionEnum: {
    readonly ASC: "ASC";
    readonly DESC: "DESC";
};

export declare type DeclarativeAttributeSortDirectionEnum = typeof DeclarativeAttributeSortDirectionEnum[keyof typeof DeclarativeAttributeSortDirectionEnum];

export declare const DeclarativeAttributeSourceColumnDataTypeEnum: {
    readonly INT: "INT";
    readonly STRING: "STRING";
    readonly DATE: "DATE";
    readonly NUMERIC: "NUMERIC";
    readonly TIMESTAMP: "TIMESTAMP";
    readonly TIMESTAMP_TZ: "TIMESTAMP_TZ";
    readonly BOOLEAN: "BOOLEAN";
};

export declare type DeclarativeAttributeSourceColumnDataTypeEnum = typeof DeclarativeAttributeSourceColumnDataTypeEnum[keyof typeof DeclarativeAttributeSourceColumnDataTypeEnum];

/**
 * Color palette and its properties.
 * @export
 * @interface DeclarativeColorPalette
 */
export declare interface DeclarativeColorPalette {
    /**
     *
     * @type {string}
     * @memberof DeclarativeColorPalette
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof DeclarativeColorPalette
     */
    name: string;
    /**
     * A definition of the metric in JSON format.
     * @type {object}
     * @memberof DeclarativeColorPalette
     */
    content: object;
}

/**
 * A table column.
 * @export
 * @interface DeclarativeColumn
 */
export declare interface DeclarativeColumn {
    /**
     * Column name
     * @type {string}
     * @memberof DeclarativeColumn
     */
    name: string;
    /**
     * Column type
     * @type {string}
     * @memberof DeclarativeColumn
     */
    dataType: DeclarativeColumnDataTypeEnum;
    /**
     * Is column part of primary key?
     * @type {boolean}
     * @memberof DeclarativeColumn
     */
    isPrimaryKey?: boolean;
    /**
     * Referenced table (Foreign key)
     * @type {string}
     * @memberof DeclarativeColumn
     */
    referencedTableId?: string;
    /**
     * Referenced table (Foreign key)
     * @type {string}
     * @memberof DeclarativeColumn
     */
    referencedTableColumn?: string;
}

export declare const DeclarativeColumnDataTypeEnum: {
    readonly INT: "INT";
    readonly STRING: "STRING";
    readonly DATE: "DATE";
    readonly NUMERIC: "NUMERIC";
    readonly TIMESTAMP: "TIMESTAMP";
    readonly TIMESTAMP_TZ: "TIMESTAMP_TZ";
    readonly BOOLEAN: "BOOLEAN";
};

export declare type DeclarativeColumnDataTypeEnum = typeof DeclarativeColumnDataTypeEnum[keyof typeof DeclarativeColumnDataTypeEnum];

/**
 *
 * @export
 * @interface DeclarativeCspDirective
 */
export declare interface DeclarativeCspDirective {
    /**
     *
     * @type {string}
     * @memberof DeclarativeCspDirective
     */
    directive: string;
    /**
     *
     * @type {Array<string>}
     * @memberof DeclarativeCspDirective
     */
    sources: Array<string>;
}

/**
 * Custom application setting and its value.
 * @export
 * @interface DeclarativeCustomApplicationSetting
 */
export declare interface DeclarativeCustomApplicationSetting {
    /**
     * Custom Application Setting ID.
     * @type {string}
     * @memberof DeclarativeCustomApplicationSetting
     */
    id: string;
    /**
     * A definition of the metric in JSON format.
     * @type {object}
     * @memberof DeclarativeCustomApplicationSetting
     */
    content: object;
    /**
     * The application id
     * @type {string}
     * @memberof DeclarativeCustomApplicationSetting
     */
    applicationName: string;
}

/**
 *
 * @export
 * @interface DeclarativeDashboardPlugin
 */
export declare interface DeclarativeDashboardPlugin {
    /**
     * Dashboard plugin object ID.
     * @type {string}
     * @memberof DeclarativeDashboardPlugin
     */
    id: string;
    /**
     * Dashboard plugin object title.
     * @type {string}
     * @memberof DeclarativeDashboardPlugin
     */
    title: string;
    /**
     * Dashboard plugin description.
     * @type {string}
     * @memberof DeclarativeDashboardPlugin
     */
    description?: string;
    /**
     * A definition of the metric in JSON format.
     * @type {object}
     * @memberof DeclarativeDashboardPlugin
     */
    content: object;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeDashboardPlugin
     */
    tags?: Array<string>;
    /**
     *
     * @type {DeclarativeUserIdentifier}
     * @memberof DeclarativeDashboardPlugin
     */
    createdBy?: DeclarativeUserIdentifier;
    /**
     *
     * @type {DeclarativeUserIdentifier}
     * @memberof DeclarativeDashboardPlugin
     */
    modifiedBy?: DeclarativeUserIdentifier;
    /**
     * Time of the last entity modification.
     * @type {string}
     * @memberof DeclarativeDashboardPlugin
     */
    modifiedAt?: string | null;
    /**
     * Time of the entity creation.
     * @type {string}
     * @memberof DeclarativeDashboardPlugin
     */
    createdAt?: string | null;
}

/**
 * A dataset defined by its properties.
 * @export
 * @interface DeclarativeDataset
 */
export declare interface DeclarativeDataset {
    /**
     * The Dataset ID. This ID is further used to refer to this instance of dataset.
     * @type {string}
     * @memberof DeclarativeDataset
     */
    id: string;
    /**
     * A dataset title.
     * @type {string}
     * @memberof DeclarativeDataset
     */
    title: string;
    /**
     * A dataset description.
     * @type {string}
     * @memberof DeclarativeDataset
     */
    description?: string;
    /**
     * An array of grain identifiers.
     * @type {Array<GrainIdentifier>}
     * @memberof DeclarativeDataset
     */
    grain: Array<GrainIdentifier>;
    /**
     * An array of attributes.
     * @type {Array<DeclarativeAttribute>}
     * @memberof DeclarativeDataset
     */
    attributes?: Array<DeclarativeAttribute>;
    /**
     * An array of facts.
     * @type {Array<DeclarativeFact>}
     * @memberof DeclarativeDataset
     */
    facts?: Array<DeclarativeFact>;
    /**
     * An array of references.
     * @type {Array<DeclarativeReference>}
     * @memberof DeclarativeDataset
     */
    references: Array<DeclarativeReference>;
    /**
     *
     * @type {DataSourceTableIdentifier}
     * @memberof DeclarativeDataset
     */
    dataSourceTableId?: DataSourceTableIdentifier;
    /**
     *
     * @type {DeclarativeDatasetSql}
     * @memberof DeclarativeDataset
     */
    sql?: DeclarativeDatasetSql;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeDataset
     */
    tags?: Array<string>;
    /**
     * An array of columns which are available for match to implicit workspace data filters.
     * @type {Array<DeclarativeWorkspaceDataFilterColumn>}
     * @memberof DeclarativeDataset
     */
    workspaceDataFilterColumns?: Array<DeclarativeWorkspaceDataFilterColumn>;
    /**
     * An array of explicit workspace data filters.
     * @type {Array<DeclarativeWorkspaceDataFilterReferences>}
     * @memberof DeclarativeDataset
     */
    workspaceDataFilterReferences?: Array<DeclarativeWorkspaceDataFilterReferences>;
}

/**
 * A dataset extension properties.
 * @export
 * @interface DeclarativeDatasetExtension
 */
export declare interface DeclarativeDatasetExtension {
    /**
     * The Dataset ID. This ID is further used to refer to this instance of dataset.
     * @type {string}
     * @memberof DeclarativeDatasetExtension
     */
    id: string;
    /**
     * An array of explicit workspace data filters.
     * @type {Array<DeclarativeWorkspaceDataFilterReferences>}
     * @memberof DeclarativeDatasetExtension
     */
    workspaceDataFilterReferences?: Array<DeclarativeWorkspaceDataFilterReferences>;
}

/**
 * SQL defining this dataset.
 * @export
 * @interface DeclarativeDatasetSql
 */
export declare interface DeclarativeDatasetSql {
    /**
     * SQL statement.
     * @type {string}
     * @memberof DeclarativeDatasetSql
     */
    statement: string;
    /**
     * Data source ID.
     * @type {string}
     * @memberof DeclarativeDatasetSql
     */
    dataSourceId: string;
}

/**
 * A data source and its properties.
 * @export
 * @interface DeclarativeDataSource
 */
export declare interface DeclarativeDataSource {
    /**
     * Data source ID.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    id: string;
    /**
     * Name of the data source.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    name: string;
    /**
     * Type of database.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    type: DeclarativeDataSourceTypeEnum;
    /**
     * An connection string relevant to type of database.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    url?: string;
    /**
     * A scheme/database with the data.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    schema: string;
    /**
     * User with permission connect the data source/database.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    username?: string;
    /**
     * Password for the data-source user, property is never returned back.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    password?: string;
    /**
     * Token as an alternative to username and password.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    token?: string;
    /**
     * Enable caching of intermediate results.
     * @type {boolean}
     * @memberof DeclarativeDataSource
     */
    enableCaching?: boolean;
    /**
     * Path to schema, where intermediate caches are stored.
     * @type {Array<string>}
     * @memberof DeclarativeDataSource
     */
    cachePath?: Array<string>;
    /**
     *
     * @type {Array<Parameter>}
     * @memberof DeclarativeDataSource
     */
    parameters?: Array<Parameter>;
    /**
     *
     * @type {Array<Parameter>}
     * @memberof DeclarativeDataSource
     */
    decodedParameters?: Array<Parameter>;
    /**
     *
     * @type {DeclarativeTables}
     * @memberof DeclarativeDataSource
     * @deprecated
     */
    pdm?: DeclarativeTables;
    /**
     *
     * @type {Array<DeclarativeDataSourcePermission>}
     * @memberof DeclarativeDataSource
     */
    permissions?: Array<DeclarativeDataSourcePermission>;
}

/**
 *
 * @export
 * @interface DeclarativeDataSourcePermission
 */
export declare interface DeclarativeDataSourcePermission {
    /**
     * Permission name.
     * @type {string}
     * @memberof DeclarativeDataSourcePermission
     */
    name: DeclarativeDataSourcePermissionNameEnum;
    /**
     *
     * @type {AssigneeIdentifier}
     * @memberof DeclarativeDataSourcePermission
     */
    assignee: AssigneeIdentifier;
}

export declare const DeclarativeDataSourcePermissionNameEnum: {
    readonly MANAGE: "MANAGE";
    readonly USE: "USE";
};

export declare type DeclarativeDataSourcePermissionNameEnum = typeof DeclarativeDataSourcePermissionNameEnum[keyof typeof DeclarativeDataSourcePermissionNameEnum];

/**
 * A data source and its properties.
 * @export
 * @interface DeclarativeDataSources
 */
export declare interface DeclarativeDataSources {
    /**
     *
     * @type {Array<DeclarativeDataSource>}
     * @memberof DeclarativeDataSources
     */
    dataSources: Array<DeclarativeDataSource>;
}

export declare const DeclarativeDataSourceTypeEnum: {
    readonly POSTGRESQL: "POSTGRESQL";
    readonly REDSHIFT: "REDSHIFT";
    readonly VERTICA: "VERTICA";
    readonly SNOWFLAKE: "SNOWFLAKE";
    readonly ADS: "ADS";
    readonly BIGQUERY: "BIGQUERY";
    readonly MSSQL: "MSSQL";
    readonly PRESTO: "PRESTO";
    readonly DREMIO: "DREMIO";
    readonly DRILL: "DRILL";
    readonly GREENPLUM: "GREENPLUM";
    readonly AZURESQL: "AZURESQL";
    readonly SYNAPSESQL: "SYNAPSESQL";
    readonly DATABRICKS: "DATABRICKS";
};

export declare type DeclarativeDataSourceTypeEnum = typeof DeclarativeDataSourceTypeEnum[keyof typeof DeclarativeDataSourceTypeEnum];

/**
 * A date dataset.
 * @export
 * @interface DeclarativeDateDataset
 */
export declare interface DeclarativeDateDataset {
    /**
     * Date dataset ID.
     * @type {string}
     * @memberof DeclarativeDateDataset
     */
    id: string;
    /**
     * Date dataset title.
     * @type {string}
     * @memberof DeclarativeDateDataset
     */
    title: string;
    /**
     * Date dataset description.
     * @type {string}
     * @memberof DeclarativeDateDataset
     */
    description?: string;
    /**
     *
     * @type {GranularitiesFormatting}
     * @memberof DeclarativeDateDataset
     */
    granularitiesFormatting: GranularitiesFormatting;
    /**
     * An array of date granularities. All listed granularities will be available for date dataset.
     * @type {Array<string>}
     * @memberof DeclarativeDateDataset
     */
    granularities: Array<DeclarativeDateDatasetGranularitiesEnum>;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeDateDataset
     */
    tags?: Array<string>;
}

export declare const DeclarativeDateDatasetGranularitiesEnum: {
    readonly MINUTE: "MINUTE";
    readonly HOUR: "HOUR";
    readonly DAY: "DAY";
    readonly WEEK: "WEEK";
    readonly MONTH: "MONTH";
    readonly QUARTER: "QUARTER";
    readonly YEAR: "YEAR";
    readonly MINUTE_OF_HOUR: "MINUTE_OF_HOUR";
    readonly HOUR_OF_DAY: "HOUR_OF_DAY";
    readonly DAY_OF_WEEK: "DAY_OF_WEEK";
    readonly DAY_OF_MONTH: "DAY_OF_MONTH";
    readonly DAY_OF_YEAR: "DAY_OF_YEAR";
    readonly WEEK_OF_YEAR: "WEEK_OF_YEAR";
    readonly MONTH_OF_YEAR: "MONTH_OF_YEAR";
    readonly QUARTER_OF_YEAR: "QUARTER_OF_YEAR";
};

export declare type DeclarativeDateDatasetGranularitiesEnum = typeof DeclarativeDateDatasetGranularitiesEnum[keyof typeof DeclarativeDateDatasetGranularitiesEnum];

/**
 * A dataset fact.
 * @export
 * @interface DeclarativeFact
 */
export declare interface DeclarativeFact {
    /**
     * Fact ID.
     * @type {string}
     * @memberof DeclarativeFact
     */
    id: string;
    /**
     * Fact title.
     * @type {string}
     * @memberof DeclarativeFact
     */
    title: string;
    /**
     * Fact description.
     * @type {string}
     * @memberof DeclarativeFact
     */
    description?: string;
    /**
     * A name of the source column in the table.
     * @type {string}
     * @memberof DeclarativeFact
     */
    sourceColumn: string;
    /**
     * A type of the source column
     * @type {string}
     * @memberof DeclarativeFact
     */
    sourceColumnDataType?: DeclarativeFactSourceColumnDataTypeEnum;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeFact
     */
    tags?: Array<string>;
}

export declare const DeclarativeFactSourceColumnDataTypeEnum: {
    readonly INT: "INT";
    readonly STRING: "STRING";
    readonly DATE: "DATE";
    readonly NUMERIC: "NUMERIC";
    readonly TIMESTAMP: "TIMESTAMP";
    readonly TIMESTAMP_TZ: "TIMESTAMP_TZ";
    readonly BOOLEAN: "BOOLEAN";
};

export declare type DeclarativeFactSourceColumnDataTypeEnum = typeof DeclarativeFactSourceColumnDataTypeEnum[keyof typeof DeclarativeFactSourceColumnDataTypeEnum];

/**
 *
 * @export
 * @interface DeclarativeFilterContext
 */
export declare interface DeclarativeFilterContext {
    /**
     * Filter Context ID.
     * @type {string}
     * @memberof DeclarativeFilterContext
     */
    id: string;
    /**
     * Filter Context title.
     * @type {string}
     * @memberof DeclarativeFilterContext
     */
    title: string;
    /**
     * Filter Context description.
     * @type {string}
     * @memberof DeclarativeFilterContext
     */
    description?: string;
    /**
     * A definition of the metric in JSON format.
     * @type {object}
     * @memberof DeclarativeFilterContext
     */
    content: object;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeFilterContext
     */
    tags?: Array<string>;
}

/**
 * A declarative form of the JWK.
 * @export
 * @interface DeclarativeJwk
 */
export declare interface DeclarativeJwk {
    /**
     * JWK object ID.
     * @type {string}
     * @memberof DeclarativeJwk
     */
    id: string;
    /**
     *
     * @type {DeclarativeJwkSpecification}
     * @memberof DeclarativeJwk
     */
    content: DeclarativeJwkSpecification;
}

/**
 * @type DeclarativeJwkSpecification
 * Declarative specification of the cryptographic key.
 * @export
 */
export declare type DeclarativeJwkSpecification = DeclarativeRsaSpecification;

/**
 * A attribute label.
 * @export
 * @interface DeclarativeLabel
 */
export declare interface DeclarativeLabel {
    /**
     * Label ID.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    id: string;
    /**
     * Label title.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    title: string;
    /**
     * Label description.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    description?: string;
    /**
     * A name of the source column in the table.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    sourceColumn: string;
    /**
     * A type of the source column
     * @type {string}
     * @memberof DeclarativeLabel
     */
    sourceColumnDataType?: DeclarativeLabelSourceColumnDataTypeEnum;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeLabel
     */
    tags?: Array<string>;
    /**
     * Specific type of label
     * @type {string}
     * @memberof DeclarativeLabel
     */
    valueType?: DeclarativeLabelValueTypeEnum;
}

export declare const DeclarativeLabelSourceColumnDataTypeEnum: {
    readonly INT: "INT";
    readonly STRING: "STRING";
    readonly DATE: "DATE";
    readonly NUMERIC: "NUMERIC";
    readonly TIMESTAMP: "TIMESTAMP";
    readonly TIMESTAMP_TZ: "TIMESTAMP_TZ";
    readonly BOOLEAN: "BOOLEAN";
};

export declare type DeclarativeLabelSourceColumnDataTypeEnum = typeof DeclarativeLabelSourceColumnDataTypeEnum[keyof typeof DeclarativeLabelSourceColumnDataTypeEnum];

export declare const DeclarativeLabelValueTypeEnum: {
    readonly TEXT: "TEXT";
    readonly HYPERLINK: "HYPERLINK";
    readonly GEO: "GEO";
    readonly GEO_LONGITUDE: "GEO_LONGITUDE";
    readonly GEO_LATITUDE: "GEO_LATITUDE";
};

export declare type DeclarativeLabelValueTypeEnum = typeof DeclarativeLabelValueTypeEnum[keyof typeof DeclarativeLabelValueTypeEnum];

/**
 * A logical data model (LDM) representation.
 * @export
 * @interface DeclarativeLdm
 */
export declare interface DeclarativeLdm {
    /**
     * An array containing datasets.
     * @type {Array<DeclarativeDataset>}
     * @memberof DeclarativeLdm
     */
    datasets?: Array<DeclarativeDataset>;
    /**
     * An array containing date-related datasets.
     * @type {Array<DeclarativeDateDataset>}
     * @memberof DeclarativeLdm
     */
    dateInstances?: Array<DeclarativeDateDataset>;
    /**
     * An array containing extensions for datasets defined in parent workspaces.
     * @type {Array<DeclarativeDatasetExtension>}
     * @memberof DeclarativeLdm
     */
    datasetExtensions?: Array<DeclarativeDatasetExtension>;
}

/**
 *
 * @export
 * @interface DeclarativeMetric
 */
export declare interface DeclarativeMetric {
    /**
     * Metric ID.
     * @type {string}
     * @memberof DeclarativeMetric
     */
    id: string;
    /**
     * Metric title.
     * @type {string}
     * @memberof DeclarativeMetric
     */
    title: string;
    /**
     * Metric description.
     * @type {string}
     * @memberof DeclarativeMetric
     */
    description?: string;
    /**
     * A definition of the metric in JSON format.
     * @type {object}
     * @memberof DeclarativeMetric
     */
    content: object;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeMetric
     */
    tags?: Array<string>;
    /**
     *
     * @type {DeclarativeUserIdentifier}
     * @memberof DeclarativeMetric
     */
    createdBy?: DeclarativeUserIdentifier;
    /**
     *
     * @type {DeclarativeUserIdentifier}
     * @memberof DeclarativeMetric
     */
    modifiedBy?: DeclarativeUserIdentifier;
    /**
     * Time of the last entity modification.
     * @type {string}
     * @memberof DeclarativeMetric
     */
    modifiedAt?: string | null;
    /**
     * Time of the entity creation.
     * @type {string}
     * @memberof DeclarativeMetric
     */
    createdAt?: string | null;
}

/**
 * A data model structured as a set of its attributes.
 * @export
 * @interface DeclarativeModel
 */
export declare interface DeclarativeModel {
    /**
     *
     * @type {DeclarativeLdm}
     * @memberof DeclarativeModel
     */
    ldm?: DeclarativeLdm;
}

/**
 * Complete definition of an organization in a declarative form.
 * @export
 * @interface DeclarativeOrganization
 */
export declare interface DeclarativeOrganization {
    /**
     *
     * @type {DeclarativeOrganizationInfo}
     * @memberof DeclarativeOrganization
     */
    organization: DeclarativeOrganizationInfo;
    /**
     *
     * @type {Array<DeclarativeUser>}
     * @memberof DeclarativeOrganization
     */
    users?: Array<DeclarativeUser>;
    /**
     *
     * @type {Array<DeclarativeUserGroup>}
     * @memberof DeclarativeOrganization
     */
    userGroups?: Array<DeclarativeUserGroup>;
    /**
     *
     * @type {Array<DeclarativeDataSource>}
     * @memberof DeclarativeOrganization
     */
    dataSources?: Array<DeclarativeDataSource>;
    /**
     *
     * @type {Array<DeclarativeWorkspace>}
     * @memberof DeclarativeOrganization
     */
    workspaces?: Array<DeclarativeWorkspace>;
    /**
     *
     * @type {Array<DeclarativeWorkspaceDataFilter>}
     * @memberof DeclarativeOrganization
     */
    workspaceDataFilters?: Array<DeclarativeWorkspaceDataFilter>;
    /**
     *
     * @type {Array<DeclarativeJwk>}
     * @memberof DeclarativeOrganization
     */
    jwks?: Array<DeclarativeJwk>;
}

/**
 * Information available about an organization.
 * @export
 * @interface DeclarativeOrganizationInfo
 */
export declare interface DeclarativeOrganizationInfo {
    /**
     * Identifier of the organization.
     * @type {string}
     * @memberof DeclarativeOrganizationInfo
     */
    id: string;
    /**
     * Formal name of the organization.
     * @type {string}
     * @memberof DeclarativeOrganizationInfo
     */
    name: string;
    /**
     * Formal hostname used in deployment.
     * @type {string}
     * @memberof DeclarativeOrganizationInfo
     */
    hostname: string;
    /**
     * URI of the authentication provider.
     * @type {string}
     * @memberof DeclarativeOrganizationInfo
     */
    oauthIssuerLocation?: string;
    /**
     * Identifier of the authentication provider
     * @type {string}
     * @memberof DeclarativeOrganizationInfo
     */
    oauthClientId?: string;
    /**
     * Communication secret of the authentication provider (never returned back).
     * @type {string}
     * @memberof DeclarativeOrganizationInfo
     */
    oauthClientSecret?: string;
    /**
     *
     * @type {Array<DeclarativeOrganizationPermission>}
     * @memberof DeclarativeOrganizationInfo
     */
    permissions: Array<DeclarativeOrganizationPermission>;
    /**
     * Early access defined on level Organization
     * @type {string}
     * @memberof DeclarativeOrganizationInfo
     */
    earlyAccess?: string;
    /**
     * Any string identifying the OIDC provider. This value is used as suffix for OAuth2 callback (redirect) URL. If not defined, the standard callback URL is used. This value is valid only for external OIDC providers, not for the internal DEX provider.
     * @type {string}
     * @memberof DeclarativeOrganizationInfo
     */
    oauthIssuerId?: string;
    /**
     * Any string identifying the claim in ID token, that should be used for user identification. The default value is \'sub\'.
     * @type {string}
     * @memberof DeclarativeOrganizationInfo
     */
    oauthSubjectIdClaim?: string;
    /**
     * A list of organization settings.
     * @type {Array<DeclarativeSetting>}
     * @memberof DeclarativeOrganizationInfo
     */
    settings?: Array<DeclarativeSetting>;
    /**
     * A list of themes.
     * @type {Array<DeclarativeTheme>}
     * @memberof DeclarativeOrganizationInfo
     */
    themes?: Array<DeclarativeTheme>;
    /**
     * A list of color palettes.
     * @type {Array<DeclarativeColorPalette>}
     * @memberof DeclarativeOrganizationInfo
     */
    colorPalettes?: Array<DeclarativeColorPalette>;
    /**
     * A list of CSP directives.
     * @type {Array<DeclarativeCspDirective>}
     * @memberof DeclarativeOrganizationInfo
     */
    cspDirectives?: Array<DeclarativeCspDirective>;
}

/**
 * Definition of an organization permission assigned to a user/user-group.
 * @export
 * @interface DeclarativeOrganizationPermission
 */
export declare interface DeclarativeOrganizationPermission {
    /**
     * Permission name.
     * @type {string}
     * @memberof DeclarativeOrganizationPermission
     */
    name: DeclarativeOrganizationPermissionNameEnum;
    /**
     *
     * @type {AssigneeIdentifier}
     * @memberof DeclarativeOrganizationPermission
     */
    assignee: AssigneeIdentifier;
}

export declare const DeclarativeOrganizationPermissionNameEnum: {
    readonly MANAGE: "MANAGE";
};

export declare type DeclarativeOrganizationPermissionNameEnum = typeof DeclarativeOrganizationPermissionNameEnum[keyof typeof DeclarativeOrganizationPermissionNameEnum];

/**
 * A physical data model (PDM) representation for single data source.
 * @export
 * @interface DeclarativePdm
 */
export declare interface DeclarativePdm {
    /**
     *
     * @type {DeclarativeTables}
     * @memberof DeclarativePdm
     * @deprecated
     */
    pdm: DeclarativeTables;
}

/**
 * A dataset reference.
 * @export
 * @interface DeclarativeReference
 */
export declare interface DeclarativeReference {
    /**
     *
     * @type {ReferenceIdentifier}
     * @memberof DeclarativeReference
     */
    identifier: ReferenceIdentifier;
    /**
     * The multi-value flag enables many-to-many cardinality for references.
     * @type {boolean}
     * @memberof DeclarativeReference
     */
    multivalue: boolean;
    /**
     * An array of source column names for a given reference.
     * @type {Array<string>}
     * @memberof DeclarativeReference
     */
    sourceColumns: Array<string>;
    /**
     * An array of source column data types for a given reference.
     * @type {Array<string>}
     * @memberof DeclarativeReference
     */
    sourceColumnDataTypes?: Array<DeclarativeReferenceSourceColumnDataTypesEnum>;
}

export declare const DeclarativeReferenceSourceColumnDataTypesEnum: {
    readonly INT: "INT";
    readonly STRING: "STRING";
    readonly DATE: "DATE";
    readonly NUMERIC: "NUMERIC";
    readonly TIMESTAMP: "TIMESTAMP";
    readonly TIMESTAMP_TZ: "TIMESTAMP_TZ";
    readonly BOOLEAN: "BOOLEAN";
};

export declare type DeclarativeReferenceSourceColumnDataTypesEnum = typeof DeclarativeReferenceSourceColumnDataTypesEnum[keyof typeof DeclarativeReferenceSourceColumnDataTypesEnum];

/**
 * Declarative specification of the cryptographic key.
 * @export
 * @interface DeclarativeRsaSpecification
 */
export declare interface DeclarativeRsaSpecification {
    /**
     * Key type parameter
     * @type {string}
     * @memberof DeclarativeRsaSpecification
     */
    kty: DeclarativeRsaSpecificationKtyEnum;
    /**
     * Algorithm intended for use with the key.
     * @type {string}
     * @memberof DeclarativeRsaSpecification
     */
    alg: DeclarativeRsaSpecificationAlgEnum;
    /**
     * Parameter identifies the intended use of the public key.
     * @type {string}
     * @memberof DeclarativeRsaSpecification
     */
    use: DeclarativeRsaSpecificationUseEnum;
    /**
     * Parameter contains a chain of one or more PKIX certificates.
     * @type {Array<string>}
     * @memberof DeclarativeRsaSpecification
     */
    x5c: Array<string>;
    /**
     * Parameter contains the modulus value for the RSA public key.
     * @type {string}
     * @memberof DeclarativeRsaSpecification
     */
    n: string;
    /**
     * parameter contains the exponent value for the RSA public key.
     * @type {string}
     * @memberof DeclarativeRsaSpecification
     */
    e: string;
    /**
     * Parameter is used to match a specific key.
     * @type {string}
     * @memberof DeclarativeRsaSpecification
     */
    kid: string;
    /**
     * Parameter is a base64url-encoded SHA-1 thumbprint of the DER encoding of an X.509 certificate.
     * @type {string}
     * @memberof DeclarativeRsaSpecification
     */
    x5t: string;
}

export declare const DeclarativeRsaSpecificationAlgEnum: {
    readonly RS256: "RS256";
    readonly RS384: "RS384";
    readonly RS512: "RS512";
};

export declare type DeclarativeRsaSpecificationAlgEnum = typeof DeclarativeRsaSpecificationAlgEnum[keyof typeof DeclarativeRsaSpecificationAlgEnum];

export declare const DeclarativeRsaSpecificationKtyEnum: {
    readonly RSA: "RSA";
};

export declare type DeclarativeRsaSpecificationKtyEnum = typeof DeclarativeRsaSpecificationKtyEnum[keyof typeof DeclarativeRsaSpecificationKtyEnum];

export declare const DeclarativeRsaSpecificationUseEnum: {
    readonly SIG: "sig";
};

export declare type DeclarativeRsaSpecificationUseEnum = typeof DeclarativeRsaSpecificationUseEnum[keyof typeof DeclarativeRsaSpecificationUseEnum];

/**
 * Setting and its value.
 * @export
 * @interface DeclarativeSetting
 */
export declare interface DeclarativeSetting {
    /**
     * Setting ID.
     * @type {string}
     * @memberof DeclarativeSetting
     */
    id: string;
    /**
     * A definition of the metric in JSON format.
     * @type {object}
     * @memberof DeclarativeSetting
     */
    content?: object;
    /**
     * Type of the setting.
     * @type {string}
     * @memberof DeclarativeSetting
     */
    type?: DeclarativeSettingTypeEnum;
}

export declare const DeclarativeSettingTypeEnum: {
    readonly TIMEZONE: "TIMEZONE";
    readonly ACTIVE_THEME: "ACTIVE_THEME";
    readonly ACTIVE_COLOR_PALETTE: "ACTIVE_COLOR_PALETTE";
    readonly WHITE_LABELING: "WHITE_LABELING";
    readonly LOCALE: "LOCALE";
    readonly FORMAT_LOCALE: "FORMAT_LOCALE";
    readonly MAPBOX_TOKEN: "MAPBOX_TOKEN";
    readonly WEEK_START: "WEEK_START";
};

export declare type DeclarativeSettingTypeEnum = typeof DeclarativeSettingTypeEnum[keyof typeof DeclarativeSettingTypeEnum];

/**
 *
 * @export
 * @interface DeclarativeSingleWorkspacePermission
 */
export declare interface DeclarativeSingleWorkspacePermission {
    /**
     * Permission name.
     * @type {string}
     * @memberof DeclarativeSingleWorkspacePermission
     */
    name: DeclarativeSingleWorkspacePermissionNameEnum;
    /**
     *
     * @type {AssigneeIdentifier}
     * @memberof DeclarativeSingleWorkspacePermission
     */
    assignee: AssigneeIdentifier;
}

export declare const DeclarativeSingleWorkspacePermissionNameEnum: {
    readonly MANAGE: "MANAGE";
    readonly ANALYZE: "ANALYZE";
    readonly EXPORT: "EXPORT";
    readonly EXPORT_TABULAR: "EXPORT_TABULAR";
    readonly EXPORT_PDF: "EXPORT_PDF";
    readonly VIEW: "VIEW";
};

export declare type DeclarativeSingleWorkspacePermissionNameEnum = typeof DeclarativeSingleWorkspacePermissionNameEnum[keyof typeof DeclarativeSingleWorkspacePermissionNameEnum];

/**
 * A database table.
 * @export
 * @interface DeclarativeTable
 */
export declare interface DeclarativeTable {
    /**
     * Table id.
     * @type {string}
     * @memberof DeclarativeTable
     */
    id: string;
    /**
     * Path to table.
     * @type {Array<string>}
     * @memberof DeclarativeTable
     */
    path: Array<string>;
    /**
     * Table type: TABLE or VIEW.
     * @type {string}
     * @memberof DeclarativeTable
     */
    type: string;
    /**
     * Table or view name prefix used in scan. Will be stripped when generating LDM.
     * @type {string}
     * @memberof DeclarativeTable
     */
    namePrefix?: string;
    /**
     * An array of physical columns
     * @type {Array<DeclarativeColumn>}
     * @memberof DeclarativeTable
     */
    columns: Array<DeclarativeColumn>;
}

/**
 * A physical data model (PDM) tables.
 * @export
 * @interface DeclarativeTables
 */
export declare interface DeclarativeTables {
    /**
     * An array of physical database tables.
     * @type {Array<DeclarativeTable>}
     * @memberof DeclarativeTables
     */
    tables: Array<DeclarativeTable>;
}

/**
 * Theme and its properties.
 * @export
 * @interface DeclarativeTheme
 */
export declare interface DeclarativeTheme {
    /**
     *
     * @type {string}
     * @memberof DeclarativeTheme
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof DeclarativeTheme
     */
    name: string;
    /**
     * A definition of the metric in JSON format.
     * @type {object}
     * @memberof DeclarativeTheme
     */
    content: object;
}

/**
 * A user and its properties
 * @export
 * @interface DeclarativeUser
 */
export declare interface DeclarativeUser {
    /**
     * User identifier.
     * @type {string}
     * @memberof DeclarativeUser
     */
    id: string;
    /**
     * User identification in the authentication manager.
     * @type {string}
     * @memberof DeclarativeUser
     */
    authId?: string;
    /**
     *
     * @type {Array<UserGroupIdentifier>}
     * @memberof DeclarativeUser
     */
    userGroups?: Array<UserGroupIdentifier>;
    /**
     * A list of user settings.
     * @type {Array<DeclarativeSetting>}
     * @memberof DeclarativeUser
     */
    settings?: Array<DeclarativeSetting>;
    /**
     * User first name
     * @type {string}
     * @memberof DeclarativeUser
     */
    firstname?: string;
    /**
     * User last name
     * @type {string}
     * @memberof DeclarativeUser
     */
    lastname?: string;
    /**
     * User email address
     * @type {string}
     * @memberof DeclarativeUser
     */
    email?: string;
    /**
     *
     * @type {Array<DeclarativeUserPermission>}
     * @memberof DeclarativeUser
     */
    permissions?: Array<DeclarativeUserPermission>;
}

/**
 * User Data Filters serving the filtering of what data users can see in workspaces.
 * @export
 * @interface DeclarativeUserDataFilter
 */
export declare interface DeclarativeUserDataFilter {
    /**
     * User Data Filters ID. This ID is further used to refer to this instance.
     * @type {string}
     * @memberof DeclarativeUserDataFilter
     */
    id: string;
    /**
     * User Data Filters setting title.
     * @type {string}
     * @memberof DeclarativeUserDataFilter
     */
    title: string;
    /**
     * User Data Filters setting description.
     * @type {string}
     * @memberof DeclarativeUserDataFilter
     */
    description?: string;
    /**
     * Expression in MAQL specifying the User Data Filter
     * @type {string}
     * @memberof DeclarativeUserDataFilter
     */
    maql: string;
    /**
     *
     * @type {DeclarativeUserIdentifier}
     * @memberof DeclarativeUserDataFilter
     */
    user?: DeclarativeUserIdentifier;
    /**
     *
     * @type {UserGroupIdentifier}
     * @memberof DeclarativeUserDataFilter
     */
    userGroup?: UserGroupIdentifier;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeUserDataFilter
     */
    tags?: Array<string>;
}

/**
 * Declarative form of user data filters.
 * @export
 * @interface DeclarativeUserDataFilters
 */
export declare interface DeclarativeUserDataFilters {
    /**
     *
     * @type {Array<DeclarativeUserDataFilter>}
     * @memberof DeclarativeUserDataFilters
     */
    userDataFilters: Array<DeclarativeUserDataFilter>;
}

/**
 * A user-group and its properties
 * @export
 * @interface DeclarativeUserGroup
 */
export declare interface DeclarativeUserGroup {
    /**
     * UserGroup identifier.
     * @type {string}
     * @memberof DeclarativeUserGroup
     */
    id: string;
    /**
     *
     * @type {Array<UserGroupIdentifier>}
     * @memberof DeclarativeUserGroup
     */
    parents?: Array<UserGroupIdentifier>;
    /**
     * Name of UserGroup
     * @type {string}
     * @memberof DeclarativeUserGroup
     */
    name?: string;
    /**
     *
     * @type {Array<DeclarativeUserGroupPermission>}
     * @memberof DeclarativeUserGroup
     */
    permissions?: Array<DeclarativeUserGroupPermission>;
}

/**
 * Definition of a user-group permission assigned to a user/user-group.
 * @export
 * @interface DeclarativeUserGroupPermission
 */
export declare interface DeclarativeUserGroupPermission {
    /**
     * Permission name.
     * @type {string}
     * @memberof DeclarativeUserGroupPermission
     */
    name: DeclarativeUserGroupPermissionNameEnum;
    /**
     *
     * @type {AssigneeIdentifier}
     * @memberof DeclarativeUserGroupPermission
     */
    assignee: AssigneeIdentifier;
}

export declare const DeclarativeUserGroupPermissionNameEnum: {
    readonly SEE: "SEE";
};

export declare type DeclarativeUserGroupPermissionNameEnum = typeof DeclarativeUserGroupPermissionNameEnum[keyof typeof DeclarativeUserGroupPermissionNameEnum];

/**
 * Definition of permissions associated with a user-group.
 * @export
 * @interface DeclarativeUserGroupPermissions
 */
export declare interface DeclarativeUserGroupPermissions {
    /**
     *
     * @type {Array<DeclarativeUserGroupPermission>}
     * @memberof DeclarativeUserGroupPermissions
     */
    permissions?: Array<DeclarativeUserGroupPermission>;
}

/**
 * Declarative form of userGroups and its properties.
 * @export
 * @interface DeclarativeUserGroups
 */
export declare interface DeclarativeUserGroups {
    /**
     *
     * @type {Array<DeclarativeUserGroup>}
     * @memberof DeclarativeUserGroups
     */
    userGroups: Array<DeclarativeUserGroup>;
}

/**
 * A user identifier.
 * @export
 * @interface DeclarativeUserIdentifier
 */
export declare interface DeclarativeUserIdentifier {
    /**
     * User identifier.
     * @type {string}
     * @memberof DeclarativeUserIdentifier
     */
    id: string;
    /**
     * A type.
     * @type {string}
     * @memberof DeclarativeUserIdentifier
     */
    type: DeclarativeUserIdentifierTypeEnum;
}

export declare const DeclarativeUserIdentifierTypeEnum: {
    readonly USER: "user";
};

export declare type DeclarativeUserIdentifierTypeEnum = typeof DeclarativeUserIdentifierTypeEnum[keyof typeof DeclarativeUserIdentifierTypeEnum];

/**
 * Definition of a user permission assigned to a user/user-group.
 * @export
 * @interface DeclarativeUserPermission
 */
export declare interface DeclarativeUserPermission {
    /**
     * Permission name.
     * @type {string}
     * @memberof DeclarativeUserPermission
     */
    name: DeclarativeUserPermissionNameEnum;
    /**
     *
     * @type {AssigneeIdentifier}
     * @memberof DeclarativeUserPermission
     */
    assignee: AssigneeIdentifier;
}

export declare const DeclarativeUserPermissionNameEnum: {
    readonly SEE: "SEE";
};

export declare type DeclarativeUserPermissionNameEnum = typeof DeclarativeUserPermissionNameEnum[keyof typeof DeclarativeUserPermissionNameEnum];

/**
 * Definition of permissions associated with a user.
 * @export
 * @interface DeclarativeUserPermissions
 */
export declare interface DeclarativeUserPermissions {
    /**
     *
     * @type {Array<DeclarativeUserPermission>}
     * @memberof DeclarativeUserPermissions
     */
    permissions?: Array<DeclarativeUserPermission>;
}

/**
 * Declarative form of users and its properties.
 * @export
 * @interface DeclarativeUsers
 */
export declare interface DeclarativeUsers {
    /**
     *
     * @type {Array<DeclarativeUser>}
     * @memberof DeclarativeUsers
     */
    users: Array<DeclarativeUser>;
}

/**
 * Declarative form of both users and user groups and theirs properties.
 * @export
 * @interface DeclarativeUsersUserGroups
 */
export declare interface DeclarativeUsersUserGroups {
    /**
     *
     * @type {Array<DeclarativeUser>}
     * @memberof DeclarativeUsersUserGroups
     */
    users: Array<DeclarativeUser>;
    /**
     *
     * @type {Array<DeclarativeUserGroup>}
     * @memberof DeclarativeUsersUserGroups
     */
    userGroups: Array<DeclarativeUserGroup>;
}

/**
 *
 * @export
 * @interface DeclarativeVisualizationObject
 */
export declare interface DeclarativeVisualizationObject {
    /**
     * Visualization object ID.
     * @type {string}
     * @memberof DeclarativeVisualizationObject
     */
    id: string;
    /**
     * Visualization object title.
     * @type {string}
     * @memberof DeclarativeVisualizationObject
     */
    title: string;
    /**
     * Visualization object description.
     * @type {string}
     * @memberof DeclarativeVisualizationObject
     */
    description?: string;
    /**
     * A definition of the metric in JSON format.
     * @type {object}
     * @memberof DeclarativeVisualizationObject
     */
    content: object;
    /**
     * A list of tags.
     * @type {Array<string>}
     * @memberof DeclarativeVisualizationObject
     */
    tags?: Array<string>;
    /**
     *
     * @type {DeclarativeUserIdentifier}
     * @memberof DeclarativeVisualizationObject
     */
    createdBy?: DeclarativeUserIdentifier;
    /**
     *
     * @type {DeclarativeUserIdentifier}
     * @memberof DeclarativeVisualizationObject
     */
    modifiedBy?: DeclarativeUserIdentifier;
    /**
     * Time of the last entity modification.
     * @type {string}
     * @memberof DeclarativeVisualizationObject
     */
    modifiedAt?: string | null;
    /**
     * Time of the entity creation.
     * @type {string}
     * @memberof DeclarativeVisualizationObject
     */
    createdAt?: string | null;
}

/**
 * A declarative form of a particular workspace.
 * @export
 * @interface DeclarativeWorkspace
 */
export declare interface DeclarativeWorkspace {
    /**
     * Identifier of a workspace
     * @type {string}
     * @memberof DeclarativeWorkspace
     */
    id: string;
    /**
     * Name of a workspace to view.
     * @type {string}
     * @memberof DeclarativeWorkspace
     */
    name: string;
    /**
     *
     * @type {DeclarativeWorkspaceModel}
     * @memberof DeclarativeWorkspace
     */
    model?: DeclarativeWorkspaceModel;
    /**
     *
     * @type {WorkspaceIdentifier}
     * @memberof DeclarativeWorkspace
     */
    parent?: WorkspaceIdentifier;
    /**
     *
     * @type {Array<DeclarativeSingleWorkspacePermission>}
     * @memberof DeclarativeWorkspace
     */
    permissions?: Array<DeclarativeSingleWorkspacePermission>;
    /**
     *
     * @type {Array<DeclarativeWorkspaceHierarchyPermission>}
     * @memberof DeclarativeWorkspace
     */
    hierarchyPermissions?: Array<DeclarativeWorkspaceHierarchyPermission>;
    /**
     * Early access defined on level Workspace
     * @type {string}
     * @memberof DeclarativeWorkspace
     */
    earlyAccess?: string;
    /**
     * Description of the workspace
     * @type {string}
     * @memberof DeclarativeWorkspace
     */
    description?: string;
    /**
     * Custom prefix of entity identifiers in workspace
     * @type {string}
     * @memberof DeclarativeWorkspace
     */
    prefix?: string;
    /**
     * A list of workspace settings.
     * @type {Array<DeclarativeSetting>}
     * @memberof DeclarativeWorkspace
     */
    settings?: Array<DeclarativeSetting>;
    /**
     * A list of workspace custom settings.
     * @type {Array<DeclarativeCustomApplicationSetting>}
     * @memberof DeclarativeWorkspace
     */
    customApplicationSettings?: Array<DeclarativeCustomApplicationSetting>;
    /**
     * A list of workspace user data filters.
     * @type {Array<DeclarativeUserDataFilter>}
     * @memberof DeclarativeWorkspace
     */
    userDataFilters?: Array<DeclarativeUserDataFilter>;
    /**
     * Extra cache limit allocated to specific workspace. In case there is extra cache budget setup for organization, it can be split between multiple workspaces.
     * @type {number}
     * @memberof DeclarativeWorkspace
     */
    cacheExtraLimit?: number;
}

/**
 * Workspace Data Filters serving the filtering of what data users can see in workspaces.
 * @export
 * @interface DeclarativeWorkspaceDataFilter
 */
export declare interface DeclarativeWorkspaceDataFilter {
    /**
     * Workspace Data Filters ID. This ID is further used to refer to this instance.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    id: string;
    /**
     * Workspace Data Filters title.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    title: string;
    /**
     * Workspace Data Filters description.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    description?: string;
    /**
     * Workspace Data Filters column name. Data are filtered using this physical column.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    columnName: string;
    /**
     * Filter settings specifying values of filters valid for the workspace.
     * @type {Array<DeclarativeWorkspaceDataFilterSetting>}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    workspaceDataFilterSettings: Array<DeclarativeWorkspaceDataFilterSetting>;
    /**
     *
     * @type {WorkspaceIdentifier}
     * @memberof DeclarativeWorkspaceDataFilter
     */
    workspace?: WorkspaceIdentifier;
}

/**
 *
 * @export
 * @interface DeclarativeWorkspaceDataFilterColumn
 */
export declare interface DeclarativeWorkspaceDataFilterColumn {
    /**
     * Name of the column
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilterColumn
     */
    name: string;
    /**
     * Data type of the column
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilterColumn
     */
    dataType: DeclarativeWorkspaceDataFilterColumnDataTypeEnum;
}

export declare const DeclarativeWorkspaceDataFilterColumnDataTypeEnum: {
    readonly INT: "INT";
    readonly STRING: "STRING";
    readonly DATE: "DATE";
    readonly NUMERIC: "NUMERIC";
    readonly TIMESTAMP: "TIMESTAMP";
    readonly TIMESTAMP_TZ: "TIMESTAMP_TZ";
    readonly BOOLEAN: "BOOLEAN";
};

export declare type DeclarativeWorkspaceDataFilterColumnDataTypeEnum = typeof DeclarativeWorkspaceDataFilterColumnDataTypeEnum[keyof typeof DeclarativeWorkspaceDataFilterColumnDataTypeEnum];

/**
 *
 * @export
 * @interface DeclarativeWorkspaceDataFilterReferences
 */
export declare interface DeclarativeWorkspaceDataFilterReferences {
    /**
     *
     * @type {DatasetWorkspaceDataFilterIdentifier}
     * @memberof DeclarativeWorkspaceDataFilterReferences
     */
    filterId: DatasetWorkspaceDataFilterIdentifier;
    /**
     * Filter column name
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilterReferences
     */
    filterColumn: string;
    /**
     * Filter column data type
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilterReferences
     */
    filterColumnDataType: DeclarativeWorkspaceDataFilterReferencesFilterColumnDataTypeEnum;
}

export declare const DeclarativeWorkspaceDataFilterReferencesFilterColumnDataTypeEnum: {
    readonly INT: "INT";
    readonly STRING: "STRING";
    readonly DATE: "DATE";
    readonly NUMERIC: "NUMERIC";
    readonly TIMESTAMP: "TIMESTAMP";
    readonly TIMESTAMP_TZ: "TIMESTAMP_TZ";
    readonly BOOLEAN: "BOOLEAN";
};

export declare type DeclarativeWorkspaceDataFilterReferencesFilterColumnDataTypeEnum = typeof DeclarativeWorkspaceDataFilterReferencesFilterColumnDataTypeEnum[keyof typeof DeclarativeWorkspaceDataFilterReferencesFilterColumnDataTypeEnum];

/**
 * Declarative form of data filters.
 * @export
 * @interface DeclarativeWorkspaceDataFilters
 */
export declare interface DeclarativeWorkspaceDataFilters {
    /**
     *
     * @type {Array<DeclarativeWorkspaceDataFilter>}
     * @memberof DeclarativeWorkspaceDataFilters
     */
    workspaceDataFilters: Array<DeclarativeWorkspaceDataFilter>;
}

/**
 * Workspace Data Filters serving the filtering of what data users can see in workspaces.
 * @export
 * @interface DeclarativeWorkspaceDataFilterSetting
 */
export declare interface DeclarativeWorkspaceDataFilterSetting {
    /**
     * Workspace Data Filters ID. This ID is further used to refer to this instance.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    id: string;
    /**
     * Workspace Data Filters setting title.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    title: string;
    /**
     * Workspace Data Filters setting description.
     * @type {string}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    description?: string;
    /**
     * Only those rows are returned, where columnName from filter matches those values.
     * @type {Array<string>}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    filterValues: Array<string>;
    /**
     *
     * @type {WorkspaceIdentifier}
     * @memberof DeclarativeWorkspaceDataFilterSetting
     */
    workspace: WorkspaceIdentifier;
}

/**
 *
 * @export
 * @interface DeclarativeWorkspaceHierarchyPermission
 */
export declare interface DeclarativeWorkspaceHierarchyPermission {
    /**
     * Permission name.
     * @type {string}
     * @memberof DeclarativeWorkspaceHierarchyPermission
     */
    name: DeclarativeWorkspaceHierarchyPermissionNameEnum;
    /**
     *
     * @type {AssigneeIdentifier}
     * @memberof DeclarativeWorkspaceHierarchyPermission
     */
    assignee: AssigneeIdentifier;
}

export declare const DeclarativeWorkspaceHierarchyPermissionNameEnum: {
    readonly MANAGE: "MANAGE";
    readonly ANALYZE: "ANALYZE";
    readonly EXPORT: "EXPORT";
    readonly EXPORT_TABULAR: "EXPORT_TABULAR";
    readonly EXPORT_PDF: "EXPORT_PDF";
    readonly VIEW: "VIEW";
};

export declare type DeclarativeWorkspaceHierarchyPermissionNameEnum = typeof DeclarativeWorkspaceHierarchyPermissionNameEnum[keyof typeof DeclarativeWorkspaceHierarchyPermissionNameEnum];

/**
 * A declarative form of a model and analytics for a workspace.
 * @export
 * @interface DeclarativeWorkspaceModel
 */
export declare interface DeclarativeWorkspaceModel {
    /**
     *
     * @type {DeclarativeLdm}
     * @memberof DeclarativeWorkspaceModel
     */
    ldm?: DeclarativeLdm;
    /**
     *
     * @type {DeclarativeAnalyticsLayer}
     * @memberof DeclarativeWorkspaceModel
     */
    analytics?: DeclarativeAnalyticsLayer;
}

/**
 * Definition of permissions associated with a workspace.
 * @export
 * @interface DeclarativeWorkspacePermissions
 */
export declare interface DeclarativeWorkspacePermissions {
    /**
     *
     * @type {Array<DeclarativeSingleWorkspacePermission>}
     * @memberof DeclarativeWorkspacePermissions
     */
    permissions?: Array<DeclarativeSingleWorkspacePermission>;
    /**
     *
     * @type {Array<DeclarativeWorkspaceHierarchyPermission>}
     * @memberof DeclarativeWorkspacePermissions
     */
    hierarchyPermissions?: Array<DeclarativeWorkspaceHierarchyPermission>;
}

/**
 * A declarative form of a all workspace layout.
 * @export
 * @interface DeclarativeWorkspaces
 */
export declare interface DeclarativeWorkspaces {
    /**
     *
     * @type {Array<DeclarativeWorkspace>}
     * @memberof DeclarativeWorkspaces
     */
    workspaces: Array<DeclarativeWorkspace>;
    /**
     *
     * @type {Array<DeclarativeWorkspaceDataFilter>}
     * @memberof DeclarativeWorkspaces
     */
    workspaceDataFilters: Array<DeclarativeWorkspaceDataFilter>;
}

declare const defaultTigerClient: ITigerClient;
export default defaultTigerClient;

/**
 * DependencyGraphApi - object-oriented interface
 * @export
 * @class DependencyGraphApi
 * @extends {BaseAPI}
 */
export declare class DependencyGraphApi extends MetadataBaseApi implements DependencyGraphApiInterface {
    /**
     * Computes the dependent entities graph
     * @summary Computes the dependent entities graph
     * @param {DependencyGraphApiGetDependentEntitiesGraphRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DependencyGraphApi
     */
    getDependentEntitiesGraph(requestParameters: DependencyGraphApiGetDependentEntitiesGraphRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DependentEntitiesResponse, any>>;
    /**
     * Computes the dependent entities graph from given entry points
     * @summary Computes the dependent entities graph from given entry points
     * @param {DependencyGraphApiGetDependentEntitiesGraphFromEntryPointsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DependencyGraphApi
     */
    getDependentEntitiesGraphFromEntryPoints(requestParameters: DependencyGraphApiGetDependentEntitiesGraphFromEntryPointsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DependentEntitiesResponse, any>>;
}

/**
 * DependencyGraphApi - axios parameter creator
 * @export
 */
export declare const DependencyGraphApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     * Computes the dependent entities graph
     * @summary Computes the dependent entities graph
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDependentEntitiesGraph: (workspaceId: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Computes the dependent entities graph from given entry points
     * @summary Computes the dependent entities graph from given entry points
     * @param {string} workspaceId
     * @param {DependentEntitiesRequest} dependentEntitiesRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDependentEntitiesGraphFromEntryPoints: (workspaceId: string, dependentEntitiesRequest: DependentEntitiesRequest, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * DependencyGraphApi - factory interface
 * @export
 */
export declare const DependencyGraphApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Computes the dependent entities graph
     * @summary Computes the dependent entities graph
     * @param {DependencyGraphApiGetDependentEntitiesGraphRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDependentEntitiesGraph(requestParameters: DependencyGraphApiGetDependentEntitiesGraphRequest, options?: AxiosRequestConfig): AxiosPromise<DependentEntitiesResponse>;
    /**
     * Computes the dependent entities graph from given entry points
     * @summary Computes the dependent entities graph from given entry points
     * @param {DependencyGraphApiGetDependentEntitiesGraphFromEntryPointsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDependentEntitiesGraphFromEntryPoints(requestParameters: DependencyGraphApiGetDependentEntitiesGraphFromEntryPointsRequest, options?: AxiosRequestConfig): AxiosPromise<DependentEntitiesResponse>;
};

/**
 * DependencyGraphApi - functional programming interface
 * @export
 */
export declare const DependencyGraphApiFp: (configuration?: MetadataConfiguration) => {
    /**
     * Computes the dependent entities graph
     * @summary Computes the dependent entities graph
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDependentEntitiesGraph(workspaceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DependentEntitiesResponse>>;
    /**
     * Computes the dependent entities graph from given entry points
     * @summary Computes the dependent entities graph from given entry points
     * @param {string} workspaceId
     * @param {DependentEntitiesRequest} dependentEntitiesRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDependentEntitiesGraphFromEntryPoints(workspaceId: string, dependentEntitiesRequest: DependentEntitiesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DependentEntitiesResponse>>;
};

/**
 * Request parameters for getDependentEntitiesGraphFromEntryPoints operation in DependencyGraphApi.
 * @export
 * @interface DependencyGraphApiGetDependentEntitiesGraphFromEntryPointsRequest
 */
export declare interface DependencyGraphApiGetDependentEntitiesGraphFromEntryPointsRequest {
    /**
     *
     * @type {string}
     * @memberof DependencyGraphApiGetDependentEntitiesGraphFromEntryPoints
     */
    readonly workspaceId: string;
    /**
     *
     * @type {DependentEntitiesRequest}
     * @memberof DependencyGraphApiGetDependentEntitiesGraphFromEntryPoints
     */
    readonly dependentEntitiesRequest: DependentEntitiesRequest;
}

/**
 * Request parameters for getDependentEntitiesGraph operation in DependencyGraphApi.
 * @export
 * @interface DependencyGraphApiGetDependentEntitiesGraphRequest
 */
export declare interface DependencyGraphApiGetDependentEntitiesGraphRequest {
    /**
     *
     * @type {string}
     * @memberof DependencyGraphApiGetDependentEntitiesGraph
     */
    readonly workspaceId: string;
}

/**
 * DependencyGraphApi - interface
 * @export
 * @interface DependencyGraphApi
 */
export declare interface DependencyGraphApiInterface {
    /**
     * Computes the dependent entities graph
     * @summary Computes the dependent entities graph
     * @param {DependencyGraphApiGetDependentEntitiesGraphRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DependencyGraphApiInterface
     */
    getDependentEntitiesGraph(requestParameters: DependencyGraphApiGetDependentEntitiesGraphRequest, options?: AxiosRequestConfig): AxiosPromise<DependentEntitiesResponse>;
    /**
     * Computes the dependent entities graph from given entry points
     * @summary Computes the dependent entities graph from given entry points
     * @param {DependencyGraphApiGetDependentEntitiesGraphFromEntryPointsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DependencyGraphApiInterface
     */
    getDependentEntitiesGraphFromEntryPoints(requestParameters: DependencyGraphApiGetDependentEntitiesGraphFromEntryPointsRequest, options?: AxiosRequestConfig): AxiosPromise<DependentEntitiesResponse>;
}

/**
 *
 * @export
 * @interface DependentEntitiesGraph
 */
export declare interface DependentEntitiesGraph {
    /**
     *
     * @type {Array<DependentEntitiesNode>}
     * @memberof DependentEntitiesGraph
     */
    nodes: Array<DependentEntitiesNode>;
    /**
     *
     * @type {Array<Array<EntityIdentifier>>}
     * @memberof DependentEntitiesGraph
     */
    edges: Array<Array<EntityIdentifier>>;
}

/**
 *
 * @export
 * @interface DependentEntitiesNode
 */
export declare interface DependentEntitiesNode {
    /**
     *
     * @type {string}
     * @memberof DependentEntitiesNode
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof DependentEntitiesNode
     */
    type: DependentEntitiesNodeTypeEnum;
    /**
     *
     * @type {string}
     * @memberof DependentEntitiesNode
     */
    title?: string;
}

export declare const DependentEntitiesNodeTypeEnum: {
    readonly ANALYTICAL_DASHBOARD: "analyticalDashboard";
    readonly ATTRIBUTE: "attribute";
    readonly DASHBOARD_PLUGIN: "dashboardPlugin";
    readonly DATASET: "dataset";
    readonly FACT: "fact";
    readonly LABEL: "label";
    readonly METRIC: "metric";
    readonly USER_DATA_FILTER: "userDataFilter";
    readonly PROMPT: "prompt";
    readonly VISUALIZATION_OBJECT: "visualizationObject";
    readonly FILTER_CONTEXT: "filterContext";
};

export declare type DependentEntitiesNodeTypeEnum = typeof DependentEntitiesNodeTypeEnum[keyof typeof DependentEntitiesNodeTypeEnum];

/**
 *
 * @export
 * @interface DependentEntitiesRequest
 */
export declare interface DependentEntitiesRequest {
    /**
     *
     * @type {Array<EntityIdentifier>}
     * @memberof DependentEntitiesRequest
     */
    identifiers: Array<EntityIdentifier>;
}

/**
 *
 * @export
 * @interface DependentEntitiesResponse
 */
export declare interface DependentEntitiesResponse {
    /**
     *
     * @type {DependentEntitiesGraph}
     * @memberof DependentEntitiesResponse
     */
    graph: DependentEntitiesGraph;
}

/**
 * Single dimension description.
 * @export
 * @interface Dimension
 */
export declare interface Dimension {
    /**
     * Dimension identification within requests. Other entities can reference this dimension by this value.
     * @type {string}
     * @memberof Dimension
     */
    localIdentifier?: string;
    /**
     * List of items in current dimension. Can reference \'localIdentifier\' from \'AttributeItem\', or special pseudo attribute \"measureGroup\" representing list of metrics.
     * @type {Array<string>}
     * @memberof Dimension
     */
    itemIdentifiers: Array<string>;
    /**
     * List of sorting rules. From most relevant to least relevant (less relevant rule is applied, when more relevant rule compares items as equal).
     * @type {Array<SortKey>}
     * @memberof Dimension
     */
    sorting?: Array<SortKey>;
}

/**
 * Contains the dimension-specific header information.
 * @export
 * @interface DimensionHeader
 */
export declare interface DimensionHeader {
    /**
     * An array containing header groups.
     * @type {Array<HeaderGroup>}
     * @memberof DimensionHeader
     */
    headerGroups: Array<HeaderGroup>;
}

/**
 * List of returned elements.
 * @export
 * @interface Element
 */
declare interface Element_2 {
    /**
     * Title of requested label.
     * @type {string}
     * @memberof Element
     */
    title: string | null;
    /**
     * Title of primary label of attribute owning requested label, null if the title is null or the primary label is excluded
     * @type {string}
     * @memberof Element
     */
    primaryTitle: string | null;
}
export { Element_2 as Element }

/**
 *
 * @export
 * @interface ElementsRequest
 */
export declare interface ElementsRequest {
    /**
     * Requested label.
     * @type {string}
     * @memberof ElementsRequest
     */
    label: string;
    /**
     * Excludes items from the result that differ only by primary label * ```false``` - return items with distinct primary label * ```true``` - return items with distinct requested label
     * @type {boolean}
     * @memberof ElementsRequest
     */
    excludePrimaryLabel?: boolean;
    /**
     *
     * @type {FilterBy}
     * @memberof ElementsRequest
     */
    filterBy?: FilterBy;
    /**
     * Sort order of returned items. Items are sorted by ```label``` title. If no sort order is specified then attribute\'s ```sortDirection``` is used, which is ASC by default
     * @type {string}
     * @memberof ElementsRequest
     */
    sortOrder?: ElementsRequestSortOrderEnum;
    /**
     * Inverse filters: * ```false``` - return items matching ```patternFilter``` and ```exactFilter``` * ```true``` - return items not matching ```patternFilter``` and ```exactFilter```
     * @type {boolean}
     * @memberof ElementsRequest
     */
    complementFilter?: boolean;
    /**
     * Return only items, whose ```label``` title case insensitively contains ```filter``` as substring.
     * @type {string}
     * @memberof ElementsRequest
     */
    patternFilter?: string;
    /**
     * Return only items, whose ```label``` title exactly matches one of ```filter```.
     * @type {Array<string>}
     * @memberof ElementsRequest
     */
    exactFilter?: Array<string>;
    /**
     * Specifies percentage of source table data scanned during the computation. This field is deprecated and is no longer used during the elements computation.
     * @type {number}
     * @memberof ElementsRequest
     * @deprecated
     */
    dataSamplingPercentage?: number;
}

export declare const ElementsRequestSortOrderEnum: {
    readonly ASC: "ASC";
    readonly DESC: "DESC";
};

export declare type ElementsRequestSortOrderEnum = typeof ElementsRequestSortOrderEnum[keyof typeof ElementsRequestSortOrderEnum];

/**
 * Entity holding list of sorted & filtered label elements, related primary label of attribute owning requested label and paging.
 * @export
 * @interface ElementsResponse
 */
export declare interface ElementsResponse {
    /**
     *
     * @type {RestApiIdentifier}
     * @memberof ElementsResponse
     */
    primaryLabel: RestApiIdentifier;
    /**
     * List of returned elements.
     * @type {Array<Element>}
     * @memberof ElementsResponse
     */
    elements: Array<Element_2>;
    /**
     *
     * @type {Paging}
     * @memberof ElementsResponse
     */
    paging: Paging;
    /**
     * Granularity of requested label in case of date attribute
     * @type {string}
     * @memberof ElementsResponse
     */
    granularity?: ElementsResponseGranularityEnum;
    /**
     *
     * @type {AttributeFormat}
     * @memberof ElementsResponse
     */
    format?: AttributeFormat;
}

export declare const ElementsResponseGranularityEnum: {
    readonly MINUTE: "MINUTE";
    readonly HOUR: "HOUR";
    readonly DAY: "DAY";
    readonly WEEK: "WEEK";
    readonly MONTH: "MONTH";
    readonly QUARTER: "QUARTER";
    readonly YEAR: "YEAR";
    readonly MINUTE_OF_HOUR: "MINUTE_OF_HOUR";
    readonly HOUR_OF_DAY: "HOUR_OF_DAY";
    readonly DAY_OF_WEEK: "DAY_OF_WEEK";
    readonly DAY_OF_MONTH: "DAY_OF_MONTH";
    readonly DAY_OF_YEAR: "DAY_OF_YEAR";
    readonly WEEK_OF_YEAR: "WEEK_OF_YEAR";
    readonly MONTH_OF_YEAR: "MONTH_OF_YEAR";
    readonly QUARTER_OF_YEAR: "QUARTER_OF_YEAR";
};

export declare type ElementsResponseGranularityEnum = typeof ElementsResponseGranularityEnum[keyof typeof ElementsResponseGranularityEnum];

/**
 * EntitiesApi - object-oriented interface
 * @export
 * @class EntitiesApi
 * @extends {BaseAPI}
 */
export declare class EntitiesApi extends MetadataBaseApi implements EntitiesApiInterface {
    /**
     *
     * @summary Post Dashboards
     * @param {EntitiesApiCreateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityAnalyticalDashboards(requestParameters: EntitiesApiCreateEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAnalyticalDashboardOutDocument, any>>;
    /**
     *
     * @summary Post a new API token for the user
     * @param {EntitiesApiCreateEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityApiTokens(requestParameters: EntitiesApiCreateEntityApiTokensRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiApiTokenOutDocument, any>>;
    /**
     *
     * @summary Post Attribute Hierarchies
     * @param {EntitiesApiCreateEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityAttributeHierarchies(requestParameters: EntitiesApiCreateEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAttributeHierarchyOutDocument, any>>;
    /**
     *
     * @summary Post Color Pallettes
     * @param {EntitiesApiCreateEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityColorPalettes(requestParameters: EntitiesApiCreateEntityColorPalettesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiColorPaletteOutDocument, any>>;
    /**
     *  Context Security Police Directive
     * @summary Post CSP Directives
     * @param {EntitiesApiCreateEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityCspDirectives(requestParameters: EntitiesApiCreateEntityCspDirectivesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCspDirectiveOutDocument, any>>;
    /**
     *
     * @summary Post Custom Application Settings
     * @param {EntitiesApiCreateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityCustomApplicationSettings(requestParameters: EntitiesApiCreateEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCustomApplicationSettingOutDocument, any>>;
    /**
     *
     * @summary Post Plugins
     * @param {EntitiesApiCreateEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityDashboardPlugins(requestParameters: EntitiesApiCreateEntityDashboardPluginsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDashboardPluginOutDocument, any>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Post Data Sources
     * @param {EntitiesApiCreateEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityDataSources(requestParameters: EntitiesApiCreateEntityDataSourcesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceOutDocument, any>>;
    /**
     *
     * @summary Post Context Filters
     * @param {EntitiesApiCreateEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityFilterContexts(requestParameters: EntitiesApiCreateEntityFilterContextsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiFilterContextOutDocument, any>>;
    /**
     * Creates JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Post Jwks
     * @param {EntitiesApiCreateEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityJwks(requestParameters: EntitiesApiCreateEntityJwksRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiJwkOutDocument, any>>;
    /**
     *
     * @summary Post Metrics
     * @param {EntitiesApiCreateEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityMetrics(requestParameters: EntitiesApiCreateEntityMetricsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiMetricOutDocument, any>>;
    /**
     *
     * @summary Post Organization Setting entities
     * @param {EntitiesApiCreateEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityOrganizationSettings(requestParameters: EntitiesApiCreateEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiOrganizationSettingOutDocument, any>>;
    /**
     *
     * @summary Post Theming
     * @param {EntitiesApiCreateEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityThemes(requestParameters: EntitiesApiCreateEntityThemesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiThemeOutDocument, any>>;
    /**
     *
     * @summary Post User Data Filters
     * @param {EntitiesApiCreateEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityUserDataFilters(requestParameters: EntitiesApiCreateEntityUserDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserDataFilterOutDocument, any>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Post User Group entities
     * @param {EntitiesApiCreateEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityUserGroups(requestParameters: EntitiesApiCreateEntityUserGroupsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserGroupOutDocument, any>>;
    /**
     *
     * @summary Post new user settings for the user
     * @param {EntitiesApiCreateEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityUserSettings(requestParameters: EntitiesApiCreateEntityUserSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserSettingOutDocument, any>>;
    /**
     * User - represents entity interacting with platform
     * @summary Post User entities
     * @param {EntitiesApiCreateEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityUsers(requestParameters: EntitiesApiCreateEntityUsersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserOutDocument, any>>;
    /**
     *
     * @summary Post Visualization Objects
     * @param {EntitiesApiCreateEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityVisualizationObjects(requestParameters: EntitiesApiCreateEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiVisualizationObjectOutDocument, any>>;
    /**
     *
     * @summary Post Settings for Workspace Data Filters
     * @param {EntitiesApiCreateEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityWorkspaceDataFilterSettings(requestParameters: EntitiesApiCreateEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterSettingOutDocument, any>>;
    /**
     *
     * @summary Post Workspace Data Filters
     * @param {EntitiesApiCreateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityWorkspaceDataFilters(requestParameters: EntitiesApiCreateEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterOutDocument, any>>;
    /**
     *
     * @summary Post Settings for Workspaces
     * @param {EntitiesApiCreateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityWorkspaceSettings(requestParameters: EntitiesApiCreateEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceSettingOutDocument, any>>;
    /**
     * Space of the shared interest
     * @summary Post Workspace entities
     * @param {EntitiesApiCreateEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    createEntityWorkspaces(requestParameters: EntitiesApiCreateEntityWorkspacesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceOutDocument, any>>;
    /**
     *
     * @summary Delete a Dashboard
     * @param {EntitiesApiDeleteEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityAnalyticalDashboards(requestParameters: EntitiesApiDeleteEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete an API Token for a user
     * @param {EntitiesApiDeleteEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityApiTokens(requestParameters: EntitiesApiDeleteEntityApiTokensRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete an Attribute Hierarchy
     * @param {EntitiesApiDeleteEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityAttributeHierarchies(requestParameters: EntitiesApiDeleteEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a Color Pallette
     * @param {EntitiesApiDeleteEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityColorPalettes(requestParameters: EntitiesApiDeleteEntityColorPalettesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *  Context Security Police Directive
     * @summary Delete CSP Directives
     * @param {EntitiesApiDeleteEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityCspDirectives(requestParameters: EntitiesApiDeleteEntityCspDirectivesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a Custom Application Setting
     * @param {EntitiesApiDeleteEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityCustomApplicationSettings(requestParameters: EntitiesApiDeleteEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a Plugin
     * @param {EntitiesApiDeleteEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityDashboardPlugins(requestParameters: EntitiesApiDeleteEntityDashboardPluginsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Delete Data Source entity
     * @param {EntitiesApiDeleteEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityDataSources(requestParameters: EntitiesApiDeleteEntityDataSourcesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a Context Filter
     * @param {EntitiesApiDeleteEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityFilterContexts(requestParameters: EntitiesApiDeleteEntityFilterContextsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Deletes JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Delete Jwk
     * @param {EntitiesApiDeleteEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityJwks(requestParameters: EntitiesApiDeleteEntityJwksRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a Metric
     * @param {EntitiesApiDeleteEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityMetrics(requestParameters: EntitiesApiDeleteEntityMetricsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete Organization entity
     * @param {EntitiesApiDeleteEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityOrganizationSettings(requestParameters: EntitiesApiDeleteEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete Theming
     * @param {EntitiesApiDeleteEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityThemes(requestParameters: EntitiesApiDeleteEntityThemesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a User Data Filter
     * @param {EntitiesApiDeleteEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityUserDataFilters(requestParameters: EntitiesApiDeleteEntityUserDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Delete UserGroup entity
     * @param {EntitiesApiDeleteEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityUserGroups(requestParameters: EntitiesApiDeleteEntityUserGroupsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a setting for a user
     * @param {EntitiesApiDeleteEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityUserSettings(requestParameters: EntitiesApiDeleteEntityUserSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * User - represents entity interacting with platform
     * @summary Delete User entity
     * @param {EntitiesApiDeleteEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityUsers(requestParameters: EntitiesApiDeleteEntityUsersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a Visualization Object
     * @param {EntitiesApiDeleteEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityVisualizationObjects(requestParameters: EntitiesApiDeleteEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a Settings for Workspace Data Filter
     * @param {EntitiesApiDeleteEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityWorkspaceDataFilterSettings(requestParameters: EntitiesApiDeleteEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a Workspace Data Filter
     * @param {EntitiesApiDeleteEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityWorkspaceDataFilters(requestParameters: EntitiesApiDeleteEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a Setting for Workspace
     * @param {EntitiesApiDeleteEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityWorkspaceSettings(requestParameters: EntitiesApiDeleteEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Space of the shared interest
     * @summary Delete Workspace entity
     * @param {EntitiesApiDeleteEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    deleteEntityWorkspaces(requestParameters: EntitiesApiDeleteEntityWorkspacesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Get all Dashboards
     * @param {EntitiesApiGetAllEntitiesAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesAnalyticalDashboards(requestParameters: EntitiesApiGetAllEntitiesAnalyticalDashboardsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAnalyticalDashboardOutList, any>>;
    /**
     *
     * @summary List all api tokens for a user
     * @param {EntitiesApiGetAllEntitiesApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesApiTokens(requestParameters: EntitiesApiGetAllEntitiesApiTokensRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiApiTokenOutList, any>>;
    /**
     *
     * @summary Get all Attribute Hierarchies
     * @param {EntitiesApiGetAllEntitiesAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesAttributeHierarchies(requestParameters: EntitiesApiGetAllEntitiesAttributeHierarchiesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAttributeHierarchyOutList, any>>;
    /**
     *
     * @summary Get all Attributes
     * @param {EntitiesApiGetAllEntitiesAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesAttributes(requestParameters: EntitiesApiGetAllEntitiesAttributesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAttributeOutList, any>>;
    /**
     *
     * @summary Get all Color Pallettes
     * @param {EntitiesApiGetAllEntitiesColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesColorPalettes(requestParameters?: EntitiesApiGetAllEntitiesColorPalettesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiColorPaletteOutList, any>>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {EntitiesApiGetAllEntitiesCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesCspDirectives(requestParameters?: EntitiesApiGetAllEntitiesCspDirectivesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCspDirectiveOutList, any>>;
    /**
     *
     * @summary Get all Custom Application Settings
     * @param {EntitiesApiGetAllEntitiesCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesCustomApplicationSettings(requestParameters: EntitiesApiGetAllEntitiesCustomApplicationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCustomApplicationSettingOutList, any>>;
    /**
     *
     * @summary Get all Plugins
     * @param {EntitiesApiGetAllEntitiesDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesDashboardPlugins(requestParameters: EntitiesApiGetAllEntitiesDashboardPluginsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDashboardPluginOutList, any>>;
    /**
     *
     * @summary Get all Data Source Identifiers
     * @param {EntitiesApiGetAllEntitiesDataSourceIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesDataSourceIdentifiers(requestParameters?: EntitiesApiGetAllEntitiesDataSourceIdentifiersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceIdentifierOutList, any>>;
    /**
     *
     * @param {EntitiesApiGetAllEntitiesDataSourceTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesDataSourceTables(requestParameters: EntitiesApiGetAllEntitiesDataSourceTablesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceTableOutList, any>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entities
     * @param {EntitiesApiGetAllEntitiesDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesDataSources(requestParameters?: EntitiesApiGetAllEntitiesDataSourcesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceOutList, any>>;
    /**
     *
     * @summary Get all Datasets
     * @param {EntitiesApiGetAllEntitiesDatasetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesDatasets(requestParameters: EntitiesApiGetAllEntitiesDatasetsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDatasetOutList, any>>;
    /**
     * Space of the shared interest
     * @summary Get Entitlements
     * @param {EntitiesApiGetAllEntitiesEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesEntitlements(requestParameters?: EntitiesApiGetAllEntitiesEntitlementsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiEntitlementOutList, any>>;
    /**
     *
     * @summary Get all Facts
     * @param {EntitiesApiGetAllEntitiesFactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesFacts(requestParameters: EntitiesApiGetAllEntitiesFactsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiFactOutList, any>>;
    /**
     *
     * @summary Get all Context Filters
     * @param {EntitiesApiGetAllEntitiesFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesFilterContexts(requestParameters: EntitiesApiGetAllEntitiesFilterContextsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiFilterContextOutList, any>>;
    /**
     * Returns all JSON web keys - used to verify JSON web tokens (Jwts)
     * @summary Get all Jwks
     * @param {EntitiesApiGetAllEntitiesJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesJwks(requestParameters?: EntitiesApiGetAllEntitiesJwksRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiJwkOutList, any>>;
    /**
     *
     * @summary Get all Labels
     * @param {EntitiesApiGetAllEntitiesLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesLabels(requestParameters: EntitiesApiGetAllEntitiesLabelsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiLabelOutList, any>>;
    /**
     *
     * @summary Get all Metrics
     * @param {EntitiesApiGetAllEntitiesMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesMetrics(requestParameters: EntitiesApiGetAllEntitiesMetricsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiMetricOutList, any>>;
    /**
     *
     * @summary Get Organization entities
     * @param {EntitiesApiGetAllEntitiesOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesOrganizationSettings(requestParameters?: EntitiesApiGetAllEntitiesOrganizationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiOrganizationSettingOutList, any>>;
    /**
     *
     * @summary Get all Theming entities
     * @param {EntitiesApiGetAllEntitiesThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesThemes(requestParameters?: EntitiesApiGetAllEntitiesThemesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiThemeOutList, any>>;
    /**
     *
     * @summary Get all User Data Filters
     * @param {EntitiesApiGetAllEntitiesUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesUserDataFilters(requestParameters: EntitiesApiGetAllEntitiesUserDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserDataFilterOutList, any>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entities
     * @param {EntitiesApiGetAllEntitiesUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesUserGroups(requestParameters?: EntitiesApiGetAllEntitiesUserGroupsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserGroupOutList, any>>;
    /**
     * UserIdentifier - represents entity interacting with platform
     * @summary Get UserIdentifier entities
     * @param {EntitiesApiGetAllEntitiesUserIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesUserIdentifiers(requestParameters?: EntitiesApiGetAllEntitiesUserIdentifiersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserIdentifierOutList, any>>;
    /**
     *
     * @summary List all settings for a user
     * @param {EntitiesApiGetAllEntitiesUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesUserSettings(requestParameters: EntitiesApiGetAllEntitiesUserSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserSettingOutList, any>>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entities
     * @param {EntitiesApiGetAllEntitiesUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesUsers(requestParameters?: EntitiesApiGetAllEntitiesUsersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserOutList, any>>;
    /**
     *
     * @summary Get all Visualization Objects
     * @param {EntitiesApiGetAllEntitiesVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesVisualizationObjects(requestParameters: EntitiesApiGetAllEntitiesVisualizationObjectsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiVisualizationObjectOutList, any>>;
    /**
     *
     * @summary Get all Settings for Workspace Data Filters
     * @param {EntitiesApiGetAllEntitiesWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesWorkspaceDataFilterSettings(requestParameters: EntitiesApiGetAllEntitiesWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterSettingOutList, any>>;
    /**
     *
     * @summary Get all Workspace Data Filters
     * @param {EntitiesApiGetAllEntitiesWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesWorkspaceDataFilters(requestParameters: EntitiesApiGetAllEntitiesWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterOutList, any>>;
    /**
     *
     * @summary Get all Setting for Workspaces
     * @param {EntitiesApiGetAllEntitiesWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesWorkspaceSettings(requestParameters: EntitiesApiGetAllEntitiesWorkspaceSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceSettingOutList, any>>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entities
     * @param {EntitiesApiGetAllEntitiesWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllEntitiesWorkspaces(requestParameters?: EntitiesApiGetAllEntitiesWorkspacesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceOutList, any>>;
    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getAllOptions(options?: AxiosRequestConfig): Promise<AxiosResponse<object, any>>;
    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getDataSourceDrivers(options?: AxiosRequestConfig): Promise<AxiosResponse<    {
    [key: string]: string;
    }, any>>;
    /**
     *
     * @summary Get a Dashboard
     * @param {EntitiesApiGetEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityAnalyticalDashboards(requestParameters: EntitiesApiGetEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAnalyticalDashboardOutDocument, any>>;
    /**
     *
     * @summary Get an API Token for a user
     * @param {EntitiesApiGetEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityApiTokens(requestParameters: EntitiesApiGetEntityApiTokensRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiApiTokenOutDocument, any>>;
    /**
     *
     * @summary Get an Attribute Hierarchy
     * @param {EntitiesApiGetEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityAttributeHierarchies(requestParameters: EntitiesApiGetEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAttributeHierarchyOutDocument, any>>;
    /**
     *
     * @summary Get an Attribute
     * @param {EntitiesApiGetEntityAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityAttributes(requestParameters: EntitiesApiGetEntityAttributesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAttributeOutDocument, any>>;
    /**
     *
     * @summary Get Color Pallette
     * @param {EntitiesApiGetEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityColorPalettes(requestParameters: EntitiesApiGetEntityColorPalettesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiColorPaletteOutDocument, any>>;
    /**
     *
     * @summary Get CookieSecurityConfiguration
     * @param {EntitiesApiGetEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityCookieSecurityConfigurations(requestParameters: EntitiesApiGetEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCookieSecurityConfigurationOutDocument, any>>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {EntitiesApiGetEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityCspDirectives(requestParameters: EntitiesApiGetEntityCspDirectivesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCspDirectiveOutDocument, any>>;
    /**
     *
     * @summary Get a Custom Application Setting
     * @param {EntitiesApiGetEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityCustomApplicationSettings(requestParameters: EntitiesApiGetEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCustomApplicationSettingOutDocument, any>>;
    /**
     *
     * @summary Get a Plugin
     * @param {EntitiesApiGetEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityDashboardPlugins(requestParameters: EntitiesApiGetEntityDashboardPluginsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDashboardPluginOutDocument, any>>;
    /**
     *
     * @summary Get Data Source Identifier
     * @param {EntitiesApiGetEntityDataSourceIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityDataSourceIdentifiers(requestParameters: EntitiesApiGetEntityDataSourceIdentifiersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceIdentifierOutDocument, any>>;
    /**
     *
     * @param {EntitiesApiGetEntityDataSourceTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityDataSourceTables(requestParameters: EntitiesApiGetEntityDataSourceTablesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceTableOutDocument, any>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entity
     * @param {EntitiesApiGetEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityDataSources(requestParameters: EntitiesApiGetEntityDataSourcesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceOutDocument, any>>;
    /**
     *
     * @summary Get a Dataset
     * @param {EntitiesApiGetEntityDatasetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityDatasets(requestParameters: EntitiesApiGetEntityDatasetsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDatasetOutDocument, any>>;
    /**
     * Space of the shared interest
     * @summary Get Entitlement
     * @param {EntitiesApiGetEntityEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityEntitlements(requestParameters: EntitiesApiGetEntityEntitlementsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiEntitlementOutDocument, any>>;
    /**
     *
     * @summary Get a Fact
     * @param {EntitiesApiGetEntityFactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityFacts(requestParameters: EntitiesApiGetEntityFactsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiFactOutDocument, any>>;
    /**
     *
     * @summary Get a Context Filter
     * @param {EntitiesApiGetEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityFilterContexts(requestParameters: EntitiesApiGetEntityFilterContextsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiFilterContextOutDocument, any>>;
    /**
     * Returns JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Get Jwk
     * @param {EntitiesApiGetEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityJwks(requestParameters: EntitiesApiGetEntityJwksRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiJwkOutDocument, any>>;
    /**
     *
     * @summary Get a Label
     * @param {EntitiesApiGetEntityLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityLabels(requestParameters: EntitiesApiGetEntityLabelsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiLabelOutDocument, any>>;
    /**
     *
     * @summary Get a Metric
     * @param {EntitiesApiGetEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityMetrics(requestParameters: EntitiesApiGetEntityMetricsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiMetricOutDocument, any>>;
    /**
     *
     * @summary Get Organization entity
     * @param {EntitiesApiGetEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityOrganizationSettings(requestParameters: EntitiesApiGetEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiOrganizationSettingOutDocument, any>>;
    /**
     *
     * @summary Get Organizations
     * @param {EntitiesApiGetEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityOrganizations(requestParameters: EntitiesApiGetEntityOrganizationsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiOrganizationOutDocument, any>>;
    /**
     *
     * @summary Get Theming
     * @param {EntitiesApiGetEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityThemes(requestParameters: EntitiesApiGetEntityThemesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiThemeOutDocument, any>>;
    /**
     *
     * @summary Get a User Data Filter
     * @param {EntitiesApiGetEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityUserDataFilters(requestParameters: EntitiesApiGetEntityUserDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserDataFilterOutDocument, any>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entity
     * @param {EntitiesApiGetEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityUserGroups(requestParameters: EntitiesApiGetEntityUserGroupsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserGroupOutDocument, any>>;
    /**
     * UserIdentifier - represents basic informationZ about entity interacting with platform
     * @summary Get UserIdentifier entity
     * @param {EntitiesApiGetEntityUserIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityUserIdentifiers(requestParameters: EntitiesApiGetEntityUserIdentifiersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserIdentifierOutDocument, any>>;
    /**
     *
     * @summary Get a setting for a user
     * @param {EntitiesApiGetEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityUserSettings(requestParameters: EntitiesApiGetEntityUserSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserSettingOutDocument, any>>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entity
     * @param {EntitiesApiGetEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityUsers(requestParameters: EntitiesApiGetEntityUsersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserOutDocument, any>>;
    /**
     *
     * @summary Get a Visualization Object
     * @param {EntitiesApiGetEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityVisualizationObjects(requestParameters: EntitiesApiGetEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiVisualizationObjectOutDocument, any>>;
    /**
     *
     * @summary Get a Setting for Workspace Data Filter
     * @param {EntitiesApiGetEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityWorkspaceDataFilterSettings(requestParameters: EntitiesApiGetEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterSettingOutDocument, any>>;
    /**
     *
     * @summary Get a Workspace Data Filter
     * @param {EntitiesApiGetEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityWorkspaceDataFilters(requestParameters: EntitiesApiGetEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterOutDocument, any>>;
    /**
     *
     * @summary Get a Setting for Workspace
     * @param {EntitiesApiGetEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityWorkspaceSettings(requestParameters: EntitiesApiGetEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceSettingOutDocument, any>>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entity
     * @param {EntitiesApiGetEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getEntityWorkspaces(requestParameters: EntitiesApiGetEntityWorkspacesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceOutDocument, any>>;
    /**
     * Gets a basic information about organization.
     * @summary Get current organization info
     * @param {EntitiesApiGetOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    getOrganization(requestParameters?: EntitiesApiGetOrganizationRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Patch a Dashboard
     * @param {EntitiesApiPatchEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    patchEntityAnalyticalDashboards(requestParameters: EntitiesApiPatchEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAnalyticalDashboardOutDocument, any>>;
    /**
     *
     * @summary Patch an Attribute Hierarchy
     * @param {EntitiesApiPatchEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    patchEntityAttributeHierarchies(requestParameters: EntitiesApiPatchEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAttributeHierarchyOutDocument, any>>;
    /**
     *
     * @summary Patch Color Pallette
     * @param {EntitiesApiPatchEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    patchEntityColorPalettes(requestParameters: EntitiesApiPatchEntityColorPalettesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiColorPaletteOutDocument, any>>;
    /**
     *
     * @summary Patch CookieSecurityConfiguration
     * @param {EntitiesApiPatchEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    patchEntityCookieSecurityConfigurations(requestParameters: EntitiesApiPatchEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCookieSecurityConfigurationOutDocument, any>>;
    /**
     *  Context Security Police Directive
     * @summary Patch CSP Directives
     * @param {EntitiesApiPatchEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    patchEntityCspDirectives(requestParameters: EntitiesApiPatchEntityCspDirectivesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCspDirectiveOutDocument, any>>;
    /**
     *
     * @summary Patch a Custom Application Setting
     * @param {EntitiesApiPatchEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    patchEntityCustomApplicationSettings(requestParameters: EntitiesApiPatchEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCustomApplicationSettingOutDocument, any>>;
    /**
     *
     * @summary Patch a Plugin
     * @param {EntitiesApiPatchEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    patchEntityDashboardPlugins(requestParameters: EntitiesApiPatchEntityDashboardPluginsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDashboardPluginOutDocument, any>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Patch Data Source entity
     * @param {EntitiesApiPatchEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    patchEntityDataSources(requestParameters: EntitiesApiPatchEntityDataSourcesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceOutDocument, any>>;
    /**
     *
     * @summary Patch a Context Filter
     * @param {EntitiesApiPatchEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    patchEntityFilterContexts(requestParameters: EntitiesApiPatchEntityFilterContextsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiFilterContextOutDocument, any>>;
    /**
     * Patches JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Patch Jwk
     * @param {EntitiesApiPatchEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    patchEntityJwks(requestParameters: EntitiesApiPatchEntityJwksRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiJwkOutDocument, any>>;
    /**
     *
     * @summary Patch a Metric
     * @param {EntitiesApiPatchEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    patchEntityMetrics(requestParameters: EntitiesApiPatchEntityMetricsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiMetricOutDocument, any>>;
    /**
     *
     * @summary Patch Organization entity
     * @param {EntitiesApiPatchEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    patchEntityOrganizationSettings(requestParameters: EntitiesApiPatchEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiOrganizationSettingOutDocument, any>>;
    /**
     *
     * @summary Patch Organization
     * @param {EntitiesApiPatchEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    patchEntityOrganizations(requestParameters: EntitiesApiPatchEntityOrganizationsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiOrganizationOutDocument, any>>;
    /**
     *
     * @summary Patch Theming
     * @param {EntitiesApiPatchEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    patchEntityThemes(requestParameters: EntitiesApiPatchEntityThemesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiThemeOutDocument, any>>;
    /**
     *
     * @summary Patch a User Data Filter
     * @param {EntitiesApiPatchEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    patchEntityUserDataFilters(requestParameters: EntitiesApiPatchEntityUserDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserDataFilterOutDocument, any>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Patch UserGroup entity
     * @param {EntitiesApiPatchEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    patchEntityUserGroups(requestParameters: EntitiesApiPatchEntityUserGroupsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserGroupOutDocument, any>>;
    /**
     * User - represents entity interacting with platform
     * @summary Patch User entity
     * @param {EntitiesApiPatchEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    patchEntityUsers(requestParameters: EntitiesApiPatchEntityUsersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserOutDocument, any>>;
    /**
     *
     * @summary Patch a Visualization Object
     * @param {EntitiesApiPatchEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    patchEntityVisualizationObjects(requestParameters: EntitiesApiPatchEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiVisualizationObjectOutDocument, any>>;
    /**
     *
     * @summary Patch a Settings for Workspace Data Filter
     * @param {EntitiesApiPatchEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    patchEntityWorkspaceDataFilterSettings(requestParameters: EntitiesApiPatchEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterSettingOutDocument, any>>;
    /**
     *
     * @summary Patch a Workspace Data Filter
     * @param {EntitiesApiPatchEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    patchEntityWorkspaceDataFilters(requestParameters: EntitiesApiPatchEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterOutDocument, any>>;
    /**
     *
     * @summary Patch a Setting for Workspace
     * @param {EntitiesApiPatchEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    patchEntityWorkspaceSettings(requestParameters: EntitiesApiPatchEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceSettingOutDocument, any>>;
    /**
     * Space of the shared interest
     * @summary Patch Workspace entity
     * @param {EntitiesApiPatchEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    patchEntityWorkspaces(requestParameters: EntitiesApiPatchEntityWorkspacesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceOutDocument, any>>;
    /**
     *
     * @summary Put Dashboards
     * @param {EntitiesApiUpdateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityAnalyticalDashboards(requestParameters: EntitiesApiUpdateEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAnalyticalDashboardOutDocument, any>>;
    /**
     *
     * @summary Put new API token for the user
     * @param {EntitiesApiUpdateEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityApiTokens(requestParameters: EntitiesApiUpdateEntityApiTokensRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiApiTokenOutDocument, any>>;
    /**
     *
     * @summary Put an Attribute Hierarchy
     * @param {EntitiesApiUpdateEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityAttributeHierarchies(requestParameters: EntitiesApiUpdateEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAttributeHierarchyOutDocument, any>>;
    /**
     *
     * @summary Put Color Pallette
     * @param {EntitiesApiUpdateEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityColorPalettes(requestParameters: EntitiesApiUpdateEntityColorPalettesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiColorPaletteOutDocument, any>>;
    /**
     *
     * @summary Put CookieSecurityConfiguration
     * @param {EntitiesApiUpdateEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityCookieSecurityConfigurations(requestParameters: EntitiesApiUpdateEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCookieSecurityConfigurationOutDocument, any>>;
    /**
     *  Context Security Police Directive
     * @summary Put CSP Directives
     * @param {EntitiesApiUpdateEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityCspDirectives(requestParameters: EntitiesApiUpdateEntityCspDirectivesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCspDirectiveOutDocument, any>>;
    /**
     *
     * @summary Put a Custom Application Setting
     * @param {EntitiesApiUpdateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityCustomApplicationSettings(requestParameters: EntitiesApiUpdateEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCustomApplicationSettingOutDocument, any>>;
    /**
     *
     * @summary Put a Plugin
     * @param {EntitiesApiUpdateEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityDashboardPlugins(requestParameters: EntitiesApiUpdateEntityDashboardPluginsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDashboardPluginOutDocument, any>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Put Data Source entity
     * @param {EntitiesApiUpdateEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityDataSources(requestParameters: EntitiesApiUpdateEntityDataSourcesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceOutDocument, any>>;
    /**
     *
     * @summary Put a Context Filter
     * @param {EntitiesApiUpdateEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityFilterContexts(requestParameters: EntitiesApiUpdateEntityFilterContextsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiFilterContextOutDocument, any>>;
    /**
     * Updates JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Put Jwk
     * @param {EntitiesApiUpdateEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityJwks(requestParameters: EntitiesApiUpdateEntityJwksRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiJwkOutDocument, any>>;
    /**
     *
     * @summary Put a Metric
     * @param {EntitiesApiUpdateEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityMetrics(requestParameters: EntitiesApiUpdateEntityMetricsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiMetricOutDocument, any>>;
    /**
     *
     * @summary Put Organization entity
     * @param {EntitiesApiUpdateEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityOrganizationSettings(requestParameters: EntitiesApiUpdateEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiOrganizationSettingOutDocument, any>>;
    /**
     *
     * @summary Put Organization
     * @param {EntitiesApiUpdateEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityOrganizations(requestParameters: EntitiesApiUpdateEntityOrganizationsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiOrganizationOutDocument, any>>;
    /**
     *
     * @summary Put Theming
     * @param {EntitiesApiUpdateEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityThemes(requestParameters: EntitiesApiUpdateEntityThemesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiThemeOutDocument, any>>;
    /**
     *
     * @summary Put a User Data Filter
     * @param {EntitiesApiUpdateEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityUserDataFilters(requestParameters: EntitiesApiUpdateEntityUserDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserDataFilterOutDocument, any>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Put UserGroup entity
     * @param {EntitiesApiUpdateEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityUserGroups(requestParameters: EntitiesApiUpdateEntityUserGroupsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserGroupOutDocument, any>>;
    /**
     *
     * @summary Put new user settings for the user
     * @param {EntitiesApiUpdateEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityUserSettings(requestParameters: EntitiesApiUpdateEntityUserSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserSettingOutDocument, any>>;
    /**
     * User - represents entity interacting with platform
     * @summary Put User entity
     * @param {EntitiesApiUpdateEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityUsers(requestParameters: EntitiesApiUpdateEntityUsersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserOutDocument, any>>;
    /**
     *
     * @summary Put a Visualization Object
     * @param {EntitiesApiUpdateEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityVisualizationObjects(requestParameters: EntitiesApiUpdateEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiVisualizationObjectOutDocument, any>>;
    /**
     *
     * @summary Put a Settings for Workspace Data Filter
     * @param {EntitiesApiUpdateEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityWorkspaceDataFilterSettings(requestParameters: EntitiesApiUpdateEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterSettingOutDocument, any>>;
    /**
     *
     * @summary Put a Workspace Data Filter
     * @param {EntitiesApiUpdateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityWorkspaceDataFilters(requestParameters: EntitiesApiUpdateEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterOutDocument, any>>;
    /**
     *
     * @summary Put a Setting for a Workspace
     * @param {EntitiesApiUpdateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityWorkspaceSettings(requestParameters: EntitiesApiUpdateEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceSettingOutDocument, any>>;
    /**
     * Space of the shared interest
     * @summary Put Workspace entity
     * @param {EntitiesApiUpdateEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApi
     */
    updateEntityWorkspaces(requestParameters: EntitiesApiUpdateEntityWorkspacesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceOutDocument, any>>;
}

/**
 * EntitiesApi - axios parameter creator
 * @export
 */
export declare const EntitiesApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post Dashboards
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardPostOptionalIdDocument} jsonApiAnalyticalDashboardPostOptionalIdDocument
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityAnalyticalDashboards: (workspaceId: string, jsonApiAnalyticalDashboardPostOptionalIdDocument: JsonApiAnalyticalDashboardPostOptionalIdDocument, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post a new API token for the user
     * @param {string} userId
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityApiTokens: (userId: string, jsonApiApiTokenInDocument: JsonApiApiTokenInDocument, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Attribute Hierarchies
     * @param {string} workspaceId
     * @param {JsonApiAttributeHierarchyInDocument} jsonApiAttributeHierarchyInDocument
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityAttributeHierarchies: (workspaceId: string, jsonApiAttributeHierarchyInDocument: JsonApiAttributeHierarchyInDocument, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Color Pallettes
     * @param {JsonApiColorPaletteInDocument} jsonApiColorPaletteInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityColorPalettes: (jsonApiColorPaletteInDocument: JsonApiColorPaletteInDocument, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *  Context Security Police Directive
     * @summary Post CSP Directives
     * @param {JsonApiCspDirectiveInDocument} jsonApiCspDirectiveInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityCspDirectives: (jsonApiCspDirectiveInDocument: JsonApiCspDirectiveInDocument, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Custom Application Settings
     * @param {string} workspaceId
     * @param {JsonApiCustomApplicationSettingPostOptionalIdDocument} jsonApiCustomApplicationSettingPostOptionalIdDocument
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityCustomApplicationSettings: (workspaceId: string, jsonApiCustomApplicationSettingPostOptionalIdDocument: JsonApiCustomApplicationSettingPostOptionalIdDocument, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Plugins
     * @param {string} workspaceId
     * @param {JsonApiDashboardPluginPostOptionalIdDocument} jsonApiDashboardPluginPostOptionalIdDocument
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDashboardPlugins: (workspaceId: string, jsonApiDashboardPluginPostOptionalIdDocument: JsonApiDashboardPluginPostOptionalIdDocument, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Post Data Sources
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDataSources: (jsonApiDataSourceInDocument: JsonApiDataSourceInDocument, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Context Filters
     * @param {string} workspaceId
     * @param {JsonApiFilterContextPostOptionalIdDocument} jsonApiFilterContextPostOptionalIdDocument
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityFilterContexts: (workspaceId: string, jsonApiFilterContextPostOptionalIdDocument: JsonApiFilterContextPostOptionalIdDocument, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Creates JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Post Jwks
     * @param {JsonApiJwkInDocument} jsonApiJwkInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityJwks: (jsonApiJwkInDocument: JsonApiJwkInDocument, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Metrics
     * @param {string} workspaceId
     * @param {JsonApiMetricPostOptionalIdDocument} jsonApiMetricPostOptionalIdDocument
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityMetrics: (workspaceId: string, jsonApiMetricPostOptionalIdDocument: JsonApiMetricPostOptionalIdDocument, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Organization Setting entities
     * @param {JsonApiOrganizationSettingInDocument} jsonApiOrganizationSettingInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityOrganizationSettings: (jsonApiOrganizationSettingInDocument: JsonApiOrganizationSettingInDocument, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Theming
     * @param {JsonApiThemeInDocument} jsonApiThemeInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityThemes: (jsonApiThemeInDocument: JsonApiThemeInDocument, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post User Data Filters
     * @param {string} workspaceId
     * @param {JsonApiUserDataFilterPostOptionalIdDocument} jsonApiUserDataFilterPostOptionalIdDocument
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserDataFilters: (workspaceId: string, jsonApiUserDataFilterPostOptionalIdDocument: JsonApiUserDataFilterPostOptionalIdDocument, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Post User Group entities
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserGroups: (jsonApiUserGroupInDocument: JsonApiUserGroupInDocument, include?: Array<"userGroups" | "parents" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post new user settings for the user
     * @param {string} userId
     * @param {JsonApiUserSettingInDocument} jsonApiUserSettingInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserSettings: (userId: string, jsonApiUserSettingInDocument: JsonApiUserSettingInDocument, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User - represents entity interacting with platform
     * @summary Post User entities
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUsers: (jsonApiUserInDocument: JsonApiUserInDocument, include?: Array<"userGroups" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Visualization Objects
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectPostOptionalIdDocument} jsonApiVisualizationObjectPostOptionalIdDocument
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityVisualizationObjects: (workspaceId: string, jsonApiVisualizationObjectPostOptionalIdDocument: JsonApiVisualizationObjectPostOptionalIdDocument, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Settings for Workspace Data Filters
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterSettingInDocument} jsonApiWorkspaceDataFilterSettingInDocument
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceDataFilterSettings: (workspaceId: string, jsonApiWorkspaceDataFilterSettingInDocument: JsonApiWorkspaceDataFilterSettingInDocument, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Workspace Data Filters
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceDataFilters: (workspaceId: string, jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Settings for Workspaces
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceSettingPostOptionalIdDocument} jsonApiWorkspaceSettingPostOptionalIdDocument
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceSettings: (workspaceId: string, jsonApiWorkspaceSettingPostOptionalIdDocument: JsonApiWorkspaceSettingPostOptionalIdDocument, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Space of the shared interest
     * @summary Post Workspace entities
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaces: (jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument, include?: Array<"workspaces" | "parent" | "ALL">, metaInclude?: Array<"config" | "permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Dashboard
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityAnalyticalDashboards: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete an API Token for a user
     * @param {string} userId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityApiTokens: (userId: string, id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete an Attribute Hierarchy
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityAttributeHierarchies: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Color Pallette
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityColorPalettes: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *  Context Security Police Directive
     * @summary Delete CSP Directives
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityCspDirectives: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Custom Application Setting
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityCustomApplicationSettings: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Plugin
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDashboardPlugins: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Delete Data Source entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDataSources: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Context Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityFilterContexts: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Deletes JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Delete Jwk
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityJwks: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Metric
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityMetrics: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete Organization entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityOrganizationSettings: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete Theming
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityThemes: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a User Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserDataFilters: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Delete UserGroup entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserGroups: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a setting for a user
     * @param {string} userId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserSettings: (userId: string, id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User - represents entity interacting with platform
     * @summary Delete User entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUsers: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Visualization Object
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityVisualizationObjects: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Settings for Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceDataFilterSettings: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceDataFilters: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Setting for Workspace
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceSettings: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Space of the shared interest
     * @summary Delete Workspace entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaces: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Dashboards
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAnalyticalDashboards: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary List all api tokens for a user
     * @param {string} userId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesApiTokens: (userId: string, filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Attribute Hierarchies
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAttributeHierarchies: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Attributes
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'attributeHierarchies' | 'dataset' | 'defaultView' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAttributes: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"datasets" | "labels" | "attributeHierarchies" | "dataset" | "defaultView" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Color Pallettes
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesColorPalettes: (filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesCspDirectives: (filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Custom Application Settings
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesCustomApplicationSettings: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Plugins
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDashboardPlugins: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Data Source Identifiers
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSourceIdentifiers: (filter?: string, page?: number, size?: number, sort?: Array<string>, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @param {string} dataSourceId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSourceTables: (dataSourceId: string, filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSources: (filter?: string, page?: number, size?: number, sort?: Array<string>, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Datasets
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'workspaceDataFilters' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDatasets: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"attributes" | "facts" | "datasets" | "workspaceDataFilters" | "references" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Space of the shared interest
     * @summary Get Entitlements
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesEntitlements: (filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Facts
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFacts: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"datasets" | "dataset" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Context Filters
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFilterContexts: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Returns all JSON web keys - used to verify JSON web tokens (Jwts)
     * @summary Get all Jwks
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesJwks: (filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Labels
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesLabels: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"attributes" | "attribute" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Metrics
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesMetrics: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get Organization entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesOrganizationSettings: (filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Theming entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesThemes: (filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all User Data Filters
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserDataFilters: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserGroups: (filter?: string, include?: Array<"userGroups" | "parents" | "ALL">, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * UserIdentifier - represents entity interacting with platform
     * @summary Get UserIdentifier entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserIdentifiers: (filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary List all settings for a user
     * @param {string} userId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserSettings: (userId: string, filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUsers: (filter?: string, include?: Array<"userGroups" | "ALL">, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Visualization Objects
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesVisualizationObjects: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Settings for Workspace Data Filters
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilterSettings: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Workspace Data Filters
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilters: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Setting for Workspaces
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceSettings: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaces: (filter?: string, include?: Array<"workspaces" | "parent" | "ALL">, page?: number, size?: number, sort?: Array<string>, metaInclude?: Array<"config" | "permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllOptions: (options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceDrivers: (options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Dashboard
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAnalyticalDashboards: (workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get an API Token for a user
     * @param {string} userId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityApiTokens: (userId: string, id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get an Attribute Hierarchy
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAttributeHierarchies: (workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get an Attribute
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'attributeHierarchies' | 'dataset' | 'defaultView' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAttributes: (workspaceId: string, objectId: string, filter?: string, include?: Array<"datasets" | "labels" | "attributeHierarchies" | "dataset" | "defaultView" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get Color Pallette
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityColorPalettes: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get CookieSecurityConfiguration
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCookieSecurityConfigurations: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCspDirectives: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Custom Application Setting
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCustomApplicationSettings: (workspaceId: string, objectId: string, filter?: string, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Plugin
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDashboardPlugins: (workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get Data Source Identifier
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSourceIdentifiers: (id: string, filter?: string, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @param {string} dataSourceId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSourceTables: (dataSourceId: string, id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSources: (id: string, filter?: string, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Dataset
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'workspaceDataFilters' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDatasets: (workspaceId: string, objectId: string, filter?: string, include?: Array<"attributes" | "facts" | "datasets" | "workspaceDataFilters" | "references" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Space of the shared interest
     * @summary Get Entitlement
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityEntitlements: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Fact
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFacts: (workspaceId: string, objectId: string, filter?: string, include?: Array<"datasets" | "dataset" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Context Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFilterContexts: (workspaceId: string, objectId: string, filter?: string, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Returns JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Get Jwk
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityJwks: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Label
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityLabels: (workspaceId: string, objectId: string, filter?: string, include?: Array<"attributes" | "attribute" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Metric
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityMetrics: (workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get Organization entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityOrganizationSettings: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get Organizations
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityOrganizations: (id: string, filter?: string, include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get Theming
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityThemes: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a User Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserDataFilters: (workspaceId: string, objectId: string, filter?: string, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserGroups: (id: string, filter?: string, include?: Array<"userGroups" | "parents" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * UserIdentifier - represents basic informationZ about entity interacting with platform
     * @summary Get UserIdentifier entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserIdentifiers: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a setting for a user
     * @param {string} userId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserSettings: (userId: string, id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUsers: (id: string, filter?: string, include?: Array<"userGroups" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Visualization Object
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityVisualizationObjects: (workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Setting for Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilterSettings: (workspaceId: string, objectId: string, filter?: string, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, xGDCVALIDATERELATIONS?: boolean, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilters: (workspaceId: string, objectId: string, filter?: string, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, xGDCVALIDATERELATIONS?: boolean, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Setting for Workspace
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceSettings: (workspaceId: string, objectId: string, filter?: string, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaces: (id: string, filter?: string, include?: Array<"workspaces" | "parent" | "ALL">, metaInclude?: Array<"config" | "permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Gets a basic information about organization.
     * @summary Get current organization info
     * @param {Array<'permissions' | 'all'>} [metaInclude] Return list of permissions available to logged user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization: (metaInclude?: Array<"permissions" | "all">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Dashboard
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardPatchDocument} jsonApiAnalyticalDashboardPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityAnalyticalDashboards: (workspaceId: string, objectId: string, jsonApiAnalyticalDashboardPatchDocument: JsonApiAnalyticalDashboardPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch an Attribute Hierarchy
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAttributeHierarchyPatchDocument} jsonApiAttributeHierarchyPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityAttributeHierarchies: (workspaceId: string, objectId: string, jsonApiAttributeHierarchyPatchDocument: JsonApiAttributeHierarchyPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch Color Pallette
     * @param {string} id
     * @param {JsonApiColorPalettePatchDocument} jsonApiColorPalettePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityColorPalettes: (id: string, jsonApiColorPalettePatchDocument: JsonApiColorPalettePatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch CookieSecurityConfiguration
     * @param {string} id
     * @param {JsonApiCookieSecurityConfigurationPatchDocument} jsonApiCookieSecurityConfigurationPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCookieSecurityConfigurations: (id: string, jsonApiCookieSecurityConfigurationPatchDocument: JsonApiCookieSecurityConfigurationPatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *  Context Security Police Directive
     * @summary Patch CSP Directives
     * @param {string} id
     * @param {JsonApiCspDirectivePatchDocument} jsonApiCspDirectivePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCspDirectives: (id: string, jsonApiCspDirectivePatchDocument: JsonApiCspDirectivePatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Custom Application Setting
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiCustomApplicationSettingPatchDocument} jsonApiCustomApplicationSettingPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCustomApplicationSettings: (workspaceId: string, objectId: string, jsonApiCustomApplicationSettingPatchDocument: JsonApiCustomApplicationSettingPatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Plugin
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiDashboardPluginPatchDocument} jsonApiDashboardPluginPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityDashboardPlugins: (workspaceId: string, objectId: string, jsonApiDashboardPluginPatchDocument: JsonApiDashboardPluginPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Patch Data Source entity
     * @param {string} id
     * @param {JsonApiDataSourcePatchDocument} jsonApiDataSourcePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityDataSources: (id: string, jsonApiDataSourcePatchDocument: JsonApiDataSourcePatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Context Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextPatchDocument} jsonApiFilterContextPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityFilterContexts: (workspaceId: string, objectId: string, jsonApiFilterContextPatchDocument: JsonApiFilterContextPatchDocument, filter?: string, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Patches JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Patch Jwk
     * @param {string} id
     * @param {JsonApiJwkPatchDocument} jsonApiJwkPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityJwks: (id: string, jsonApiJwkPatchDocument: JsonApiJwkPatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Metric
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricPatchDocument} jsonApiMetricPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityMetrics: (workspaceId: string, objectId: string, jsonApiMetricPatchDocument: JsonApiMetricPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch Organization entity
     * @param {string} id
     * @param {JsonApiOrganizationSettingPatchDocument} jsonApiOrganizationSettingPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityOrganizationSettings: (id: string, jsonApiOrganizationSettingPatchDocument: JsonApiOrganizationSettingPatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch Organization
     * @param {string} id
     * @param {JsonApiOrganizationPatchDocument} jsonApiOrganizationPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityOrganizations: (id: string, jsonApiOrganizationPatchDocument: JsonApiOrganizationPatchDocument, filter?: string, include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch Theming
     * @param {string} id
     * @param {JsonApiThemePatchDocument} jsonApiThemePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityThemes: (id: string, jsonApiThemePatchDocument: JsonApiThemePatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a User Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiUserDataFilterPatchDocument} jsonApiUserDataFilterPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUserDataFilters: (workspaceId: string, objectId: string, jsonApiUserDataFilterPatchDocument: JsonApiUserDataFilterPatchDocument, filter?: string, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Patch UserGroup entity
     * @param {string} id
     * @param {JsonApiUserGroupPatchDocument} jsonApiUserGroupPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUserGroups: (id: string, jsonApiUserGroupPatchDocument: JsonApiUserGroupPatchDocument, filter?: string, include?: Array<"userGroups" | "parents" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User - represents entity interacting with platform
     * @summary Patch User entity
     * @param {string} id
     * @param {JsonApiUserPatchDocument} jsonApiUserPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUsers: (id: string, jsonApiUserPatchDocument: JsonApiUserPatchDocument, filter?: string, include?: Array<"userGroups" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Visualization Object
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectPatchDocument} jsonApiVisualizationObjectPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityVisualizationObjects: (workspaceId: string, objectId: string, jsonApiVisualizationObjectPatchDocument: JsonApiVisualizationObjectPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Settings for Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterSettingPatchDocument} jsonApiWorkspaceDataFilterSettingPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceDataFilterSettings: (workspaceId: string, objectId: string, jsonApiWorkspaceDataFilterSettingPatchDocument: JsonApiWorkspaceDataFilterSettingPatchDocument, filter?: string, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterPatchDocument} jsonApiWorkspaceDataFilterPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceDataFilters: (workspaceId: string, objectId: string, jsonApiWorkspaceDataFilterPatchDocument: JsonApiWorkspaceDataFilterPatchDocument, filter?: string, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Setting for Workspace
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceSettingPatchDocument} jsonApiWorkspaceSettingPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceSettings: (workspaceId: string, objectId: string, jsonApiWorkspaceSettingPatchDocument: JsonApiWorkspaceSettingPatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Space of the shared interest
     * @summary Patch Workspace entity
     * @param {string} id
     * @param {JsonApiWorkspacePatchDocument} jsonApiWorkspacePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaces: (id: string, jsonApiWorkspacePatchDocument: JsonApiWorkspacePatchDocument, filter?: string, include?: Array<"workspaces" | "parent" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put Dashboards
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityAnalyticalDashboards: (workspaceId: string, objectId: string, jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument, filter?: string, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put new API token for the user
     * @param {string} userId
     * @param {string} id
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityApiTokens: (userId: string, id: string, jsonApiApiTokenInDocument: JsonApiApiTokenInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put an Attribute Hierarchy
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAttributeHierarchyInDocument} jsonApiAttributeHierarchyInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityAttributeHierarchies: (workspaceId: string, objectId: string, jsonApiAttributeHierarchyInDocument: JsonApiAttributeHierarchyInDocument, filter?: string, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put Color Pallette
     * @param {string} id
     * @param {JsonApiColorPaletteInDocument} jsonApiColorPaletteInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityColorPalettes: (id: string, jsonApiColorPaletteInDocument: JsonApiColorPaletteInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put CookieSecurityConfiguration
     * @param {string} id
     * @param {JsonApiCookieSecurityConfigurationInDocument} jsonApiCookieSecurityConfigurationInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCookieSecurityConfigurations: (id: string, jsonApiCookieSecurityConfigurationInDocument: JsonApiCookieSecurityConfigurationInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *  Context Security Police Directive
     * @summary Put CSP Directives
     * @param {string} id
     * @param {JsonApiCspDirectiveInDocument} jsonApiCspDirectiveInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCspDirectives: (id: string, jsonApiCspDirectiveInDocument: JsonApiCspDirectiveInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a Custom Application Setting
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiCustomApplicationSettingInDocument} jsonApiCustomApplicationSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCustomApplicationSettings: (workspaceId: string, objectId: string, jsonApiCustomApplicationSettingInDocument: JsonApiCustomApplicationSettingInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a Plugin
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDashboardPlugins: (workspaceId: string, objectId: string, jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument, filter?: string, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Put Data Source entity
     * @param {string} id
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDataSources: (id: string, jsonApiDataSourceInDocument: JsonApiDataSourceInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a Context Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityFilterContexts: (workspaceId: string, objectId: string, jsonApiFilterContextInDocument: JsonApiFilterContextInDocument, filter?: string, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Updates JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Put Jwk
     * @param {string} id
     * @param {JsonApiJwkInDocument} jsonApiJwkInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityJwks: (id: string, jsonApiJwkInDocument: JsonApiJwkInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a Metric
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityMetrics: (workspaceId: string, objectId: string, jsonApiMetricInDocument: JsonApiMetricInDocument, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put Organization entity
     * @param {string} id
     * @param {JsonApiOrganizationSettingInDocument} jsonApiOrganizationSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityOrganizationSettings: (id: string, jsonApiOrganizationSettingInDocument: JsonApiOrganizationSettingInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put Organization
     * @param {string} id
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityOrganizations: (id: string, jsonApiOrganizationInDocument: JsonApiOrganizationInDocument, filter?: string, include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put Theming
     * @param {string} id
     * @param {JsonApiThemeInDocument} jsonApiThemeInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityThemes: (id: string, jsonApiThemeInDocument: JsonApiThemeInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a User Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiUserDataFilterInDocument} jsonApiUserDataFilterInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserDataFilters: (workspaceId: string, objectId: string, jsonApiUserDataFilterInDocument: JsonApiUserDataFilterInDocument, filter?: string, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Put UserGroup entity
     * @param {string} id
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserGroups: (id: string, jsonApiUserGroupInDocument: JsonApiUserGroupInDocument, filter?: string, include?: Array<"userGroups" | "parents" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put new user settings for the user
     * @param {string} userId
     * @param {string} id
     * @param {JsonApiUserSettingInDocument} jsonApiUserSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserSettings: (userId: string, id: string, jsonApiUserSettingInDocument: JsonApiUserSettingInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User - represents entity interacting with platform
     * @summary Put User entity
     * @param {string} id
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUsers: (id: string, jsonApiUserInDocument: JsonApiUserInDocument, filter?: string, include?: Array<"userGroups" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a Visualization Object
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityVisualizationObjects: (workspaceId: string, objectId: string, jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a Settings for Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterSettingInDocument} jsonApiWorkspaceDataFilterSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceDataFilterSettings: (workspaceId: string, objectId: string, jsonApiWorkspaceDataFilterSettingInDocument: JsonApiWorkspaceDataFilterSettingInDocument, filter?: string, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceDataFilters: (workspaceId: string, objectId: string, jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument, filter?: string, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a Setting for a Workspace
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceSettingInDocument} jsonApiWorkspaceSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceSettings: (workspaceId: string, objectId: string, jsonApiWorkspaceSettingInDocument: JsonApiWorkspaceSettingInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Space of the shared interest
     * @summary Put Workspace entity
     * @param {string} id
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaces: (id: string, jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument, filter?: string, include?: Array<"workspaces" | "parent" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * Request parameters for createEntityAnalyticalDashboards operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityAnalyticalDashboardsRequest
 */
export declare interface EntitiesApiCreateEntityAnalyticalDashboardsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiCreateEntityAnalyticalDashboards
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPostOptionalIdDocument}
     * @memberof EntitiesApiCreateEntityAnalyticalDashboards
     */
    readonly jsonApiAnalyticalDashboardPostOptionalIdDocument: JsonApiAnalyticalDashboardPostOptionalIdDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityAnalyticalDashboards
     */
    readonly include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityAnalyticalDashboards
     */
    readonly metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">;
}

/**
 * Request parameters for createEntityApiTokens operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityApiTokensRequest
 */
export declare interface EntitiesApiCreateEntityApiTokensRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiCreateEntityApiTokens
     */
    readonly userId: string;
    /**
     *
     * @type {JsonApiApiTokenInDocument}
     * @memberof EntitiesApiCreateEntityApiTokens
     */
    readonly jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
}

/**
 * Request parameters for createEntityAttributeHierarchies operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityAttributeHierarchiesRequest
 */
export declare interface EntitiesApiCreateEntityAttributeHierarchiesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiCreateEntityAttributeHierarchies
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyInDocument}
     * @memberof EntitiesApiCreateEntityAttributeHierarchies
     */
    readonly jsonApiAttributeHierarchyInDocument: JsonApiAttributeHierarchyInDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityAttributeHierarchies
     */
    readonly include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityAttributeHierarchies
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for createEntityColorPalettes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityColorPalettesRequest
 */
export declare interface EntitiesApiCreateEntityColorPalettesRequest {
    /**
     *
     * @type {JsonApiColorPaletteInDocument}
     * @memberof EntitiesApiCreateEntityColorPalettes
     */
    readonly jsonApiColorPaletteInDocument: JsonApiColorPaletteInDocument;
}

/**
 * Request parameters for createEntityCspDirectives operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityCspDirectivesRequest
 */
export declare interface EntitiesApiCreateEntityCspDirectivesRequest {
    /**
     *
     * @type {JsonApiCspDirectiveInDocument}
     * @memberof EntitiesApiCreateEntityCspDirectives
     */
    readonly jsonApiCspDirectiveInDocument: JsonApiCspDirectiveInDocument;
}

/**
 * Request parameters for createEntityCustomApplicationSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityCustomApplicationSettingsRequest
 */
export declare interface EntitiesApiCreateEntityCustomApplicationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiCreateEntityCustomApplicationSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiCustomApplicationSettingPostOptionalIdDocument}
     * @memberof EntitiesApiCreateEntityCustomApplicationSettings
     */
    readonly jsonApiCustomApplicationSettingPostOptionalIdDocument: JsonApiCustomApplicationSettingPostOptionalIdDocument;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityCustomApplicationSettings
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for createEntityDashboardPlugins operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityDashboardPluginsRequest
 */
export declare interface EntitiesApiCreateEntityDashboardPluginsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiCreateEntityDashboardPlugins
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiDashboardPluginPostOptionalIdDocument}
     * @memberof EntitiesApiCreateEntityDashboardPlugins
     */
    readonly jsonApiDashboardPluginPostOptionalIdDocument: JsonApiDashboardPluginPostOptionalIdDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityDashboardPlugins
     */
    readonly include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityDashboardPlugins
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for createEntityDataSources operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityDataSourcesRequest
 */
export declare interface EntitiesApiCreateEntityDataSourcesRequest {
    /**
     *
     * @type {JsonApiDataSourceInDocument}
     * @memberof EntitiesApiCreateEntityDataSources
     */
    readonly jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'all' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityDataSources
     */
    readonly metaInclude?: Array<"permissions" | "all" | "ALL">;
}

/**
 * Request parameters for createEntityFilterContexts operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityFilterContextsRequest
 */
export declare interface EntitiesApiCreateEntityFilterContextsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiCreateEntityFilterContexts
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiFilterContextPostOptionalIdDocument}
     * @memberof EntitiesApiCreateEntityFilterContexts
     */
    readonly jsonApiFilterContextPostOptionalIdDocument: JsonApiFilterContextPostOptionalIdDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityFilterContexts
     */
    readonly include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityFilterContexts
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for createEntityJwks operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityJwksRequest
 */
export declare interface EntitiesApiCreateEntityJwksRequest {
    /**
     *
     * @type {JsonApiJwkInDocument}
     * @memberof EntitiesApiCreateEntityJwks
     */
    readonly jsonApiJwkInDocument: JsonApiJwkInDocument;
}

/**
 * Request parameters for createEntityMetrics operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityMetricsRequest
 */
export declare interface EntitiesApiCreateEntityMetricsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiCreateEntityMetrics
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiMetricPostOptionalIdDocument}
     * @memberof EntitiesApiCreateEntityMetrics
     */
    readonly jsonApiMetricPostOptionalIdDocument: JsonApiMetricPostOptionalIdDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityMetrics
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityMetrics
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for createEntityOrganizationSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityOrganizationSettingsRequest
 */
export declare interface EntitiesApiCreateEntityOrganizationSettingsRequest {
    /**
     *
     * @type {JsonApiOrganizationSettingInDocument}
     * @memberof EntitiesApiCreateEntityOrganizationSettings
     */
    readonly jsonApiOrganizationSettingInDocument: JsonApiOrganizationSettingInDocument;
}

/**
 * Request parameters for createEntityThemes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityThemesRequest
 */
export declare interface EntitiesApiCreateEntityThemesRequest {
    /**
     *
     * @type {JsonApiThemeInDocument}
     * @memberof EntitiesApiCreateEntityThemes
     */
    readonly jsonApiThemeInDocument: JsonApiThemeInDocument;
}

/**
 * Request parameters for createEntityUserDataFilters operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityUserDataFiltersRequest
 */
export declare interface EntitiesApiCreateEntityUserDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiCreateEntityUserDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiUserDataFilterPostOptionalIdDocument}
     * @memberof EntitiesApiCreateEntityUserDataFilters
     */
    readonly jsonApiUserDataFilterPostOptionalIdDocument: JsonApiUserDataFilterPostOptionalIdDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityUserDataFilters
     */
    readonly include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityUserDataFilters
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for createEntityUserGroups operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityUserGroupsRequest
 */
export declare interface EntitiesApiCreateEntityUserGroupsRequest {
    /**
     *
     * @type {JsonApiUserGroupInDocument}
     * @memberof EntitiesApiCreateEntityUserGroups
     */
    readonly jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'parents' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityUserGroups
     */
    readonly include?: Array<"userGroups" | "parents" | "ALL">;
}

/**
 * Request parameters for createEntityUserSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityUserSettingsRequest
 */
export declare interface EntitiesApiCreateEntityUserSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiCreateEntityUserSettings
     */
    readonly userId: string;
    /**
     *
     * @type {JsonApiUserSettingInDocument}
     * @memberof EntitiesApiCreateEntityUserSettings
     */
    readonly jsonApiUserSettingInDocument: JsonApiUserSettingInDocument;
}

/**
 * Request parameters for createEntityUsers operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityUsersRequest
 */
export declare interface EntitiesApiCreateEntityUsersRequest {
    /**
     *
     * @type {JsonApiUserInDocument}
     * @memberof EntitiesApiCreateEntityUsers
     */
    readonly jsonApiUserInDocument: JsonApiUserInDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityUsers
     */
    readonly include?: Array<"userGroups" | "ALL">;
}

/**
 * Request parameters for createEntityVisualizationObjects operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityVisualizationObjectsRequest
 */
export declare interface EntitiesApiCreateEntityVisualizationObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiCreateEntityVisualizationObjects
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiVisualizationObjectPostOptionalIdDocument}
     * @memberof EntitiesApiCreateEntityVisualizationObjects
     */
    readonly jsonApiVisualizationObjectPostOptionalIdDocument: JsonApiVisualizationObjectPostOptionalIdDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityVisualizationObjects
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityVisualizationObjects
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for createEntityWorkspaceDataFilterSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityWorkspaceDataFilterSettingsRequest
 */
export declare interface EntitiesApiCreateEntityWorkspaceDataFilterSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiCreateEntityWorkspaceDataFilterSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingInDocument}
     * @memberof EntitiesApiCreateEntityWorkspaceDataFilterSettings
     */
    readonly jsonApiWorkspaceDataFilterSettingInDocument: JsonApiWorkspaceDataFilterSettingInDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityWorkspaceDataFilterSettings
     */
    readonly include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;
}

/**
 * Request parameters for createEntityWorkspaceDataFilters operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityWorkspaceDataFiltersRequest
 */
export declare interface EntitiesApiCreateEntityWorkspaceDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiCreateEntityWorkspaceDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInDocument}
     * @memberof EntitiesApiCreateEntityWorkspaceDataFilters
     */
    readonly jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityWorkspaceDataFilters
     */
    readonly include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
}

/**
 * Request parameters for createEntityWorkspaceSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityWorkspaceSettingsRequest
 */
export declare interface EntitiesApiCreateEntityWorkspaceSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiCreateEntityWorkspaceSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPostOptionalIdDocument}
     * @memberof EntitiesApiCreateEntityWorkspaceSettings
     */
    readonly jsonApiWorkspaceSettingPostOptionalIdDocument: JsonApiWorkspaceSettingPostOptionalIdDocument;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityWorkspaceSettings
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for createEntityWorkspaces operation in EntitiesApi.
 * @export
 * @interface EntitiesApiCreateEntityWorkspacesRequest
 */
export declare interface EntitiesApiCreateEntityWorkspacesRequest {
    /**
     *
     * @type {JsonApiWorkspaceInDocument}
     * @memberof EntitiesApiCreateEntityWorkspaces
     */
    readonly jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaces' | 'parent' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityWorkspaces
     */
    readonly include?: Array<"workspaces" | "parent" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'config' | 'permissions' | 'all' | 'ALL'>}
     * @memberof EntitiesApiCreateEntityWorkspaces
     */
    readonly metaInclude?: Array<"config" | "permissions" | "all" | "ALL">;
}

/**
 * Request parameters for deleteEntityAnalyticalDashboards operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityAnalyticalDashboardsRequest
 */
export declare interface EntitiesApiDeleteEntityAnalyticalDashboardsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityAnalyticalDashboards
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityAnalyticalDashboards
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityAnalyticalDashboards
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityApiTokens operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityApiTokensRequest
 */
export declare interface EntitiesApiDeleteEntityApiTokensRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityApiTokens
     */
    readonly userId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityApiTokens
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityApiTokens
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityAttributeHierarchies operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityAttributeHierarchiesRequest
 */
export declare interface EntitiesApiDeleteEntityAttributeHierarchiesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityAttributeHierarchies
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityAttributeHierarchies
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityAttributeHierarchies
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityColorPalettes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityColorPalettesRequest
 */
export declare interface EntitiesApiDeleteEntityColorPalettesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityColorPalettes
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityColorPalettes
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityCspDirectives operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityCspDirectivesRequest
 */
export declare interface EntitiesApiDeleteEntityCspDirectivesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityCspDirectives
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityCspDirectives
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityCustomApplicationSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityCustomApplicationSettingsRequest
 */
export declare interface EntitiesApiDeleteEntityCustomApplicationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityCustomApplicationSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityCustomApplicationSettings
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityCustomApplicationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityDashboardPlugins operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityDashboardPluginsRequest
 */
export declare interface EntitiesApiDeleteEntityDashboardPluginsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityDashboardPlugins
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityDashboardPlugins
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityDashboardPlugins
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityDataSources operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityDataSourcesRequest
 */
export declare interface EntitiesApiDeleteEntityDataSourcesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityDataSources
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityDataSources
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityFilterContexts operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityFilterContextsRequest
 */
export declare interface EntitiesApiDeleteEntityFilterContextsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityFilterContexts
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityFilterContexts
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityFilterContexts
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityJwks operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityJwksRequest
 */
export declare interface EntitiesApiDeleteEntityJwksRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityJwks
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityJwks
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityMetrics operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityMetricsRequest
 */
export declare interface EntitiesApiDeleteEntityMetricsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityMetrics
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityMetrics
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityMetrics
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityOrganizationSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityOrganizationSettingsRequest
 */
export declare interface EntitiesApiDeleteEntityOrganizationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityOrganizationSettings
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityOrganizationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityThemes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityThemesRequest
 */
export declare interface EntitiesApiDeleteEntityThemesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityThemes
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityThemes
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityUserDataFilters operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityUserDataFiltersRequest
 */
export declare interface EntitiesApiDeleteEntityUserDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityUserDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityUserDataFilters
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityUserDataFilters
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityUserGroups operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityUserGroupsRequest
 */
export declare interface EntitiesApiDeleteEntityUserGroupsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityUserGroups
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityUserGroups
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityUserSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityUserSettingsRequest
 */
export declare interface EntitiesApiDeleteEntityUserSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityUserSettings
     */
    readonly userId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityUserSettings
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityUserSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityUsers operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityUsersRequest
 */
export declare interface EntitiesApiDeleteEntityUsersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityUsers
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityUsers
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityVisualizationObjects operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityVisualizationObjectsRequest
 */
export declare interface EntitiesApiDeleteEntityVisualizationObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityVisualizationObjects
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityVisualizationObjects
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityVisualizationObjects
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityWorkspaceDataFilterSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityWorkspaceDataFilterSettingsRequest
 */
export declare interface EntitiesApiDeleteEntityWorkspaceDataFilterSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityWorkspaceDataFilterSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityWorkspaceDataFilterSettings
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityWorkspaceDataFilterSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityWorkspaceDataFilters operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityWorkspaceDataFiltersRequest
 */
export declare interface EntitiesApiDeleteEntityWorkspaceDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityWorkspaceDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityWorkspaceDataFilters
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityWorkspaceDataFilters
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityWorkspaceSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityWorkspaceSettingsRequest
 */
export declare interface EntitiesApiDeleteEntityWorkspaceSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityWorkspaceSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityWorkspaceSettings
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityWorkspaceSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityWorkspaces operation in EntitiesApi.
 * @export
 * @interface EntitiesApiDeleteEntityWorkspacesRequest
 */
export declare interface EntitiesApiDeleteEntityWorkspacesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiDeleteEntityWorkspaces
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiDeleteEntityWorkspaces
     */
    readonly filter?: string;
}

/**
 * EntitiesApi - factory interface
 * @export
 */
export declare const EntitiesApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Post Dashboards
     * @param {EntitiesApiCreateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityAnalyticalDashboards(requestParameters: EntitiesApiCreateEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @summary Post a new API token for the user
     * @param {EntitiesApiCreateEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityApiTokens(requestParameters: EntitiesApiCreateEntityApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @summary Post Attribute Hierarchies
     * @param {EntitiesApiCreateEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityAttributeHierarchies(requestParameters: EntitiesApiCreateEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutDocument>;
    /**
     *
     * @summary Post Color Pallettes
     * @param {EntitiesApiCreateEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityColorPalettes(requestParameters: EntitiesApiCreateEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutDocument>;
    /**
     *  Context Security Police Directive
     * @summary Post CSP Directives
     * @param {EntitiesApiCreateEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityCspDirectives(requestParameters: EntitiesApiCreateEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutDocument>;
    /**
     *
     * @summary Post Custom Application Settings
     * @param {EntitiesApiCreateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityCustomApplicationSettings(requestParameters: EntitiesApiCreateEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;
    /**
     *
     * @summary Post Plugins
     * @param {EntitiesApiCreateEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDashboardPlugins(requestParameters: EntitiesApiCreateEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Post Data Sources
     * @param {EntitiesApiCreateEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDataSources(requestParameters: EntitiesApiCreateEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @summary Post Context Filters
     * @param {EntitiesApiCreateEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityFilterContexts(requestParameters: EntitiesApiCreateEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     * Creates JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Post Jwks
     * @param {EntitiesApiCreateEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityJwks(requestParameters: EntitiesApiCreateEntityJwksRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiJwkOutDocument>;
    /**
     *
     * @summary Post Metrics
     * @param {EntitiesApiCreateEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityMetrics(requestParameters: EntitiesApiCreateEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @summary Post Organization Setting entities
     * @param {EntitiesApiCreateEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityOrganizationSettings(requestParameters: EntitiesApiCreateEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutDocument>;
    /**
     *
     * @summary Post Theming
     * @param {EntitiesApiCreateEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityThemes(requestParameters: EntitiesApiCreateEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutDocument>;
    /**
     *
     * @summary Post User Data Filters
     * @param {EntitiesApiCreateEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserDataFilters(requestParameters: EntitiesApiCreateEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutDocument>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Post User Group entities
     * @param {EntitiesApiCreateEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserGroups(requestParameters: EntitiesApiCreateEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @summary Post new user settings for the user
     * @param {EntitiesApiCreateEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserSettings(requestParameters: EntitiesApiCreateEntityUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserSettingOutDocument>;
    /**
     * User - represents entity interacting with platform
     * @summary Post User entities
     * @param {EntitiesApiCreateEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUsers(requestParameters: EntitiesApiCreateEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @summary Post Visualization Objects
     * @param {EntitiesApiCreateEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityVisualizationObjects(requestParameters: EntitiesApiCreateEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @summary Post Settings for Workspace Data Filters
     * @param {EntitiesApiCreateEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceDataFilterSettings(requestParameters: EntitiesApiCreateEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @summary Post Workspace Data Filters
     * @param {EntitiesApiCreateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceDataFilters(requestParameters: EntitiesApiCreateEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @summary Post Settings for Workspaces
     * @param {EntitiesApiCreateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceSettings(requestParameters: EntitiesApiCreateEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;
    /**
     * Space of the shared interest
     * @summary Post Workspace entities
     * @param {EntitiesApiCreateEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaces(requestParameters: EntitiesApiCreateEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     *
     * @summary Delete a Dashboard
     * @param {EntitiesApiDeleteEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityAnalyticalDashboards(requestParameters: EntitiesApiDeleteEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete an API Token for a user
     * @param {EntitiesApiDeleteEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityApiTokens(requestParameters: EntitiesApiDeleteEntityApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete an Attribute Hierarchy
     * @param {EntitiesApiDeleteEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityAttributeHierarchies(requestParameters: EntitiesApiDeleteEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Color Pallette
     * @param {EntitiesApiDeleteEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityColorPalettes(requestParameters: EntitiesApiDeleteEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *  Context Security Police Directive
     * @summary Delete CSP Directives
     * @param {EntitiesApiDeleteEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityCspDirectives(requestParameters: EntitiesApiDeleteEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Custom Application Setting
     * @param {EntitiesApiDeleteEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityCustomApplicationSettings(requestParameters: EntitiesApiDeleteEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Plugin
     * @param {EntitiesApiDeleteEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDashboardPlugins(requestParameters: EntitiesApiDeleteEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Delete Data Source entity
     * @param {EntitiesApiDeleteEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDataSources(requestParameters: EntitiesApiDeleteEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Context Filter
     * @param {EntitiesApiDeleteEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityFilterContexts(requestParameters: EntitiesApiDeleteEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Deletes JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Delete Jwk
     * @param {EntitiesApiDeleteEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityJwks(requestParameters: EntitiesApiDeleteEntityJwksRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Metric
     * @param {EntitiesApiDeleteEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityMetrics(requestParameters: EntitiesApiDeleteEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete Organization entity
     * @param {EntitiesApiDeleteEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityOrganizationSettings(requestParameters: EntitiesApiDeleteEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete Theming
     * @param {EntitiesApiDeleteEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityThemes(requestParameters: EntitiesApiDeleteEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a User Data Filter
     * @param {EntitiesApiDeleteEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserDataFilters(requestParameters: EntitiesApiDeleteEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Delete UserGroup entity
     * @param {EntitiesApiDeleteEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserGroups(requestParameters: EntitiesApiDeleteEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a setting for a user
     * @param {EntitiesApiDeleteEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserSettings(requestParameters: EntitiesApiDeleteEntityUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * User - represents entity interacting with platform
     * @summary Delete User entity
     * @param {EntitiesApiDeleteEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUsers(requestParameters: EntitiesApiDeleteEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Visualization Object
     * @param {EntitiesApiDeleteEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityVisualizationObjects(requestParameters: EntitiesApiDeleteEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Settings for Workspace Data Filter
     * @param {EntitiesApiDeleteEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceDataFilterSettings(requestParameters: EntitiesApiDeleteEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Workspace Data Filter
     * @param {EntitiesApiDeleteEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceDataFilters(requestParameters: EntitiesApiDeleteEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Setting for Workspace
     * @param {EntitiesApiDeleteEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceSettings(requestParameters: EntitiesApiDeleteEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Space of the shared interest
     * @summary Delete Workspace entity
     * @param {EntitiesApiDeleteEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaces(requestParameters: EntitiesApiDeleteEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all Dashboards
     * @param {EntitiesApiGetAllEntitiesAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAnalyticalDashboards(requestParameters: EntitiesApiGetAllEntitiesAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutList>;
    /**
     *
     * @summary List all api tokens for a user
     * @param {EntitiesApiGetAllEntitiesApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesApiTokens(requestParameters: EntitiesApiGetAllEntitiesApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiApiTokenOutList>;
    /**
     *
     * @summary Get all Attribute Hierarchies
     * @param {EntitiesApiGetAllEntitiesAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAttributeHierarchies(requestParameters: EntitiesApiGetAllEntitiesAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutList>;
    /**
     *
     * @summary Get all Attributes
     * @param {EntitiesApiGetAllEntitiesAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAttributes(requestParameters: EntitiesApiGetAllEntitiesAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeOutList>;
    /**
     *
     * @summary Get all Color Pallettes
     * @param {EntitiesApiGetAllEntitiesColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesColorPalettes(requestParameters: EntitiesApiGetAllEntitiesColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutList>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {EntitiesApiGetAllEntitiesCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesCspDirectives(requestParameters: EntitiesApiGetAllEntitiesCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutList>;
    /**
     *
     * @summary Get all Custom Application Settings
     * @param {EntitiesApiGetAllEntitiesCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesCustomApplicationSettings(requestParameters: EntitiesApiGetAllEntitiesCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutList>;
    /**
     *
     * @summary Get all Plugins
     * @param {EntitiesApiGetAllEntitiesDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDashboardPlugins(requestParameters: EntitiesApiGetAllEntitiesDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutList>;
    /**
     *
     * @summary Get all Data Source Identifiers
     * @param {EntitiesApiGetAllEntitiesDataSourceIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSourceIdentifiers(requestParameters: EntitiesApiGetAllEntitiesDataSourceIdentifiersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceIdentifierOutList>;
    /**
     *
     * @param {EntitiesApiGetAllEntitiesDataSourceTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSourceTables(requestParameters: EntitiesApiGetAllEntitiesDataSourceTablesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceTableOutList>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entities
     * @param {EntitiesApiGetAllEntitiesDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSources(requestParameters: EntitiesApiGetAllEntitiesDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutList>;
    /**
     *
     * @summary Get all Datasets
     * @param {EntitiesApiGetAllEntitiesDatasetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDatasets(requestParameters: EntitiesApiGetAllEntitiesDatasetsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDatasetOutList>;
    /**
     * Space of the shared interest
     * @summary Get Entitlements
     * @param {EntitiesApiGetAllEntitiesEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesEntitlements(requestParameters: EntitiesApiGetAllEntitiesEntitlementsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiEntitlementOutList>;
    /**
     *
     * @summary Get all Facts
     * @param {EntitiesApiGetAllEntitiesFactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFacts(requestParameters: EntitiesApiGetAllEntitiesFactsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFactOutList>;
    /**
     *
     * @summary Get all Context Filters
     * @param {EntitiesApiGetAllEntitiesFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFilterContexts(requestParameters: EntitiesApiGetAllEntitiesFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutList>;
    /**
     * Returns all JSON web keys - used to verify JSON web tokens (Jwts)
     * @summary Get all Jwks
     * @param {EntitiesApiGetAllEntitiesJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesJwks(requestParameters: EntitiesApiGetAllEntitiesJwksRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiJwkOutList>;
    /**
     *
     * @summary Get all Labels
     * @param {EntitiesApiGetAllEntitiesLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesLabels(requestParameters: EntitiesApiGetAllEntitiesLabelsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiLabelOutList>;
    /**
     *
     * @summary Get all Metrics
     * @param {EntitiesApiGetAllEntitiesMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesMetrics(requestParameters: EntitiesApiGetAllEntitiesMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutList>;
    /**
     *
     * @summary Get Organization entities
     * @param {EntitiesApiGetAllEntitiesOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesOrganizationSettings(requestParameters: EntitiesApiGetAllEntitiesOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutList>;
    /**
     *
     * @summary Get all Theming entities
     * @param {EntitiesApiGetAllEntitiesThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesThemes(requestParameters: EntitiesApiGetAllEntitiesThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutList>;
    /**
     *
     * @summary Get all User Data Filters
     * @param {EntitiesApiGetAllEntitiesUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserDataFilters(requestParameters: EntitiesApiGetAllEntitiesUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutList>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entities
     * @param {EntitiesApiGetAllEntitiesUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserGroups(requestParameters: EntitiesApiGetAllEntitiesUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutList>;
    /**
     * UserIdentifier - represents entity interacting with platform
     * @summary Get UserIdentifier entities
     * @param {EntitiesApiGetAllEntitiesUserIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserIdentifiers(requestParameters: EntitiesApiGetAllEntitiesUserIdentifiersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserIdentifierOutList>;
    /**
     *
     * @summary List all settings for a user
     * @param {EntitiesApiGetAllEntitiesUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserSettings(requestParameters: EntitiesApiGetAllEntitiesUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserSettingOutList>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entities
     * @param {EntitiesApiGetAllEntitiesUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUsers(requestParameters: EntitiesApiGetAllEntitiesUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutList>;
    /**
     *
     * @summary Get all Visualization Objects
     * @param {EntitiesApiGetAllEntitiesVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesVisualizationObjects(requestParameters: EntitiesApiGetAllEntitiesVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutList>;
    /**
     *
     * @summary Get all Settings for Workspace Data Filters
     * @param {EntitiesApiGetAllEntitiesWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilterSettings(requestParameters: EntitiesApiGetAllEntitiesWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList>;
    /**
     *
     * @summary Get all Workspace Data Filters
     * @param {EntitiesApiGetAllEntitiesWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilters(requestParameters: EntitiesApiGetAllEntitiesWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutList>;
    /**
     *
     * @summary Get all Setting for Workspaces
     * @param {EntitiesApiGetAllEntitiesWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceSettings(requestParameters: EntitiesApiGetAllEntitiesWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutList>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entities
     * @param {EntitiesApiGetAllEntitiesWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaces(requestParameters: EntitiesApiGetAllEntitiesWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutList>;
    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllOptions(options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceDrivers(options?: AxiosRequestConfig): AxiosPromise<{
        [key: string]: string;
    }>;
    /**
     *
     * @summary Get a Dashboard
     * @param {EntitiesApiGetEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAnalyticalDashboards(requestParameters: EntitiesApiGetEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @summary Get an API Token for a user
     * @param {EntitiesApiGetEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityApiTokens(requestParameters: EntitiesApiGetEntityApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @summary Get an Attribute Hierarchy
     * @param {EntitiesApiGetEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAttributeHierarchies(requestParameters: EntitiesApiGetEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutDocument>;
    /**
     *
     * @summary Get an Attribute
     * @param {EntitiesApiGetEntityAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAttributes(requestParameters: EntitiesApiGetEntityAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeOutDocument>;
    /**
     *
     * @summary Get Color Pallette
     * @param {EntitiesApiGetEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityColorPalettes(requestParameters: EntitiesApiGetEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutDocument>;
    /**
     *
     * @summary Get CookieSecurityConfiguration
     * @param {EntitiesApiGetEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCookieSecurityConfigurations(requestParameters: EntitiesApiGetEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {EntitiesApiGetEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCspDirectives(requestParameters: EntitiesApiGetEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutDocument>;
    /**
     *
     * @summary Get a Custom Application Setting
     * @param {EntitiesApiGetEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCustomApplicationSettings(requestParameters: EntitiesApiGetEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;
    /**
     *
     * @summary Get a Plugin
     * @param {EntitiesApiGetEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDashboardPlugins(requestParameters: EntitiesApiGetEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @summary Get Data Source Identifier
     * @param {EntitiesApiGetEntityDataSourceIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSourceIdentifiers(requestParameters: EntitiesApiGetEntityDataSourceIdentifiersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceIdentifierOutDocument>;
    /**
     *
     * @param {EntitiesApiGetEntityDataSourceTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSourceTables(requestParameters: EntitiesApiGetEntityDataSourceTablesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceTableOutDocument>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entity
     * @param {EntitiesApiGetEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSources(requestParameters: EntitiesApiGetEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @summary Get a Dataset
     * @param {EntitiesApiGetEntityDatasetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDatasets(requestParameters: EntitiesApiGetEntityDatasetsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDatasetOutDocument>;
    /**
     * Space of the shared interest
     * @summary Get Entitlement
     * @param {EntitiesApiGetEntityEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityEntitlements(requestParameters: EntitiesApiGetEntityEntitlementsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiEntitlementOutDocument>;
    /**
     *
     * @summary Get a Fact
     * @param {EntitiesApiGetEntityFactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFacts(requestParameters: EntitiesApiGetEntityFactsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFactOutDocument>;
    /**
     *
     * @summary Get a Context Filter
     * @param {EntitiesApiGetEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFilterContexts(requestParameters: EntitiesApiGetEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     * Returns JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Get Jwk
     * @param {EntitiesApiGetEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityJwks(requestParameters: EntitiesApiGetEntityJwksRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiJwkOutDocument>;
    /**
     *
     * @summary Get a Label
     * @param {EntitiesApiGetEntityLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityLabels(requestParameters: EntitiesApiGetEntityLabelsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiLabelOutDocument>;
    /**
     *
     * @summary Get a Metric
     * @param {EntitiesApiGetEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityMetrics(requestParameters: EntitiesApiGetEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @summary Get Organization entity
     * @param {EntitiesApiGetEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityOrganizationSettings(requestParameters: EntitiesApiGetEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutDocument>;
    /**
     *
     * @summary Get Organizations
     * @param {EntitiesApiGetEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityOrganizations(requestParameters: EntitiesApiGetEntityOrganizationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     *
     * @summary Get Theming
     * @param {EntitiesApiGetEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityThemes(requestParameters: EntitiesApiGetEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutDocument>;
    /**
     *
     * @summary Get a User Data Filter
     * @param {EntitiesApiGetEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserDataFilters(requestParameters: EntitiesApiGetEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutDocument>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entity
     * @param {EntitiesApiGetEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserGroups(requestParameters: EntitiesApiGetEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     * UserIdentifier - represents basic informationZ about entity interacting with platform
     * @summary Get UserIdentifier entity
     * @param {EntitiesApiGetEntityUserIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserIdentifiers(requestParameters: EntitiesApiGetEntityUserIdentifiersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserIdentifierOutDocument>;
    /**
     *
     * @summary Get a setting for a user
     * @param {EntitiesApiGetEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserSettings(requestParameters: EntitiesApiGetEntityUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserSettingOutDocument>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entity
     * @param {EntitiesApiGetEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUsers(requestParameters: EntitiesApiGetEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @summary Get a Visualization Object
     * @param {EntitiesApiGetEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityVisualizationObjects(requestParameters: EntitiesApiGetEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @summary Get a Setting for Workspace Data Filter
     * @param {EntitiesApiGetEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilterSettings(requestParameters: EntitiesApiGetEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @summary Get a Workspace Data Filter
     * @param {EntitiesApiGetEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilters(requestParameters: EntitiesApiGetEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @summary Get a Setting for Workspace
     * @param {EntitiesApiGetEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceSettings(requestParameters: EntitiesApiGetEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entity
     * @param {EntitiesApiGetEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaces(requestParameters: EntitiesApiGetEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     * Gets a basic information about organization.
     * @summary Get current organization info
     * @param {EntitiesApiGetOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(requestParameters: EntitiesApiGetOrganizationRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Patch a Dashboard
     * @param {EntitiesApiPatchEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityAnalyticalDashboards(requestParameters: EntitiesApiPatchEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @summary Patch an Attribute Hierarchy
     * @param {EntitiesApiPatchEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityAttributeHierarchies(requestParameters: EntitiesApiPatchEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutDocument>;
    /**
     *
     * @summary Patch Color Pallette
     * @param {EntitiesApiPatchEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityColorPalettes(requestParameters: EntitiesApiPatchEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutDocument>;
    /**
     *
     * @summary Patch CookieSecurityConfiguration
     * @param {EntitiesApiPatchEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCookieSecurityConfigurations(requestParameters: EntitiesApiPatchEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *  Context Security Police Directive
     * @summary Patch CSP Directives
     * @param {EntitiesApiPatchEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCspDirectives(requestParameters: EntitiesApiPatchEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutDocument>;
    /**
     *
     * @summary Patch a Custom Application Setting
     * @param {EntitiesApiPatchEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCustomApplicationSettings(requestParameters: EntitiesApiPatchEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;
    /**
     *
     * @summary Patch a Plugin
     * @param {EntitiesApiPatchEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityDashboardPlugins(requestParameters: EntitiesApiPatchEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Patch Data Source entity
     * @param {EntitiesApiPatchEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityDataSources(requestParameters: EntitiesApiPatchEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @summary Patch a Context Filter
     * @param {EntitiesApiPatchEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityFilterContexts(requestParameters: EntitiesApiPatchEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     * Patches JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Patch Jwk
     * @param {EntitiesApiPatchEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityJwks(requestParameters: EntitiesApiPatchEntityJwksRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiJwkOutDocument>;
    /**
     *
     * @summary Patch a Metric
     * @param {EntitiesApiPatchEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityMetrics(requestParameters: EntitiesApiPatchEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @summary Patch Organization entity
     * @param {EntitiesApiPatchEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityOrganizationSettings(requestParameters: EntitiesApiPatchEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutDocument>;
    /**
     *
     * @summary Patch Organization
     * @param {EntitiesApiPatchEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityOrganizations(requestParameters: EntitiesApiPatchEntityOrganizationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     *
     * @summary Patch Theming
     * @param {EntitiesApiPatchEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityThemes(requestParameters: EntitiesApiPatchEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutDocument>;
    /**
     *
     * @summary Patch a User Data Filter
     * @param {EntitiesApiPatchEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUserDataFilters(requestParameters: EntitiesApiPatchEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutDocument>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Patch UserGroup entity
     * @param {EntitiesApiPatchEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUserGroups(requestParameters: EntitiesApiPatchEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     * User - represents entity interacting with platform
     * @summary Patch User entity
     * @param {EntitiesApiPatchEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUsers(requestParameters: EntitiesApiPatchEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @summary Patch a Visualization Object
     * @param {EntitiesApiPatchEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityVisualizationObjects(requestParameters: EntitiesApiPatchEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @summary Patch a Settings for Workspace Data Filter
     * @param {EntitiesApiPatchEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceDataFilterSettings(requestParameters: EntitiesApiPatchEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @summary Patch a Workspace Data Filter
     * @param {EntitiesApiPatchEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceDataFilters(requestParameters: EntitiesApiPatchEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @summary Patch a Setting for Workspace
     * @param {EntitiesApiPatchEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceSettings(requestParameters: EntitiesApiPatchEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;
    /**
     * Space of the shared interest
     * @summary Patch Workspace entity
     * @param {EntitiesApiPatchEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaces(requestParameters: EntitiesApiPatchEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     *
     * @summary Put Dashboards
     * @param {EntitiesApiUpdateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityAnalyticalDashboards(requestParameters: EntitiesApiUpdateEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @summary Put new API token for the user
     * @param {EntitiesApiUpdateEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityApiTokens(requestParameters: EntitiesApiUpdateEntityApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @summary Put an Attribute Hierarchy
     * @param {EntitiesApiUpdateEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityAttributeHierarchies(requestParameters: EntitiesApiUpdateEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutDocument>;
    /**
     *
     * @summary Put Color Pallette
     * @param {EntitiesApiUpdateEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityColorPalettes(requestParameters: EntitiesApiUpdateEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutDocument>;
    /**
     *
     * @summary Put CookieSecurityConfiguration
     * @param {EntitiesApiUpdateEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCookieSecurityConfigurations(requestParameters: EntitiesApiUpdateEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *  Context Security Police Directive
     * @summary Put CSP Directives
     * @param {EntitiesApiUpdateEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCspDirectives(requestParameters: EntitiesApiUpdateEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutDocument>;
    /**
     *
     * @summary Put a Custom Application Setting
     * @param {EntitiesApiUpdateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCustomApplicationSettings(requestParameters: EntitiesApiUpdateEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;
    /**
     *
     * @summary Put a Plugin
     * @param {EntitiesApiUpdateEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDashboardPlugins(requestParameters: EntitiesApiUpdateEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Put Data Source entity
     * @param {EntitiesApiUpdateEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDataSources(requestParameters: EntitiesApiUpdateEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @summary Put a Context Filter
     * @param {EntitiesApiUpdateEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityFilterContexts(requestParameters: EntitiesApiUpdateEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     * Updates JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Put Jwk
     * @param {EntitiesApiUpdateEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityJwks(requestParameters: EntitiesApiUpdateEntityJwksRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiJwkOutDocument>;
    /**
     *
     * @summary Put a Metric
     * @param {EntitiesApiUpdateEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityMetrics(requestParameters: EntitiesApiUpdateEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @summary Put Organization entity
     * @param {EntitiesApiUpdateEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityOrganizationSettings(requestParameters: EntitiesApiUpdateEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutDocument>;
    /**
     *
     * @summary Put Organization
     * @param {EntitiesApiUpdateEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityOrganizations(requestParameters: EntitiesApiUpdateEntityOrganizationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     *
     * @summary Put Theming
     * @param {EntitiesApiUpdateEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityThemes(requestParameters: EntitiesApiUpdateEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutDocument>;
    /**
     *
     * @summary Put a User Data Filter
     * @param {EntitiesApiUpdateEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserDataFilters(requestParameters: EntitiesApiUpdateEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutDocument>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Put UserGroup entity
     * @param {EntitiesApiUpdateEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserGroups(requestParameters: EntitiesApiUpdateEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @summary Put new user settings for the user
     * @param {EntitiesApiUpdateEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserSettings(requestParameters: EntitiesApiUpdateEntityUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserSettingOutDocument>;
    /**
     * User - represents entity interacting with platform
     * @summary Put User entity
     * @param {EntitiesApiUpdateEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUsers(requestParameters: EntitiesApiUpdateEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @summary Put a Visualization Object
     * @param {EntitiesApiUpdateEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityVisualizationObjects(requestParameters: EntitiesApiUpdateEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @summary Put a Settings for Workspace Data Filter
     * @param {EntitiesApiUpdateEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceDataFilterSettings(requestParameters: EntitiesApiUpdateEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @summary Put a Workspace Data Filter
     * @param {EntitiesApiUpdateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceDataFilters(requestParameters: EntitiesApiUpdateEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @summary Put a Setting for a Workspace
     * @param {EntitiesApiUpdateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceSettings(requestParameters: EntitiesApiUpdateEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;
    /**
     * Space of the shared interest
     * @summary Put Workspace entity
     * @param {EntitiesApiUpdateEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaces(requestParameters: EntitiesApiUpdateEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutDocument>;
};

/**
 * EntitiesApi - functional programming interface
 * @export
 */
export declare const EntitiesApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post Dashboards
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardPostOptionalIdDocument} jsonApiAnalyticalDashboardPostOptionalIdDocument
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityAnalyticalDashboards(workspaceId: string, jsonApiAnalyticalDashboardPostOptionalIdDocument: JsonApiAnalyticalDashboardPostOptionalIdDocument, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument>>;
    /**
     *
     * @summary Post a new API token for the user
     * @param {string} userId
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityApiTokens(userId: string, jsonApiApiTokenInDocument: JsonApiApiTokenInDocument, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiApiTokenOutDocument>>;
    /**
     *
     * @summary Post Attribute Hierarchies
     * @param {string} workspaceId
     * @param {JsonApiAttributeHierarchyInDocument} jsonApiAttributeHierarchyInDocument
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityAttributeHierarchies(workspaceId: string, jsonApiAttributeHierarchyInDocument: JsonApiAttributeHierarchyInDocument, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeHierarchyOutDocument>>;
    /**
     *
     * @summary Post Color Pallettes
     * @param {JsonApiColorPaletteInDocument} jsonApiColorPaletteInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityColorPalettes(jsonApiColorPaletteInDocument: JsonApiColorPaletteInDocument, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiColorPaletteOutDocument>>;
    /**
     *  Context Security Police Directive
     * @summary Post CSP Directives
     * @param {JsonApiCspDirectiveInDocument} jsonApiCspDirectiveInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityCspDirectives(jsonApiCspDirectiveInDocument: JsonApiCspDirectiveInDocument, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCspDirectiveOutDocument>>;
    /**
     *
     * @summary Post Custom Application Settings
     * @param {string} workspaceId
     * @param {JsonApiCustomApplicationSettingPostOptionalIdDocument} jsonApiCustomApplicationSettingPostOptionalIdDocument
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityCustomApplicationSettings(workspaceId: string, jsonApiCustomApplicationSettingPostOptionalIdDocument: JsonApiCustomApplicationSettingPostOptionalIdDocument, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCustomApplicationSettingOutDocument>>;
    /**
     *
     * @summary Post Plugins
     * @param {string} workspaceId
     * @param {JsonApiDashboardPluginPostOptionalIdDocument} jsonApiDashboardPluginPostOptionalIdDocument
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDashboardPlugins(workspaceId: string, jsonApiDashboardPluginPostOptionalIdDocument: JsonApiDashboardPluginPostOptionalIdDocument, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDashboardPluginOutDocument>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Post Data Sources
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDataSources(jsonApiDataSourceInDocument: JsonApiDataSourceInDocument, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutDocument>>;
    /**
     *
     * @summary Post Context Filters
     * @param {string} workspaceId
     * @param {JsonApiFilterContextPostOptionalIdDocument} jsonApiFilterContextPostOptionalIdDocument
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityFilterContexts(workspaceId: string, jsonApiFilterContextPostOptionalIdDocument: JsonApiFilterContextPostOptionalIdDocument, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutDocument>>;
    /**
     * Creates JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Post Jwks
     * @param {JsonApiJwkInDocument} jsonApiJwkInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityJwks(jsonApiJwkInDocument: JsonApiJwkInDocument, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiJwkOutDocument>>;
    /**
     *
     * @summary Post Metrics
     * @param {string} workspaceId
     * @param {JsonApiMetricPostOptionalIdDocument} jsonApiMetricPostOptionalIdDocument
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityMetrics(workspaceId: string, jsonApiMetricPostOptionalIdDocument: JsonApiMetricPostOptionalIdDocument, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutDocument>>;
    /**
     *
     * @summary Post Organization Setting entities
     * @param {JsonApiOrganizationSettingInDocument} jsonApiOrganizationSettingInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityOrganizationSettings(jsonApiOrganizationSettingInDocument: JsonApiOrganizationSettingInDocument, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationSettingOutDocument>>;
    /**
     *
     * @summary Post Theming
     * @param {JsonApiThemeInDocument} jsonApiThemeInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityThemes(jsonApiThemeInDocument: JsonApiThemeInDocument, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiThemeOutDocument>>;
    /**
     *
     * @summary Post User Data Filters
     * @param {string} workspaceId
     * @param {JsonApiUserDataFilterPostOptionalIdDocument} jsonApiUserDataFilterPostOptionalIdDocument
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserDataFilters(workspaceId: string, jsonApiUserDataFilterPostOptionalIdDocument: JsonApiUserDataFilterPostOptionalIdDocument, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserDataFilterOutDocument>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Post User Group entities
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserGroups(jsonApiUserGroupInDocument: JsonApiUserGroupInDocument, include?: Array<"userGroups" | "parents" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutDocument>>;
    /**
     *
     * @summary Post new user settings for the user
     * @param {string} userId
     * @param {JsonApiUserSettingInDocument} jsonApiUserSettingInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserSettings(userId: string, jsonApiUserSettingInDocument: JsonApiUserSettingInDocument, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserSettingOutDocument>>;
    /**
     * User - represents entity interacting with platform
     * @summary Post User entities
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUsers(jsonApiUserInDocument: JsonApiUserInDocument, include?: Array<"userGroups" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutDocument>>;
    /**
     *
     * @summary Post Visualization Objects
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectPostOptionalIdDocument} jsonApiVisualizationObjectPostOptionalIdDocument
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityVisualizationObjects(workspaceId: string, jsonApiVisualizationObjectPostOptionalIdDocument: JsonApiVisualizationObjectPostOptionalIdDocument, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutDocument>>;
    /**
     *
     * @summary Post Settings for Workspace Data Filters
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterSettingInDocument} jsonApiWorkspaceDataFilterSettingInDocument
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceDataFilterSettings(workspaceId: string, jsonApiWorkspaceDataFilterSettingInDocument: JsonApiWorkspaceDataFilterSettingInDocument, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>>;
    /**
     *
     * @summary Post Workspace Data Filters
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceDataFilters(workspaceId: string, jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>>;
    /**
     *
     * @summary Post Settings for Workspaces
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceSettingPostOptionalIdDocument} jsonApiWorkspaceSettingPostOptionalIdDocument
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceSettings(workspaceId: string, jsonApiWorkspaceSettingPostOptionalIdDocument: JsonApiWorkspaceSettingPostOptionalIdDocument, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceSettingOutDocument>>;
    /**
     * Space of the shared interest
     * @summary Post Workspace entities
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaces(jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument, include?: Array<"workspaces" | "parent" | "ALL">, metaInclude?: Array<"config" | "permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutDocument>>;
    /**
     *
     * @summary Delete a Dashboard
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityAnalyticalDashboards(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete an API Token for a user
     * @param {string} userId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityApiTokens(userId: string, id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete an Attribute Hierarchy
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityAttributeHierarchies(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a Color Pallette
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityColorPalettes(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *  Context Security Police Directive
     * @summary Delete CSP Directives
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityCspDirectives(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a Custom Application Setting
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityCustomApplicationSettings(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a Plugin
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDashboardPlugins(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Delete Data Source entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDataSources(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a Context Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityFilterContexts(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Deletes JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Delete Jwk
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityJwks(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a Metric
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityMetrics(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete Organization entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityOrganizationSettings(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete Theming
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityThemes(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a User Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserDataFilters(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Delete UserGroup entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserGroups(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a setting for a user
     * @param {string} userId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserSettings(userId: string, id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * User - represents entity interacting with platform
     * @summary Delete User entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUsers(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a Visualization Object
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityVisualizationObjects(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a Settings for Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceDataFilterSettings(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceDataFilters(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a Setting for Workspace
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceSettings(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Space of the shared interest
     * @summary Delete Workspace entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaces(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get all Dashboards
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAnalyticalDashboards(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutList>>;
    /**
     *
     * @summary List all api tokens for a user
     * @param {string} userId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesApiTokens(userId: string, filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiApiTokenOutList>>;
    /**
     *
     * @summary Get all Attribute Hierarchies
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAttributeHierarchies(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeHierarchyOutList>>;
    /**
     *
     * @summary Get all Attributes
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'attributeHierarchies' | 'dataset' | 'defaultView' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAttributes(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"datasets" | "labels" | "attributeHierarchies" | "dataset" | "defaultView" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeOutList>>;
    /**
     *
     * @summary Get all Color Pallettes
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesColorPalettes(filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiColorPaletteOutList>>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesCspDirectives(filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCspDirectiveOutList>>;
    /**
     *
     * @summary Get all Custom Application Settings
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesCustomApplicationSettings(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCustomApplicationSettingOutList>>;
    /**
     *
     * @summary Get all Plugins
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDashboardPlugins(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDashboardPluginOutList>>;
    /**
     *
     * @summary Get all Data Source Identifiers
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSourceIdentifiers(filter?: string, page?: number, size?: number, sort?: Array<string>, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceIdentifierOutList>>;
    /**
     *
     * @param {string} dataSourceId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSourceTables(dataSourceId: string, filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceTableOutList>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSources(filter?: string, page?: number, size?: number, sort?: Array<string>, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutList>>;
    /**
     *
     * @summary Get all Datasets
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'workspaceDataFilters' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDatasets(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"attributes" | "facts" | "datasets" | "workspaceDataFilters" | "references" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDatasetOutList>>;
    /**
     * Space of the shared interest
     * @summary Get Entitlements
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesEntitlements(filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiEntitlementOutList>>;
    /**
     *
     * @summary Get all Facts
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFacts(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"datasets" | "dataset" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFactOutList>>;
    /**
     *
     * @summary Get all Context Filters
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFilterContexts(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutList>>;
    /**
     * Returns all JSON web keys - used to verify JSON web tokens (Jwts)
     * @summary Get all Jwks
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesJwks(filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiJwkOutList>>;
    /**
     *
     * @summary Get all Labels
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesLabels(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"attributes" | "attribute" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiLabelOutList>>;
    /**
     *
     * @summary Get all Metrics
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesMetrics(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutList>>;
    /**
     *
     * @summary Get Organization entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesOrganizationSettings(filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationSettingOutList>>;
    /**
     *
     * @summary Get all Theming entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesThemes(filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiThemeOutList>>;
    /**
     *
     * @summary Get all User Data Filters
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserDataFilters(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserDataFilterOutList>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserGroups(filter?: string, include?: Array<"userGroups" | "parents" | "ALL">, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutList>>;
    /**
     * UserIdentifier - represents entity interacting with platform
     * @summary Get UserIdentifier entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserIdentifiers(filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserIdentifierOutList>>;
    /**
     *
     * @summary List all settings for a user
     * @param {string} userId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserSettings(userId: string, filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserSettingOutList>>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUsers(filter?: string, include?: Array<"userGroups" | "ALL">, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutList>>;
    /**
     *
     * @summary Get all Visualization Objects
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesVisualizationObjects(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutList>>;
    /**
     *
     * @summary Get all Settings for Workspace Data Filters
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilterSettings(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList>>;
    /**
     *
     * @summary Get all Workspace Data Filters
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilters(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutList>>;
    /**
     *
     * @summary Get all Setting for Workspaces
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceSettings(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceSettingOutList>>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaces(filter?: string, include?: Array<"workspaces" | "parent" | "ALL">, page?: number, size?: number, sort?: Array<string>, metaInclude?: Array<"config" | "permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutList>>;
    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllOptions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourceDrivers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: string;
    }>>;
    /**
     *
     * @summary Get a Dashboard
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAnalyticalDashboards(workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument>>;
    /**
     *
     * @summary Get an API Token for a user
     * @param {string} userId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityApiTokens(userId: string, id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiApiTokenOutDocument>>;
    /**
     *
     * @summary Get an Attribute Hierarchy
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAttributeHierarchies(workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeHierarchyOutDocument>>;
    /**
     *
     * @summary Get an Attribute
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'attributeHierarchies' | 'dataset' | 'defaultView' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAttributes(workspaceId: string, objectId: string, filter?: string, include?: Array<"datasets" | "labels" | "attributeHierarchies" | "dataset" | "defaultView" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeOutDocument>>;
    /**
     *
     * @summary Get Color Pallette
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityColorPalettes(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiColorPaletteOutDocument>>;
    /**
     *
     * @summary Get CookieSecurityConfiguration
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCookieSecurityConfigurations(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCspDirectives(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCspDirectiveOutDocument>>;
    /**
     *
     * @summary Get a Custom Application Setting
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCustomApplicationSettings(workspaceId: string, objectId: string, filter?: string, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCustomApplicationSettingOutDocument>>;
    /**
     *
     * @summary Get a Plugin
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDashboardPlugins(workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDashboardPluginOutDocument>>;
    /**
     *
     * @summary Get Data Source Identifier
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSourceIdentifiers(id: string, filter?: string, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceIdentifierOutDocument>>;
    /**
     *
     * @param {string} dataSourceId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSourceTables(dataSourceId: string, id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceTableOutDocument>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSources(id: string, filter?: string, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutDocument>>;
    /**
     *
     * @summary Get a Dataset
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'workspaceDataFilters' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDatasets(workspaceId: string, objectId: string, filter?: string, include?: Array<"attributes" | "facts" | "datasets" | "workspaceDataFilters" | "references" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDatasetOutDocument>>;
    /**
     * Space of the shared interest
     * @summary Get Entitlement
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityEntitlements(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiEntitlementOutDocument>>;
    /**
     *
     * @summary Get a Fact
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFacts(workspaceId: string, objectId: string, filter?: string, include?: Array<"datasets" | "dataset" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFactOutDocument>>;
    /**
     *
     * @summary Get a Context Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFilterContexts(workspaceId: string, objectId: string, filter?: string, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutDocument>>;
    /**
     * Returns JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Get Jwk
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityJwks(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiJwkOutDocument>>;
    /**
     *
     * @summary Get a Label
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityLabels(workspaceId: string, objectId: string, filter?: string, include?: Array<"attributes" | "attribute" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiLabelOutDocument>>;
    /**
     *
     * @summary Get a Metric
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityMetrics(workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutDocument>>;
    /**
     *
     * @summary Get Organization entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityOrganizationSettings(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationSettingOutDocument>>;
    /**
     *
     * @summary Get Organizations
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityOrganizations(id: string, filter?: string, include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationOutDocument>>;
    /**
     *
     * @summary Get Theming
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityThemes(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiThemeOutDocument>>;
    /**
     *
     * @summary Get a User Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserDataFilters(workspaceId: string, objectId: string, filter?: string, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserDataFilterOutDocument>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserGroups(id: string, filter?: string, include?: Array<"userGroups" | "parents" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutDocument>>;
    /**
     * UserIdentifier - represents basic informationZ about entity interacting with platform
     * @summary Get UserIdentifier entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserIdentifiers(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserIdentifierOutDocument>>;
    /**
     *
     * @summary Get a setting for a user
     * @param {string} userId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserSettings(userId: string, id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserSettingOutDocument>>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUsers(id: string, filter?: string, include?: Array<"userGroups" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutDocument>>;
    /**
     *
     * @summary Get a Visualization Object
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityVisualizationObjects(workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutDocument>>;
    /**
     *
     * @summary Get a Setting for Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilterSettings(workspaceId: string, objectId: string, filter?: string, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, xGDCVALIDATERELATIONS?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>>;
    /**
     *
     * @summary Get a Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilters(workspaceId: string, objectId: string, filter?: string, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, xGDCVALIDATERELATIONS?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>>;
    /**
     *
     * @summary Get a Setting for Workspace
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceSettings(workspaceId: string, objectId: string, filter?: string, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceSettingOutDocument>>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaces(id: string, filter?: string, include?: Array<"workspaces" | "parent" | "ALL">, metaInclude?: Array<"config" | "permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutDocument>>;
    /**
     * Gets a basic information about organization.
     * @summary Get current organization info
     * @param {Array<'permissions' | 'all'>} [metaInclude] Return list of permissions available to logged user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(metaInclude?: Array<"permissions" | "all">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Patch a Dashboard
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardPatchDocument} jsonApiAnalyticalDashboardPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityAnalyticalDashboards(workspaceId: string, objectId: string, jsonApiAnalyticalDashboardPatchDocument: JsonApiAnalyticalDashboardPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument>>;
    /**
     *
     * @summary Patch an Attribute Hierarchy
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAttributeHierarchyPatchDocument} jsonApiAttributeHierarchyPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityAttributeHierarchies(workspaceId: string, objectId: string, jsonApiAttributeHierarchyPatchDocument: JsonApiAttributeHierarchyPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeHierarchyOutDocument>>;
    /**
     *
     * @summary Patch Color Pallette
     * @param {string} id
     * @param {JsonApiColorPalettePatchDocument} jsonApiColorPalettePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityColorPalettes(id: string, jsonApiColorPalettePatchDocument: JsonApiColorPalettePatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiColorPaletteOutDocument>>;
    /**
     *
     * @summary Patch CookieSecurityConfiguration
     * @param {string} id
     * @param {JsonApiCookieSecurityConfigurationPatchDocument} jsonApiCookieSecurityConfigurationPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCookieSecurityConfigurations(id: string, jsonApiCookieSecurityConfigurationPatchDocument: JsonApiCookieSecurityConfigurationPatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>>;
    /**
     *  Context Security Police Directive
     * @summary Patch CSP Directives
     * @param {string} id
     * @param {JsonApiCspDirectivePatchDocument} jsonApiCspDirectivePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCspDirectives(id: string, jsonApiCspDirectivePatchDocument: JsonApiCspDirectivePatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCspDirectiveOutDocument>>;
    /**
     *
     * @summary Patch a Custom Application Setting
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiCustomApplicationSettingPatchDocument} jsonApiCustomApplicationSettingPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCustomApplicationSettings(workspaceId: string, objectId: string, jsonApiCustomApplicationSettingPatchDocument: JsonApiCustomApplicationSettingPatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCustomApplicationSettingOutDocument>>;
    /**
     *
     * @summary Patch a Plugin
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiDashboardPluginPatchDocument} jsonApiDashboardPluginPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityDashboardPlugins(workspaceId: string, objectId: string, jsonApiDashboardPluginPatchDocument: JsonApiDashboardPluginPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDashboardPluginOutDocument>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Patch Data Source entity
     * @param {string} id
     * @param {JsonApiDataSourcePatchDocument} jsonApiDataSourcePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityDataSources(id: string, jsonApiDataSourcePatchDocument: JsonApiDataSourcePatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutDocument>>;
    /**
     *
     * @summary Patch a Context Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextPatchDocument} jsonApiFilterContextPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityFilterContexts(workspaceId: string, objectId: string, jsonApiFilterContextPatchDocument: JsonApiFilterContextPatchDocument, filter?: string, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutDocument>>;
    /**
     * Patches JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Patch Jwk
     * @param {string} id
     * @param {JsonApiJwkPatchDocument} jsonApiJwkPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityJwks(id: string, jsonApiJwkPatchDocument: JsonApiJwkPatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiJwkOutDocument>>;
    /**
     *
     * @summary Patch a Metric
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricPatchDocument} jsonApiMetricPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityMetrics(workspaceId: string, objectId: string, jsonApiMetricPatchDocument: JsonApiMetricPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutDocument>>;
    /**
     *
     * @summary Patch Organization entity
     * @param {string} id
     * @param {JsonApiOrganizationSettingPatchDocument} jsonApiOrganizationSettingPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityOrganizationSettings(id: string, jsonApiOrganizationSettingPatchDocument: JsonApiOrganizationSettingPatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationSettingOutDocument>>;
    /**
     *
     * @summary Patch Organization
     * @param {string} id
     * @param {JsonApiOrganizationPatchDocument} jsonApiOrganizationPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityOrganizations(id: string, jsonApiOrganizationPatchDocument: JsonApiOrganizationPatchDocument, filter?: string, include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationOutDocument>>;
    /**
     *
     * @summary Patch Theming
     * @param {string} id
     * @param {JsonApiThemePatchDocument} jsonApiThemePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityThemes(id: string, jsonApiThemePatchDocument: JsonApiThemePatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiThemeOutDocument>>;
    /**
     *
     * @summary Patch a User Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiUserDataFilterPatchDocument} jsonApiUserDataFilterPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUserDataFilters(workspaceId: string, objectId: string, jsonApiUserDataFilterPatchDocument: JsonApiUserDataFilterPatchDocument, filter?: string, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserDataFilterOutDocument>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Patch UserGroup entity
     * @param {string} id
     * @param {JsonApiUserGroupPatchDocument} jsonApiUserGroupPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUserGroups(id: string, jsonApiUserGroupPatchDocument: JsonApiUserGroupPatchDocument, filter?: string, include?: Array<"userGroups" | "parents" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutDocument>>;
    /**
     * User - represents entity interacting with platform
     * @summary Patch User entity
     * @param {string} id
     * @param {JsonApiUserPatchDocument} jsonApiUserPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUsers(id: string, jsonApiUserPatchDocument: JsonApiUserPatchDocument, filter?: string, include?: Array<"userGroups" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutDocument>>;
    /**
     *
     * @summary Patch a Visualization Object
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectPatchDocument} jsonApiVisualizationObjectPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityVisualizationObjects(workspaceId: string, objectId: string, jsonApiVisualizationObjectPatchDocument: JsonApiVisualizationObjectPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutDocument>>;
    /**
     *
     * @summary Patch a Settings for Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterSettingPatchDocument} jsonApiWorkspaceDataFilterSettingPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceDataFilterSettings(workspaceId: string, objectId: string, jsonApiWorkspaceDataFilterSettingPatchDocument: JsonApiWorkspaceDataFilterSettingPatchDocument, filter?: string, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>>;
    /**
     *
     * @summary Patch a Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterPatchDocument} jsonApiWorkspaceDataFilterPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceDataFilters(workspaceId: string, objectId: string, jsonApiWorkspaceDataFilterPatchDocument: JsonApiWorkspaceDataFilterPatchDocument, filter?: string, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>>;
    /**
     *
     * @summary Patch a Setting for Workspace
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceSettingPatchDocument} jsonApiWorkspaceSettingPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceSettings(workspaceId: string, objectId: string, jsonApiWorkspaceSettingPatchDocument: JsonApiWorkspaceSettingPatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceSettingOutDocument>>;
    /**
     * Space of the shared interest
     * @summary Patch Workspace entity
     * @param {string} id
     * @param {JsonApiWorkspacePatchDocument} jsonApiWorkspacePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaces(id: string, jsonApiWorkspacePatchDocument: JsonApiWorkspacePatchDocument, filter?: string, include?: Array<"workspaces" | "parent" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutDocument>>;
    /**
     *
     * @summary Put Dashboards
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityAnalyticalDashboards(workspaceId: string, objectId: string, jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument, filter?: string, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument>>;
    /**
     *
     * @summary Put new API token for the user
     * @param {string} userId
     * @param {string} id
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityApiTokens(userId: string, id: string, jsonApiApiTokenInDocument: JsonApiApiTokenInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiApiTokenOutDocument>>;
    /**
     *
     * @summary Put an Attribute Hierarchy
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAttributeHierarchyInDocument} jsonApiAttributeHierarchyInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityAttributeHierarchies(workspaceId: string, objectId: string, jsonApiAttributeHierarchyInDocument: JsonApiAttributeHierarchyInDocument, filter?: string, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeHierarchyOutDocument>>;
    /**
     *
     * @summary Put Color Pallette
     * @param {string} id
     * @param {JsonApiColorPaletteInDocument} jsonApiColorPaletteInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityColorPalettes(id: string, jsonApiColorPaletteInDocument: JsonApiColorPaletteInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiColorPaletteOutDocument>>;
    /**
     *
     * @summary Put CookieSecurityConfiguration
     * @param {string} id
     * @param {JsonApiCookieSecurityConfigurationInDocument} jsonApiCookieSecurityConfigurationInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCookieSecurityConfigurations(id: string, jsonApiCookieSecurityConfigurationInDocument: JsonApiCookieSecurityConfigurationInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>>;
    /**
     *  Context Security Police Directive
     * @summary Put CSP Directives
     * @param {string} id
     * @param {JsonApiCspDirectiveInDocument} jsonApiCspDirectiveInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCspDirectives(id: string, jsonApiCspDirectiveInDocument: JsonApiCspDirectiveInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCspDirectiveOutDocument>>;
    /**
     *
     * @summary Put a Custom Application Setting
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiCustomApplicationSettingInDocument} jsonApiCustomApplicationSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCustomApplicationSettings(workspaceId: string, objectId: string, jsonApiCustomApplicationSettingInDocument: JsonApiCustomApplicationSettingInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCustomApplicationSettingOutDocument>>;
    /**
     *
     * @summary Put a Plugin
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDashboardPlugins(workspaceId: string, objectId: string, jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument, filter?: string, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDashboardPluginOutDocument>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Put Data Source entity
     * @param {string} id
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDataSources(id: string, jsonApiDataSourceInDocument: JsonApiDataSourceInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutDocument>>;
    /**
     *
     * @summary Put a Context Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityFilterContexts(workspaceId: string, objectId: string, jsonApiFilterContextInDocument: JsonApiFilterContextInDocument, filter?: string, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutDocument>>;
    /**
     * Updates JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Put Jwk
     * @param {string} id
     * @param {JsonApiJwkInDocument} jsonApiJwkInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityJwks(id: string, jsonApiJwkInDocument: JsonApiJwkInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiJwkOutDocument>>;
    /**
     *
     * @summary Put a Metric
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityMetrics(workspaceId: string, objectId: string, jsonApiMetricInDocument: JsonApiMetricInDocument, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutDocument>>;
    /**
     *
     * @summary Put Organization entity
     * @param {string} id
     * @param {JsonApiOrganizationSettingInDocument} jsonApiOrganizationSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityOrganizationSettings(id: string, jsonApiOrganizationSettingInDocument: JsonApiOrganizationSettingInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationSettingOutDocument>>;
    /**
     *
     * @summary Put Organization
     * @param {string} id
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityOrganizations(id: string, jsonApiOrganizationInDocument: JsonApiOrganizationInDocument, filter?: string, include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationOutDocument>>;
    /**
     *
     * @summary Put Theming
     * @param {string} id
     * @param {JsonApiThemeInDocument} jsonApiThemeInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityThemes(id: string, jsonApiThemeInDocument: JsonApiThemeInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiThemeOutDocument>>;
    /**
     *
     * @summary Put a User Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiUserDataFilterInDocument} jsonApiUserDataFilterInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserDataFilters(workspaceId: string, objectId: string, jsonApiUserDataFilterInDocument: JsonApiUserDataFilterInDocument, filter?: string, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserDataFilterOutDocument>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Put UserGroup entity
     * @param {string} id
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserGroups(id: string, jsonApiUserGroupInDocument: JsonApiUserGroupInDocument, filter?: string, include?: Array<"userGroups" | "parents" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutDocument>>;
    /**
     *
     * @summary Put new user settings for the user
     * @param {string} userId
     * @param {string} id
     * @param {JsonApiUserSettingInDocument} jsonApiUserSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserSettings(userId: string, id: string, jsonApiUserSettingInDocument: JsonApiUserSettingInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserSettingOutDocument>>;
    /**
     * User - represents entity interacting with platform
     * @summary Put User entity
     * @param {string} id
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUsers(id: string, jsonApiUserInDocument: JsonApiUserInDocument, filter?: string, include?: Array<"userGroups" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutDocument>>;
    /**
     *
     * @summary Put a Visualization Object
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityVisualizationObjects(workspaceId: string, objectId: string, jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutDocument>>;
    /**
     *
     * @summary Put a Settings for Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterSettingInDocument} jsonApiWorkspaceDataFilterSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceDataFilterSettings(workspaceId: string, objectId: string, jsonApiWorkspaceDataFilterSettingInDocument: JsonApiWorkspaceDataFilterSettingInDocument, filter?: string, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>>;
    /**
     *
     * @summary Put a Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceDataFilters(workspaceId: string, objectId: string, jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument, filter?: string, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>>;
    /**
     *
     * @summary Put a Setting for a Workspace
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceSettingInDocument} jsonApiWorkspaceSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceSettings(workspaceId: string, objectId: string, jsonApiWorkspaceSettingInDocument: JsonApiWorkspaceSettingInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceSettingOutDocument>>;
    /**
     * Space of the shared interest
     * @summary Put Workspace entity
     * @param {string} id
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaces(id: string, jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument, filter?: string, include?: Array<"workspaces" | "parent" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesAnalyticalDashboards operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesAnalyticalDashboardsRequest
 */
export declare interface EntitiesApiGetAllEntitiesAnalyticalDashboardsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesAnalyticalDashboards
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesAnalyticalDashboards
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesAnalyticalDashboards
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesAnalyticalDashboards
     */
    readonly include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesAnalyticalDashboards
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesAnalyticalDashboards
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesAnalyticalDashboards
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesAnalyticalDashboards
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesAnalyticalDashboards
     */
    readonly metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesApiTokens operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesApiTokensRequest
 */
export declare interface EntitiesApiGetAllEntitiesApiTokensRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesApiTokens
     */
    readonly userId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesApiTokens
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesApiTokens
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesApiTokens
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesApiTokens
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesAttributeHierarchies operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesAttributeHierarchiesRequest
 */
export declare interface EntitiesApiGetAllEntitiesAttributeHierarchiesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesAttributeHierarchies
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesAttributeHierarchies
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesAttributeHierarchies
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesAttributeHierarchies
     */
    readonly include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesAttributeHierarchies
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesAttributeHierarchies
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesAttributeHierarchies
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesAttributeHierarchies
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesAttributeHierarchies
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesAttributes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesAttributesRequest
 */
export declare interface EntitiesApiGetAllEntitiesAttributesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesAttributes
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesAttributes
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesAttributes
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'datasets' | 'labels' | 'attributeHierarchies' | 'dataset' | 'defaultView' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesAttributes
     */
    readonly include?: Array<"datasets" | "labels" | "attributeHierarchies" | "dataset" | "defaultView" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesAttributes
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesAttributes
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesAttributes
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesAttributes
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesAttributes
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesColorPalettes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesColorPalettesRequest
 */
export declare interface EntitiesApiGetAllEntitiesColorPalettesRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesColorPalettes
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesColorPalettes
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesColorPalettes
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesColorPalettes
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesCspDirectives operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesCspDirectivesRequest
 */
export declare interface EntitiesApiGetAllEntitiesCspDirectivesRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesCspDirectives
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesCspDirectives
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesCspDirectives
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesCspDirectives
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesCustomApplicationSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesCustomApplicationSettingsRequest
 */
export declare interface EntitiesApiGetAllEntitiesCustomApplicationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesCustomApplicationSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesCustomApplicationSettings
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesCustomApplicationSettings
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesCustomApplicationSettings
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesCustomApplicationSettings
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesCustomApplicationSettings
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesCustomApplicationSettings
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesCustomApplicationSettings
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesDashboardPlugins operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesDashboardPluginsRequest
 */
export declare interface EntitiesApiGetAllEntitiesDashboardPluginsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesDashboardPlugins
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesDashboardPlugins
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesDashboardPlugins
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesDashboardPlugins
     */
    readonly include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesDashboardPlugins
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesDashboardPlugins
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesDashboardPlugins
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesDashboardPlugins
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesDashboardPlugins
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesDatasets operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesDatasetsRequest
 */
export declare interface EntitiesApiGetAllEntitiesDatasetsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesDatasets
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesDatasets
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesDatasets
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'facts' | 'datasets' | 'workspaceDataFilters' | 'references' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesDatasets
     */
    readonly include?: Array<"attributes" | "facts" | "datasets" | "workspaceDataFilters" | "references" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesDatasets
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesDatasets
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesDatasets
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesDatasets
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesDatasets
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesDataSourceIdentifiers operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesDataSourceIdentifiersRequest
 */
export declare interface EntitiesApiGetAllEntitiesDataSourceIdentifiersRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesDataSourceIdentifiers
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesDataSourceIdentifiers
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesDataSourceIdentifiers
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesDataSourceIdentifiers
     */
    readonly sort?: Array<string>;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesDataSourceIdentifiers
     */
    readonly metaInclude?: Array<"permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesDataSources operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesDataSourcesRequest
 */
export declare interface EntitiesApiGetAllEntitiesDataSourcesRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesDataSources
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesDataSources
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesDataSources
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesDataSources
     */
    readonly sort?: Array<string>;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesDataSources
     */
    readonly metaInclude?: Array<"permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesDataSourceTables operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesDataSourceTablesRequest
 */
export declare interface EntitiesApiGetAllEntitiesDataSourceTablesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesDataSourceTables
     */
    readonly dataSourceId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesDataSourceTables
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesDataSourceTables
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesDataSourceTables
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesDataSourceTables
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesEntitlements operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesEntitlementsRequest
 */
export declare interface EntitiesApiGetAllEntitiesEntitlementsRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesEntitlements
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesEntitlements
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesEntitlements
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesEntitlements
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesFacts operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesFactsRequest
 */
export declare interface EntitiesApiGetAllEntitiesFactsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesFacts
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesFacts
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesFacts
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'datasets' | 'dataset' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesFacts
     */
    readonly include?: Array<"datasets" | "dataset" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesFacts
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesFacts
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesFacts
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesFacts
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesFacts
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesFilterContexts operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesFilterContextsRequest
 */
export declare interface EntitiesApiGetAllEntitiesFilterContextsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesFilterContexts
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesFilterContexts
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesFilterContexts
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesFilterContexts
     */
    readonly include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesFilterContexts
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesFilterContexts
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesFilterContexts
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesFilterContexts
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesFilterContexts
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesJwks operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesJwksRequest
 */
export declare interface EntitiesApiGetAllEntitiesJwksRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesJwks
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesJwks
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesJwks
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesJwks
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesLabels operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesLabelsRequest
 */
export declare interface EntitiesApiGetAllEntitiesLabelsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesLabels
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesLabels
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesLabels
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'attribute' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesLabels
     */
    readonly include?: Array<"attributes" | "attribute" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesLabels
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesLabels
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesLabels
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesLabels
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesLabels
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesMetrics operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesMetricsRequest
 */
export declare interface EntitiesApiGetAllEntitiesMetricsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesMetrics
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesMetrics
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesMetrics
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesMetrics
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesMetrics
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesMetrics
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesMetrics
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesMetrics
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesMetrics
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesOrganizationSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesOrganizationSettingsRequest
 */
export declare interface EntitiesApiGetAllEntitiesOrganizationSettingsRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesOrganizationSettings
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesOrganizationSettings
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesOrganizationSettings
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesOrganizationSettings
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesThemes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesThemesRequest
 */
export declare interface EntitiesApiGetAllEntitiesThemesRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesThemes
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesThemes
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesThemes
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesThemes
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesUserDataFilters operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesUserDataFiltersRequest
 */
export declare interface EntitiesApiGetAllEntitiesUserDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesUserDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesUserDataFilters
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesUserDataFilters
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesUserDataFilters
     */
    readonly include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesUserDataFilters
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesUserDataFilters
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesUserDataFilters
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesUserDataFilters
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesUserDataFilters
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesUserGroups operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesUserGroupsRequest
 */
export declare interface EntitiesApiGetAllEntitiesUserGroupsRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesUserGroups
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'parents' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesUserGroups
     */
    readonly include?: Array<"userGroups" | "parents" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesUserGroups
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesUserGroups
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesUserGroups
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesUserIdentifiers operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesUserIdentifiersRequest
 */
export declare interface EntitiesApiGetAllEntitiesUserIdentifiersRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesUserIdentifiers
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesUserIdentifiers
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesUserIdentifiers
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesUserIdentifiers
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesUserSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesUserSettingsRequest
 */
export declare interface EntitiesApiGetAllEntitiesUserSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesUserSettings
     */
    readonly userId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesUserSettings
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesUserSettings
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesUserSettings
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesUserSettings
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesUsers operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesUsersRequest
 */
export declare interface EntitiesApiGetAllEntitiesUsersRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesUsers
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesUsers
     */
    readonly include?: Array<"userGroups" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesUsers
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesUsers
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesUsers
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesVisualizationObjects operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesVisualizationObjectsRequest
 */
export declare interface EntitiesApiGetAllEntitiesVisualizationObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesVisualizationObjects
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesVisualizationObjects
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesVisualizationObjects
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesVisualizationObjects
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesVisualizationObjects
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesVisualizationObjects
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesVisualizationObjects
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesVisualizationObjects
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesVisualizationObjects
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesWorkspaceDataFilterSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesWorkspaceDataFilterSettingsRequest
 */
export declare interface EntitiesApiGetAllEntitiesWorkspaceDataFilterSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getAllEntitiesWorkspaceDataFilters operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesWorkspaceDataFiltersRequest
 */
export declare interface EntitiesApiGetAllEntitiesWorkspaceDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getAllEntitiesWorkspaceSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesWorkspaceSettingsRequest
 */
export declare interface EntitiesApiGetAllEntitiesWorkspaceSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceSettings
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceSettings
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceSettings
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceSettings
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceSettings
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceSettings
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesWorkspaceSettings
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesWorkspaces operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetAllEntitiesWorkspacesRequest
 */
export declare interface EntitiesApiGetAllEntitiesWorkspacesRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetAllEntitiesWorkspaces
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaces' | 'parent' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesWorkspaces
     */
    readonly include?: Array<"workspaces" | "parent" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesWorkspaces
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitiesApiGetAllEntitiesWorkspaces
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitiesApiGetAllEntitiesWorkspaces
     */
    readonly sort?: Array<string>;
    /**
     * Include Meta objects.
     * @type {Array<'config' | 'permissions' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetAllEntitiesWorkspaces
     */
    readonly metaInclude?: Array<"config" | "permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityAnalyticalDashboards operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityAnalyticalDashboardsRequest
 */
export declare interface EntitiesApiGetEntityAnalyticalDashboardsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityAnalyticalDashboards
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityAnalyticalDashboards
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityAnalyticalDashboards
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiGetEntityAnalyticalDashboards
     */
    readonly include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityAnalyticalDashboards
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetEntityAnalyticalDashboards
     */
    readonly metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityApiTokens operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityApiTokensRequest
 */
export declare interface EntitiesApiGetEntityApiTokensRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityApiTokens
     */
    readonly userId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityApiTokens
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityApiTokens
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityAttributeHierarchies operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityAttributeHierarchiesRequest
 */
export declare interface EntitiesApiGetEntityAttributeHierarchiesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityAttributeHierarchies
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityAttributeHierarchies
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityAttributeHierarchies
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiGetEntityAttributeHierarchies
     */
    readonly include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityAttributeHierarchies
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetEntityAttributeHierarchies
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityAttributes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityAttributesRequest
 */
export declare interface EntitiesApiGetEntityAttributesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityAttributes
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityAttributes
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityAttributes
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'datasets' | 'labels' | 'attributeHierarchies' | 'dataset' | 'defaultView' | 'ALL'>}
     * @memberof EntitiesApiGetEntityAttributes
     */
    readonly include?: Array<"datasets" | "labels" | "attributeHierarchies" | "dataset" | "defaultView" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityAttributes
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetEntityAttributes
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityColorPalettes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityColorPalettesRequest
 */
export declare interface EntitiesApiGetEntityColorPalettesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityColorPalettes
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityColorPalettes
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityCookieSecurityConfigurations operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityCookieSecurityConfigurationsRequest
 */
export declare interface EntitiesApiGetEntityCookieSecurityConfigurationsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityCookieSecurityConfigurations
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityCookieSecurityConfigurations
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityCspDirectives operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityCspDirectivesRequest
 */
export declare interface EntitiesApiGetEntityCspDirectivesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityCspDirectives
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityCspDirectives
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityCustomApplicationSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityCustomApplicationSettingsRequest
 */
export declare interface EntitiesApiGetEntityCustomApplicationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityCustomApplicationSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityCustomApplicationSettings
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityCustomApplicationSettings
     */
    readonly filter?: string;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityCustomApplicationSettings
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetEntityCustomApplicationSettings
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityDashboardPlugins operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityDashboardPluginsRequest
 */
export declare interface EntitiesApiGetEntityDashboardPluginsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityDashboardPlugins
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityDashboardPlugins
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityDashboardPlugins
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiGetEntityDashboardPlugins
     */
    readonly include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityDashboardPlugins
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetEntityDashboardPlugins
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityDatasets operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityDatasetsRequest
 */
export declare interface EntitiesApiGetEntityDatasetsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityDatasets
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityDatasets
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityDatasets
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'facts' | 'datasets' | 'workspaceDataFilters' | 'references' | 'ALL'>}
     * @memberof EntitiesApiGetEntityDatasets
     */
    readonly include?: Array<"attributes" | "facts" | "datasets" | "workspaceDataFilters" | "references" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityDatasets
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetEntityDatasets
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityDataSourceIdentifiers operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityDataSourceIdentifiersRequest
 */
export declare interface EntitiesApiGetEntityDataSourceIdentifiersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityDataSourceIdentifiers
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityDataSourceIdentifiers
     */
    readonly filter?: string;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetEntityDataSourceIdentifiers
     */
    readonly metaInclude?: Array<"permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityDataSources operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityDataSourcesRequest
 */
export declare interface EntitiesApiGetEntityDataSourcesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityDataSources
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityDataSources
     */
    readonly filter?: string;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetEntityDataSources
     */
    readonly metaInclude?: Array<"permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityDataSourceTables operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityDataSourceTablesRequest
 */
export declare interface EntitiesApiGetEntityDataSourceTablesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityDataSourceTables
     */
    readonly dataSourceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityDataSourceTables
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityDataSourceTables
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityEntitlements operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityEntitlementsRequest
 */
export declare interface EntitiesApiGetEntityEntitlementsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityEntitlements
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityEntitlements
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityFacts operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityFactsRequest
 */
export declare interface EntitiesApiGetEntityFactsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityFacts
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityFacts
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityFacts
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'datasets' | 'dataset' | 'ALL'>}
     * @memberof EntitiesApiGetEntityFacts
     */
    readonly include?: Array<"datasets" | "dataset" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityFacts
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetEntityFacts
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityFilterContexts operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityFilterContextsRequest
 */
export declare interface EntitiesApiGetEntityFilterContextsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityFilterContexts
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityFilterContexts
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityFilterContexts
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>}
     * @memberof EntitiesApiGetEntityFilterContexts
     */
    readonly include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityFilterContexts
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetEntityFilterContexts
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityJwks operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityJwksRequest
 */
export declare interface EntitiesApiGetEntityJwksRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityJwks
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityJwks
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityLabels operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityLabelsRequest
 */
export declare interface EntitiesApiGetEntityLabelsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityLabels
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityLabels
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityLabels
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'attribute' | 'ALL'>}
     * @memberof EntitiesApiGetEntityLabels
     */
    readonly include?: Array<"attributes" | "attribute" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityLabels
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetEntityLabels
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityMetrics operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityMetricsRequest
 */
export declare interface EntitiesApiGetEntityMetricsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityMetrics
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityMetrics
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityMetrics
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiGetEntityMetrics
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityMetrics
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetEntityMetrics
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityOrganizationSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityOrganizationSettingsRequest
 */
export declare interface EntitiesApiGetEntityOrganizationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityOrganizationSettings
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityOrganizationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityOrganizations operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityOrganizationsRequest
 */
export declare interface EntitiesApiGetEntityOrganizationsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityOrganizations
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityOrganizations
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>}
     * @memberof EntitiesApiGetEntityOrganizations
     */
    readonly include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetEntityOrganizations
     */
    readonly metaInclude?: Array<"permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityThemes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityThemesRequest
 */
export declare interface EntitiesApiGetEntityThemesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityThemes
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityThemes
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityUserDataFilters operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityUserDataFiltersRequest
 */
export declare interface EntitiesApiGetEntityUserDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityUserDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityUserDataFilters
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityUserDataFilters
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>}
     * @memberof EntitiesApiGetEntityUserDataFilters
     */
    readonly include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityUserDataFilters
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetEntityUserDataFilters
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityUserGroups operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityUserGroupsRequest
 */
export declare interface EntitiesApiGetEntityUserGroupsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityUserGroups
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityUserGroups
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'parents' | 'ALL'>}
     * @memberof EntitiesApiGetEntityUserGroups
     */
    readonly include?: Array<"userGroups" | "parents" | "ALL">;
}

/**
 * Request parameters for getEntityUserIdentifiers operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityUserIdentifiersRequest
 */
export declare interface EntitiesApiGetEntityUserIdentifiersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityUserIdentifiers
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityUserIdentifiers
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityUserSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityUserSettingsRequest
 */
export declare interface EntitiesApiGetEntityUserSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityUserSettings
     */
    readonly userId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityUserSettings
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityUserSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityUsers operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityUsersRequest
 */
export declare interface EntitiesApiGetEntityUsersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityUsers
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityUsers
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'ALL'>}
     * @memberof EntitiesApiGetEntityUsers
     */
    readonly include?: Array<"userGroups" | "ALL">;
}

/**
 * Request parameters for getEntityVisualizationObjects operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityVisualizationObjectsRequest
 */
export declare interface EntitiesApiGetEntityVisualizationObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityVisualizationObjects
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityVisualizationObjects
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityVisualizationObjects
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiGetEntityVisualizationObjects
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityVisualizationObjects
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetEntityVisualizationObjects
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityWorkspaceDataFilterSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityWorkspaceDataFilterSettingsRequest
 */
export declare interface EntitiesApiGetEntityWorkspaceDataFilterSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityWorkspaceDataFilterSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityWorkspaceDataFilterSettings
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityWorkspaceDataFilterSettings
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>}
     * @memberof EntitiesApiGetEntityWorkspaceDataFilterSettings
     */
    readonly include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityWorkspaceDataFilterSettings
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getEntityWorkspaceDataFilters operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityWorkspaceDataFiltersRequest
 */
export declare interface EntitiesApiGetEntityWorkspaceDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityWorkspaceDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityWorkspaceDataFilters
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityWorkspaceDataFilters
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>}
     * @memberof EntitiesApiGetEntityWorkspaceDataFilters
     */
    readonly include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityWorkspaceDataFilters
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getEntityWorkspaceSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityWorkspaceSettingsRequest
 */
export declare interface EntitiesApiGetEntityWorkspaceSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityWorkspaceSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityWorkspaceSettings
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityWorkspaceSettings
     */
    readonly filter?: string;
    /**
     *
     * @type {boolean}
     * @memberof EntitiesApiGetEntityWorkspaceSettings
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetEntityWorkspaceSettings
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityWorkspaces operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetEntityWorkspacesRequest
 */
export declare interface EntitiesApiGetEntityWorkspacesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiGetEntityWorkspaces
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiGetEntityWorkspaces
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaces' | 'parent' | 'ALL'>}
     * @memberof EntitiesApiGetEntityWorkspaces
     */
    readonly include?: Array<"workspaces" | "parent" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'config' | 'permissions' | 'all' | 'ALL'>}
     * @memberof EntitiesApiGetEntityWorkspaces
     */
    readonly metaInclude?: Array<"config" | "permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getOrganization operation in EntitiesApi.
 * @export
 * @interface EntitiesApiGetOrganizationRequest
 */
export declare interface EntitiesApiGetOrganizationRequest {
    /**
     * Return list of permissions available to logged user.
     * @type {Array<'permissions' | 'all'>}
     * @memberof EntitiesApiGetOrganization
     */
    readonly metaInclude?: Array<"permissions" | "all">;
}

/**
 * EntitiesApi - interface
 * @export
 * @interface EntitiesApi
 */
export declare interface EntitiesApiInterface {
    /**
     *
     * @summary Post Dashboards
     * @param {EntitiesApiCreateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityAnalyticalDashboards(requestParameters: EntitiesApiCreateEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @summary Post a new API token for the user
     * @param {EntitiesApiCreateEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityApiTokens(requestParameters: EntitiesApiCreateEntityApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @summary Post Attribute Hierarchies
     * @param {EntitiesApiCreateEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityAttributeHierarchies(requestParameters: EntitiesApiCreateEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutDocument>;
    /**
     *
     * @summary Post Color Pallettes
     * @param {EntitiesApiCreateEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityColorPalettes(requestParameters: EntitiesApiCreateEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutDocument>;
    /**
     *  Context Security Police Directive
     * @summary Post CSP Directives
     * @param {EntitiesApiCreateEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityCspDirectives(requestParameters: EntitiesApiCreateEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutDocument>;
    /**
     *
     * @summary Post Custom Application Settings
     * @param {EntitiesApiCreateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityCustomApplicationSettings(requestParameters: EntitiesApiCreateEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;
    /**
     *
     * @summary Post Plugins
     * @param {EntitiesApiCreateEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityDashboardPlugins(requestParameters: EntitiesApiCreateEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Post Data Sources
     * @param {EntitiesApiCreateEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityDataSources(requestParameters: EntitiesApiCreateEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @summary Post Context Filters
     * @param {EntitiesApiCreateEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityFilterContexts(requestParameters: EntitiesApiCreateEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     * Creates JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Post Jwks
     * @param {EntitiesApiCreateEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityJwks(requestParameters: EntitiesApiCreateEntityJwksRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiJwkOutDocument>;
    /**
     *
     * @summary Post Metrics
     * @param {EntitiesApiCreateEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityMetrics(requestParameters: EntitiesApiCreateEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @summary Post Organization Setting entities
     * @param {EntitiesApiCreateEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityOrganizationSettings(requestParameters: EntitiesApiCreateEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutDocument>;
    /**
     *
     * @summary Post Theming
     * @param {EntitiesApiCreateEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityThemes(requestParameters: EntitiesApiCreateEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutDocument>;
    /**
     *
     * @summary Post User Data Filters
     * @param {EntitiesApiCreateEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityUserDataFilters(requestParameters: EntitiesApiCreateEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutDocument>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Post User Group entities
     * @param {EntitiesApiCreateEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityUserGroups(requestParameters: EntitiesApiCreateEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @summary Post new user settings for the user
     * @param {EntitiesApiCreateEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityUserSettings(requestParameters: EntitiesApiCreateEntityUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserSettingOutDocument>;
    /**
     * User - represents entity interacting with platform
     * @summary Post User entities
     * @param {EntitiesApiCreateEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityUsers(requestParameters: EntitiesApiCreateEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @summary Post Visualization Objects
     * @param {EntitiesApiCreateEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityVisualizationObjects(requestParameters: EntitiesApiCreateEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @summary Post Settings for Workspace Data Filters
     * @param {EntitiesApiCreateEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityWorkspaceDataFilterSettings(requestParameters: EntitiesApiCreateEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @summary Post Workspace Data Filters
     * @param {EntitiesApiCreateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityWorkspaceDataFilters(requestParameters: EntitiesApiCreateEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @summary Post Settings for Workspaces
     * @param {EntitiesApiCreateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityWorkspaceSettings(requestParameters: EntitiesApiCreateEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;
    /**
     * Space of the shared interest
     * @summary Post Workspace entities
     * @param {EntitiesApiCreateEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    createEntityWorkspaces(requestParameters: EntitiesApiCreateEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     *
     * @summary Delete a Dashboard
     * @param {EntitiesApiDeleteEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityAnalyticalDashboards(requestParameters: EntitiesApiDeleteEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete an API Token for a user
     * @param {EntitiesApiDeleteEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityApiTokens(requestParameters: EntitiesApiDeleteEntityApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete an Attribute Hierarchy
     * @param {EntitiesApiDeleteEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityAttributeHierarchies(requestParameters: EntitiesApiDeleteEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Color Pallette
     * @param {EntitiesApiDeleteEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityColorPalettes(requestParameters: EntitiesApiDeleteEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *  Context Security Police Directive
     * @summary Delete CSP Directives
     * @param {EntitiesApiDeleteEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityCspDirectives(requestParameters: EntitiesApiDeleteEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Custom Application Setting
     * @param {EntitiesApiDeleteEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityCustomApplicationSettings(requestParameters: EntitiesApiDeleteEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Plugin
     * @param {EntitiesApiDeleteEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityDashboardPlugins(requestParameters: EntitiesApiDeleteEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Delete Data Source entity
     * @param {EntitiesApiDeleteEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityDataSources(requestParameters: EntitiesApiDeleteEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Context Filter
     * @param {EntitiesApiDeleteEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityFilterContexts(requestParameters: EntitiesApiDeleteEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Deletes JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Delete Jwk
     * @param {EntitiesApiDeleteEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityJwks(requestParameters: EntitiesApiDeleteEntityJwksRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Metric
     * @param {EntitiesApiDeleteEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityMetrics(requestParameters: EntitiesApiDeleteEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete Organization entity
     * @param {EntitiesApiDeleteEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityOrganizationSettings(requestParameters: EntitiesApiDeleteEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete Theming
     * @param {EntitiesApiDeleteEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityThemes(requestParameters: EntitiesApiDeleteEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a User Data Filter
     * @param {EntitiesApiDeleteEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityUserDataFilters(requestParameters: EntitiesApiDeleteEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Delete UserGroup entity
     * @param {EntitiesApiDeleteEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityUserGroups(requestParameters: EntitiesApiDeleteEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a setting for a user
     * @param {EntitiesApiDeleteEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityUserSettings(requestParameters: EntitiesApiDeleteEntityUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * User - represents entity interacting with platform
     * @summary Delete User entity
     * @param {EntitiesApiDeleteEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityUsers(requestParameters: EntitiesApiDeleteEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Visualization Object
     * @param {EntitiesApiDeleteEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityVisualizationObjects(requestParameters: EntitiesApiDeleteEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Settings for Workspace Data Filter
     * @param {EntitiesApiDeleteEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityWorkspaceDataFilterSettings(requestParameters: EntitiesApiDeleteEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Workspace Data Filter
     * @param {EntitiesApiDeleteEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityWorkspaceDataFilters(requestParameters: EntitiesApiDeleteEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Setting for Workspace
     * @param {EntitiesApiDeleteEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityWorkspaceSettings(requestParameters: EntitiesApiDeleteEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Space of the shared interest
     * @summary Delete Workspace entity
     * @param {EntitiesApiDeleteEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    deleteEntityWorkspaces(requestParameters: EntitiesApiDeleteEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all Dashboards
     * @param {EntitiesApiGetAllEntitiesAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesAnalyticalDashboards(requestParameters: EntitiesApiGetAllEntitiesAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutList>;
    /**
     *
     * @summary List all api tokens for a user
     * @param {EntitiesApiGetAllEntitiesApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesApiTokens(requestParameters: EntitiesApiGetAllEntitiesApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiApiTokenOutList>;
    /**
     *
     * @summary Get all Attribute Hierarchies
     * @param {EntitiesApiGetAllEntitiesAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesAttributeHierarchies(requestParameters: EntitiesApiGetAllEntitiesAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutList>;
    /**
     *
     * @summary Get all Attributes
     * @param {EntitiesApiGetAllEntitiesAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesAttributes(requestParameters: EntitiesApiGetAllEntitiesAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeOutList>;
    /**
     *
     * @summary Get all Color Pallettes
     * @param {EntitiesApiGetAllEntitiesColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesColorPalettes(requestParameters: EntitiesApiGetAllEntitiesColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutList>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {EntitiesApiGetAllEntitiesCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesCspDirectives(requestParameters: EntitiesApiGetAllEntitiesCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutList>;
    /**
     *
     * @summary Get all Custom Application Settings
     * @param {EntitiesApiGetAllEntitiesCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesCustomApplicationSettings(requestParameters: EntitiesApiGetAllEntitiesCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutList>;
    /**
     *
     * @summary Get all Plugins
     * @param {EntitiesApiGetAllEntitiesDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesDashboardPlugins(requestParameters: EntitiesApiGetAllEntitiesDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutList>;
    /**
     *
     * @summary Get all Data Source Identifiers
     * @param {EntitiesApiGetAllEntitiesDataSourceIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesDataSourceIdentifiers(requestParameters: EntitiesApiGetAllEntitiesDataSourceIdentifiersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceIdentifierOutList>;
    /**
     *
     * @param {EntitiesApiGetAllEntitiesDataSourceTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesDataSourceTables(requestParameters: EntitiesApiGetAllEntitiesDataSourceTablesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceTableOutList>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entities
     * @param {EntitiesApiGetAllEntitiesDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesDataSources(requestParameters: EntitiesApiGetAllEntitiesDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutList>;
    /**
     *
     * @summary Get all Datasets
     * @param {EntitiesApiGetAllEntitiesDatasetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesDatasets(requestParameters: EntitiesApiGetAllEntitiesDatasetsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDatasetOutList>;
    /**
     * Space of the shared interest
     * @summary Get Entitlements
     * @param {EntitiesApiGetAllEntitiesEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesEntitlements(requestParameters: EntitiesApiGetAllEntitiesEntitlementsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiEntitlementOutList>;
    /**
     *
     * @summary Get all Facts
     * @param {EntitiesApiGetAllEntitiesFactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesFacts(requestParameters: EntitiesApiGetAllEntitiesFactsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFactOutList>;
    /**
     *
     * @summary Get all Context Filters
     * @param {EntitiesApiGetAllEntitiesFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesFilterContexts(requestParameters: EntitiesApiGetAllEntitiesFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutList>;
    /**
     * Returns all JSON web keys - used to verify JSON web tokens (Jwts)
     * @summary Get all Jwks
     * @param {EntitiesApiGetAllEntitiesJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesJwks(requestParameters: EntitiesApiGetAllEntitiesJwksRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiJwkOutList>;
    /**
     *
     * @summary Get all Labels
     * @param {EntitiesApiGetAllEntitiesLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesLabels(requestParameters: EntitiesApiGetAllEntitiesLabelsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiLabelOutList>;
    /**
     *
     * @summary Get all Metrics
     * @param {EntitiesApiGetAllEntitiesMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesMetrics(requestParameters: EntitiesApiGetAllEntitiesMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutList>;
    /**
     *
     * @summary Get Organization entities
     * @param {EntitiesApiGetAllEntitiesOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesOrganizationSettings(requestParameters: EntitiesApiGetAllEntitiesOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutList>;
    /**
     *
     * @summary Get all Theming entities
     * @param {EntitiesApiGetAllEntitiesThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesThemes(requestParameters: EntitiesApiGetAllEntitiesThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutList>;
    /**
     *
     * @summary Get all User Data Filters
     * @param {EntitiesApiGetAllEntitiesUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesUserDataFilters(requestParameters: EntitiesApiGetAllEntitiesUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutList>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entities
     * @param {EntitiesApiGetAllEntitiesUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesUserGroups(requestParameters: EntitiesApiGetAllEntitiesUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutList>;
    /**
     * UserIdentifier - represents entity interacting with platform
     * @summary Get UserIdentifier entities
     * @param {EntitiesApiGetAllEntitiesUserIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesUserIdentifiers(requestParameters: EntitiesApiGetAllEntitiesUserIdentifiersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserIdentifierOutList>;
    /**
     *
     * @summary List all settings for a user
     * @param {EntitiesApiGetAllEntitiesUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesUserSettings(requestParameters: EntitiesApiGetAllEntitiesUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserSettingOutList>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entities
     * @param {EntitiesApiGetAllEntitiesUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesUsers(requestParameters: EntitiesApiGetAllEntitiesUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutList>;
    /**
     *
     * @summary Get all Visualization Objects
     * @param {EntitiesApiGetAllEntitiesVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesVisualizationObjects(requestParameters: EntitiesApiGetAllEntitiesVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutList>;
    /**
     *
     * @summary Get all Settings for Workspace Data Filters
     * @param {EntitiesApiGetAllEntitiesWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesWorkspaceDataFilterSettings(requestParameters: EntitiesApiGetAllEntitiesWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList>;
    /**
     *
     * @summary Get all Workspace Data Filters
     * @param {EntitiesApiGetAllEntitiesWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesWorkspaceDataFilters(requestParameters: EntitiesApiGetAllEntitiesWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutList>;
    /**
     *
     * @summary Get all Setting for Workspaces
     * @param {EntitiesApiGetAllEntitiesWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesWorkspaceSettings(requestParameters: EntitiesApiGetAllEntitiesWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutList>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entities
     * @param {EntitiesApiGetAllEntitiesWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllEntitiesWorkspaces(requestParameters: EntitiesApiGetAllEntitiesWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutList>;
    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getAllOptions(options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getDataSourceDrivers(options?: AxiosRequestConfig): AxiosPromise<{
        [key: string]: string;
    }>;
    /**
     *
     * @summary Get a Dashboard
     * @param {EntitiesApiGetEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityAnalyticalDashboards(requestParameters: EntitiesApiGetEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @summary Get an API Token for a user
     * @param {EntitiesApiGetEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityApiTokens(requestParameters: EntitiesApiGetEntityApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @summary Get an Attribute Hierarchy
     * @param {EntitiesApiGetEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityAttributeHierarchies(requestParameters: EntitiesApiGetEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutDocument>;
    /**
     *
     * @summary Get an Attribute
     * @param {EntitiesApiGetEntityAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityAttributes(requestParameters: EntitiesApiGetEntityAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeOutDocument>;
    /**
     *
     * @summary Get Color Pallette
     * @param {EntitiesApiGetEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityColorPalettes(requestParameters: EntitiesApiGetEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutDocument>;
    /**
     *
     * @summary Get CookieSecurityConfiguration
     * @param {EntitiesApiGetEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityCookieSecurityConfigurations(requestParameters: EntitiesApiGetEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {EntitiesApiGetEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityCspDirectives(requestParameters: EntitiesApiGetEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutDocument>;
    /**
     *
     * @summary Get a Custom Application Setting
     * @param {EntitiesApiGetEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityCustomApplicationSettings(requestParameters: EntitiesApiGetEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;
    /**
     *
     * @summary Get a Plugin
     * @param {EntitiesApiGetEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityDashboardPlugins(requestParameters: EntitiesApiGetEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @summary Get Data Source Identifier
     * @param {EntitiesApiGetEntityDataSourceIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityDataSourceIdentifiers(requestParameters: EntitiesApiGetEntityDataSourceIdentifiersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceIdentifierOutDocument>;
    /**
     *
     * @param {EntitiesApiGetEntityDataSourceTablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityDataSourceTables(requestParameters: EntitiesApiGetEntityDataSourceTablesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceTableOutDocument>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entity
     * @param {EntitiesApiGetEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityDataSources(requestParameters: EntitiesApiGetEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @summary Get a Dataset
     * @param {EntitiesApiGetEntityDatasetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityDatasets(requestParameters: EntitiesApiGetEntityDatasetsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDatasetOutDocument>;
    /**
     * Space of the shared interest
     * @summary Get Entitlement
     * @param {EntitiesApiGetEntityEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityEntitlements(requestParameters: EntitiesApiGetEntityEntitlementsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiEntitlementOutDocument>;
    /**
     *
     * @summary Get a Fact
     * @param {EntitiesApiGetEntityFactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityFacts(requestParameters: EntitiesApiGetEntityFactsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFactOutDocument>;
    /**
     *
     * @summary Get a Context Filter
     * @param {EntitiesApiGetEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityFilterContexts(requestParameters: EntitiesApiGetEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     * Returns JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Get Jwk
     * @param {EntitiesApiGetEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityJwks(requestParameters: EntitiesApiGetEntityJwksRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiJwkOutDocument>;
    /**
     *
     * @summary Get a Label
     * @param {EntitiesApiGetEntityLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityLabels(requestParameters: EntitiesApiGetEntityLabelsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiLabelOutDocument>;
    /**
     *
     * @summary Get a Metric
     * @param {EntitiesApiGetEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityMetrics(requestParameters: EntitiesApiGetEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @summary Get Organization entity
     * @param {EntitiesApiGetEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityOrganizationSettings(requestParameters: EntitiesApiGetEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutDocument>;
    /**
     *
     * @summary Get Organizations
     * @param {EntitiesApiGetEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityOrganizations(requestParameters: EntitiesApiGetEntityOrganizationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     *
     * @summary Get Theming
     * @param {EntitiesApiGetEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityThemes(requestParameters: EntitiesApiGetEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutDocument>;
    /**
     *
     * @summary Get a User Data Filter
     * @param {EntitiesApiGetEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityUserDataFilters(requestParameters: EntitiesApiGetEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutDocument>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entity
     * @param {EntitiesApiGetEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityUserGroups(requestParameters: EntitiesApiGetEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     * UserIdentifier - represents basic informationZ about entity interacting with platform
     * @summary Get UserIdentifier entity
     * @param {EntitiesApiGetEntityUserIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityUserIdentifiers(requestParameters: EntitiesApiGetEntityUserIdentifiersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserIdentifierOutDocument>;
    /**
     *
     * @summary Get a setting for a user
     * @param {EntitiesApiGetEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityUserSettings(requestParameters: EntitiesApiGetEntityUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserSettingOutDocument>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entity
     * @param {EntitiesApiGetEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityUsers(requestParameters: EntitiesApiGetEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @summary Get a Visualization Object
     * @param {EntitiesApiGetEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityVisualizationObjects(requestParameters: EntitiesApiGetEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @summary Get a Setting for Workspace Data Filter
     * @param {EntitiesApiGetEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityWorkspaceDataFilterSettings(requestParameters: EntitiesApiGetEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @summary Get a Workspace Data Filter
     * @param {EntitiesApiGetEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityWorkspaceDataFilters(requestParameters: EntitiesApiGetEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @summary Get a Setting for Workspace
     * @param {EntitiesApiGetEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityWorkspaceSettings(requestParameters: EntitiesApiGetEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entity
     * @param {EntitiesApiGetEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getEntityWorkspaces(requestParameters: EntitiesApiGetEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     * Gets a basic information about organization.
     * @summary Get current organization info
     * @param {EntitiesApiGetOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    getOrganization(requestParameters: EntitiesApiGetOrganizationRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Patch a Dashboard
     * @param {EntitiesApiPatchEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityAnalyticalDashboards(requestParameters: EntitiesApiPatchEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @summary Patch an Attribute Hierarchy
     * @param {EntitiesApiPatchEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityAttributeHierarchies(requestParameters: EntitiesApiPatchEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutDocument>;
    /**
     *
     * @summary Patch Color Pallette
     * @param {EntitiesApiPatchEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityColorPalettes(requestParameters: EntitiesApiPatchEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutDocument>;
    /**
     *
     * @summary Patch CookieSecurityConfiguration
     * @param {EntitiesApiPatchEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityCookieSecurityConfigurations(requestParameters: EntitiesApiPatchEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *  Context Security Police Directive
     * @summary Patch CSP Directives
     * @param {EntitiesApiPatchEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityCspDirectives(requestParameters: EntitiesApiPatchEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutDocument>;
    /**
     *
     * @summary Patch a Custom Application Setting
     * @param {EntitiesApiPatchEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityCustomApplicationSettings(requestParameters: EntitiesApiPatchEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;
    /**
     *
     * @summary Patch a Plugin
     * @param {EntitiesApiPatchEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityDashboardPlugins(requestParameters: EntitiesApiPatchEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Patch Data Source entity
     * @param {EntitiesApiPatchEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityDataSources(requestParameters: EntitiesApiPatchEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @summary Patch a Context Filter
     * @param {EntitiesApiPatchEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityFilterContexts(requestParameters: EntitiesApiPatchEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     * Patches JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Patch Jwk
     * @param {EntitiesApiPatchEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityJwks(requestParameters: EntitiesApiPatchEntityJwksRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiJwkOutDocument>;
    /**
     *
     * @summary Patch a Metric
     * @param {EntitiesApiPatchEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityMetrics(requestParameters: EntitiesApiPatchEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @summary Patch Organization entity
     * @param {EntitiesApiPatchEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityOrganizationSettings(requestParameters: EntitiesApiPatchEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutDocument>;
    /**
     *
     * @summary Patch Organization
     * @param {EntitiesApiPatchEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityOrganizations(requestParameters: EntitiesApiPatchEntityOrganizationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     *
     * @summary Patch Theming
     * @param {EntitiesApiPatchEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityThemes(requestParameters: EntitiesApiPatchEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutDocument>;
    /**
     *
     * @summary Patch a User Data Filter
     * @param {EntitiesApiPatchEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityUserDataFilters(requestParameters: EntitiesApiPatchEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutDocument>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Patch UserGroup entity
     * @param {EntitiesApiPatchEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityUserGroups(requestParameters: EntitiesApiPatchEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     * User - represents entity interacting with platform
     * @summary Patch User entity
     * @param {EntitiesApiPatchEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityUsers(requestParameters: EntitiesApiPatchEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @summary Patch a Visualization Object
     * @param {EntitiesApiPatchEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityVisualizationObjects(requestParameters: EntitiesApiPatchEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @summary Patch a Settings for Workspace Data Filter
     * @param {EntitiesApiPatchEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityWorkspaceDataFilterSettings(requestParameters: EntitiesApiPatchEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @summary Patch a Workspace Data Filter
     * @param {EntitiesApiPatchEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityWorkspaceDataFilters(requestParameters: EntitiesApiPatchEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @summary Patch a Setting for Workspace
     * @param {EntitiesApiPatchEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityWorkspaceSettings(requestParameters: EntitiesApiPatchEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;
    /**
     * Space of the shared interest
     * @summary Patch Workspace entity
     * @param {EntitiesApiPatchEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    patchEntityWorkspaces(requestParameters: EntitiesApiPatchEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     *
     * @summary Put Dashboards
     * @param {EntitiesApiUpdateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityAnalyticalDashboards(requestParameters: EntitiesApiUpdateEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @summary Put new API token for the user
     * @param {EntitiesApiUpdateEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityApiTokens(requestParameters: EntitiesApiUpdateEntityApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @summary Put an Attribute Hierarchy
     * @param {EntitiesApiUpdateEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityAttributeHierarchies(requestParameters: EntitiesApiUpdateEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutDocument>;
    /**
     *
     * @summary Put Color Pallette
     * @param {EntitiesApiUpdateEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityColorPalettes(requestParameters: EntitiesApiUpdateEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutDocument>;
    /**
     *
     * @summary Put CookieSecurityConfiguration
     * @param {EntitiesApiUpdateEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityCookieSecurityConfigurations(requestParameters: EntitiesApiUpdateEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *  Context Security Police Directive
     * @summary Put CSP Directives
     * @param {EntitiesApiUpdateEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityCspDirectives(requestParameters: EntitiesApiUpdateEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutDocument>;
    /**
     *
     * @summary Put a Custom Application Setting
     * @param {EntitiesApiUpdateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityCustomApplicationSettings(requestParameters: EntitiesApiUpdateEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;
    /**
     *
     * @summary Put a Plugin
     * @param {EntitiesApiUpdateEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityDashboardPlugins(requestParameters: EntitiesApiUpdateEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Put Data Source entity
     * @param {EntitiesApiUpdateEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityDataSources(requestParameters: EntitiesApiUpdateEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     *
     * @summary Put a Context Filter
     * @param {EntitiesApiUpdateEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityFilterContexts(requestParameters: EntitiesApiUpdateEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     * Updates JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Put Jwk
     * @param {EntitiesApiUpdateEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityJwks(requestParameters: EntitiesApiUpdateEntityJwksRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiJwkOutDocument>;
    /**
     *
     * @summary Put a Metric
     * @param {EntitiesApiUpdateEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityMetrics(requestParameters: EntitiesApiUpdateEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @summary Put Organization entity
     * @param {EntitiesApiUpdateEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityOrganizationSettings(requestParameters: EntitiesApiUpdateEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutDocument>;
    /**
     *
     * @summary Put Organization
     * @param {EntitiesApiUpdateEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityOrganizations(requestParameters: EntitiesApiUpdateEntityOrganizationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     *
     * @summary Put Theming
     * @param {EntitiesApiUpdateEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityThemes(requestParameters: EntitiesApiUpdateEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutDocument>;
    /**
     *
     * @summary Put a User Data Filter
     * @param {EntitiesApiUpdateEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityUserDataFilters(requestParameters: EntitiesApiUpdateEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutDocument>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Put UserGroup entity
     * @param {EntitiesApiUpdateEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityUserGroups(requestParameters: EntitiesApiUpdateEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     *
     * @summary Put new user settings for the user
     * @param {EntitiesApiUpdateEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityUserSettings(requestParameters: EntitiesApiUpdateEntityUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserSettingOutDocument>;
    /**
     * User - represents entity interacting with platform
     * @summary Put User entity
     * @param {EntitiesApiUpdateEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityUsers(requestParameters: EntitiesApiUpdateEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutDocument>;
    /**
     *
     * @summary Put a Visualization Object
     * @param {EntitiesApiUpdateEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityVisualizationObjects(requestParameters: EntitiesApiUpdateEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @summary Put a Settings for Workspace Data Filter
     * @param {EntitiesApiUpdateEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityWorkspaceDataFilterSettings(requestParameters: EntitiesApiUpdateEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @summary Put a Workspace Data Filter
     * @param {EntitiesApiUpdateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityWorkspaceDataFilters(requestParameters: EntitiesApiUpdateEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @summary Put a Setting for a Workspace
     * @param {EntitiesApiUpdateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityWorkspaceSettings(requestParameters: EntitiesApiUpdateEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;
    /**
     * Space of the shared interest
     * @summary Put Workspace entity
     * @param {EntitiesApiUpdateEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitiesApiInterface
     */
    updateEntityWorkspaces(requestParameters: EntitiesApiUpdateEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutDocument>;
}

/**
 * Request parameters for patchEntityAnalyticalDashboards operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityAnalyticalDashboardsRequest
 */
export declare interface EntitiesApiPatchEntityAnalyticalDashboardsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityAnalyticalDashboards
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityAnalyticalDashboards
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPatchDocument}
     * @memberof EntitiesApiPatchEntityAnalyticalDashboards
     */
    readonly jsonApiAnalyticalDashboardPatchDocument: JsonApiAnalyticalDashboardPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityAnalyticalDashboards
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiPatchEntityAnalyticalDashboards
     */
    readonly include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for patchEntityAttributeHierarchies operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityAttributeHierarchiesRequest
 */
export declare interface EntitiesApiPatchEntityAttributeHierarchiesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityAttributeHierarchies
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityAttributeHierarchies
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyPatchDocument}
     * @memberof EntitiesApiPatchEntityAttributeHierarchies
     */
    readonly jsonApiAttributeHierarchyPatchDocument: JsonApiAttributeHierarchyPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityAttributeHierarchies
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiPatchEntityAttributeHierarchies
     */
    readonly include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for patchEntityColorPalettes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityColorPalettesRequest
 */
export declare interface EntitiesApiPatchEntityColorPalettesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityColorPalettes
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiColorPalettePatchDocument}
     * @memberof EntitiesApiPatchEntityColorPalettes
     */
    readonly jsonApiColorPalettePatchDocument: JsonApiColorPalettePatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityColorPalettes
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityCookieSecurityConfigurations operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityCookieSecurityConfigurationsRequest
 */
export declare interface EntitiesApiPatchEntityCookieSecurityConfigurationsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityCookieSecurityConfigurations
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiCookieSecurityConfigurationPatchDocument}
     * @memberof EntitiesApiPatchEntityCookieSecurityConfigurations
     */
    readonly jsonApiCookieSecurityConfigurationPatchDocument: JsonApiCookieSecurityConfigurationPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityCookieSecurityConfigurations
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityCspDirectives operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityCspDirectivesRequest
 */
export declare interface EntitiesApiPatchEntityCspDirectivesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityCspDirectives
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiCspDirectivePatchDocument}
     * @memberof EntitiesApiPatchEntityCspDirectives
     */
    readonly jsonApiCspDirectivePatchDocument: JsonApiCspDirectivePatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityCspDirectives
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityCustomApplicationSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityCustomApplicationSettingsRequest
 */
export declare interface EntitiesApiPatchEntityCustomApplicationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityCustomApplicationSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityCustomApplicationSettings
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiCustomApplicationSettingPatchDocument}
     * @memberof EntitiesApiPatchEntityCustomApplicationSettings
     */
    readonly jsonApiCustomApplicationSettingPatchDocument: JsonApiCustomApplicationSettingPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityCustomApplicationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityDashboardPlugins operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityDashboardPluginsRequest
 */
export declare interface EntitiesApiPatchEntityDashboardPluginsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityDashboardPlugins
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityDashboardPlugins
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiDashboardPluginPatchDocument}
     * @memberof EntitiesApiPatchEntityDashboardPlugins
     */
    readonly jsonApiDashboardPluginPatchDocument: JsonApiDashboardPluginPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityDashboardPlugins
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiPatchEntityDashboardPlugins
     */
    readonly include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for patchEntityDataSources operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityDataSourcesRequest
 */
export declare interface EntitiesApiPatchEntityDataSourcesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityDataSources
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiDataSourcePatchDocument}
     * @memberof EntitiesApiPatchEntityDataSources
     */
    readonly jsonApiDataSourcePatchDocument: JsonApiDataSourcePatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityDataSources
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityFilterContexts operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityFilterContextsRequest
 */
export declare interface EntitiesApiPatchEntityFilterContextsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityFilterContexts
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityFilterContexts
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiFilterContextPatchDocument}
     * @memberof EntitiesApiPatchEntityFilterContexts
     */
    readonly jsonApiFilterContextPatchDocument: JsonApiFilterContextPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityFilterContexts
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>}
     * @memberof EntitiesApiPatchEntityFilterContexts
     */
    readonly include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
}

/**
 * Request parameters for patchEntityJwks operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityJwksRequest
 */
export declare interface EntitiesApiPatchEntityJwksRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityJwks
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiJwkPatchDocument}
     * @memberof EntitiesApiPatchEntityJwks
     */
    readonly jsonApiJwkPatchDocument: JsonApiJwkPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityJwks
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityMetrics operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityMetricsRequest
 */
export declare interface EntitiesApiPatchEntityMetricsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityMetrics
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityMetrics
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiMetricPatchDocument}
     * @memberof EntitiesApiPatchEntityMetrics
     */
    readonly jsonApiMetricPatchDocument: JsonApiMetricPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityMetrics
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiPatchEntityMetrics
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for patchEntityOrganizationSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityOrganizationSettingsRequest
 */
export declare interface EntitiesApiPatchEntityOrganizationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityOrganizationSettings
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiOrganizationSettingPatchDocument}
     * @memberof EntitiesApiPatchEntityOrganizationSettings
     */
    readonly jsonApiOrganizationSettingPatchDocument: JsonApiOrganizationSettingPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityOrganizationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityOrganizations operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityOrganizationsRequest
 */
export declare interface EntitiesApiPatchEntityOrganizationsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityOrganizations
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiOrganizationPatchDocument}
     * @memberof EntitiesApiPatchEntityOrganizations
     */
    readonly jsonApiOrganizationPatchDocument: JsonApiOrganizationPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityOrganizations
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>}
     * @memberof EntitiesApiPatchEntityOrganizations
     */
    readonly include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">;
}

/**
 * Request parameters for patchEntityThemes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityThemesRequest
 */
export declare interface EntitiesApiPatchEntityThemesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityThemes
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiThemePatchDocument}
     * @memberof EntitiesApiPatchEntityThemes
     */
    readonly jsonApiThemePatchDocument: JsonApiThemePatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityThemes
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityUserDataFilters operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityUserDataFiltersRequest
 */
export declare interface EntitiesApiPatchEntityUserDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityUserDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityUserDataFilters
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiUserDataFilterPatchDocument}
     * @memberof EntitiesApiPatchEntityUserDataFilters
     */
    readonly jsonApiUserDataFilterPatchDocument: JsonApiUserDataFilterPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityUserDataFilters
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>}
     * @memberof EntitiesApiPatchEntityUserDataFilters
     */
    readonly include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">;
}

/**
 * Request parameters for patchEntityUserGroups operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityUserGroupsRequest
 */
export declare interface EntitiesApiPatchEntityUserGroupsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityUserGroups
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiUserGroupPatchDocument}
     * @memberof EntitiesApiPatchEntityUserGroups
     */
    readonly jsonApiUserGroupPatchDocument: JsonApiUserGroupPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityUserGroups
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'parents' | 'ALL'>}
     * @memberof EntitiesApiPatchEntityUserGroups
     */
    readonly include?: Array<"userGroups" | "parents" | "ALL">;
}

/**
 * Request parameters for patchEntityUsers operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityUsersRequest
 */
export declare interface EntitiesApiPatchEntityUsersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityUsers
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiUserPatchDocument}
     * @memberof EntitiesApiPatchEntityUsers
     */
    readonly jsonApiUserPatchDocument: JsonApiUserPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityUsers
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'ALL'>}
     * @memberof EntitiesApiPatchEntityUsers
     */
    readonly include?: Array<"userGroups" | "ALL">;
}

/**
 * Request parameters for patchEntityVisualizationObjects operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityVisualizationObjectsRequest
 */
export declare interface EntitiesApiPatchEntityVisualizationObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityVisualizationObjects
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityVisualizationObjects
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiVisualizationObjectPatchDocument}
     * @memberof EntitiesApiPatchEntityVisualizationObjects
     */
    readonly jsonApiVisualizationObjectPatchDocument: JsonApiVisualizationObjectPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityVisualizationObjects
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiPatchEntityVisualizationObjects
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for patchEntityWorkspaceDataFilterSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityWorkspaceDataFilterSettingsRequest
 */
export declare interface EntitiesApiPatchEntityWorkspaceDataFilterSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityWorkspaceDataFilterSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityWorkspaceDataFilterSettings
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingPatchDocument}
     * @memberof EntitiesApiPatchEntityWorkspaceDataFilterSettings
     */
    readonly jsonApiWorkspaceDataFilterSettingPatchDocument: JsonApiWorkspaceDataFilterSettingPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityWorkspaceDataFilterSettings
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>}
     * @memberof EntitiesApiPatchEntityWorkspaceDataFilterSettings
     */
    readonly include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;
}

/**
 * Request parameters for patchEntityWorkspaceDataFilters operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityWorkspaceDataFiltersRequest
 */
export declare interface EntitiesApiPatchEntityWorkspaceDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityWorkspaceDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityWorkspaceDataFilters
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterPatchDocument}
     * @memberof EntitiesApiPatchEntityWorkspaceDataFilters
     */
    readonly jsonApiWorkspaceDataFilterPatchDocument: JsonApiWorkspaceDataFilterPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityWorkspaceDataFilters
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>}
     * @memberof EntitiesApiPatchEntityWorkspaceDataFilters
     */
    readonly include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
}

/**
 * Request parameters for patchEntityWorkspaceSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityWorkspaceSettingsRequest
 */
export declare interface EntitiesApiPatchEntityWorkspaceSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityWorkspaceSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityWorkspaceSettings
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPatchDocument}
     * @memberof EntitiesApiPatchEntityWorkspaceSettings
     */
    readonly jsonApiWorkspaceSettingPatchDocument: JsonApiWorkspaceSettingPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityWorkspaceSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityWorkspaces operation in EntitiesApi.
 * @export
 * @interface EntitiesApiPatchEntityWorkspacesRequest
 */
export declare interface EntitiesApiPatchEntityWorkspacesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiPatchEntityWorkspaces
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiWorkspacePatchDocument}
     * @memberof EntitiesApiPatchEntityWorkspaces
     */
    readonly jsonApiWorkspacePatchDocument: JsonApiWorkspacePatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiPatchEntityWorkspaces
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaces' | 'parent' | 'ALL'>}
     * @memberof EntitiesApiPatchEntityWorkspaces
     */
    readonly include?: Array<"workspaces" | "parent" | "ALL">;
}

/**
 * Request parameters for updateEntityAnalyticalDashboards operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityAnalyticalDashboardsRequest
 */
export declare interface EntitiesApiUpdateEntityAnalyticalDashboardsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityAnalyticalDashboards
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityAnalyticalDashboards
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardInDocument}
     * @memberof EntitiesApiUpdateEntityAnalyticalDashboards
     */
    readonly jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityAnalyticalDashboards
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiUpdateEntityAnalyticalDashboards
     */
    readonly include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for updateEntityApiTokens operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityApiTokensRequest
 */
export declare interface EntitiesApiUpdateEntityApiTokensRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityApiTokens
     */
    readonly userId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityApiTokens
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiApiTokenInDocument}
     * @memberof EntitiesApiUpdateEntityApiTokens
     */
    readonly jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityApiTokens
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityAttributeHierarchies operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityAttributeHierarchiesRequest
 */
export declare interface EntitiesApiUpdateEntityAttributeHierarchiesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityAttributeHierarchies
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityAttributeHierarchies
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyInDocument}
     * @memberof EntitiesApiUpdateEntityAttributeHierarchies
     */
    readonly jsonApiAttributeHierarchyInDocument: JsonApiAttributeHierarchyInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityAttributeHierarchies
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiUpdateEntityAttributeHierarchies
     */
    readonly include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for updateEntityColorPalettes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityColorPalettesRequest
 */
export declare interface EntitiesApiUpdateEntityColorPalettesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityColorPalettes
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiColorPaletteInDocument}
     * @memberof EntitiesApiUpdateEntityColorPalettes
     */
    readonly jsonApiColorPaletteInDocument: JsonApiColorPaletteInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityColorPalettes
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityCookieSecurityConfigurations operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityCookieSecurityConfigurationsRequest
 */
export declare interface EntitiesApiUpdateEntityCookieSecurityConfigurationsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityCookieSecurityConfigurations
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiCookieSecurityConfigurationInDocument}
     * @memberof EntitiesApiUpdateEntityCookieSecurityConfigurations
     */
    readonly jsonApiCookieSecurityConfigurationInDocument: JsonApiCookieSecurityConfigurationInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityCookieSecurityConfigurations
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityCspDirectives operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityCspDirectivesRequest
 */
export declare interface EntitiesApiUpdateEntityCspDirectivesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityCspDirectives
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiCspDirectiveInDocument}
     * @memberof EntitiesApiUpdateEntityCspDirectives
     */
    readonly jsonApiCspDirectiveInDocument: JsonApiCspDirectiveInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityCspDirectives
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityCustomApplicationSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityCustomApplicationSettingsRequest
 */
export declare interface EntitiesApiUpdateEntityCustomApplicationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityCustomApplicationSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityCustomApplicationSettings
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiCustomApplicationSettingInDocument}
     * @memberof EntitiesApiUpdateEntityCustomApplicationSettings
     */
    readonly jsonApiCustomApplicationSettingInDocument: JsonApiCustomApplicationSettingInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityCustomApplicationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityDashboardPlugins operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityDashboardPluginsRequest
 */
export declare interface EntitiesApiUpdateEntityDashboardPluginsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityDashboardPlugins
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityDashboardPlugins
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiDashboardPluginInDocument}
     * @memberof EntitiesApiUpdateEntityDashboardPlugins
     */
    readonly jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityDashboardPlugins
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiUpdateEntityDashboardPlugins
     */
    readonly include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for updateEntityDataSources operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityDataSourcesRequest
 */
export declare interface EntitiesApiUpdateEntityDataSourcesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityDataSources
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiDataSourceInDocument}
     * @memberof EntitiesApiUpdateEntityDataSources
     */
    readonly jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityDataSources
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityFilterContexts operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityFilterContextsRequest
 */
export declare interface EntitiesApiUpdateEntityFilterContextsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityFilterContexts
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityFilterContexts
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiFilterContextInDocument}
     * @memberof EntitiesApiUpdateEntityFilterContexts
     */
    readonly jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityFilterContexts
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>}
     * @memberof EntitiesApiUpdateEntityFilterContexts
     */
    readonly include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
}

/**
 * Request parameters for updateEntityJwks operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityJwksRequest
 */
export declare interface EntitiesApiUpdateEntityJwksRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityJwks
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiJwkInDocument}
     * @memberof EntitiesApiUpdateEntityJwks
     */
    readonly jsonApiJwkInDocument: JsonApiJwkInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityJwks
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityMetrics operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityMetricsRequest
 */
export declare interface EntitiesApiUpdateEntityMetricsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityMetrics
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityMetrics
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiMetricInDocument}
     * @memberof EntitiesApiUpdateEntityMetrics
     */
    readonly jsonApiMetricInDocument: JsonApiMetricInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityMetrics
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiUpdateEntityMetrics
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for updateEntityOrganizationSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityOrganizationSettingsRequest
 */
export declare interface EntitiesApiUpdateEntityOrganizationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityOrganizationSettings
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiOrganizationSettingInDocument}
     * @memberof EntitiesApiUpdateEntityOrganizationSettings
     */
    readonly jsonApiOrganizationSettingInDocument: JsonApiOrganizationSettingInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityOrganizationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityOrganizations operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityOrganizationsRequest
 */
export declare interface EntitiesApiUpdateEntityOrganizationsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityOrganizations
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiOrganizationInDocument}
     * @memberof EntitiesApiUpdateEntityOrganizations
     */
    readonly jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityOrganizations
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>}
     * @memberof EntitiesApiUpdateEntityOrganizations
     */
    readonly include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">;
}

/**
 * Request parameters for updateEntityThemes operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityThemesRequest
 */
export declare interface EntitiesApiUpdateEntityThemesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityThemes
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiThemeInDocument}
     * @memberof EntitiesApiUpdateEntityThemes
     */
    readonly jsonApiThemeInDocument: JsonApiThemeInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityThemes
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityUserDataFilters operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityUserDataFiltersRequest
 */
export declare interface EntitiesApiUpdateEntityUserDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityUserDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityUserDataFilters
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiUserDataFilterInDocument}
     * @memberof EntitiesApiUpdateEntityUserDataFilters
     */
    readonly jsonApiUserDataFilterInDocument: JsonApiUserDataFilterInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityUserDataFilters
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>}
     * @memberof EntitiesApiUpdateEntityUserDataFilters
     */
    readonly include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">;
}

/**
 * Request parameters for updateEntityUserGroups operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityUserGroupsRequest
 */
export declare interface EntitiesApiUpdateEntityUserGroupsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityUserGroups
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiUserGroupInDocument}
     * @memberof EntitiesApiUpdateEntityUserGroups
     */
    readonly jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityUserGroups
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'parents' | 'ALL'>}
     * @memberof EntitiesApiUpdateEntityUserGroups
     */
    readonly include?: Array<"userGroups" | "parents" | "ALL">;
}

/**
 * Request parameters for updateEntityUserSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityUserSettingsRequest
 */
export declare interface EntitiesApiUpdateEntityUserSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityUserSettings
     */
    readonly userId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityUserSettings
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiUserSettingInDocument}
     * @memberof EntitiesApiUpdateEntityUserSettings
     */
    readonly jsonApiUserSettingInDocument: JsonApiUserSettingInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityUserSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityUsers operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityUsersRequest
 */
export declare interface EntitiesApiUpdateEntityUsersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityUsers
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiUserInDocument}
     * @memberof EntitiesApiUpdateEntityUsers
     */
    readonly jsonApiUserInDocument: JsonApiUserInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityUsers
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'ALL'>}
     * @memberof EntitiesApiUpdateEntityUsers
     */
    readonly include?: Array<"userGroups" | "ALL">;
}

/**
 * Request parameters for updateEntityVisualizationObjects operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityVisualizationObjectsRequest
 */
export declare interface EntitiesApiUpdateEntityVisualizationObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityVisualizationObjects
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityVisualizationObjects
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiVisualizationObjectInDocument}
     * @memberof EntitiesApiUpdateEntityVisualizationObjects
     */
    readonly jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityVisualizationObjects
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof EntitiesApiUpdateEntityVisualizationObjects
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for updateEntityWorkspaceDataFilterSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityWorkspaceDataFilterSettingsRequest
 */
export declare interface EntitiesApiUpdateEntityWorkspaceDataFilterSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityWorkspaceDataFilterSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityWorkspaceDataFilterSettings
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingInDocument}
     * @memberof EntitiesApiUpdateEntityWorkspaceDataFilterSettings
     */
    readonly jsonApiWorkspaceDataFilterSettingInDocument: JsonApiWorkspaceDataFilterSettingInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityWorkspaceDataFilterSettings
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>}
     * @memberof EntitiesApiUpdateEntityWorkspaceDataFilterSettings
     */
    readonly include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;
}

/**
 * Request parameters for updateEntityWorkspaceDataFilters operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityWorkspaceDataFiltersRequest
 */
export declare interface EntitiesApiUpdateEntityWorkspaceDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityWorkspaceDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityWorkspaceDataFilters
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInDocument}
     * @memberof EntitiesApiUpdateEntityWorkspaceDataFilters
     */
    readonly jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityWorkspaceDataFilters
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>}
     * @memberof EntitiesApiUpdateEntityWorkspaceDataFilters
     */
    readonly include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
}

/**
 * Request parameters for updateEntityWorkspaceSettings operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityWorkspaceSettingsRequest
 */
export declare interface EntitiesApiUpdateEntityWorkspaceSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityWorkspaceSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityWorkspaceSettings
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingInDocument}
     * @memberof EntitiesApiUpdateEntityWorkspaceSettings
     */
    readonly jsonApiWorkspaceSettingInDocument: JsonApiWorkspaceSettingInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityWorkspaceSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityWorkspaces operation in EntitiesApi.
 * @export
 * @interface EntitiesApiUpdateEntityWorkspacesRequest
 */
export declare interface EntitiesApiUpdateEntityWorkspacesRequest {
    /**
     *
     * @type {string}
     * @memberof EntitiesApiUpdateEntityWorkspaces
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiWorkspaceInDocument}
     * @memberof EntitiesApiUpdateEntityWorkspaces
     */
    readonly jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitiesApiUpdateEntityWorkspaces
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaces' | 'parent' | 'ALL'>}
     * @memberof EntitiesApiUpdateEntityWorkspaces
     */
    readonly include?: Array<"workspaces" | "parent" | "ALL">;
}

/**
 * EntitlementApi - object-oriented interface
 * @export
 * @class EntitlementApi
 * @extends {BaseAPI}
 */
export declare class EntitlementApi extends MetadataBaseApi implements EntitlementApiInterface {
    /**
     * Space of the shared interest
     * @summary Get Entitlements
     * @param {EntitlementApiGetAllEntitiesEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementApi
     */
    getAllEntitiesEntitlements(requestParameters?: EntitlementApiGetAllEntitiesEntitlementsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiEntitlementOutList, any>>;
    /**
     * Space of the shared interest
     * @summary Get Entitlement
     * @param {EntitlementApiGetEntityEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementApi
     */
    getEntityEntitlements(requestParameters: EntitlementApiGetEntityEntitlementsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiEntitlementOutDocument, any>>;
    /**
     * Resolves values of available entitlements for the organization.
     * @summary Values for all public entitlements.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementApi
     */
    resolveAllEntitlements(options?: AxiosRequestConfig): Promise<AxiosResponse<ApiEntitlement[], any>>;
    /**
     * Resolves values for requested entitlements in the organization.
     * @summary Values for requested public entitlements.
     * @param {EntitlementApiResolveRequestedEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementApi
     */
    resolveRequestedEntitlements(requestParameters: EntitlementApiResolveRequestedEntitlementsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ApiEntitlement[], any>>;
}

/**
 * EntitlementApi - axios parameter creator
 * @export
 */
export declare const EntitlementApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     * Space of the shared interest
     * @summary Get Entitlements
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesEntitlements: (filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Space of the shared interest
     * @summary Get Entitlement
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityEntitlements: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Resolves values of available entitlements for the organization.
     * @summary Values for all public entitlements.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveAllEntitlements: (options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Resolves values for requested entitlements in the organization.
     * @summary Values for requested public entitlements.
     * @param {EntitlementsRequest} entitlementsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveRequestedEntitlements: (entitlementsRequest: EntitlementsRequest, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * EntitlementApi - factory interface
 * @export
 */
export declare const EntitlementApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Space of the shared interest
     * @summary Get Entitlements
     * @param {EntitlementApiGetAllEntitiesEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesEntitlements(requestParameters: EntitlementApiGetAllEntitiesEntitlementsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiEntitlementOutList>;
    /**
     * Space of the shared interest
     * @summary Get Entitlement
     * @param {EntitlementApiGetEntityEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityEntitlements(requestParameters: EntitlementApiGetEntityEntitlementsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiEntitlementOutDocument>;
    /**
     * Resolves values of available entitlements for the organization.
     * @summary Values for all public entitlements.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveAllEntitlements(options?: AxiosRequestConfig): AxiosPromise<Array<ApiEntitlement>>;
    /**
     * Resolves values for requested entitlements in the organization.
     * @summary Values for requested public entitlements.
     * @param {EntitlementApiResolveRequestedEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveRequestedEntitlements(requestParameters: EntitlementApiResolveRequestedEntitlementsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ApiEntitlement>>;
};

/**
 * EntitlementApi - functional programming interface
 * @export
 */
export declare const EntitlementApiFp: (configuration?: MetadataConfiguration) => {
    /**
     * Space of the shared interest
     * @summary Get Entitlements
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesEntitlements(filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiEntitlementOutList>>;
    /**
     * Space of the shared interest
     * @summary Get Entitlement
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityEntitlements(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiEntitlementOutDocument>>;
    /**
     * Resolves values of available entitlements for the organization.
     * @summary Values for all public entitlements.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveAllEntitlements(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiEntitlement>>>;
    /**
     * Resolves values for requested entitlements in the organization.
     * @summary Values for requested public entitlements.
     * @param {EntitlementsRequest} entitlementsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveRequestedEntitlements(entitlementsRequest: EntitlementsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiEntitlement>>>;
};

/**
 * Request parameters for getAllEntitiesEntitlements operation in EntitlementApi.
 * @export
 * @interface EntitlementApiGetAllEntitiesEntitlementsRequest
 */
export declare interface EntitlementApiGetAllEntitiesEntitlementsRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitlementApiGetAllEntitiesEntitlements
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof EntitlementApiGetAllEntitiesEntitlements
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof EntitlementApiGetAllEntitiesEntitlements
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof EntitlementApiGetAllEntitiesEntitlements
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getEntityEntitlements operation in EntitlementApi.
 * @export
 * @interface EntitlementApiGetEntityEntitlementsRequest
 */
export declare interface EntitlementApiGetEntityEntitlementsRequest {
    /**
     *
     * @type {string}
     * @memberof EntitlementApiGetEntityEntitlements
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof EntitlementApiGetEntityEntitlements
     */
    readonly filter?: string;
}

/**
 * EntitlementApi - interface
 * @export
 * @interface EntitlementApi
 */
export declare interface EntitlementApiInterface {
    /**
     * Space of the shared interest
     * @summary Get Entitlements
     * @param {EntitlementApiGetAllEntitiesEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementApiInterface
     */
    getAllEntitiesEntitlements(requestParameters: EntitlementApiGetAllEntitiesEntitlementsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiEntitlementOutList>;
    /**
     * Space of the shared interest
     * @summary Get Entitlement
     * @param {EntitlementApiGetEntityEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementApiInterface
     */
    getEntityEntitlements(requestParameters: EntitlementApiGetEntityEntitlementsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiEntitlementOutDocument>;
    /**
     * Resolves values of available entitlements for the organization.
     * @summary Values for all public entitlements.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementApiInterface
     */
    resolveAllEntitlements(options?: AxiosRequestConfig): AxiosPromise<Array<ApiEntitlement>>;
    /**
     * Resolves values for requested entitlements in the organization.
     * @summary Values for requested public entitlements.
     * @param {EntitlementApiResolveRequestedEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntitlementApiInterface
     */
    resolveRequestedEntitlements(requestParameters: EntitlementApiResolveRequestedEntitlementsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ApiEntitlement>>;
}

/**
 * Request parameters for resolveRequestedEntitlements operation in EntitlementApi.
 * @export
 * @interface EntitlementApiResolveRequestedEntitlementsRequest
 */
export declare interface EntitlementApiResolveRequestedEntitlementsRequest {
    /**
     *
     * @type {EntitlementsRequest}
     * @memberof EntitlementApiResolveRequestedEntitlements
     */
    readonly entitlementsRequest: EntitlementsRequest;
}

/**
 *
 * @export
 * @interface EntitlementsRequest
 */
export declare interface EntitlementsRequest {
    /**
     *
     * @type {Array<string>}
     * @memberof EntitlementsRequest
     */
    entitlementsName: Array<EntitlementsRequestEntitlementsNameEnum>;
}

export declare const EntitlementsRequestEntitlementsNameEnum: {
    readonly CACHE_STRATEGY: "CacheStrategy";
    readonly CONTRACT: "Contract";
    readonly CUSTOM_THEMING: "CustomTheming";
    readonly EXTRA_CACHE: "ExtraCache";
    readonly PDF_EXPORTS: "PdfExports";
    readonly MANAGED_OIDC: "ManagedOIDC";
    readonly UI_LOCALIZATION: "UiLocalization";
    readonly TIER: "Tier";
    readonly USER_COUNT: "UserCount";
    readonly UNLIMITED_USERS: "UnlimitedUsers";
    readonly UNLIMITED_WORKSPACES: "UnlimitedWorkspaces";
    readonly WHITE_LABELING: "WhiteLabeling";
    readonly WORKSPACE_COUNT: "WorkspaceCount";
};

export declare type EntitlementsRequestEntitlementsNameEnum = typeof EntitlementsRequestEntitlementsNameEnum[keyof typeof EntitlementsRequestEntitlementsNameEnum];

/**
 *
 * @export
 * @interface EntityIdentifier
 */
export declare interface EntityIdentifier {
    /**
     * Object identifier.
     * @type {string}
     * @memberof EntityIdentifier
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof EntityIdentifier
     */
    type: EntityIdentifierTypeEnum;
}

export declare const EntityIdentifierTypeEnum: {
    readonly ANALYTICAL_DASHBOARD: "analyticalDashboard";
    readonly ATTRIBUTE: "attribute";
    readonly DASHBOARD_PLUGIN: "dashboardPlugin";
    readonly DATASET: "dataset";
    readonly FACT: "fact";
    readonly LABEL: "label";
    readonly METRIC: "metric";
    readonly USER_DATA_FILTER: "userDataFilter";
    readonly PROMPT: "prompt";
    readonly VISUALIZATION_OBJECT: "visualizationObject";
    readonly FILTER_CONTEXT: "filterContext";
};

export declare type EntityIdentifierTypeEnum = typeof EntityIdentifierTypeEnum[keyof typeof EntityIdentifierTypeEnum];

/**
 *
 * @export
 * @interface ExecutionLinks
 */
export declare interface ExecutionLinks {
    /**
     *
     * @type {string}
     * @memberof ExecutionLinks
     */
    executionResult: string;
}

/**
 *
 * @export
 * @interface ExecutionResponse
 */
export declare interface ExecutionResponse {
    /**
     *
     * @type {Array<ResultDimension>}
     * @memberof ExecutionResponse
     */
    dimensions: Array<ResultDimension>;
    /**
     *
     * @type {ExecutionLinks}
     * @memberof ExecutionResponse
     */
    links: ExecutionLinks;
}

/**
 * Contains the result of an AFM execution.
 * @export
 * @interface ExecutionResult
 */
export declare interface ExecutionResult {
    /**
     * A multi-dimensional array of computed results. The most common one being a 2-dimensional array. The arrays can be composed of Double or null values.
     * @type {Array<object>}
     * @memberof ExecutionResult
     */
    data: Array<object>;
    /**
     * An array containing dimension headers. The size of the array corresponds to the number of dimensions. Their order corresponds to the dimension order in the execution result spec.
     * @type {Array<DimensionHeader>}
     * @memberof ExecutionResult
     */
    dimensionHeaders: Array<DimensionHeader>;
    /**
     *
     * @type {Array<ExecutionResultGrandTotal>}
     * @memberof ExecutionResult
     */
    grandTotals: Array<ExecutionResultGrandTotal>;
    /**
     *
     * @type {ExecutionResultPaging}
     * @memberof ExecutionResult
     */
    paging: ExecutionResultPaging;
}

/**
 * Contains the data of grand totals with the same dimensions.
 * @export
 * @interface ExecutionResultGrandTotal
 */
export declare interface ExecutionResultGrandTotal {
    /**
     * A multi-dimensional array of computed results. The most common one being a 2-dimensional array. The arrays can be composed of Double or null values.
     * @type {Array<object>}
     * @memberof ExecutionResultGrandTotal
     */
    data: Array<object>;
    /**
     * Contains headers for a subset of `totalDimensions` in which the totals are grand totals.
     * @type {Array<DimensionHeader>}
     * @memberof ExecutionResultGrandTotal
     */
    dimensionHeaders: Array<DimensionHeader>;
    /**
     * Dimensions of the grand totals.
     * @type {Array<string>}
     * @memberof ExecutionResultGrandTotal
     */
    totalDimensions: Array<string>;
}

/**
 * @type ExecutionResultHeader
 * Abstract execution result header
 * @export
 */
export declare type ExecutionResultHeader = AttributeExecutionResultHeader | MeasureExecutionResultHeader | TotalExecutionResultHeader;

/**
 * A paging information related to the data presented in the execution result. These paging information are multi-dimensional.
 * @export
 * @interface ExecutionResultPaging
 */
export declare interface ExecutionResultPaging {
    /**
     * A count of the returned results in every dimension.
     * @type {Array<number>}
     * @memberof ExecutionResultPaging
     */
    count: Array<number>;
    /**
     * The offset of the results returned in every dimension.
     * @type {Array<number>}
     * @memberof ExecutionResultPaging
     */
    offset: Array<number>;
    /**
     * A total count of the results in every dimension.
     * @type {Array<number>}
     * @memberof ExecutionResultPaging
     */
    total: Array<number>;
}

/**
 * Various settings affecting the process of AFM execution or its result
 * @export
 * @interface ExecutionSettings
 */
export declare interface ExecutionSettings {
    /**
     * Specifies the percentage of rows from fact datasets to use during computation. This feature is available only for workspaces that use a Vertica Data Source without table views.
     * @type {number}
     * @memberof ExecutionSettings
     */
    dataSamplingPercentage?: number;
}

/**
 * ActionsApi - interface
 * @export
 * @interface ActionsApi
 */
export declare interface ExportActionsApiInterface {
    /**
     * An visual export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create visual - pdf export request
     * @param {ActionsApiCreatePdfExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    createPdfExport(requestParameters: ActionsApiCreatePdfExportRequest, options?: AxiosRequestConfig): AxiosPromise<ExportResponse>;
    /**
     * An tabular export job will be created based on the export request and put to queue to be executed. The result of the operation will be an exportResult identifier that will be assembled by the client into a url that can be polled.
     * @summary Create tabular export request
     * @param {ActionsApiCreateTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    createTabularExport(requestParameters: ActionsApiCreateTabularExportRequest, options?: AxiosRequestConfig): AxiosPromise<ExportResponse>;
    /**
     * Returns 202 until original POST export request is not processed.Returns 200 with exported data once the export is done.
     * @summary Retrieve exported files
     * @param {ActionsApiGetExportedFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    getExportedFile(requestParameters: ActionsApiGetExportedFileRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * This endpoints serves as a cache for user defined metadata for the front end ui to retrieve them, if one was created using the POST ../export/visual endpoint. The metadata structure is not verified. If metadata for given {exportId} has been found, endpoint returns the value 200 else 404.
     * @summary Retrieve metadata context
     * @param {ActionsApiGetMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    getMetadata(requestParameters: ActionsApiGetMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * After clients creates a POST export request, the processing of it will start shortly asynchronously. To retrieve the result, client has to check periodically for the result on this endpoint. In case the result isn\'t ready yet, the service returns 202. If the result is ready, it returns 200 and octet stream of the result file with provided filename.
     * @summary Retrieve exported files
     * @param {ActionsApiGetTabularExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    getTabularExport(requestParameters: ActionsApiGetTabularExportRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
}

/**
 *
 * @export
 * @interface ExportResponse
 */
export declare interface ExportResponse {
    /**
     *
     * @type {string}
     * @memberof ExportResponse
     */
    exportResult: string;
}

/**
 * FactsApi - object-oriented interface
 * @export
 * @class FactsApi
 * @extends {BaseAPI}
 */
export declare class FactsApi extends MetadataBaseApi implements FactsApiInterface {
    /**
     *
     * @summary Get all Facts
     * @param {FactsApiGetAllEntitiesFactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FactsApi
     */
    getAllEntitiesFacts(requestParameters: FactsApiGetAllEntitiesFactsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiFactOutList, any>>;
    /**
     *
     * @summary Get a Fact
     * @param {FactsApiGetEntityFactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FactsApi
     */
    getEntityFacts(requestParameters: FactsApiGetEntityFactsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiFactOutDocument, any>>;
}

/**
 * FactsApi - axios parameter creator
 * @export
 */
export declare const FactsApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Get all Facts
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFacts: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"datasets" | "dataset" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Fact
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFacts: (workspaceId: string, objectId: string, filter?: string, include?: Array<"datasets" | "dataset" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * FactsApi - factory interface
 * @export
 */
export declare const FactsApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get all Facts
     * @param {FactsApiGetAllEntitiesFactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFacts(requestParameters: FactsApiGetAllEntitiesFactsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFactOutList>;
    /**
     *
     * @summary Get a Fact
     * @param {FactsApiGetEntityFactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFacts(requestParameters: FactsApiGetEntityFactsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFactOutDocument>;
};

/**
 * FactsApi - functional programming interface
 * @export
 */
export declare const FactsApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Get all Facts
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFacts(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"datasets" | "dataset" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFactOutList>>;
    /**
     *
     * @summary Get a Fact
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFacts(workspaceId: string, objectId: string, filter?: string, include?: Array<"datasets" | "dataset" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFactOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesFacts operation in FactsApi.
 * @export
 * @interface FactsApiGetAllEntitiesFactsRequest
 */
export declare interface FactsApiGetAllEntitiesFactsRequest {
    /**
     *
     * @type {string}
     * @memberof FactsApiGetAllEntitiesFacts
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof FactsApiGetAllEntitiesFacts
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof FactsApiGetAllEntitiesFacts
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'datasets' | 'dataset' | 'ALL'>}
     * @memberof FactsApiGetAllEntitiesFacts
     */
    readonly include?: Array<"datasets" | "dataset" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof FactsApiGetAllEntitiesFacts
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof FactsApiGetAllEntitiesFacts
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof FactsApiGetAllEntitiesFacts
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof FactsApiGetAllEntitiesFacts
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof FactsApiGetAllEntitiesFacts
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityFacts operation in FactsApi.
 * @export
 * @interface FactsApiGetEntityFactsRequest
 */
export declare interface FactsApiGetEntityFactsRequest {
    /**
     *
     * @type {string}
     * @memberof FactsApiGetEntityFacts
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof FactsApiGetEntityFacts
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof FactsApiGetEntityFacts
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'datasets' | 'dataset' | 'ALL'>}
     * @memberof FactsApiGetEntityFacts
     */
    readonly include?: Array<"datasets" | "dataset" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof FactsApiGetEntityFacts
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof FactsApiGetEntityFacts
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * FactsApi - interface
 * @export
 * @interface FactsApi
 */
export declare interface FactsApiInterface {
    /**
     *
     * @summary Get all Facts
     * @param {FactsApiGetAllEntitiesFactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FactsApiInterface
     */
    getAllEntitiesFacts(requestParameters: FactsApiGetAllEntitiesFactsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFactOutList>;
    /**
     *
     * @summary Get a Fact
     * @param {FactsApiGetEntityFactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FactsApiInterface
     */
    getEntityFacts(requestParameters: FactsApiGetEntityFactsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFactOutDocument>;
}

export declare type FeatureContext = {
    organizationId: string;
    earlyAccess: string;
};

/**
 * Specifies what is used for filtering.
 * @export
 * @interface FilterBy
 */
export declare interface FilterBy {
    /**
     * Specifies which label is used for filtering - primary or requested.
     * @type {string}
     * @memberof FilterBy
     */
    labelType?: FilterByLabelTypeEnum;
}

export declare const FilterByLabelTypeEnum: {
    readonly PRIMARY: "PRIMARY";
    readonly REQUESTED: "REQUESTED";
};

export declare type FilterByLabelTypeEnum = typeof FilterByLabelTypeEnum[keyof typeof FilterByLabelTypeEnum];

/**
 * @type FilterDefinition
 * Abstract filter definition type
 * @export
 */
export declare type FilterDefinition = AbsoluteDateFilter | ComparisonMeasureValueFilter | InlineFilterDefinition | NegativeAttributeFilter | PositiveAttributeFilter | RangeMeasureValueFilter | RankingFilter | RelativeDateFilter;

/**
 * @type FilterDefinitionForSimpleMeasure
 * Abstract filter definition type for simple metric.
 * @export
 */
export declare type FilterDefinitionForSimpleMeasure = AttributeFilter | DateFilter;

/**
 * A request containing all information needed for generation of logical model.
 * @export
 * @interface GenerateLdmRequest
 */
export declare interface GenerateLdmRequest {
    /**
     * A flag dictating how the attribute, fact and label ids are generated. By default their ids are derived only from the column name, unless there would be a conflict (e.g. category coming from two different tables). In that case a long id format of `<table>.<column>` is used. If the flag is set to true, then all ids will be generated in the long form.
     * @type {boolean}
     * @memberof GenerateLdmRequest
     */
    generateLongIds?: boolean;
    /**
     * A separator between prefixes and the names. Default is \"__\".
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    separator?: string;
    /**
     * Tables starting with this prefix will be included. The prefix is then followed by the value of `separator` parameter. Given the table prefix is `out_table` and separator is `__`, the table with name like `out_table__customers` will be scanned.
     * @type {string}
     * @memberof GenerateLdmRequest
     * @deprecated
     */
    tablePrefix?: string;
    /**
     * Views starting with this prefix will be included. The prefix is then followed by the value of `separator` parameter. Given the view prefix is `out_view` and separator is `__`, the table with name like `out_view__us_customers` will be scanned.
     * @type {string}
     * @memberof GenerateLdmRequest
     * @deprecated
     */
    viewPrefix?: string;
    /**
     * Columns starting with this prefix will be considered as primary labels. The prefix is then followed by the value of `separator` parameter. Given the primary label prefix is `pl` and separator is `__`, the columns with name like `pl__country_id` will be considered as primary labels.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    primaryLabelPrefix?: string;
    /**
     * Columns starting with this prefix will be considered as secondary labels. The prefix is then followed by the value of `separator` parameter. Given the secondary label prefix is `sl` and separator is `__`, the columns with name like `sl__country_id_country_name` will be considered as secondary labels.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    secondaryLabelPrefix?: string;
    /**
     * Columns starting with this prefix will be considered as facts. The prefix is then followed by the value of `separator` parameter. Given the fact prefix is `f` and separator is `__`, the columns with name like `f__sold` will be considered as facts.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    factPrefix?: string;
    /**
     * Option to control date granularities for date datasets. Empty value enables common date granularities (DAY, WEEK, MONTH, QUARTER, YEAR). Default value is `all` which enables all available date granularities, including time granularities (like hours, minutes).
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    dateGranularities?: string;
    /**
     * Columns starting with this prefix will be considered as grains. The prefix is then followed by the value of `separator` parameter. Given the grain prefix is `g` and separator is `__`, the columns with name like `g__name` will be considered as grains.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    grainPrefix?: string;
    /**
     * Columns starting with this prefix will be considered as references. The prefix is then followed by the value of `separator` parameter. Given the reference prefix is `r` and separator is `__`, the columns with name like `r__customer_name` will be considered as references.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    referencePrefix?: string;
    /**
     * Columns starting with this prefix will be considered as grain references. The prefix is then followed by the value of `separator` parameter. Given the reference prefix is `gr` and separator is `__`, the columns with name like `gr__customer_name` will be considered as grain references.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    grainReferencePrefix?: string;
    /**
     * Columns starting with this prefix will be considered as denormalization references. The prefix is then followed by the value of `separator` parameter. Given the denormalization reference prefix is `dr` and separator is `__`, the columns with name like `dr__customer_name` will be considered as denormalization references.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    denormPrefix?: string;
    /**
     * Column serving as workspace data filter. No labels are auto generated for such columns.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    wdfPrefix?: string;
    /**
     *
     * @type {PdmLdmRequest}
     * @memberof GenerateLdmRequest
     */
    pdm?: PdmLdmRequest;
    /**
     * Optional workspace id.
     * @type {string}
     * @memberof GenerateLdmRequest
     */
    workspaceId?: string;
}

/**
 * GenerateLogicalDataModelApi - object-oriented interface
 * @export
 * @class GenerateLogicalDataModelApi
 * @extends {BaseAPI}
 */
export declare class GenerateLogicalDataModelApi extends MetadataBaseApi implements GenerateLogicalDataModelApiInterface {
    /**
     * Generate logical data model (LDM) from physical data model (PDM) stored in data source.
     * @summary Generate logical data model (LDM) from physical data model (PDM)
     * @param {GenerateLogicalDataModelApiGenerateLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenerateLogicalDataModelApi
     */
    generateLogicalModel(requestParameters: GenerateLogicalDataModelApiGenerateLogicalModelRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeModel, any>>;
}

/**
 * GenerateLogicalDataModelApi - axios parameter creator
 * @export
 */
export declare const GenerateLogicalDataModelApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     * Generate logical data model (LDM) from physical data model (PDM) stored in data source.
     * @summary Generate logical data model (LDM) from physical data model (PDM)
     * @param {string} dataSourceId
     * @param {GenerateLdmRequest} generateLdmRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateLogicalModel: (dataSourceId: string, generateLdmRequest: GenerateLdmRequest, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * GenerateLogicalDataModelApi - factory interface
 * @export
 */
export declare const GenerateLogicalDataModelApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Generate logical data model (LDM) from physical data model (PDM) stored in data source.
     * @summary Generate logical data model (LDM) from physical data model (PDM)
     * @param {GenerateLogicalDataModelApiGenerateLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateLogicalModel(requestParameters: GenerateLogicalDataModelApiGenerateLogicalModelRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeModel>;
};

/**
 * GenerateLogicalDataModelApi - functional programming interface
 * @export
 */
export declare const GenerateLogicalDataModelApiFp: (configuration?: MetadataConfiguration) => {
    /**
     * Generate logical data model (LDM) from physical data model (PDM) stored in data source.
     * @summary Generate logical data model (LDM) from physical data model (PDM)
     * @param {string} dataSourceId
     * @param {GenerateLdmRequest} generateLdmRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateLogicalModel(dataSourceId: string, generateLdmRequest: GenerateLdmRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeModel>>;
};

/**
 * Request parameters for generateLogicalModel operation in GenerateLogicalDataModelApi.
 * @export
 * @interface GenerateLogicalDataModelApiGenerateLogicalModelRequest
 */
export declare interface GenerateLogicalDataModelApiGenerateLogicalModelRequest {
    /**
     *
     * @type {string}
     * @memberof GenerateLogicalDataModelApiGenerateLogicalModel
     */
    readonly dataSourceId: string;
    /**
     *
     * @type {GenerateLdmRequest}
     * @memberof GenerateLogicalDataModelApiGenerateLogicalModel
     */
    readonly generateLdmRequest: GenerateLdmRequest;
}

/**
 * GenerateLogicalDataModelApi - interface
 * @export
 * @interface GenerateLogicalDataModelApi
 */
export declare interface GenerateLogicalDataModelApiInterface {
    /**
     * Generate logical data model (LDM) from physical data model (PDM) stored in data source.
     * @summary Generate logical data model (LDM) from physical data model (PDM)
     * @param {GenerateLogicalDataModelApiGenerateLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenerateLogicalDataModelApiInterface
     */
    generateLogicalModel(requestParameters: GenerateLogicalDataModelApiGenerateLogicalModelRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeModel>;
}

/**
 * A grain identifier.
 * @export
 * @interface GrainIdentifier
 */
export declare interface GrainIdentifier {
    /**
     * Grain ID.
     * @type {string}
     * @memberof GrainIdentifier
     */
    id: string;
    /**
     * A type of the grain.
     * @type {string}
     * @memberof GrainIdentifier
     */
    type: GrainIdentifierTypeEnum;
}

export declare const GrainIdentifierTypeEnum: {
    readonly ATTRIBUTE: "attribute";
    readonly DATASET: "dataset";
};

export declare type GrainIdentifierTypeEnum = typeof GrainIdentifierTypeEnum[keyof typeof GrainIdentifierTypeEnum];

/**
 * Permissions granted to the user group
 * @export
 * @interface GrantedPermission
 */
export declare interface GrantedPermission {
    /**
     * Level of permission
     * @type {string}
     * @memberof GrantedPermission
     */
    level: string;
    /**
     * Source of permission
     * @type {string}
     * @memberof GrantedPermission
     */
    source: string;
}

/**
 * A date dataset granularities title formatting rules.
 * @export
 * @interface GranularitiesFormatting
 */
export declare interface GranularitiesFormatting {
    /**
     * Title base is used as a token in title pattern. If left empty, it is replaced by date dataset title.
     * @type {string}
     * @memberof GranularitiesFormatting
     */
    titleBase: string;
    /**
     * This pattern is used to generate the title of attributes and labels that result from the granularities. There are two tokens available:  * `%titleBase` - represents shared part by all titles, or title of Date Dataset if left empty * `%granularityTitle` - represents `DateGranularity` built-in title
     * @type {string}
     * @memberof GranularitiesFormatting
     */
    titlePattern: string;
}

/**
 * Contains the information specific for a group of headers. These groups correlate to attributes and metric groups.
 * @export
 * @interface HeaderGroup
 */
export declare interface HeaderGroup {
    /**
     * An array containing headers.
     * @type {Array<ExecutionResultHeader>}
     * @memberof HeaderGroup
     */
    headers: Array<ExecutionResultHeader>;
}

/**
 * Represents objects with given ID and type in workspace hierarchy (more than one can exists in different workspaces).
 * @export
 * @interface HierarchyObjectIdentification
 */
export declare interface HierarchyObjectIdentification {
    /**
     *
     * @type {string}
     * @memberof HierarchyObjectIdentification
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof HierarchyObjectIdentification
     */
    type: HierarchyObjectIdentificationTypeEnum;
}

export declare const HierarchyObjectIdentificationTypeEnum: {
    readonly ANALYTICAL_DASHBOARD: "analyticalDashboard";
    readonly ATTRIBUTE: "attribute";
    readonly DASHBOARD_PLUGIN: "dashboardPlugin";
    readonly DATASET: "dataset";
    readonly FACT: "fact";
    readonly LABEL: "label";
    readonly METRIC: "metric";
    readonly PROMPT: "prompt";
    readonly VISUALIZATION_OBJECT: "visualizationObject";
    readonly FILTER_CONTEXT: "filterContext";
    readonly WORKSPACE_DATA_FILTER: "workspaceDataFilter";
    readonly WORKSPACE_DATA_FILTER_SETTINGS: "workspaceDataFilterSettings";
};

export declare type HierarchyObjectIdentificationTypeEnum = typeof HierarchyObjectIdentificationTypeEnum[keyof typeof HierarchyObjectIdentificationTypeEnum];

/**
 * @deprecated use {@link AnalyticalDashboardModelV2.IAnalyticalDashboard} instead
 * @public
 */
declare interface IAnalyticalDashboard {
    analyticalDashboard: {
        layout?: IDashboardLayout;
        filterContextRef?: ObjRef;
        dateFilterConfig?: IDashboardDateFilterConfig;
    };
}

/**
 * @public
 */
declare interface IAnalyticalDashboard_2 {
    version: "2";
    layout?: IDashboardLayout;
    filterContextRef?: ObjRef;
    dateFilterConfig?: IDashboardDateFilterConfig;
    plugins?: IDashboardPluginLink[];
}

/**
 * Attribute format used in executions
 *
 * @deprecated use {@link AttributeItem} instead
 * @public
 */
declare interface IAttribute {
    localIdentifier: Identifier;
    displayForm: AfmObjectIdentifier;
    alias?: string;
}

/**
 * @public
 */
declare interface IDashboardPlugin {
    version: "2";
    url: string;
}

/**
 * @public
 */
declare interface IDashboardPluginLink {
    version: "2";
    plugin: ObjRef;
    parameters?: string;
}

/**
 * @public
 */
declare type Identifier = string;

/**
 * Contains information about conflicting IDs in workspace hierarchy
 * @export
 * @interface IdentifierDuplications
 */
export declare interface IdentifierDuplications {
    /**
     *
     * @type {string}
     * @memberof IdentifierDuplications
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof IdentifierDuplications
     */
    type: IdentifierDuplicationsTypeEnum;
    /**
     *
     * @type {Array<string>}
     * @memberof IdentifierDuplications
     */
    origins: Array<string>;
}

export declare const IdentifierDuplicationsTypeEnum: {
    readonly ANALYTICAL_DASHBOARD: "analyticalDashboard";
    readonly ATTRIBUTE: "attribute";
    readonly DASHBOARD_PLUGIN: "dashboardPlugin";
    readonly DATASET: "dataset";
    readonly FACT: "fact";
    readonly LABEL: "label";
    readonly METRIC: "metric";
    readonly PROMPT: "prompt";
    readonly VISUALIZATION_OBJECT: "visualizationObject";
    readonly FILTER_CONTEXT: "filterContext";
    readonly WORKSPACE_DATA_FILTER: "workspaceDataFilter";
    readonly WORKSPACE_DATA_FILTER_SETTINGS: "workspaceDataFilterSettings";
};

export declare type IdentifierDuplicationsTypeEnum = typeof IdentifierDuplicationsTypeEnum[keyof typeof IdentifierDuplicationsTypeEnum];

/**
 * Dimension format used in executions
 *
 * @deprecated use {@link Dimension} instead
 * @public
 */
declare interface IDimension {
    localIdentifier: string;
    itemIdentifiers: Identifier[];
    sorting?: SortKey_2[];
    totals?: ITotalItem[];
}

/**
 * @deprecated use {@link AnalyticalDashboardModelV2.IFilterContext} instead
 * @public
 */
declare interface IFilterContext {
    filterContext: {
        filters: IFilterContext_2["filters"];
    };
}

/**
 * @public
 */
declare interface IFilterContext_3 {
    version: "2";
    filters: IFilterContext_2["filters"];
}

export declare interface ILiveFeatures {
    live: {
        configuration: {
            host: string;
            key: string;
        };
        context: FeatureContext;
    };
}

/**
 * Measure format used in executions
 *
 * @deprecated use {@link MeasureItem} instead
 * @public
 */
declare interface IMeasure {
    localIdentifier: Identifier;
    definition: MeasureDefinition;
    alias?: string;
    format?: string;
}

/**
 * Filter in form of direct MAQL query.
 * @export
 * @interface InlineFilterDefinition
 */
export declare interface InlineFilterDefinition {
    /**
     *
     * @type {InlineFilterDefinitionInline}
     * @memberof InlineFilterDefinition
     */
    inline: InlineFilterDefinitionInline;
}

/**
 *
 * @export
 * @interface InlineFilterDefinitionInline
 */
export declare interface InlineFilterDefinitionInline {
    /**
     *
     * @type {string}
     * @memberof InlineFilterDefinitionInline
     */
    filter: string;
    /**
     *
     * @type {boolean}
     * @memberof InlineFilterDefinitionInline
     */
    applyOnResult?: boolean;
}

/**
 * Metric defined by the raw MAQL query.
 * @export
 * @interface InlineMeasureDefinition
 */
export declare interface InlineMeasureDefinition {
    /**
     *
     * @type {InlineMeasureDefinitionInline}
     * @memberof InlineMeasureDefinition
     */
    inline: InlineMeasureDefinitionInline;
}

/**
 *
 * @export
 * @interface InlineMeasureDefinitionInline
 */
export declare interface InlineMeasureDefinitionInline {
    /**
     *
     * @type {string}
     * @memberof InlineMeasureDefinitionInline
     */
    maql: string;
}

/**
 * InvalidateCacheApi - object-oriented interface
 * @export
 * @class InvalidateCacheApi
 * @extends {BaseAPI}
 */
export declare class InvalidateCacheApi extends MetadataBaseApi implements InvalidateCacheApiInterface {
    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {InvalidateCacheApiRegisterUploadNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvalidateCacheApi
     */
    registerUploadNotification(requestParameters: InvalidateCacheApiRegisterUploadNotificationRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
}

/**
 * InvalidateCacheApi - axios parameter creator
 * @export
 */
export declare const InvalidateCacheApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerUploadNotification: (dataSourceId: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * InvalidateCacheApi - factory interface
 * @export
 */
export declare const InvalidateCacheApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {InvalidateCacheApiRegisterUploadNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerUploadNotification(requestParameters: InvalidateCacheApiRegisterUploadNotificationRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
};

/**
 * InvalidateCacheApi - functional programming interface
 * @export
 */
export declare const InvalidateCacheApiFp: (configuration?: MetadataConfiguration) => {
    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerUploadNotification(dataSourceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};

/**
 * InvalidateCacheApi - interface
 * @export
 * @interface InvalidateCacheApi
 */
export declare interface InvalidateCacheApiInterface {
    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {InvalidateCacheApiRegisterUploadNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvalidateCacheApiInterface
     */
    registerUploadNotification(requestParameters: InvalidateCacheApiRegisterUploadNotificationRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
}

/**
 * Request parameters for registerUploadNotification operation in InvalidateCacheApi.
 * @export
 * @interface InvalidateCacheApiRegisterUploadNotificationRequest
 */
export declare interface InvalidateCacheApiRegisterUploadNotificationRequest {
    /**
     *
     * @type {string}
     * @memberof InvalidateCacheApiRegisterUploadNotification
     */
    readonly dataSourceId: string;
}

/**
 *
 * @export
 * @interface Invitation
 */
export declare interface Invitation {
    /**
     *
     * @type {string}
     * @memberof Invitation
     */
    email: string;
}

/**
 * @public
 */
export declare const isAfmObjectIdentifier: (value: unknown) => value is AfmObjectIdentifier;

/**
 * @public
 */
declare function isAnalyticalDashboard(dashboard: unknown): dashboard is IAnalyticalDashboard;

/**
 * @public
 */
declare function isAnalyticalDashboard_2(dashboard: unknown): dashboard is IAnalyticalDashboard_2;

/**
 * @public
 */
export declare function isAttributeHeader(header: ResultDimensionHeader): header is AttributeHeaderOut;

/**
 * @public
 */
declare function isDashboardPlugin(plugin: unknown): plugin is IDashboardPlugin;

/**
 * @public
 */
declare function isDashboardPluginLink(pluginLink: unknown): pluginLink is IDashboardPluginLink;

/**
 * @public
 */
export declare function isDashboardPluginsItem(dashboardPlugin: unknown): dashboardPlugin is JsonApiDashboardPluginOutWithLinks;

/**
 * @public
 */
declare function isFilterContext(filterContext: unknown): filterContext is IFilterContext;

/**
 * @public
 */
declare function isFilterContext_2(filterContext: unknown): filterContext is IFilterContext_3;

/**
 * @public
 */
export declare function isFilterContextData(filterContext: unknown): filterContext is JsonApiFilterContextIn;

/**
 * @public
 */
export declare function isResultAttributeHeader(header: ExecutionResultHeader): header is AttributeExecutionResultHeader;

/**
 * @public
 */
export declare function isResultMeasureHeader(header: ExecutionResultHeader): header is MeasureExecutionResultHeader;

/**
 * @public
 */
export declare function isResultTotalHeader(header: ExecutionResultHeader): header is TotalExecutionResultHeader;

export declare interface IStaticFeatures {
    static: {
        items: Record<string, string>;
        context: FeatureContext;
    };
}

/**
 * @public
 */
declare function isVisualizationObject(visualizationObject: unknown): visualizationObject is IVisualizationObject;

/**
 * @public
 */
declare function isVisualizationObject_2(visualizationObject: unknown): visualizationObject is IVisualizationObject_2;

/**
 * @public
 */
export declare function isVisualizationObjectsItem(visualizationObject: unknown): visualizationObject is JsonApiVisualizationObjectOutWithLinks;

export declare interface ITigerClient {
    axios: AxiosInstance;
    execution: ReturnType<typeof tigerExecutionClientFactory>;
    executionResult: ReturnType<typeof tigerExecutionResultClientFactory>;
    labelElements: ReturnType<typeof tigerLabelElementsClientFactory>;
    validObjects: ReturnType<typeof tigerValidObjectsClientFactory>;
    explain: ReturnType<typeof tigerAfmExplainClientFactory>;
    declarativeLayout: ReturnType<typeof tigerLayoutClientFactory>;
    entities: ReturnType<typeof tigerEntitiesObjectsClientFactory>;
    profile: ReturnType<typeof tigerProfileClientFactory>;
    actions: ReturnType<typeof tigerActionsClientFactory>;
    authActions: ReturnType<typeof tigerAuthActionsClientFactory>;
    scanModel: ReturnType<typeof tigerScanModelClientFactory>;
    export: ReturnType<typeof tigerExportClientFactory>;
    /**
     * Updates tiger client to send the provided API TOKEN in `Authorization` header of all
     * requests.
     *
     * @remarks This is a convenience method that ultimately calls {@link setAxiosAuthorizationToken}.
     * @param token - token to set, if undefined, it will reset
     */
    setApiToken: (token: string | undefined) => void;
}

/**
 * Total format used in executions
 *
 * @deprecated use {@link GrandTotal} instead
 * @public
 */
declare interface ITotalItem {
    measureIdentifier: AfmLocalIdentifier;
    type: TotalType;
    attributeIdentifier: AfmLocalIdentifier;
}

export declare interface IUserProfile {
    name: string;
    userId: string;
    organizationName: string;
    organizationId: string;
    links: {
        user: string;
        organization: string;
    };
    features?: ILiveFeatures | IStaticFeatures;
}

/**
 * Visualization object used to store its data as a metadata object
 *
 * @deprecated use {@link VisualizationObjectModelV2.IVisualizationObject} instead
 * @public
 */
declare interface IVisualizationObject {
    visualizationObject: {
        title: string;
        visualizationUrl: string;
        buckets: IBucket[];
        filters: IFilter[];
        sorts: ISortItem[];
        properties: VisualizationProperties;
    };
}

/**
 * Visualization object used to store its data as a metadata object
 * @public
 */
declare interface IVisualizationObject_2 {
    version: "2";
    visualizationUrl: string;
    buckets: IBucket[];
    filters: IFilter[];
    sorts: ISortItem[];
    properties: VisualizationProperties;
}

export declare const JSON_API_HEADER_VALUE = "application/vnd.gooddata.api+json";

/**
 * JSON:API representation of analyticalDashboard entity.
 * @export
 * @interface JsonApiAnalyticalDashboardIn
 */
export declare interface JsonApiAnalyticalDashboardIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardIn
     */
    type: JsonApiAnalyticalDashboardInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardIn
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPostOptionalIdAttributes}
     * @memberof JsonApiAnalyticalDashboardIn
     */
    attributes?: JsonApiAnalyticalDashboardPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardInDocument
 */
export declare interface JsonApiAnalyticalDashboardInDocument {
    /**
     *
     * @type {JsonApiAnalyticalDashboardIn}
     * @memberof JsonApiAnalyticalDashboardInDocument
     */
    data: JsonApiAnalyticalDashboardIn;
}

export declare const JsonApiAnalyticalDashboardInTypeEnum: {
    readonly ANALYTICAL_DASHBOARD: "analyticalDashboard";
};

export declare type JsonApiAnalyticalDashboardInTypeEnum = typeof JsonApiAnalyticalDashboardInTypeEnum[keyof typeof JsonApiAnalyticalDashboardInTypeEnum];

/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiAnalyticalDashboardLinkage
 */
export declare interface JsonApiAnalyticalDashboardLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardLinkage
     */
    type: JsonApiAnalyticalDashboardLinkageTypeEnum;
}

export declare const JsonApiAnalyticalDashboardLinkageTypeEnum: {
    readonly ANALYTICAL_DASHBOARD: "analyticalDashboard";
};

export declare type JsonApiAnalyticalDashboardLinkageTypeEnum = typeof JsonApiAnalyticalDashboardLinkageTypeEnum[keyof typeof JsonApiAnalyticalDashboardLinkageTypeEnum];

/**
 * JSON:API representation of analyticalDashboard entity.
 * @export
 * @interface JsonApiAnalyticalDashboardOut
 */
export declare interface JsonApiAnalyticalDashboardOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOut
     */
    type: JsonApiAnalyticalDashboardOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOut
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutMeta}
     * @memberof JsonApiAnalyticalDashboardOut
     */
    meta?: JsonApiAnalyticalDashboardOutMeta;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutAttributes}
     * @memberof JsonApiAnalyticalDashboardOut
     */
    attributes?: JsonApiAnalyticalDashboardOutAttributes;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationships}
     * @memberof JsonApiAnalyticalDashboardOut
     */
    relationships?: JsonApiAnalyticalDashboardOutRelationships;
}

/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutAttributes
 */
export declare interface JsonApiAnalyticalDashboardOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiAnalyticalDashboardOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiAnalyticalDashboardOutAttributes
     */
    areRelationsValid?: boolean;
    /**
     * Free-form JSON content. Maximum supported length is 250000 characters.
     * @type {object}
     * @memberof JsonApiAnalyticalDashboardOutAttributes
     */
    content?: object;
    /**
     *
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOutAttributes
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOutAttributes
     */
    modifiedAt?: string;
}

/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutDocument
 */
export declare interface JsonApiAnalyticalDashboardOutDocument {
    /**
     *
     * @type {JsonApiAnalyticalDashboardOut}
     * @memberof JsonApiAnalyticalDashboardOutDocument
     */
    data: JsonApiAnalyticalDashboardOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAnalyticalDashboardOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAnalyticalDashboardOutIncludes>}
     * @memberof JsonApiAnalyticalDashboardOutDocument
     */
    included?: Array<JsonApiAnalyticalDashboardOutIncludes>;
}

/**
 * @type JsonApiAnalyticalDashboardOutIncludes
 * @export
 */
export declare type JsonApiAnalyticalDashboardOutIncludes = JsonApiAnalyticalDashboardOutWithLinks | JsonApiDashboardPluginOutWithLinks | JsonApiDatasetOutWithLinks | JsonApiFilterContextOutWithLinks | JsonApiLabelOutWithLinks | JsonApiMetricOutWithLinks | JsonApiUserIdentifierOutWithLinks | JsonApiVisualizationObjectOutWithLinks;

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiAnalyticalDashboardOutList
 */
export declare interface JsonApiAnalyticalDashboardOutList {
    /**
     *
     * @type {Array<JsonApiAnalyticalDashboardOutWithLinks>}
     * @memberof JsonApiAnalyticalDashboardOutList
     */
    data: Array<JsonApiAnalyticalDashboardOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiAnalyticalDashboardOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAnalyticalDashboardOutIncludes>}
     * @memberof JsonApiAnalyticalDashboardOutList
     */
    included?: Array<JsonApiAnalyticalDashboardOutIncludes>;
}

/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutMeta
 */
export declare interface JsonApiAnalyticalDashboardOutMeta {
    /**
     * List of valid permissions for a logged-in user.
     * @type {Array<string>}
     * @memberof JsonApiAnalyticalDashboardOutMeta
     */
    permissions?: Array<JsonApiAnalyticalDashboardOutMetaPermissionsEnum>;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutMetaOrigin}
     * @memberof JsonApiAnalyticalDashboardOutMeta
     */
    origin?: JsonApiAnalyticalDashboardOutMetaOrigin;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutMetaAccessInfo}
     * @memberof JsonApiAnalyticalDashboardOutMeta
     */
    accessInfo?: JsonApiAnalyticalDashboardOutMetaAccessInfo;
}

/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutMetaAccessInfo
 */
export declare interface JsonApiAnalyticalDashboardOutMetaAccessInfo {
    /**
     * is the entity private to the currently logged-in user
     * @type {boolean}
     * @memberof JsonApiAnalyticalDashboardOutMetaAccessInfo
     */
    private: boolean;
}

/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutMetaOrigin
 */
export declare interface JsonApiAnalyticalDashboardOutMetaOrigin {
    /**
     * defines type of the origin of the entity
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOutMetaOrigin
     */
    originType: JsonApiAnalyticalDashboardOutMetaOriginOriginTypeEnum;
    /**
     * defines id of the workspace where the entity comes from
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOutMetaOrigin
     */
    originId: string;
}

export declare const JsonApiAnalyticalDashboardOutMetaOriginOriginTypeEnum: {
    readonly NATIVE: "NATIVE";
    readonly PARENT: "PARENT";
};

export declare type JsonApiAnalyticalDashboardOutMetaOriginOriginTypeEnum = typeof JsonApiAnalyticalDashboardOutMetaOriginOriginTypeEnum[keyof typeof JsonApiAnalyticalDashboardOutMetaOriginOriginTypeEnum];

export declare const JsonApiAnalyticalDashboardOutMetaPermissionsEnum: {
    readonly EDIT: "EDIT";
    readonly SHARE: "SHARE";
    readonly VIEW: "VIEW";
};

export declare type JsonApiAnalyticalDashboardOutMetaPermissionsEnum = typeof JsonApiAnalyticalDashboardOutMetaPermissionsEnum[keyof typeof JsonApiAnalyticalDashboardOutMetaPermissionsEnum];

/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationships
 */
export declare interface JsonApiAnalyticalDashboardOutRelationships {
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsCreatedBy}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    createdBy?: JsonApiAnalyticalDashboardOutRelationshipsCreatedBy;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsCreatedBy}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    modifiedBy?: JsonApiAnalyticalDashboardOutRelationshipsCreatedBy;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsVisualizationObjects}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    visualizationObjects?: JsonApiAnalyticalDashboardOutRelationshipsVisualizationObjects;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsAnalyticalDashboards}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    analyticalDashboards?: JsonApiAnalyticalDashboardOutRelationshipsAnalyticalDashboards;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsLabels}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    labels?: JsonApiAnalyticalDashboardOutRelationshipsLabels;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsMetrics}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    metrics?: JsonApiAnalyticalDashboardOutRelationshipsMetrics;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsDatasets}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    datasets?: JsonApiAnalyticalDashboardOutRelationshipsDatasets;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsFilterContexts}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    filterContexts?: JsonApiAnalyticalDashboardOutRelationshipsFilterContexts;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsDashboardPlugins}
     * @memberof JsonApiAnalyticalDashboardOutRelationships
     */
    dashboardPlugins?: JsonApiAnalyticalDashboardOutRelationshipsDashboardPlugins;
}

/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsAnalyticalDashboards
 */
export declare interface JsonApiAnalyticalDashboardOutRelationshipsAnalyticalDashboards {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiAnalyticalDashboardLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsAnalyticalDashboards
     */
    data: Array<JsonApiAnalyticalDashboardLinkage>;
}

/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsCreatedBy
 */
export declare interface JsonApiAnalyticalDashboardOutRelationshipsCreatedBy {
    /**
     *
     * @type {JsonApiUserIdentifierToOneLinkage}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsCreatedBy
     */
    data: JsonApiUserIdentifierToOneLinkage | null;
}

/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsDashboardPlugins
 */
export declare interface JsonApiAnalyticalDashboardOutRelationshipsDashboardPlugins {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiDashboardPluginLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsDashboardPlugins
     */
    data: Array<JsonApiDashboardPluginLinkage>;
}

/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsDatasets
 */
export declare interface JsonApiAnalyticalDashboardOutRelationshipsDatasets {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiDatasetLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsDatasets
     */
    data: Array<JsonApiDatasetLinkage>;
}

/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsFilterContexts
 */
export declare interface JsonApiAnalyticalDashboardOutRelationshipsFilterContexts {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiFilterContextLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsFilterContexts
     */
    data: Array<JsonApiFilterContextLinkage>;
}

/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsLabels
 */
export declare interface JsonApiAnalyticalDashboardOutRelationshipsLabels {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiLabelLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsLabels
     */
    data: Array<JsonApiLabelLinkage>;
}

/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsMetrics
 */
export declare interface JsonApiAnalyticalDashboardOutRelationshipsMetrics {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiMetricLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsMetrics
     */
    data: Array<JsonApiMetricLinkage>;
}

/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutRelationshipsVisualizationObjects
 */
export declare interface JsonApiAnalyticalDashboardOutRelationshipsVisualizationObjects {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiVisualizationObjectLinkage>}
     * @memberof JsonApiAnalyticalDashboardOutRelationshipsVisualizationObjects
     */
    data: Array<JsonApiVisualizationObjectLinkage>;
}

export declare const JsonApiAnalyticalDashboardOutTypeEnum: {
    readonly ANALYTICAL_DASHBOARD: "analyticalDashboard";
};

export declare type JsonApiAnalyticalDashboardOutTypeEnum = typeof JsonApiAnalyticalDashboardOutTypeEnum[keyof typeof JsonApiAnalyticalDashboardOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardOutWithLinks
 */
export declare interface JsonApiAnalyticalDashboardOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    type: JsonApiAnalyticalDashboardOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutMeta}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    meta?: JsonApiAnalyticalDashboardOutMeta;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutAttributes}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    attributes?: JsonApiAnalyticalDashboardOutAttributes;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationships}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    relationships?: JsonApiAnalyticalDashboardOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAnalyticalDashboardOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiAnalyticalDashboardOutWithLinksTypeEnum: {
    readonly ANALYTICAL_DASHBOARD: "analyticalDashboard";
};

export declare type JsonApiAnalyticalDashboardOutWithLinksTypeEnum = typeof JsonApiAnalyticalDashboardOutWithLinksTypeEnum[keyof typeof JsonApiAnalyticalDashboardOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching analyticalDashboard entity.
 * @export
 * @interface JsonApiAnalyticalDashboardPatch
 */
export declare interface JsonApiAnalyticalDashboardPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardPatch
     */
    type: JsonApiAnalyticalDashboardPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPostOptionalIdAttributes}
     * @memberof JsonApiAnalyticalDashboardPatch
     */
    attributes?: JsonApiAnalyticalDashboardPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardPatchDocument
 */
export declare interface JsonApiAnalyticalDashboardPatchDocument {
    /**
     *
     * @type {JsonApiAnalyticalDashboardPatch}
     * @memberof JsonApiAnalyticalDashboardPatchDocument
     */
    data: JsonApiAnalyticalDashboardPatch;
}

export declare const JsonApiAnalyticalDashboardPatchTypeEnum: {
    readonly ANALYTICAL_DASHBOARD: "analyticalDashboard";
};

export declare type JsonApiAnalyticalDashboardPatchTypeEnum = typeof JsonApiAnalyticalDashboardPatchTypeEnum[keyof typeof JsonApiAnalyticalDashboardPatchTypeEnum];

/**
 * JSON:API representation of analyticalDashboard entity.
 * @export
 * @interface JsonApiAnalyticalDashboardPostOptionalId
 */
export declare interface JsonApiAnalyticalDashboardPostOptionalId {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardPostOptionalId
     */
    type: JsonApiAnalyticalDashboardPostOptionalIdTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardPostOptionalId
     */
    id?: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPostOptionalIdAttributes}
     * @memberof JsonApiAnalyticalDashboardPostOptionalId
     */
    attributes?: JsonApiAnalyticalDashboardPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardPostOptionalIdAttributes
 */
export declare interface JsonApiAnalyticalDashboardPostOptionalIdAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardPostOptionalIdAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardPostOptionalIdAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiAnalyticalDashboardPostOptionalIdAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiAnalyticalDashboardPostOptionalIdAttributes
     */
    areRelationsValid?: boolean;
    /**
     * Free-form JSON content. Maximum supported length is 250000 characters.
     * @type {object}
     * @memberof JsonApiAnalyticalDashboardPostOptionalIdAttributes
     */
    content?: object;
}

/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardPostOptionalIdDocument
 */
export declare interface JsonApiAnalyticalDashboardPostOptionalIdDocument {
    /**
     *
     * @type {JsonApiAnalyticalDashboardPostOptionalId}
     * @memberof JsonApiAnalyticalDashboardPostOptionalIdDocument
     */
    data: JsonApiAnalyticalDashboardPostOptionalId;
}

export declare const JsonApiAnalyticalDashboardPostOptionalIdTypeEnum: {
    readonly ANALYTICAL_DASHBOARD: "analyticalDashboard";
};

export declare type JsonApiAnalyticalDashboardPostOptionalIdTypeEnum = typeof JsonApiAnalyticalDashboardPostOptionalIdTypeEnum[keyof typeof JsonApiAnalyticalDashboardPostOptionalIdTypeEnum];

/**
 * JSON:API representation of apiToken entity.
 * @export
 * @interface JsonApiApiTokenIn
 */
export declare interface JsonApiApiTokenIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiApiTokenIn
     */
    type: JsonApiApiTokenInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiApiTokenIn
     */
    id: string;
}

/**
 *
 * @export
 * @interface JsonApiApiTokenInDocument
 */
export declare interface JsonApiApiTokenInDocument {
    /**
     *
     * @type {JsonApiApiTokenIn}
     * @memberof JsonApiApiTokenInDocument
     */
    data: JsonApiApiTokenIn;
}

export declare const JsonApiApiTokenInTypeEnum: {
    readonly API_TOKEN: "apiToken";
};

export declare type JsonApiApiTokenInTypeEnum = typeof JsonApiApiTokenInTypeEnum[keyof typeof JsonApiApiTokenInTypeEnum];

/**
 * JSON:API representation of apiToken entity.
 * @export
 * @interface JsonApiApiTokenOut
 */
export declare interface JsonApiApiTokenOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiApiTokenOut
     */
    type: JsonApiApiTokenOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiApiTokenOut
     */
    id: string;
    /**
     *
     * @type {JsonApiApiTokenOutAttributes}
     * @memberof JsonApiApiTokenOut
     */
    attributes?: JsonApiApiTokenOutAttributes;
}

/**
 *
 * @export
 * @interface JsonApiApiTokenOutAttributes
 */
export declare interface JsonApiApiTokenOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiApiTokenOutAttributes
     */
    bearerToken?: string;
}

/**
 *
 * @export
 * @interface JsonApiApiTokenOutDocument
 */
export declare interface JsonApiApiTokenOutDocument {
    /**
     *
     * @type {JsonApiApiTokenOut}
     * @memberof JsonApiApiTokenOutDocument
     */
    data: JsonApiApiTokenOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiApiTokenOutDocument
     */
    links?: ObjectLinks;
}

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiApiTokenOutList
 */
export declare interface JsonApiApiTokenOutList {
    /**
     *
     * @type {Array<JsonApiApiTokenOutWithLinks>}
     * @memberof JsonApiApiTokenOutList
     */
    data: Array<JsonApiApiTokenOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiApiTokenOutList
     */
    links?: ListLinks;
}

export declare const JsonApiApiTokenOutTypeEnum: {
    readonly API_TOKEN: "apiToken";
};

export declare type JsonApiApiTokenOutTypeEnum = typeof JsonApiApiTokenOutTypeEnum[keyof typeof JsonApiApiTokenOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiApiTokenOutWithLinks
 */
export declare interface JsonApiApiTokenOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiApiTokenOutWithLinks
     */
    type: JsonApiApiTokenOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiApiTokenOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiApiTokenOutAttributes}
     * @memberof JsonApiApiTokenOutWithLinks
     */
    attributes?: JsonApiApiTokenOutAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiApiTokenOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiApiTokenOutWithLinksTypeEnum: {
    readonly API_TOKEN: "apiToken";
};

export declare type JsonApiApiTokenOutWithLinksTypeEnum = typeof JsonApiApiTokenOutWithLinksTypeEnum[keyof typeof JsonApiApiTokenOutWithLinksTypeEnum];

/**
 * JSON:API representation of attributeHierarchy entity.
 * @export
 * @interface JsonApiAttributeHierarchyIn
 */
export declare interface JsonApiAttributeHierarchyIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAttributeHierarchyIn
     */
    type: JsonApiAttributeHierarchyInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAttributeHierarchyIn
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyInAttributes}
     * @memberof JsonApiAttributeHierarchyIn
     */
    attributes?: JsonApiAttributeHierarchyInAttributes;
}

/**
 *
 * @export
 * @interface JsonApiAttributeHierarchyInAttributes
 */
export declare interface JsonApiAttributeHierarchyInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeHierarchyInAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeHierarchyInAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiAttributeHierarchyInAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiAttributeHierarchyInAttributes
     */
    areRelationsValid?: boolean;
    /**
     * Free-form JSON content. Maximum supported length is 15000 characters.
     * @type {object}
     * @memberof JsonApiAttributeHierarchyInAttributes
     */
    content?: object;
}

/**
 *
 * @export
 * @interface JsonApiAttributeHierarchyInDocument
 */
export declare interface JsonApiAttributeHierarchyInDocument {
    /**
     *
     * @type {JsonApiAttributeHierarchyIn}
     * @memberof JsonApiAttributeHierarchyInDocument
     */
    data: JsonApiAttributeHierarchyIn;
}

export declare const JsonApiAttributeHierarchyInTypeEnum: {
    readonly ATTRIBUTE_HIERARCHY: "attributeHierarchy";
};

export declare type JsonApiAttributeHierarchyInTypeEnum = typeof JsonApiAttributeHierarchyInTypeEnum[keyof typeof JsonApiAttributeHierarchyInTypeEnum];

/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiAttributeHierarchyLinkage
 */
export declare interface JsonApiAttributeHierarchyLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeHierarchyLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeHierarchyLinkage
     */
    type: JsonApiAttributeHierarchyLinkageTypeEnum;
}

export declare const JsonApiAttributeHierarchyLinkageTypeEnum: {
    readonly ATTRIBUTE_HIERARCHY: "attributeHierarchy";
};

export declare type JsonApiAttributeHierarchyLinkageTypeEnum = typeof JsonApiAttributeHierarchyLinkageTypeEnum[keyof typeof JsonApiAttributeHierarchyLinkageTypeEnum];

/**
 * JSON:API representation of attributeHierarchy entity.
 * @export
 * @interface JsonApiAttributeHierarchyOut
 */
export declare interface JsonApiAttributeHierarchyOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAttributeHierarchyOut
     */
    type: JsonApiAttributeHierarchyOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAttributeHierarchyOut
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutMeta}
     * @memberof JsonApiAttributeHierarchyOut
     */
    meta?: JsonApiAttributeHierarchyOutMeta;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutAttributes}
     * @memberof JsonApiAttributeHierarchyOut
     */
    attributes?: JsonApiAttributeHierarchyOutAttributes;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutRelationships}
     * @memberof JsonApiAttributeHierarchyOut
     */
    relationships?: JsonApiAttributeHierarchyOutRelationships;
}

/**
 *
 * @export
 * @interface JsonApiAttributeHierarchyOutAttributes
 */
export declare interface JsonApiAttributeHierarchyOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeHierarchyOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeHierarchyOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiAttributeHierarchyOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiAttributeHierarchyOutAttributes
     */
    areRelationsValid?: boolean;
    /**
     * Free-form JSON content. Maximum supported length is 15000 characters.
     * @type {object}
     * @memberof JsonApiAttributeHierarchyOutAttributes
     */
    content?: object;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeHierarchyOutAttributes
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeHierarchyOutAttributes
     */
    modifiedAt?: string;
}

/**
 *
 * @export
 * @interface JsonApiAttributeHierarchyOutDocument
 */
export declare interface JsonApiAttributeHierarchyOutDocument {
    /**
     *
     * @type {JsonApiAttributeHierarchyOut}
     * @memberof JsonApiAttributeHierarchyOutDocument
     */
    data: JsonApiAttributeHierarchyOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAttributeHierarchyOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeHierarchyOutIncludes>}
     * @memberof JsonApiAttributeHierarchyOutDocument
     */
    included?: Array<JsonApiAttributeHierarchyOutIncludes>;
}

/**
 * @type JsonApiAttributeHierarchyOutIncludes
 * @export
 */
export declare type JsonApiAttributeHierarchyOutIncludes = JsonApiAttributeOutWithLinks | JsonApiUserIdentifierOutWithLinks;

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiAttributeHierarchyOutList
 */
export declare interface JsonApiAttributeHierarchyOutList {
    /**
     *
     * @type {Array<JsonApiAttributeHierarchyOutWithLinks>}
     * @memberof JsonApiAttributeHierarchyOutList
     */
    data: Array<JsonApiAttributeHierarchyOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiAttributeHierarchyOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeHierarchyOutIncludes>}
     * @memberof JsonApiAttributeHierarchyOutList
     */
    included?: Array<JsonApiAttributeHierarchyOutIncludes>;
}

/**
 *
 * @export
 * @interface JsonApiAttributeHierarchyOutMeta
 */
export declare interface JsonApiAttributeHierarchyOutMeta {
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutMetaOrigin}
     * @memberof JsonApiAttributeHierarchyOutMeta
     */
    origin?: JsonApiAnalyticalDashboardOutMetaOrigin;
}

/**
 *
 * @export
 * @interface JsonApiAttributeHierarchyOutRelationships
 */
export declare interface JsonApiAttributeHierarchyOutRelationships {
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsCreatedBy}
     * @memberof JsonApiAttributeHierarchyOutRelationships
     */
    createdBy?: JsonApiAnalyticalDashboardOutRelationshipsCreatedBy;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsCreatedBy}
     * @memberof JsonApiAttributeHierarchyOutRelationships
     */
    modifiedBy?: JsonApiAnalyticalDashboardOutRelationshipsCreatedBy;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutRelationshipsAttributes}
     * @memberof JsonApiAttributeHierarchyOutRelationships
     */
    attributes?: JsonApiAttributeHierarchyOutRelationshipsAttributes;
}

/**
 *
 * @export
 * @interface JsonApiAttributeHierarchyOutRelationshipsAttributes
 */
export declare interface JsonApiAttributeHierarchyOutRelationshipsAttributes {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiAttributeLinkage>}
     * @memberof JsonApiAttributeHierarchyOutRelationshipsAttributes
     */
    data: Array<JsonApiAttributeLinkage>;
}

export declare const JsonApiAttributeHierarchyOutTypeEnum: {
    readonly ATTRIBUTE_HIERARCHY: "attributeHierarchy";
};

export declare type JsonApiAttributeHierarchyOutTypeEnum = typeof JsonApiAttributeHierarchyOutTypeEnum[keyof typeof JsonApiAttributeHierarchyOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiAttributeHierarchyOutWithLinks
 */
export declare interface JsonApiAttributeHierarchyOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAttributeHierarchyOutWithLinks
     */
    type: JsonApiAttributeHierarchyOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAttributeHierarchyOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutMeta}
     * @memberof JsonApiAttributeHierarchyOutWithLinks
     */
    meta?: JsonApiAttributeHierarchyOutMeta;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutAttributes}
     * @memberof JsonApiAttributeHierarchyOutWithLinks
     */
    attributes?: JsonApiAttributeHierarchyOutAttributes;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutRelationships}
     * @memberof JsonApiAttributeHierarchyOutWithLinks
     */
    relationships?: JsonApiAttributeHierarchyOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAttributeHierarchyOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiAttributeHierarchyOutWithLinksTypeEnum: {
    readonly ATTRIBUTE_HIERARCHY: "attributeHierarchy";
};

export declare type JsonApiAttributeHierarchyOutWithLinksTypeEnum = typeof JsonApiAttributeHierarchyOutWithLinksTypeEnum[keyof typeof JsonApiAttributeHierarchyOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching attributeHierarchy entity.
 * @export
 * @interface JsonApiAttributeHierarchyPatch
 */
export declare interface JsonApiAttributeHierarchyPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAttributeHierarchyPatch
     */
    type: JsonApiAttributeHierarchyPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAttributeHierarchyPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyInAttributes}
     * @memberof JsonApiAttributeHierarchyPatch
     */
    attributes?: JsonApiAttributeHierarchyInAttributes;
}

/**
 *
 * @export
 * @interface JsonApiAttributeHierarchyPatchDocument
 */
export declare interface JsonApiAttributeHierarchyPatchDocument {
    /**
     *
     * @type {JsonApiAttributeHierarchyPatch}
     * @memberof JsonApiAttributeHierarchyPatchDocument
     */
    data: JsonApiAttributeHierarchyPatch;
}

export declare const JsonApiAttributeHierarchyPatchTypeEnum: {
    readonly ATTRIBUTE_HIERARCHY: "attributeHierarchy";
};

export declare type JsonApiAttributeHierarchyPatchTypeEnum = typeof JsonApiAttributeHierarchyPatchTypeEnum[keyof typeof JsonApiAttributeHierarchyPatchTypeEnum];

/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiAttributeLinkage
 */
export declare interface JsonApiAttributeLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeLinkage
     */
    type: JsonApiAttributeLinkageTypeEnum;
}

export declare const JsonApiAttributeLinkageTypeEnum: {
    readonly ATTRIBUTE: "attribute";
};

export declare type JsonApiAttributeLinkageTypeEnum = typeof JsonApiAttributeLinkageTypeEnum[keyof typeof JsonApiAttributeLinkageTypeEnum];

/**
 * JSON:API representation of attribute entity.
 * @export
 * @interface JsonApiAttributeOut
 */
export declare interface JsonApiAttributeOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAttributeOut
     */
    type: JsonApiAttributeOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAttributeOut
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutMeta}
     * @memberof JsonApiAttributeOut
     */
    meta?: JsonApiAttributeHierarchyOutMeta;
    /**
     *
     * @type {JsonApiAttributeOutAttributes}
     * @memberof JsonApiAttributeOut
     */
    attributes?: JsonApiAttributeOutAttributes;
    /**
     *
     * @type {JsonApiAttributeOutRelationships}
     * @memberof JsonApiAttributeOut
     */
    relationships?: JsonApiAttributeOutRelationships;
}

/**
 *
 * @export
 * @interface JsonApiAttributeOutAttributes
 */
export declare interface JsonApiAttributeOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiAttributeOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeOutAttributes
     */
    granularity?: JsonApiAttributeOutAttributesGranularityEnum;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiAttributeOutAttributes
     */
    areRelationsValid?: boolean;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeOutAttributes
     */
    sortColumn?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeOutAttributes
     */
    sortDirection?: JsonApiAttributeOutAttributesSortDirectionEnum;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeOutAttributes
     */
    sourceColumn?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeOutAttributes
     */
    sourceColumnDataType?: JsonApiAttributeOutAttributesSourceColumnDataTypeEnum;
}

export declare const JsonApiAttributeOutAttributesGranularityEnum: {
    readonly MINUTE: "MINUTE";
    readonly HOUR: "HOUR";
    readonly DAY: "DAY";
    readonly WEEK: "WEEK";
    readonly MONTH: "MONTH";
    readonly QUARTER: "QUARTER";
    readonly YEAR: "YEAR";
    readonly MINUTE_OF_HOUR: "MINUTE_OF_HOUR";
    readonly HOUR_OF_DAY: "HOUR_OF_DAY";
    readonly DAY_OF_WEEK: "DAY_OF_WEEK";
    readonly DAY_OF_MONTH: "DAY_OF_MONTH";
    readonly DAY_OF_YEAR: "DAY_OF_YEAR";
    readonly WEEK_OF_YEAR: "WEEK_OF_YEAR";
    readonly MONTH_OF_YEAR: "MONTH_OF_YEAR";
    readonly QUARTER_OF_YEAR: "QUARTER_OF_YEAR";
};

export declare type JsonApiAttributeOutAttributesGranularityEnum = typeof JsonApiAttributeOutAttributesGranularityEnum[keyof typeof JsonApiAttributeOutAttributesGranularityEnum];

export declare const JsonApiAttributeOutAttributesSortDirectionEnum: {
    readonly ASC: "ASC";
    readonly DESC: "DESC";
};

export declare type JsonApiAttributeOutAttributesSortDirectionEnum = typeof JsonApiAttributeOutAttributesSortDirectionEnum[keyof typeof JsonApiAttributeOutAttributesSortDirectionEnum];

export declare const JsonApiAttributeOutAttributesSourceColumnDataTypeEnum: {
    readonly INT: "INT";
    readonly STRING: "STRING";
    readonly DATE: "DATE";
    readonly NUMERIC: "NUMERIC";
    readonly TIMESTAMP: "TIMESTAMP";
    readonly TIMESTAMP_TZ: "TIMESTAMP_TZ";
    readonly BOOLEAN: "BOOLEAN";
};

export declare type JsonApiAttributeOutAttributesSourceColumnDataTypeEnum = typeof JsonApiAttributeOutAttributesSourceColumnDataTypeEnum[keyof typeof JsonApiAttributeOutAttributesSourceColumnDataTypeEnum];

/**
 *
 * @export
 * @interface JsonApiAttributeOutDocument
 */
export declare interface JsonApiAttributeOutDocument {
    /**
     *
     * @type {JsonApiAttributeOut}
     * @memberof JsonApiAttributeOutDocument
     */
    data: JsonApiAttributeOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAttributeOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeOutIncludes>}
     * @memberof JsonApiAttributeOutDocument
     */
    included?: Array<JsonApiAttributeOutIncludes>;
}

/**
 * @type JsonApiAttributeOutIncludes
 * @export
 */
export declare type JsonApiAttributeOutIncludes = JsonApiAttributeHierarchyOutWithLinks | JsonApiDatasetOutWithLinks | JsonApiLabelOutWithLinks;

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiAttributeOutList
 */
export declare interface JsonApiAttributeOutList {
    /**
     *
     * @type {Array<JsonApiAttributeOutWithLinks>}
     * @memberof JsonApiAttributeOutList
     */
    data: Array<JsonApiAttributeOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiAttributeOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeOutIncludes>}
     * @memberof JsonApiAttributeOutList
     */
    included?: Array<JsonApiAttributeOutIncludes>;
}

/**
 *
 * @export
 * @interface JsonApiAttributeOutRelationships
 */
export declare interface JsonApiAttributeOutRelationships {
    /**
     *
     * @type {JsonApiAttributeOutRelationshipsDataset}
     * @memberof JsonApiAttributeOutRelationships
     */
    dataset?: JsonApiAttributeOutRelationshipsDataset;
    /**
     *
     * @type {JsonApiAttributeOutRelationshipsDefaultView}
     * @memberof JsonApiAttributeOutRelationships
     */
    defaultView?: JsonApiAttributeOutRelationshipsDefaultView;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsLabels}
     * @memberof JsonApiAttributeOutRelationships
     */
    labels?: JsonApiAnalyticalDashboardOutRelationshipsLabels;
    /**
     *
     * @type {JsonApiAttributeOutRelationshipsAttributeHierarchies}
     * @memberof JsonApiAttributeOutRelationships
     */
    attributeHierarchies?: JsonApiAttributeOutRelationshipsAttributeHierarchies;
}

/**
 *
 * @export
 * @interface JsonApiAttributeOutRelationshipsAttributeHierarchies
 */
export declare interface JsonApiAttributeOutRelationshipsAttributeHierarchies {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiAttributeHierarchyLinkage>}
     * @memberof JsonApiAttributeOutRelationshipsAttributeHierarchies
     */
    data: Array<JsonApiAttributeHierarchyLinkage>;
}

/**
 *
 * @export
 * @interface JsonApiAttributeOutRelationshipsDataset
 */
export declare interface JsonApiAttributeOutRelationshipsDataset {
    /**
     *
     * @type {JsonApiDatasetToOneLinkage}
     * @memberof JsonApiAttributeOutRelationshipsDataset
     */
    data: JsonApiDatasetToOneLinkage | null;
}

/**
 *
 * @export
 * @interface JsonApiAttributeOutRelationshipsDefaultView
 */
export declare interface JsonApiAttributeOutRelationshipsDefaultView {
    /**
     *
     * @type {JsonApiLabelToOneLinkage}
     * @memberof JsonApiAttributeOutRelationshipsDefaultView
     */
    data: JsonApiLabelToOneLinkage | null;
}

export declare const JsonApiAttributeOutTypeEnum: {
    readonly ATTRIBUTE: "attribute";
};

export declare type JsonApiAttributeOutTypeEnum = typeof JsonApiAttributeOutTypeEnum[keyof typeof JsonApiAttributeOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiAttributeOutWithLinks
 */
export declare interface JsonApiAttributeOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAttributeOutWithLinks
     */
    type: JsonApiAttributeOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAttributeOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutMeta}
     * @memberof JsonApiAttributeOutWithLinks
     */
    meta?: JsonApiAttributeHierarchyOutMeta;
    /**
     *
     * @type {JsonApiAttributeOutAttributes}
     * @memberof JsonApiAttributeOutWithLinks
     */
    attributes?: JsonApiAttributeOutAttributes;
    /**
     *
     * @type {JsonApiAttributeOutRelationships}
     * @memberof JsonApiAttributeOutWithLinks
     */
    relationships?: JsonApiAttributeOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAttributeOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiAttributeOutWithLinksTypeEnum: {
    readonly ATTRIBUTE: "attribute";
};

export declare type JsonApiAttributeOutWithLinksTypeEnum = typeof JsonApiAttributeOutWithLinksTypeEnum[keyof typeof JsonApiAttributeOutWithLinksTypeEnum];

/**
 * @type JsonApiAttributeToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export declare type JsonApiAttributeToOneLinkage = JsonApiAttributeLinkage;

/**
 * JSON:API representation of colorPalette entity.
 * @export
 * @interface JsonApiColorPaletteIn
 */
export declare interface JsonApiColorPaletteIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiColorPaletteIn
     */
    type: JsonApiColorPaletteInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiColorPaletteIn
     */
    id: string;
    /**
     *
     * @type {JsonApiColorPaletteOutAttributes}
     * @memberof JsonApiColorPaletteIn
     */
    attributes: JsonApiColorPaletteOutAttributes;
}

/**
 *
 * @export
 * @interface JsonApiColorPaletteInDocument
 */
export declare interface JsonApiColorPaletteInDocument {
    /**
     *
     * @type {JsonApiColorPaletteIn}
     * @memberof JsonApiColorPaletteInDocument
     */
    data: JsonApiColorPaletteIn;
}

export declare const JsonApiColorPaletteInTypeEnum: {
    readonly COLOR_PALETTE: "colorPalette";
};

export declare type JsonApiColorPaletteInTypeEnum = typeof JsonApiColorPaletteInTypeEnum[keyof typeof JsonApiColorPaletteInTypeEnum];

/**
 * JSON:API representation of colorPalette entity.
 * @export
 * @interface JsonApiColorPaletteOut
 */
export declare interface JsonApiColorPaletteOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiColorPaletteOut
     */
    type: JsonApiColorPaletteOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiColorPaletteOut
     */
    id: string;
    /**
     *
     * @type {JsonApiColorPaletteOutAttributes}
     * @memberof JsonApiColorPaletteOut
     */
    attributes: JsonApiColorPaletteOutAttributes;
}

/**
 *
 * @export
 * @interface JsonApiColorPaletteOutAttributes
 */
export declare interface JsonApiColorPaletteOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiColorPaletteOutAttributes
     */
    name: string;
    /**
     * Free-form JSON content. Maximum supported length is 15000 characters.
     * @type {object}
     * @memberof JsonApiColorPaletteOutAttributes
     */
    content: object;
}

/**
 *
 * @export
 * @interface JsonApiColorPaletteOutDocument
 */
export declare interface JsonApiColorPaletteOutDocument {
    /**
     *
     * @type {JsonApiColorPaletteOut}
     * @memberof JsonApiColorPaletteOutDocument
     */
    data: JsonApiColorPaletteOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiColorPaletteOutDocument
     */
    links?: ObjectLinks;
}

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiColorPaletteOutList
 */
export declare interface JsonApiColorPaletteOutList {
    /**
     *
     * @type {Array<JsonApiColorPaletteOutWithLinks>}
     * @memberof JsonApiColorPaletteOutList
     */
    data: Array<JsonApiColorPaletteOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiColorPaletteOutList
     */
    links?: ListLinks;
}

export declare const JsonApiColorPaletteOutTypeEnum: {
    readonly COLOR_PALETTE: "colorPalette";
};

export declare type JsonApiColorPaletteOutTypeEnum = typeof JsonApiColorPaletteOutTypeEnum[keyof typeof JsonApiColorPaletteOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiColorPaletteOutWithLinks
 */
export declare interface JsonApiColorPaletteOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiColorPaletteOutWithLinks
     */
    type: JsonApiColorPaletteOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiColorPaletteOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiColorPaletteOutAttributes}
     * @memberof JsonApiColorPaletteOutWithLinks
     */
    attributes: JsonApiColorPaletteOutAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiColorPaletteOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiColorPaletteOutWithLinksTypeEnum: {
    readonly COLOR_PALETTE: "colorPalette";
};

export declare type JsonApiColorPaletteOutWithLinksTypeEnum = typeof JsonApiColorPaletteOutWithLinksTypeEnum[keyof typeof JsonApiColorPaletteOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching colorPalette entity.
 * @export
 * @interface JsonApiColorPalettePatch
 */
export declare interface JsonApiColorPalettePatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiColorPalettePatch
     */
    type: JsonApiColorPalettePatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiColorPalettePatch
     */
    id: string;
    /**
     *
     * @type {JsonApiColorPalettePatchAttributes}
     * @memberof JsonApiColorPalettePatch
     */
    attributes: JsonApiColorPalettePatchAttributes;
}

/**
 *
 * @export
 * @interface JsonApiColorPalettePatchAttributes
 */
export declare interface JsonApiColorPalettePatchAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiColorPalettePatchAttributes
     */
    name?: string;
    /**
     * Free-form JSON content. Maximum supported length is 15000 characters.
     * @type {object}
     * @memberof JsonApiColorPalettePatchAttributes
     */
    content?: object;
}

/**
 *
 * @export
 * @interface JsonApiColorPalettePatchDocument
 */
export declare interface JsonApiColorPalettePatchDocument {
    /**
     *
     * @type {JsonApiColorPalettePatch}
     * @memberof JsonApiColorPalettePatchDocument
     */
    data: JsonApiColorPalettePatch;
}

export declare const JsonApiColorPalettePatchTypeEnum: {
    readonly COLOR_PALETTE: "colorPalette";
};

export declare type JsonApiColorPalettePatchTypeEnum = typeof JsonApiColorPalettePatchTypeEnum[keyof typeof JsonApiColorPalettePatchTypeEnum];

/**
 * JSON:API representation of cookieSecurityConfiguration entity.
 * @export
 * @interface JsonApiCookieSecurityConfigurationIn
 */
export declare interface JsonApiCookieSecurityConfigurationIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCookieSecurityConfigurationIn
     */
    type: JsonApiCookieSecurityConfigurationInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCookieSecurityConfigurationIn
     */
    id: string;
    /**
     *
     * @type {JsonApiCookieSecurityConfigurationInAttributes}
     * @memberof JsonApiCookieSecurityConfigurationIn
     */
    attributes?: JsonApiCookieSecurityConfigurationInAttributes;
}

/**
 *
 * @export
 * @interface JsonApiCookieSecurityConfigurationInAttributes
 */
export declare interface JsonApiCookieSecurityConfigurationInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiCookieSecurityConfigurationInAttributes
     */
    lastRotation?: string;
    /**
     * Length of interval between automatic rotations expressed in format of ISO 8601 duration
     * @type {string}
     * @memberof JsonApiCookieSecurityConfigurationInAttributes
     */
    rotationInterval?: string;
}

/**
 *
 * @export
 * @interface JsonApiCookieSecurityConfigurationInDocument
 */
export declare interface JsonApiCookieSecurityConfigurationInDocument {
    /**
     *
     * @type {JsonApiCookieSecurityConfigurationIn}
     * @memberof JsonApiCookieSecurityConfigurationInDocument
     */
    data: JsonApiCookieSecurityConfigurationIn;
}

export declare const JsonApiCookieSecurityConfigurationInTypeEnum: {
    readonly COOKIE_SECURITY_CONFIGURATION: "cookieSecurityConfiguration";
};

export declare type JsonApiCookieSecurityConfigurationInTypeEnum = typeof JsonApiCookieSecurityConfigurationInTypeEnum[keyof typeof JsonApiCookieSecurityConfigurationInTypeEnum];

/**
 * JSON:API representation of cookieSecurityConfiguration entity.
 * @export
 * @interface JsonApiCookieSecurityConfigurationOut
 */
export declare interface JsonApiCookieSecurityConfigurationOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCookieSecurityConfigurationOut
     */
    type: JsonApiCookieSecurityConfigurationOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCookieSecurityConfigurationOut
     */
    id: string;
    /**
     *
     * @type {JsonApiCookieSecurityConfigurationInAttributes}
     * @memberof JsonApiCookieSecurityConfigurationOut
     */
    attributes?: JsonApiCookieSecurityConfigurationInAttributes;
}

/**
 *
 * @export
 * @interface JsonApiCookieSecurityConfigurationOutDocument
 */
export declare interface JsonApiCookieSecurityConfigurationOutDocument {
    /**
     *
     * @type {JsonApiCookieSecurityConfigurationOut}
     * @memberof JsonApiCookieSecurityConfigurationOutDocument
     */
    data: JsonApiCookieSecurityConfigurationOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiCookieSecurityConfigurationOutDocument
     */
    links?: ObjectLinks;
}

export declare const JsonApiCookieSecurityConfigurationOutTypeEnum: {
    readonly COOKIE_SECURITY_CONFIGURATION: "cookieSecurityConfiguration";
};

export declare type JsonApiCookieSecurityConfigurationOutTypeEnum = typeof JsonApiCookieSecurityConfigurationOutTypeEnum[keyof typeof JsonApiCookieSecurityConfigurationOutTypeEnum];

/**
 * JSON:API representation of patching cookieSecurityConfiguration entity.
 * @export
 * @interface JsonApiCookieSecurityConfigurationPatch
 */
export declare interface JsonApiCookieSecurityConfigurationPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCookieSecurityConfigurationPatch
     */
    type: JsonApiCookieSecurityConfigurationPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCookieSecurityConfigurationPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiCookieSecurityConfigurationInAttributes}
     * @memberof JsonApiCookieSecurityConfigurationPatch
     */
    attributes?: JsonApiCookieSecurityConfigurationInAttributes;
}

/**
 *
 * @export
 * @interface JsonApiCookieSecurityConfigurationPatchDocument
 */
export declare interface JsonApiCookieSecurityConfigurationPatchDocument {
    /**
     *
     * @type {JsonApiCookieSecurityConfigurationPatch}
     * @memberof JsonApiCookieSecurityConfigurationPatchDocument
     */
    data: JsonApiCookieSecurityConfigurationPatch;
}

export declare const JsonApiCookieSecurityConfigurationPatchTypeEnum: {
    readonly COOKIE_SECURITY_CONFIGURATION: "cookieSecurityConfiguration";
};

export declare type JsonApiCookieSecurityConfigurationPatchTypeEnum = typeof JsonApiCookieSecurityConfigurationPatchTypeEnum[keyof typeof JsonApiCookieSecurityConfigurationPatchTypeEnum];

/**
 * JSON:API representation of cspDirective entity.
 * @export
 * @interface JsonApiCspDirectiveIn
 */
export declare interface JsonApiCspDirectiveIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCspDirectiveIn
     */
    type: JsonApiCspDirectiveInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCspDirectiveIn
     */
    id: string;
    /**
     *
     * @type {JsonApiCspDirectiveOutAttributes}
     * @memberof JsonApiCspDirectiveIn
     */
    attributes: JsonApiCspDirectiveOutAttributes;
}

/**
 *
 * @export
 * @interface JsonApiCspDirectiveInDocument
 */
export declare interface JsonApiCspDirectiveInDocument {
    /**
     *
     * @type {JsonApiCspDirectiveIn}
     * @memberof JsonApiCspDirectiveInDocument
     */
    data: JsonApiCspDirectiveIn;
}

export declare const JsonApiCspDirectiveInTypeEnum: {
    readonly CSP_DIRECTIVE: "cspDirective";
};

export declare type JsonApiCspDirectiveInTypeEnum = typeof JsonApiCspDirectiveInTypeEnum[keyof typeof JsonApiCspDirectiveInTypeEnum];

/**
 * JSON:API representation of cspDirective entity.
 * @export
 * @interface JsonApiCspDirectiveOut
 */
export declare interface JsonApiCspDirectiveOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCspDirectiveOut
     */
    type: JsonApiCspDirectiveOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCspDirectiveOut
     */
    id: string;
    /**
     *
     * @type {JsonApiCspDirectiveOutAttributes}
     * @memberof JsonApiCspDirectiveOut
     */
    attributes: JsonApiCspDirectiveOutAttributes;
}

/**
 *
 * @export
 * @interface JsonApiCspDirectiveOutAttributes
 */
export declare interface JsonApiCspDirectiveOutAttributes {
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiCspDirectiveOutAttributes
     */
    sources: Array<string>;
}

/**
 *
 * @export
 * @interface JsonApiCspDirectiveOutDocument
 */
export declare interface JsonApiCspDirectiveOutDocument {
    /**
     *
     * @type {JsonApiCspDirectiveOut}
     * @memberof JsonApiCspDirectiveOutDocument
     */
    data: JsonApiCspDirectiveOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiCspDirectiveOutDocument
     */
    links?: ObjectLinks;
}

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiCspDirectiveOutList
 */
export declare interface JsonApiCspDirectiveOutList {
    /**
     *
     * @type {Array<JsonApiCspDirectiveOutWithLinks>}
     * @memberof JsonApiCspDirectiveOutList
     */
    data: Array<JsonApiCspDirectiveOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiCspDirectiveOutList
     */
    links?: ListLinks;
}

export declare const JsonApiCspDirectiveOutTypeEnum: {
    readonly CSP_DIRECTIVE: "cspDirective";
};

export declare type JsonApiCspDirectiveOutTypeEnum = typeof JsonApiCspDirectiveOutTypeEnum[keyof typeof JsonApiCspDirectiveOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiCspDirectiveOutWithLinks
 */
export declare interface JsonApiCspDirectiveOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCspDirectiveOutWithLinks
     */
    type: JsonApiCspDirectiveOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCspDirectiveOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiCspDirectiveOutAttributes}
     * @memberof JsonApiCspDirectiveOutWithLinks
     */
    attributes: JsonApiCspDirectiveOutAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiCspDirectiveOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiCspDirectiveOutWithLinksTypeEnum: {
    readonly CSP_DIRECTIVE: "cspDirective";
};

export declare type JsonApiCspDirectiveOutWithLinksTypeEnum = typeof JsonApiCspDirectiveOutWithLinksTypeEnum[keyof typeof JsonApiCspDirectiveOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching cspDirective entity.
 * @export
 * @interface JsonApiCspDirectivePatch
 */
export declare interface JsonApiCspDirectivePatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCspDirectivePatch
     */
    type: JsonApiCspDirectivePatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCspDirectivePatch
     */
    id: string;
    /**
     *
     * @type {JsonApiCspDirectivePatchAttributes}
     * @memberof JsonApiCspDirectivePatch
     */
    attributes: JsonApiCspDirectivePatchAttributes;
}

/**
 *
 * @export
 * @interface JsonApiCspDirectivePatchAttributes
 */
export declare interface JsonApiCspDirectivePatchAttributes {
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiCspDirectivePatchAttributes
     */
    sources?: Array<string>;
}

/**
 *
 * @export
 * @interface JsonApiCspDirectivePatchDocument
 */
export declare interface JsonApiCspDirectivePatchDocument {
    /**
     *
     * @type {JsonApiCspDirectivePatch}
     * @memberof JsonApiCspDirectivePatchDocument
     */
    data: JsonApiCspDirectivePatch;
}

export declare const JsonApiCspDirectivePatchTypeEnum: {
    readonly CSP_DIRECTIVE: "cspDirective";
};

export declare type JsonApiCspDirectivePatchTypeEnum = typeof JsonApiCspDirectivePatchTypeEnum[keyof typeof JsonApiCspDirectivePatchTypeEnum];

/**
 * JSON:API representation of customApplicationSetting entity.
 * @export
 * @interface JsonApiCustomApplicationSettingIn
 */
export declare interface JsonApiCustomApplicationSettingIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCustomApplicationSettingIn
     */
    type: JsonApiCustomApplicationSettingInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCustomApplicationSettingIn
     */
    id: string;
    /**
     *
     * @type {JsonApiCustomApplicationSettingPostOptionalIdAttributes}
     * @memberof JsonApiCustomApplicationSettingIn
     */
    attributes: JsonApiCustomApplicationSettingPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiCustomApplicationSettingInDocument
 */
export declare interface JsonApiCustomApplicationSettingInDocument {
    /**
     *
     * @type {JsonApiCustomApplicationSettingIn}
     * @memberof JsonApiCustomApplicationSettingInDocument
     */
    data: JsonApiCustomApplicationSettingIn;
}

export declare const JsonApiCustomApplicationSettingInTypeEnum: {
    readonly CUSTOM_APPLICATION_SETTING: "customApplicationSetting";
};

export declare type JsonApiCustomApplicationSettingInTypeEnum = typeof JsonApiCustomApplicationSettingInTypeEnum[keyof typeof JsonApiCustomApplicationSettingInTypeEnum];

/**
 * JSON:API representation of customApplicationSetting entity.
 * @export
 * @interface JsonApiCustomApplicationSettingOut
 */
export declare interface JsonApiCustomApplicationSettingOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCustomApplicationSettingOut
     */
    type: JsonApiCustomApplicationSettingOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCustomApplicationSettingOut
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutMeta}
     * @memberof JsonApiCustomApplicationSettingOut
     */
    meta?: JsonApiAttributeHierarchyOutMeta;
    /**
     *
     * @type {JsonApiCustomApplicationSettingPostOptionalIdAttributes}
     * @memberof JsonApiCustomApplicationSettingOut
     */
    attributes: JsonApiCustomApplicationSettingPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiCustomApplicationSettingOutDocument
 */
export declare interface JsonApiCustomApplicationSettingOutDocument {
    /**
     *
     * @type {JsonApiCustomApplicationSettingOut}
     * @memberof JsonApiCustomApplicationSettingOutDocument
     */
    data: JsonApiCustomApplicationSettingOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiCustomApplicationSettingOutDocument
     */
    links?: ObjectLinks;
}

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiCustomApplicationSettingOutList
 */
export declare interface JsonApiCustomApplicationSettingOutList {
    /**
     *
     * @type {Array<JsonApiCustomApplicationSettingOutWithLinks>}
     * @memberof JsonApiCustomApplicationSettingOutList
     */
    data: Array<JsonApiCustomApplicationSettingOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiCustomApplicationSettingOutList
     */
    links?: ListLinks;
}

export declare const JsonApiCustomApplicationSettingOutTypeEnum: {
    readonly CUSTOM_APPLICATION_SETTING: "customApplicationSetting";
};

export declare type JsonApiCustomApplicationSettingOutTypeEnum = typeof JsonApiCustomApplicationSettingOutTypeEnum[keyof typeof JsonApiCustomApplicationSettingOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiCustomApplicationSettingOutWithLinks
 */
export declare interface JsonApiCustomApplicationSettingOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCustomApplicationSettingOutWithLinks
     */
    type: JsonApiCustomApplicationSettingOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCustomApplicationSettingOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutMeta}
     * @memberof JsonApiCustomApplicationSettingOutWithLinks
     */
    meta?: JsonApiAttributeHierarchyOutMeta;
    /**
     *
     * @type {JsonApiCustomApplicationSettingPostOptionalIdAttributes}
     * @memberof JsonApiCustomApplicationSettingOutWithLinks
     */
    attributes: JsonApiCustomApplicationSettingPostOptionalIdAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiCustomApplicationSettingOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiCustomApplicationSettingOutWithLinksTypeEnum: {
    readonly CUSTOM_APPLICATION_SETTING: "customApplicationSetting";
};

export declare type JsonApiCustomApplicationSettingOutWithLinksTypeEnum = typeof JsonApiCustomApplicationSettingOutWithLinksTypeEnum[keyof typeof JsonApiCustomApplicationSettingOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching customApplicationSetting entity.
 * @export
 * @interface JsonApiCustomApplicationSettingPatch
 */
export declare interface JsonApiCustomApplicationSettingPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCustomApplicationSettingPatch
     */
    type: JsonApiCustomApplicationSettingPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCustomApplicationSettingPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiCustomApplicationSettingPatchAttributes}
     * @memberof JsonApiCustomApplicationSettingPatch
     */
    attributes: JsonApiCustomApplicationSettingPatchAttributes;
}

/**
 *
 * @export
 * @interface JsonApiCustomApplicationSettingPatchAttributes
 */
export declare interface JsonApiCustomApplicationSettingPatchAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiCustomApplicationSettingPatchAttributes
     */
    applicationName?: string;
    /**
     * Free-form JSON content. Maximum supported length is 15000 characters.
     * @type {object}
     * @memberof JsonApiCustomApplicationSettingPatchAttributes
     */
    content?: object;
}

/**
 *
 * @export
 * @interface JsonApiCustomApplicationSettingPatchDocument
 */
export declare interface JsonApiCustomApplicationSettingPatchDocument {
    /**
     *
     * @type {JsonApiCustomApplicationSettingPatch}
     * @memberof JsonApiCustomApplicationSettingPatchDocument
     */
    data: JsonApiCustomApplicationSettingPatch;
}

export declare const JsonApiCustomApplicationSettingPatchTypeEnum: {
    readonly CUSTOM_APPLICATION_SETTING: "customApplicationSetting";
};

export declare type JsonApiCustomApplicationSettingPatchTypeEnum = typeof JsonApiCustomApplicationSettingPatchTypeEnum[keyof typeof JsonApiCustomApplicationSettingPatchTypeEnum];

/**
 * JSON:API representation of customApplicationSetting entity.
 * @export
 * @interface JsonApiCustomApplicationSettingPostOptionalId
 */
export declare interface JsonApiCustomApplicationSettingPostOptionalId {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiCustomApplicationSettingPostOptionalId
     */
    type: JsonApiCustomApplicationSettingPostOptionalIdTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiCustomApplicationSettingPostOptionalId
     */
    id?: string;
    /**
     *
     * @type {JsonApiCustomApplicationSettingPostOptionalIdAttributes}
     * @memberof JsonApiCustomApplicationSettingPostOptionalId
     */
    attributes: JsonApiCustomApplicationSettingPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiCustomApplicationSettingPostOptionalIdAttributes
 */
export declare interface JsonApiCustomApplicationSettingPostOptionalIdAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiCustomApplicationSettingPostOptionalIdAttributes
     */
    applicationName: string;
    /**
     * Free-form JSON content. Maximum supported length is 15000 characters.
     * @type {object}
     * @memberof JsonApiCustomApplicationSettingPostOptionalIdAttributes
     */
    content: object;
}

/**
 *
 * @export
 * @interface JsonApiCustomApplicationSettingPostOptionalIdDocument
 */
export declare interface JsonApiCustomApplicationSettingPostOptionalIdDocument {
    /**
     *
     * @type {JsonApiCustomApplicationSettingPostOptionalId}
     * @memberof JsonApiCustomApplicationSettingPostOptionalIdDocument
     */
    data: JsonApiCustomApplicationSettingPostOptionalId;
}

export declare const JsonApiCustomApplicationSettingPostOptionalIdTypeEnum: {
    readonly CUSTOM_APPLICATION_SETTING: "customApplicationSetting";
};

export declare type JsonApiCustomApplicationSettingPostOptionalIdTypeEnum = typeof JsonApiCustomApplicationSettingPostOptionalIdTypeEnum[keyof typeof JsonApiCustomApplicationSettingPostOptionalIdTypeEnum];

/**
 * JSON:API representation of dashboardPlugin entity.
 * @export
 * @interface JsonApiDashboardPluginIn
 */
export declare interface JsonApiDashboardPluginIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDashboardPluginIn
     */
    type: JsonApiDashboardPluginInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDashboardPluginIn
     */
    id: string;
    /**
     *
     * @type {JsonApiDashboardPluginPostOptionalIdAttributes}
     * @memberof JsonApiDashboardPluginIn
     */
    attributes?: JsonApiDashboardPluginPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiDashboardPluginInDocument
 */
export declare interface JsonApiDashboardPluginInDocument {
    /**
     *
     * @type {JsonApiDashboardPluginIn}
     * @memberof JsonApiDashboardPluginInDocument
     */
    data: JsonApiDashboardPluginIn;
}

export declare const JsonApiDashboardPluginInTypeEnum: {
    readonly DASHBOARD_PLUGIN: "dashboardPlugin";
};

export declare type JsonApiDashboardPluginInTypeEnum = typeof JsonApiDashboardPluginInTypeEnum[keyof typeof JsonApiDashboardPluginInTypeEnum];

/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiDashboardPluginLinkage
 */
export declare interface JsonApiDashboardPluginLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiDashboardPluginLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDashboardPluginLinkage
     */
    type: JsonApiDashboardPluginLinkageTypeEnum;
}

export declare const JsonApiDashboardPluginLinkageTypeEnum: {
    readonly DASHBOARD_PLUGIN: "dashboardPlugin";
};

export declare type JsonApiDashboardPluginLinkageTypeEnum = typeof JsonApiDashboardPluginLinkageTypeEnum[keyof typeof JsonApiDashboardPluginLinkageTypeEnum];

/**
 * JSON:API representation of dashboardPlugin entity.
 * @export
 * @interface JsonApiDashboardPluginOut
 */
export declare interface JsonApiDashboardPluginOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDashboardPluginOut
     */
    type: JsonApiDashboardPluginOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDashboardPluginOut
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutMeta}
     * @memberof JsonApiDashboardPluginOut
     */
    meta?: JsonApiAttributeHierarchyOutMeta;
    /**
     *
     * @type {JsonApiDashboardPluginOutAttributes}
     * @memberof JsonApiDashboardPluginOut
     */
    attributes?: JsonApiDashboardPluginOutAttributes;
    /**
     *
     * @type {JsonApiDashboardPluginOutRelationships}
     * @memberof JsonApiDashboardPluginOut
     */
    relationships?: JsonApiDashboardPluginOutRelationships;
}

/**
 *
 * @export
 * @interface JsonApiDashboardPluginOutAttributes
 */
export declare interface JsonApiDashboardPluginOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDashboardPluginOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDashboardPluginOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDashboardPluginOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiDashboardPluginOutAttributes
     */
    areRelationsValid?: boolean;
    /**
     *
     * @type {string}
     * @memberof JsonApiDashboardPluginOutAttributes
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDashboardPluginOutAttributes
     */
    modifiedAt?: string;
    /**
     * Free-form JSON content. Maximum supported length is 250000 characters.
     * @type {object}
     * @memberof JsonApiDashboardPluginOutAttributes
     */
    content?: object;
}

/**
 *
 * @export
 * @interface JsonApiDashboardPluginOutDocument
 */
export declare interface JsonApiDashboardPluginOutDocument {
    /**
     *
     * @type {JsonApiDashboardPluginOut}
     * @memberof JsonApiDashboardPluginOutDocument
     */
    data: JsonApiDashboardPluginOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDashboardPluginOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserIdentifierOutWithLinks>}
     * @memberof JsonApiDashboardPluginOutDocument
     */
    included?: Array<JsonApiUserIdentifierOutWithLinks>;
}

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiDashboardPluginOutList
 */
export declare interface JsonApiDashboardPluginOutList {
    /**
     *
     * @type {Array<JsonApiDashboardPluginOutWithLinks>}
     * @memberof JsonApiDashboardPluginOutList
     */
    data: Array<JsonApiDashboardPluginOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiDashboardPluginOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserIdentifierOutWithLinks>}
     * @memberof JsonApiDashboardPluginOutList
     */
    included?: Array<JsonApiUserIdentifierOutWithLinks>;
}

/**
 *
 * @export
 * @interface JsonApiDashboardPluginOutRelationships
 */
export declare interface JsonApiDashboardPluginOutRelationships {
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsCreatedBy}
     * @memberof JsonApiDashboardPluginOutRelationships
     */
    createdBy?: JsonApiAnalyticalDashboardOutRelationshipsCreatedBy;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsCreatedBy}
     * @memberof JsonApiDashboardPluginOutRelationships
     */
    modifiedBy?: JsonApiAnalyticalDashboardOutRelationshipsCreatedBy;
}

export declare const JsonApiDashboardPluginOutTypeEnum: {
    readonly DASHBOARD_PLUGIN: "dashboardPlugin";
};

export declare type JsonApiDashboardPluginOutTypeEnum = typeof JsonApiDashboardPluginOutTypeEnum[keyof typeof JsonApiDashboardPluginOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDashboardPluginOutWithLinks
 */
export declare interface JsonApiDashboardPluginOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDashboardPluginOutWithLinks
     */
    type: JsonApiDashboardPluginOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDashboardPluginOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutMeta}
     * @memberof JsonApiDashboardPluginOutWithLinks
     */
    meta?: JsonApiAttributeHierarchyOutMeta;
    /**
     *
     * @type {JsonApiDashboardPluginOutAttributes}
     * @memberof JsonApiDashboardPluginOutWithLinks
     */
    attributes?: JsonApiDashboardPluginOutAttributes;
    /**
     *
     * @type {JsonApiDashboardPluginOutRelationships}
     * @memberof JsonApiDashboardPluginOutWithLinks
     */
    relationships?: JsonApiDashboardPluginOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDashboardPluginOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiDashboardPluginOutWithLinksTypeEnum: {
    readonly DASHBOARD_PLUGIN: "dashboardPlugin";
};

export declare type JsonApiDashboardPluginOutWithLinksTypeEnum = typeof JsonApiDashboardPluginOutWithLinksTypeEnum[keyof typeof JsonApiDashboardPluginOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching dashboardPlugin entity.
 * @export
 * @interface JsonApiDashboardPluginPatch
 */
export declare interface JsonApiDashboardPluginPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDashboardPluginPatch
     */
    type: JsonApiDashboardPluginPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDashboardPluginPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiDashboardPluginPostOptionalIdAttributes}
     * @memberof JsonApiDashboardPluginPatch
     */
    attributes?: JsonApiDashboardPluginPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiDashboardPluginPatchDocument
 */
export declare interface JsonApiDashboardPluginPatchDocument {
    /**
     *
     * @type {JsonApiDashboardPluginPatch}
     * @memberof JsonApiDashboardPluginPatchDocument
     */
    data: JsonApiDashboardPluginPatch;
}

export declare const JsonApiDashboardPluginPatchTypeEnum: {
    readonly DASHBOARD_PLUGIN: "dashboardPlugin";
};

export declare type JsonApiDashboardPluginPatchTypeEnum = typeof JsonApiDashboardPluginPatchTypeEnum[keyof typeof JsonApiDashboardPluginPatchTypeEnum];

/**
 * JSON:API representation of dashboardPlugin entity.
 * @export
 * @interface JsonApiDashboardPluginPostOptionalId
 */
export declare interface JsonApiDashboardPluginPostOptionalId {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDashboardPluginPostOptionalId
     */
    type: JsonApiDashboardPluginPostOptionalIdTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDashboardPluginPostOptionalId
     */
    id?: string;
    /**
     *
     * @type {JsonApiDashboardPluginPostOptionalIdAttributes}
     * @memberof JsonApiDashboardPluginPostOptionalId
     */
    attributes?: JsonApiDashboardPluginPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiDashboardPluginPostOptionalIdAttributes
 */
export declare interface JsonApiDashboardPluginPostOptionalIdAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDashboardPluginPostOptionalIdAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDashboardPluginPostOptionalIdAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDashboardPluginPostOptionalIdAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiDashboardPluginPostOptionalIdAttributes
     */
    areRelationsValid?: boolean;
    /**
     * Free-form JSON content. Maximum supported length is 250000 characters.
     * @type {object}
     * @memberof JsonApiDashboardPluginPostOptionalIdAttributes
     */
    content?: object;
}

/**
 *
 * @export
 * @interface JsonApiDashboardPluginPostOptionalIdDocument
 */
export declare interface JsonApiDashboardPluginPostOptionalIdDocument {
    /**
     *
     * @type {JsonApiDashboardPluginPostOptionalId}
     * @memberof JsonApiDashboardPluginPostOptionalIdDocument
     */
    data: JsonApiDashboardPluginPostOptionalId;
}

export declare const JsonApiDashboardPluginPostOptionalIdTypeEnum: {
    readonly DASHBOARD_PLUGIN: "dashboardPlugin";
};

export declare type JsonApiDashboardPluginPostOptionalIdTypeEnum = typeof JsonApiDashboardPluginPostOptionalIdTypeEnum[keyof typeof JsonApiDashboardPluginPostOptionalIdTypeEnum];

/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiDatasetLinkage
 */
export declare interface JsonApiDatasetLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetLinkage
     */
    type: JsonApiDatasetLinkageTypeEnum;
}

export declare const JsonApiDatasetLinkageTypeEnum: {
    readonly DATASET: "dataset";
};

export declare type JsonApiDatasetLinkageTypeEnum = typeof JsonApiDatasetLinkageTypeEnum[keyof typeof JsonApiDatasetLinkageTypeEnum];

/**
 * JSON:API representation of dataset entity.
 * @export
 * @interface JsonApiDatasetOut
 */
export declare interface JsonApiDatasetOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDatasetOut
     */
    type: JsonApiDatasetOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDatasetOut
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutMeta}
     * @memberof JsonApiDatasetOut
     */
    meta?: JsonApiAttributeHierarchyOutMeta;
    /**
     *
     * @type {JsonApiDatasetOutAttributes}
     * @memberof JsonApiDatasetOut
     */
    attributes: JsonApiDatasetOutAttributes;
    /**
     *
     * @type {JsonApiDatasetOutRelationships}
     * @memberof JsonApiDatasetOut
     */
    relationships?: JsonApiDatasetOutRelationships;
}

/**
 *
 * @export
 * @interface JsonApiDatasetOutAttributes
 */
export declare interface JsonApiDatasetOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDatasetOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributes
     */
    type: JsonApiDatasetOutAttributesTypeEnum;
    /**
     *
     * @type {Array<JsonApiDatasetOutAttributesGrain>}
     * @memberof JsonApiDatasetOutAttributes
     */
    grain?: Array<JsonApiDatasetOutAttributesGrain>;
    /**
     *
     * @type {Array<JsonApiDatasetOutAttributesReferenceProperties>}
     * @memberof JsonApiDatasetOutAttributes
     */
    referenceProperties?: Array<JsonApiDatasetOutAttributesReferenceProperties>;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributes
     */
    dataSourceTableId?: string;
    /**
     * Path to database table.
     * @type {Array<string>}
     * @memberof JsonApiDatasetOutAttributes
     */
    dataSourceTablePath?: Array<string>;
    /**
     *
     * @type {JsonApiDatasetOutAttributesSql}
     * @memberof JsonApiDatasetOutAttributes
     */
    sql?: JsonApiDatasetOutAttributesSql;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiDatasetOutAttributes
     */
    areRelationsValid?: boolean;
    /**
     *
     * @type {Array<JsonApiDatasetOutAttributesWorkspaceDataFilterColumns>}
     * @memberof JsonApiDatasetOutAttributes
     */
    workspaceDataFilterColumns?: Array<JsonApiDatasetOutAttributesWorkspaceDataFilterColumns>;
    /**
     *
     * @type {Array<JsonApiDatasetOutAttributesWorkspaceDataFilterReferences>}
     * @memberof JsonApiDatasetOutAttributes
     */
    workspaceDataFilterReferences?: Array<JsonApiDatasetOutAttributesWorkspaceDataFilterReferences>;
}

/**
 *
 * @export
 * @interface JsonApiDatasetOutAttributesGrain
 */
export declare interface JsonApiDatasetOutAttributesGrain {
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributesGrain
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributesGrain
     */
    type: JsonApiDatasetOutAttributesGrainTypeEnum;
    /**
     *
     * @type {number}
     * @memberof JsonApiDatasetOutAttributesGrain
     */
    order: number;
}

export declare const JsonApiDatasetOutAttributesGrainTypeEnum: {
    readonly ATTRIBUTE: "attribute";
    readonly DATASET: "dataset";
};

export declare type JsonApiDatasetOutAttributesGrainTypeEnum = typeof JsonApiDatasetOutAttributesGrainTypeEnum[keyof typeof JsonApiDatasetOutAttributesGrainTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDatasetOutAttributesReferenceProperties
 */
export declare interface JsonApiDatasetOutAttributesReferenceProperties {
    /**
     *
     * @type {DatasetReferenceIdentifier}
     * @memberof JsonApiDatasetOutAttributesReferenceProperties
     */
    identifier: DatasetReferenceIdentifier;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiDatasetOutAttributesReferenceProperties
     */
    multivalue: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDatasetOutAttributesReferenceProperties
     */
    sourceColumns: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDatasetOutAttributesReferenceProperties
     */
    sourceColumnDataTypes?: Array<JsonApiDatasetOutAttributesReferencePropertiesSourceColumnDataTypesEnum>;
}

export declare const JsonApiDatasetOutAttributesReferencePropertiesSourceColumnDataTypesEnum: {
    readonly INT: "INT";
    readonly STRING: "STRING";
    readonly DATE: "DATE";
    readonly NUMERIC: "NUMERIC";
    readonly TIMESTAMP: "TIMESTAMP";
    readonly TIMESTAMP_TZ: "TIMESTAMP_TZ";
    readonly BOOLEAN: "BOOLEAN";
};

export declare type JsonApiDatasetOutAttributesReferencePropertiesSourceColumnDataTypesEnum = typeof JsonApiDatasetOutAttributesReferencePropertiesSourceColumnDataTypesEnum[keyof typeof JsonApiDatasetOutAttributesReferencePropertiesSourceColumnDataTypesEnum];

/**
 *
 * @export
 * @interface JsonApiDatasetOutAttributesSql
 */
export declare interface JsonApiDatasetOutAttributesSql {
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributesSql
     */
    statement: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributesSql
     */
    dataSourceId: string;
}

export declare const JsonApiDatasetOutAttributesTypeEnum: {
    readonly NORMAL: "NORMAL";
    readonly DATE: "DATE";
};

export declare type JsonApiDatasetOutAttributesTypeEnum = typeof JsonApiDatasetOutAttributesTypeEnum[keyof typeof JsonApiDatasetOutAttributesTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDatasetOutAttributesWorkspaceDataFilterColumns
 */
export declare interface JsonApiDatasetOutAttributesWorkspaceDataFilterColumns {
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributesWorkspaceDataFilterColumns
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributesWorkspaceDataFilterColumns
     */
    dataType: JsonApiDatasetOutAttributesWorkspaceDataFilterColumnsDataTypeEnum;
}

export declare const JsonApiDatasetOutAttributesWorkspaceDataFilterColumnsDataTypeEnum: {
    readonly INT: "INT";
    readonly STRING: "STRING";
    readonly DATE: "DATE";
    readonly NUMERIC: "NUMERIC";
    readonly TIMESTAMP: "TIMESTAMP";
    readonly TIMESTAMP_TZ: "TIMESTAMP_TZ";
    readonly BOOLEAN: "BOOLEAN";
};

export declare type JsonApiDatasetOutAttributesWorkspaceDataFilterColumnsDataTypeEnum = typeof JsonApiDatasetOutAttributesWorkspaceDataFilterColumnsDataTypeEnum[keyof typeof JsonApiDatasetOutAttributesWorkspaceDataFilterColumnsDataTypeEnum];

/**
 * Workspace data filter reference.
 * @export
 * @interface JsonApiDatasetOutAttributesWorkspaceDataFilterReferences
 */
export declare interface JsonApiDatasetOutAttributesWorkspaceDataFilterReferences {
    /**
     *
     * @type {DatasetWorkspaceDataFilterIdentifier}
     * @memberof JsonApiDatasetOutAttributesWorkspaceDataFilterReferences
     */
    filterId: DatasetWorkspaceDataFilterIdentifier;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributesWorkspaceDataFilterReferences
     */
    filterColumn: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetOutAttributesWorkspaceDataFilterReferences
     */
    filterColumnDataType: JsonApiDatasetOutAttributesWorkspaceDataFilterReferencesFilterColumnDataTypeEnum;
}

export declare const JsonApiDatasetOutAttributesWorkspaceDataFilterReferencesFilterColumnDataTypeEnum: {
    readonly INT: "INT";
    readonly STRING: "STRING";
    readonly DATE: "DATE";
    readonly NUMERIC: "NUMERIC";
    readonly TIMESTAMP: "TIMESTAMP";
    readonly TIMESTAMP_TZ: "TIMESTAMP_TZ";
    readonly BOOLEAN: "BOOLEAN";
};

export declare type JsonApiDatasetOutAttributesWorkspaceDataFilterReferencesFilterColumnDataTypeEnum = typeof JsonApiDatasetOutAttributesWorkspaceDataFilterReferencesFilterColumnDataTypeEnum[keyof typeof JsonApiDatasetOutAttributesWorkspaceDataFilterReferencesFilterColumnDataTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDatasetOutDocument
 */
export declare interface JsonApiDatasetOutDocument {
    /**
     *
     * @type {JsonApiDatasetOut}
     * @memberof JsonApiDatasetOutDocument
     */
    data: JsonApiDatasetOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDatasetOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiDatasetOutIncludes>}
     * @memberof JsonApiDatasetOutDocument
     */
    included?: Array<JsonApiDatasetOutIncludes>;
}

/**
 * @type JsonApiDatasetOutIncludes
 * @export
 */
export declare type JsonApiDatasetOutIncludes = JsonApiAttributeOutWithLinks | JsonApiDatasetOutWithLinks | JsonApiFactOutWithLinks | JsonApiWorkspaceDataFilterOutWithLinks;

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiDatasetOutList
 */
export declare interface JsonApiDatasetOutList {
    /**
     *
     * @type {Array<JsonApiDatasetOutWithLinks>}
     * @memberof JsonApiDatasetOutList
     */
    data: Array<JsonApiDatasetOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiDatasetOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiDatasetOutIncludes>}
     * @memberof JsonApiDatasetOutList
     */
    included?: Array<JsonApiDatasetOutIncludes>;
}

/**
 *
 * @export
 * @interface JsonApiDatasetOutRelationships
 */
export declare interface JsonApiDatasetOutRelationships {
    /**
     *
     * @type {JsonApiAttributeHierarchyOutRelationshipsAttributes}
     * @memberof JsonApiDatasetOutRelationships
     */
    attributes?: JsonApiAttributeHierarchyOutRelationshipsAttributes;
    /**
     *
     * @type {JsonApiMetricOutRelationshipsFacts}
     * @memberof JsonApiDatasetOutRelationships
     */
    facts?: JsonApiMetricOutRelationshipsFacts;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsDatasets}
     * @memberof JsonApiDatasetOutRelationships
     */
    references?: JsonApiAnalyticalDashboardOutRelationshipsDatasets;
    /**
     *
     * @type {JsonApiDatasetOutRelationshipsWorkspaceDataFilters}
     * @memberof JsonApiDatasetOutRelationships
     */
    workspaceDataFilters?: JsonApiDatasetOutRelationshipsWorkspaceDataFilters;
}

/**
 *
 * @export
 * @interface JsonApiDatasetOutRelationshipsWorkspaceDataFilters
 */
export declare interface JsonApiDatasetOutRelationshipsWorkspaceDataFilters {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiWorkspaceDataFilterLinkage>}
     * @memberof JsonApiDatasetOutRelationshipsWorkspaceDataFilters
     */
    data: Array<JsonApiWorkspaceDataFilterLinkage>;
}

export declare const JsonApiDatasetOutTypeEnum: {
    readonly DATASET: "dataset";
};

export declare type JsonApiDatasetOutTypeEnum = typeof JsonApiDatasetOutTypeEnum[keyof typeof JsonApiDatasetOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDatasetOutWithLinks
 */
export declare interface JsonApiDatasetOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDatasetOutWithLinks
     */
    type: JsonApiDatasetOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDatasetOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutMeta}
     * @memberof JsonApiDatasetOutWithLinks
     */
    meta?: JsonApiAttributeHierarchyOutMeta;
    /**
     *
     * @type {JsonApiDatasetOutAttributes}
     * @memberof JsonApiDatasetOutWithLinks
     */
    attributes: JsonApiDatasetOutAttributes;
    /**
     *
     * @type {JsonApiDatasetOutRelationships}
     * @memberof JsonApiDatasetOutWithLinks
     */
    relationships?: JsonApiDatasetOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDatasetOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiDatasetOutWithLinksTypeEnum: {
    readonly DATASET: "dataset";
};

export declare type JsonApiDatasetOutWithLinksTypeEnum = typeof JsonApiDatasetOutWithLinksTypeEnum[keyof typeof JsonApiDatasetOutWithLinksTypeEnum];

/**
 * @type JsonApiDatasetToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export declare type JsonApiDatasetToOneLinkage = JsonApiDatasetLinkage;

/**
 * JSON:API representation of dataSourceIdentifier entity.
 * @export
 * @interface JsonApiDataSourceIdentifierOut
 */
export declare interface JsonApiDataSourceIdentifierOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceIdentifierOut
     */
    type: JsonApiDataSourceIdentifierOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceIdentifierOut
     */
    id: string;
    /**
     *
     * @type {JsonApiDataSourceIdentifierOutMeta}
     * @memberof JsonApiDataSourceIdentifierOut
     */
    meta?: JsonApiDataSourceIdentifierOutMeta;
    /**
     *
     * @type {JsonApiDataSourceIdentifierOutAttributes}
     * @memberof JsonApiDataSourceIdentifierOut
     */
    attributes: JsonApiDataSourceIdentifierOutAttributes;
}

/**
 *
 * @export
 * @interface JsonApiDataSourceIdentifierOutAttributes
 */
export declare interface JsonApiDataSourceIdentifierOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceIdentifierOutAttributes
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceIdentifierOutAttributes
     */
    schema: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceIdentifierOutAttributes
     */
    type: JsonApiDataSourceIdentifierOutAttributesTypeEnum;
}

export declare const JsonApiDataSourceIdentifierOutAttributesTypeEnum: {
    readonly POSTGRESQL: "POSTGRESQL";
    readonly REDSHIFT: "REDSHIFT";
    readonly VERTICA: "VERTICA";
    readonly SNOWFLAKE: "SNOWFLAKE";
    readonly ADS: "ADS";
    readonly BIGQUERY: "BIGQUERY";
    readonly MSSQL: "MSSQL";
    readonly PRESTO: "PRESTO";
    readonly DREMIO: "DREMIO";
    readonly DRILL: "DRILL";
    readonly GREENPLUM: "GREENPLUM";
    readonly AZURESQL: "AZURESQL";
    readonly SYNAPSESQL: "SYNAPSESQL";
    readonly DATABRICKS: "DATABRICKS";
};

export declare type JsonApiDataSourceIdentifierOutAttributesTypeEnum = typeof JsonApiDataSourceIdentifierOutAttributesTypeEnum[keyof typeof JsonApiDataSourceIdentifierOutAttributesTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDataSourceIdentifierOutDocument
 */
export declare interface JsonApiDataSourceIdentifierOutDocument {
    /**
     *
     * @type {JsonApiDataSourceIdentifierOut}
     * @memberof JsonApiDataSourceIdentifierOutDocument
     */
    data: JsonApiDataSourceIdentifierOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDataSourceIdentifierOutDocument
     */
    links?: ObjectLinks;
}

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiDataSourceIdentifierOutList
 */
export declare interface JsonApiDataSourceIdentifierOutList {
    /**
     *
     * @type {Array<JsonApiDataSourceIdentifierOutWithLinks>}
     * @memberof JsonApiDataSourceIdentifierOutList
     */
    data: Array<JsonApiDataSourceIdentifierOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiDataSourceIdentifierOutList
     */
    links?: ListLinks;
}

/**
 *
 * @export
 * @interface JsonApiDataSourceIdentifierOutMeta
 */
export declare interface JsonApiDataSourceIdentifierOutMeta {
    /**
     * List of valid permissions for a logged-in user.
     * @type {Array<string>}
     * @memberof JsonApiDataSourceIdentifierOutMeta
     */
    permissions?: Array<JsonApiDataSourceIdentifierOutMetaPermissionsEnum>;
}

export declare const JsonApiDataSourceIdentifierOutMetaPermissionsEnum: {
    readonly MANAGE: "MANAGE";
    readonly USE: "USE";
};

export declare type JsonApiDataSourceIdentifierOutMetaPermissionsEnum = typeof JsonApiDataSourceIdentifierOutMetaPermissionsEnum[keyof typeof JsonApiDataSourceIdentifierOutMetaPermissionsEnum];

export declare const JsonApiDataSourceIdentifierOutTypeEnum: {
    readonly DATA_SOURCE_IDENTIFIER: "dataSourceIdentifier";
};

export declare type JsonApiDataSourceIdentifierOutTypeEnum = typeof JsonApiDataSourceIdentifierOutTypeEnum[keyof typeof JsonApiDataSourceIdentifierOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDataSourceIdentifierOutWithLinks
 */
export declare interface JsonApiDataSourceIdentifierOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceIdentifierOutWithLinks
     */
    type: JsonApiDataSourceIdentifierOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceIdentifierOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiDataSourceIdentifierOutMeta}
     * @memberof JsonApiDataSourceIdentifierOutWithLinks
     */
    meta?: JsonApiDataSourceIdentifierOutMeta;
    /**
     *
     * @type {JsonApiDataSourceIdentifierOutAttributes}
     * @memberof JsonApiDataSourceIdentifierOutWithLinks
     */
    attributes: JsonApiDataSourceIdentifierOutAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDataSourceIdentifierOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiDataSourceIdentifierOutWithLinksTypeEnum: {
    readonly DATA_SOURCE_IDENTIFIER: "dataSourceIdentifier";
};

export declare type JsonApiDataSourceIdentifierOutWithLinksTypeEnum = typeof JsonApiDataSourceIdentifierOutWithLinksTypeEnum[keyof typeof JsonApiDataSourceIdentifierOutWithLinksTypeEnum];

/**
 * JSON:API representation of dataSource entity.
 * @export
 * @interface JsonApiDataSourceIn
 */
export declare interface JsonApiDataSourceIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceIn
     */
    type: JsonApiDataSourceInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceIn
     */
    id: string;
    /**
     *
     * @type {JsonApiDataSourceInAttributes}
     * @memberof JsonApiDataSourceIn
     */
    attributes: JsonApiDataSourceInAttributes;
}

/**
 *
 * @export
 * @interface JsonApiDataSourceInAttributes
 */
export declare interface JsonApiDataSourceInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    type: JsonApiDataSourceInAttributesTypeEnum;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    schema: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    password?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceInAttributes
     */
    token?: string;
    /**
     * Enable caching of intermediate results.
     * @type {boolean}
     * @memberof JsonApiDataSourceInAttributes
     */
    enableCaching?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDataSourceInAttributes
     */
    cachePath?: Array<string>;
    /**
     *
     * @type {Array<JsonApiDataSourceOutAttributesParameters>}
     * @memberof JsonApiDataSourceInAttributes
     */
    parameters?: Array<JsonApiDataSourceOutAttributesParameters>;
}

export declare const JsonApiDataSourceInAttributesTypeEnum: {
    readonly POSTGRESQL: "POSTGRESQL";
    readonly REDSHIFT: "REDSHIFT";
    readonly VERTICA: "VERTICA";
    readonly SNOWFLAKE: "SNOWFLAKE";
    readonly ADS: "ADS";
    readonly BIGQUERY: "BIGQUERY";
    readonly MSSQL: "MSSQL";
    readonly PRESTO: "PRESTO";
    readonly DREMIO: "DREMIO";
    readonly DRILL: "DRILL";
    readonly GREENPLUM: "GREENPLUM";
    readonly AZURESQL: "AZURESQL";
    readonly SYNAPSESQL: "SYNAPSESQL";
    readonly DATABRICKS: "DATABRICKS";
};

export declare type JsonApiDataSourceInAttributesTypeEnum = typeof JsonApiDataSourceInAttributesTypeEnum[keyof typeof JsonApiDataSourceInAttributesTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDataSourceInDocument
 */
export declare interface JsonApiDataSourceInDocument {
    /**
     *
     * @type {JsonApiDataSourceIn}
     * @memberof JsonApiDataSourceInDocument
     */
    data: JsonApiDataSourceIn;
}

export declare const JsonApiDataSourceInTypeEnum: {
    readonly DATA_SOURCE: "dataSource";
};

export declare type JsonApiDataSourceInTypeEnum = typeof JsonApiDataSourceInTypeEnum[keyof typeof JsonApiDataSourceInTypeEnum];

/**
 * JSON:API representation of dataSource entity.
 * @export
 * @interface JsonApiDataSourceOut
 */
export declare interface JsonApiDataSourceOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceOut
     */
    type: JsonApiDataSourceOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceOut
     */
    id: string;
    /**
     *
     * @type {JsonApiDataSourceIdentifierOutMeta}
     * @memberof JsonApiDataSourceOut
     */
    meta?: JsonApiDataSourceIdentifierOutMeta;
    /**
     *
     * @type {JsonApiDataSourceOutAttributes}
     * @memberof JsonApiDataSourceOut
     */
    attributes: JsonApiDataSourceOutAttributes;
}

/**
 *
 * @export
 * @interface JsonApiDataSourceOutAttributes
 */
export declare interface JsonApiDataSourceOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    type: JsonApiDataSourceOutAttributesTypeEnum;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    schema: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributes
     */
    username?: string;
    /**
     * Enable caching of intermediate results.
     * @type {boolean}
     * @memberof JsonApiDataSourceOutAttributes
     */
    enableCaching?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDataSourceOutAttributes
     */
    cachePath?: Array<string>;
    /**
     *
     * @type {Array<JsonApiDataSourceOutAttributesParameters>}
     * @memberof JsonApiDataSourceOutAttributes
     */
    parameters?: Array<JsonApiDataSourceOutAttributesParameters>;
    /**
     *
     * @type {Array<JsonApiDataSourceOutAttributesParameters>}
     * @memberof JsonApiDataSourceOutAttributes
     */
    decodedParameters?: Array<JsonApiDataSourceOutAttributesParameters>;
}

/**
 *
 * @export
 * @interface JsonApiDataSourceOutAttributesParameters
 */
export declare interface JsonApiDataSourceOutAttributesParameters {
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributesParameters
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceOutAttributesParameters
     */
    value: string;
}

export declare const JsonApiDataSourceOutAttributesTypeEnum: {
    readonly POSTGRESQL: "POSTGRESQL";
    readonly REDSHIFT: "REDSHIFT";
    readonly VERTICA: "VERTICA";
    readonly SNOWFLAKE: "SNOWFLAKE";
    readonly ADS: "ADS";
    readonly BIGQUERY: "BIGQUERY";
    readonly MSSQL: "MSSQL";
    readonly PRESTO: "PRESTO";
    readonly DREMIO: "DREMIO";
    readonly DRILL: "DRILL";
    readonly GREENPLUM: "GREENPLUM";
    readonly AZURESQL: "AZURESQL";
    readonly SYNAPSESQL: "SYNAPSESQL";
    readonly DATABRICKS: "DATABRICKS";
};

export declare type JsonApiDataSourceOutAttributesTypeEnum = typeof JsonApiDataSourceOutAttributesTypeEnum[keyof typeof JsonApiDataSourceOutAttributesTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDataSourceOutDocument
 */
export declare interface JsonApiDataSourceOutDocument {
    /**
     *
     * @type {JsonApiDataSourceOut}
     * @memberof JsonApiDataSourceOutDocument
     */
    data: JsonApiDataSourceOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDataSourceOutDocument
     */
    links?: ObjectLinks;
}

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiDataSourceOutList
 */
export declare interface JsonApiDataSourceOutList {
    /**
     *
     * @type {Array<JsonApiDataSourceOutWithLinks>}
     * @memberof JsonApiDataSourceOutList
     */
    data: Array<JsonApiDataSourceOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiDataSourceOutList
     */
    links?: ListLinks;
}

export declare const JsonApiDataSourceOutTypeEnum: {
    readonly DATA_SOURCE: "dataSource";
};

export declare type JsonApiDataSourceOutTypeEnum = typeof JsonApiDataSourceOutTypeEnum[keyof typeof JsonApiDataSourceOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDataSourceOutWithLinks
 */
export declare interface JsonApiDataSourceOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceOutWithLinks
     */
    type: JsonApiDataSourceOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiDataSourceIdentifierOutMeta}
     * @memberof JsonApiDataSourceOutWithLinks
     */
    meta?: JsonApiDataSourceIdentifierOutMeta;
    /**
     *
     * @type {JsonApiDataSourceOutAttributes}
     * @memberof JsonApiDataSourceOutWithLinks
     */
    attributes: JsonApiDataSourceOutAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDataSourceOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiDataSourceOutWithLinksTypeEnum: {
    readonly DATA_SOURCE: "dataSource";
};

export declare type JsonApiDataSourceOutWithLinksTypeEnum = typeof JsonApiDataSourceOutWithLinksTypeEnum[keyof typeof JsonApiDataSourceOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching dataSource entity.
 * @export
 * @interface JsonApiDataSourcePatch
 */
export declare interface JsonApiDataSourcePatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourcePatch
     */
    type: JsonApiDataSourcePatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourcePatch
     */
    id: string;
    /**
     *
     * @type {JsonApiDataSourcePatchAttributes}
     * @memberof JsonApiDataSourcePatch
     */
    attributes: JsonApiDataSourcePatchAttributes;
}

/**
 *
 * @export
 * @interface JsonApiDataSourcePatchAttributes
 */
export declare interface JsonApiDataSourcePatchAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourcePatchAttributes
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourcePatchAttributes
     */
    type?: JsonApiDataSourcePatchAttributesTypeEnum;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourcePatchAttributes
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourcePatchAttributes
     */
    schema?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourcePatchAttributes
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourcePatchAttributes
     */
    password?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourcePatchAttributes
     */
    token?: string;
    /**
     * Enable caching of intermediate results.
     * @type {boolean}
     * @memberof JsonApiDataSourcePatchAttributes
     */
    enableCaching?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDataSourcePatchAttributes
     */
    cachePath?: Array<string>;
    /**
     *
     * @type {Array<JsonApiDataSourceOutAttributesParameters>}
     * @memberof JsonApiDataSourcePatchAttributes
     */
    parameters?: Array<JsonApiDataSourceOutAttributesParameters>;
}

export declare const JsonApiDataSourcePatchAttributesTypeEnum: {
    readonly POSTGRESQL: "POSTGRESQL";
    readonly REDSHIFT: "REDSHIFT";
    readonly VERTICA: "VERTICA";
    readonly SNOWFLAKE: "SNOWFLAKE";
    readonly ADS: "ADS";
    readonly BIGQUERY: "BIGQUERY";
    readonly MSSQL: "MSSQL";
    readonly PRESTO: "PRESTO";
    readonly DREMIO: "DREMIO";
    readonly DRILL: "DRILL";
    readonly GREENPLUM: "GREENPLUM";
    readonly AZURESQL: "AZURESQL";
    readonly SYNAPSESQL: "SYNAPSESQL";
    readonly DATABRICKS: "DATABRICKS";
};

export declare type JsonApiDataSourcePatchAttributesTypeEnum = typeof JsonApiDataSourcePatchAttributesTypeEnum[keyof typeof JsonApiDataSourcePatchAttributesTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDataSourcePatchDocument
 */
export declare interface JsonApiDataSourcePatchDocument {
    /**
     *
     * @type {JsonApiDataSourcePatch}
     * @memberof JsonApiDataSourcePatchDocument
     */
    data: JsonApiDataSourcePatch;
}

export declare const JsonApiDataSourcePatchTypeEnum: {
    readonly DATA_SOURCE: "dataSource";
};

export declare type JsonApiDataSourcePatchTypeEnum = typeof JsonApiDataSourcePatchTypeEnum[keyof typeof JsonApiDataSourcePatchTypeEnum];

/**
 * Tables in data source
 * @export
 * @interface JsonApiDataSourceTableOut
 */
export declare interface JsonApiDataSourceTableOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceTableOut
     */
    type: JsonApiDataSourceTableOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceTableOut
     */
    id: string;
    /**
     *
     * @type {JsonApiDataSourceTableOutAttributes}
     * @memberof JsonApiDataSourceTableOut
     */
    attributes: JsonApiDataSourceTableOutAttributes;
}

/**
 *
 * @export
 * @interface JsonApiDataSourceTableOutAttributes
 */
export declare interface JsonApiDataSourceTableOutAttributes {
    /**
     * Path to table.
     * @type {Array<string>}
     * @memberof JsonApiDataSourceTableOutAttributes
     */
    path?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceTableOutAttributes
     */
    type?: JsonApiDataSourceTableOutAttributesTypeEnum;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceTableOutAttributes
     */
    namePrefix?: string;
    /**
     *
     * @type {Array<JsonApiDataSourceTableOutAttributesColumns>}
     * @memberof JsonApiDataSourceTableOutAttributes
     */
    columns: Array<JsonApiDataSourceTableOutAttributesColumns>;
}

/**
 * Table columns in data source
 * @export
 * @interface JsonApiDataSourceTableOutAttributesColumns
 */
export declare interface JsonApiDataSourceTableOutAttributesColumns {
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceTableOutAttributesColumns
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceTableOutAttributesColumns
     */
    dataType: JsonApiDataSourceTableOutAttributesColumnsDataTypeEnum;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiDataSourceTableOutAttributesColumns
     */
    isPrimaryKey?: boolean;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceTableOutAttributesColumns
     */
    referencedTableId?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceTableOutAttributesColumns
     */
    referencedTableColumn?: string;
}

export declare const JsonApiDataSourceTableOutAttributesColumnsDataTypeEnum: {
    readonly INT: "INT";
    readonly STRING: "STRING";
    readonly DATE: "DATE";
    readonly NUMERIC: "NUMERIC";
    readonly TIMESTAMP: "TIMESTAMP";
    readonly TIMESTAMP_TZ: "TIMESTAMP_TZ";
    readonly BOOLEAN: "BOOLEAN";
};

export declare type JsonApiDataSourceTableOutAttributesColumnsDataTypeEnum = typeof JsonApiDataSourceTableOutAttributesColumnsDataTypeEnum[keyof typeof JsonApiDataSourceTableOutAttributesColumnsDataTypeEnum];

export declare const JsonApiDataSourceTableOutAttributesTypeEnum: {
    readonly TABLE: "TABLE";
    readonly VIEW: "VIEW";
};

export declare type JsonApiDataSourceTableOutAttributesTypeEnum = typeof JsonApiDataSourceTableOutAttributesTypeEnum[keyof typeof JsonApiDataSourceTableOutAttributesTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDataSourceTableOutDocument
 */
export declare interface JsonApiDataSourceTableOutDocument {
    /**
     *
     * @type {JsonApiDataSourceTableOut}
     * @memberof JsonApiDataSourceTableOutDocument
     */
    data: JsonApiDataSourceTableOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDataSourceTableOutDocument
     */
    links?: ObjectLinks;
}

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiDataSourceTableOutList
 */
export declare interface JsonApiDataSourceTableOutList {
    /**
     *
     * @type {Array<JsonApiDataSourceTableOutWithLinks>}
     * @memberof JsonApiDataSourceTableOutList
     */
    data: Array<JsonApiDataSourceTableOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiDataSourceTableOutList
     */
    links?: ListLinks;
}

export declare const JsonApiDataSourceTableOutTypeEnum: {
    readonly DATA_SOURCE_TABLE: "dataSourceTable";
};

export declare type JsonApiDataSourceTableOutTypeEnum = typeof JsonApiDataSourceTableOutTypeEnum[keyof typeof JsonApiDataSourceTableOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiDataSourceTableOutWithLinks
 */
export declare interface JsonApiDataSourceTableOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceTableOutWithLinks
     */
    type: JsonApiDataSourceTableOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceTableOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiDataSourceTableOutAttributes}
     * @memberof JsonApiDataSourceTableOutWithLinks
     */
    attributes: JsonApiDataSourceTableOutAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDataSourceTableOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiDataSourceTableOutWithLinksTypeEnum: {
    readonly DATA_SOURCE_TABLE: "dataSourceTable";
};

export declare type JsonApiDataSourceTableOutWithLinksTypeEnum = typeof JsonApiDataSourceTableOutWithLinksTypeEnum[keyof typeof JsonApiDataSourceTableOutWithLinksTypeEnum];

/**
 * JSON:API representation of entitlement entity.
 * @export
 * @interface JsonApiEntitlementOut
 */
export declare interface JsonApiEntitlementOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiEntitlementOut
     */
    type: JsonApiEntitlementOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiEntitlementOut
     */
    id: string;
    /**
     *
     * @type {JsonApiEntitlementOutAttributes}
     * @memberof JsonApiEntitlementOut
     */
    attributes?: JsonApiEntitlementOutAttributes;
}

/**
 *
 * @export
 * @interface JsonApiEntitlementOutAttributes
 */
export declare interface JsonApiEntitlementOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiEntitlementOutAttributes
     */
    value?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiEntitlementOutAttributes
     */
    expiry?: string;
}

/**
 *
 * @export
 * @interface JsonApiEntitlementOutDocument
 */
export declare interface JsonApiEntitlementOutDocument {
    /**
     *
     * @type {JsonApiEntitlementOut}
     * @memberof JsonApiEntitlementOutDocument
     */
    data: JsonApiEntitlementOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiEntitlementOutDocument
     */
    links?: ObjectLinks;
}

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiEntitlementOutList
 */
export declare interface JsonApiEntitlementOutList {
    /**
     *
     * @type {Array<JsonApiEntitlementOutWithLinks>}
     * @memberof JsonApiEntitlementOutList
     */
    data: Array<JsonApiEntitlementOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiEntitlementOutList
     */
    links?: ListLinks;
}

export declare const JsonApiEntitlementOutTypeEnum: {
    readonly ENTITLEMENT: "entitlement";
};

export declare type JsonApiEntitlementOutTypeEnum = typeof JsonApiEntitlementOutTypeEnum[keyof typeof JsonApiEntitlementOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiEntitlementOutWithLinks
 */
export declare interface JsonApiEntitlementOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiEntitlementOutWithLinks
     */
    type: JsonApiEntitlementOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiEntitlementOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiEntitlementOutAttributes}
     * @memberof JsonApiEntitlementOutWithLinks
     */
    attributes?: JsonApiEntitlementOutAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiEntitlementOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiEntitlementOutWithLinksTypeEnum: {
    readonly ENTITLEMENT: "entitlement";
};

export declare type JsonApiEntitlementOutWithLinksTypeEnum = typeof JsonApiEntitlementOutWithLinksTypeEnum[keyof typeof JsonApiEntitlementOutWithLinksTypeEnum];

/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiFactLinkage
 */
export declare interface JsonApiFactLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiFactLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiFactLinkage
     */
    type: JsonApiFactLinkageTypeEnum;
}

export declare const JsonApiFactLinkageTypeEnum: {
    readonly FACT: "fact";
};

export declare type JsonApiFactLinkageTypeEnum = typeof JsonApiFactLinkageTypeEnum[keyof typeof JsonApiFactLinkageTypeEnum];

/**
 * JSON:API representation of fact entity.
 * @export
 * @interface JsonApiFactOut
 */
export declare interface JsonApiFactOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFactOut
     */
    type: JsonApiFactOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFactOut
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutMeta}
     * @memberof JsonApiFactOut
     */
    meta?: JsonApiAttributeHierarchyOutMeta;
    /**
     *
     * @type {JsonApiFactOutAttributes}
     * @memberof JsonApiFactOut
     */
    attributes?: JsonApiFactOutAttributes;
    /**
     *
     * @type {JsonApiFactOutRelationships}
     * @memberof JsonApiFactOut
     */
    relationships?: JsonApiFactOutRelationships;
}

/**
 *
 * @export
 * @interface JsonApiFactOutAttributes
 */
export declare interface JsonApiFactOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiFactOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiFactOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiFactOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiFactOutAttributes
     */
    sourceColumn?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiFactOutAttributes
     */
    sourceColumnDataType?: JsonApiFactOutAttributesSourceColumnDataTypeEnum;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiFactOutAttributes
     */
    areRelationsValid?: boolean;
}

export declare const JsonApiFactOutAttributesSourceColumnDataTypeEnum: {
    readonly INT: "INT";
    readonly STRING: "STRING";
    readonly DATE: "DATE";
    readonly NUMERIC: "NUMERIC";
    readonly TIMESTAMP: "TIMESTAMP";
    readonly TIMESTAMP_TZ: "TIMESTAMP_TZ";
    readonly BOOLEAN: "BOOLEAN";
};

export declare type JsonApiFactOutAttributesSourceColumnDataTypeEnum = typeof JsonApiFactOutAttributesSourceColumnDataTypeEnum[keyof typeof JsonApiFactOutAttributesSourceColumnDataTypeEnum];

/**
 *
 * @export
 * @interface JsonApiFactOutDocument
 */
export declare interface JsonApiFactOutDocument {
    /**
     *
     * @type {JsonApiFactOut}
     * @memberof JsonApiFactOutDocument
     */
    data: JsonApiFactOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiFactOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiDatasetOutWithLinks>}
     * @memberof JsonApiFactOutDocument
     */
    included?: Array<JsonApiDatasetOutWithLinks>;
}

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiFactOutList
 */
export declare interface JsonApiFactOutList {
    /**
     *
     * @type {Array<JsonApiFactOutWithLinks>}
     * @memberof JsonApiFactOutList
     */
    data: Array<JsonApiFactOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiFactOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiDatasetOutWithLinks>}
     * @memberof JsonApiFactOutList
     */
    included?: Array<JsonApiDatasetOutWithLinks>;
}

/**
 *
 * @export
 * @interface JsonApiFactOutRelationships
 */
export declare interface JsonApiFactOutRelationships {
    /**
     *
     * @type {JsonApiAttributeOutRelationshipsDataset}
     * @memberof JsonApiFactOutRelationships
     */
    dataset?: JsonApiAttributeOutRelationshipsDataset;
}

export declare const JsonApiFactOutTypeEnum: {
    readonly FACT: "fact";
};

export declare type JsonApiFactOutTypeEnum = typeof JsonApiFactOutTypeEnum[keyof typeof JsonApiFactOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiFactOutWithLinks
 */
export declare interface JsonApiFactOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFactOutWithLinks
     */
    type: JsonApiFactOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFactOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutMeta}
     * @memberof JsonApiFactOutWithLinks
     */
    meta?: JsonApiAttributeHierarchyOutMeta;
    /**
     *
     * @type {JsonApiFactOutAttributes}
     * @memberof JsonApiFactOutWithLinks
     */
    attributes?: JsonApiFactOutAttributes;
    /**
     *
     * @type {JsonApiFactOutRelationships}
     * @memberof JsonApiFactOutWithLinks
     */
    relationships?: JsonApiFactOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiFactOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiFactOutWithLinksTypeEnum: {
    readonly FACT: "fact";
};

export declare type JsonApiFactOutWithLinksTypeEnum = typeof JsonApiFactOutWithLinksTypeEnum[keyof typeof JsonApiFactOutWithLinksTypeEnum];

/**
 * JSON:API representation of filterContext entity.
 * @export
 * @interface JsonApiFilterContextIn
 */
export declare interface JsonApiFilterContextIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFilterContextIn
     */
    type: JsonApiFilterContextInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFilterContextIn
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPostOptionalIdAttributes}
     * @memberof JsonApiFilterContextIn
     */
    attributes?: JsonApiAnalyticalDashboardPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiFilterContextInDocument
 */
export declare interface JsonApiFilterContextInDocument {
    /**
     *
     * @type {JsonApiFilterContextIn}
     * @memberof JsonApiFilterContextInDocument
     */
    data: JsonApiFilterContextIn;
}

export declare const JsonApiFilterContextInTypeEnum: {
    readonly FILTER_CONTEXT: "filterContext";
};

export declare type JsonApiFilterContextInTypeEnum = typeof JsonApiFilterContextInTypeEnum[keyof typeof JsonApiFilterContextInTypeEnum];

/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiFilterContextLinkage
 */
export declare interface JsonApiFilterContextLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiFilterContextLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiFilterContextLinkage
     */
    type: JsonApiFilterContextLinkageTypeEnum;
}

export declare const JsonApiFilterContextLinkageTypeEnum: {
    readonly FILTER_CONTEXT: "filterContext";
};

export declare type JsonApiFilterContextLinkageTypeEnum = typeof JsonApiFilterContextLinkageTypeEnum[keyof typeof JsonApiFilterContextLinkageTypeEnum];

/**
 * JSON:API representation of filterContext entity.
 * @export
 * @interface JsonApiFilterContextOut
 */
export declare interface JsonApiFilterContextOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFilterContextOut
     */
    type: JsonApiFilterContextOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFilterContextOut
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutMeta}
     * @memberof JsonApiFilterContextOut
     */
    meta?: JsonApiAttributeHierarchyOutMeta;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPostOptionalIdAttributes}
     * @memberof JsonApiFilterContextOut
     */
    attributes?: JsonApiAnalyticalDashboardPostOptionalIdAttributes;
    /**
     *
     * @type {JsonApiFilterContextOutRelationships}
     * @memberof JsonApiFilterContextOut
     */
    relationships?: JsonApiFilterContextOutRelationships;
}

/**
 *
 * @export
 * @interface JsonApiFilterContextOutDocument
 */
export declare interface JsonApiFilterContextOutDocument {
    /**
     *
     * @type {JsonApiFilterContextOut}
     * @memberof JsonApiFilterContextOutDocument
     */
    data: JsonApiFilterContextOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiFilterContextOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiFilterContextOutIncludes>}
     * @memberof JsonApiFilterContextOutDocument
     */
    included?: Array<JsonApiFilterContextOutIncludes>;
}

/**
 * @type JsonApiFilterContextOutIncludes
 * @export
 */
export declare type JsonApiFilterContextOutIncludes = JsonApiAttributeOutWithLinks | JsonApiDatasetOutWithLinks | JsonApiLabelOutWithLinks;

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiFilterContextOutList
 */
export declare interface JsonApiFilterContextOutList {
    /**
     *
     * @type {Array<JsonApiFilterContextOutWithLinks>}
     * @memberof JsonApiFilterContextOutList
     */
    data: Array<JsonApiFilterContextOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiFilterContextOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiFilterContextOutIncludes>}
     * @memberof JsonApiFilterContextOutList
     */
    included?: Array<JsonApiFilterContextOutIncludes>;
}

/**
 *
 * @export
 * @interface JsonApiFilterContextOutRelationships
 */
export declare interface JsonApiFilterContextOutRelationships {
    /**
     *
     * @type {JsonApiAttributeHierarchyOutRelationshipsAttributes}
     * @memberof JsonApiFilterContextOutRelationships
     */
    attributes?: JsonApiAttributeHierarchyOutRelationshipsAttributes;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsDatasets}
     * @memberof JsonApiFilterContextOutRelationships
     */
    datasets?: JsonApiAnalyticalDashboardOutRelationshipsDatasets;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsLabels}
     * @memberof JsonApiFilterContextOutRelationships
     */
    labels?: JsonApiAnalyticalDashboardOutRelationshipsLabels;
}

export declare const JsonApiFilterContextOutTypeEnum: {
    readonly FILTER_CONTEXT: "filterContext";
};

export declare type JsonApiFilterContextOutTypeEnum = typeof JsonApiFilterContextOutTypeEnum[keyof typeof JsonApiFilterContextOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiFilterContextOutWithLinks
 */
export declare interface JsonApiFilterContextOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    type: JsonApiFilterContextOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutMeta}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    meta?: JsonApiAttributeHierarchyOutMeta;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPostOptionalIdAttributes}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    attributes?: JsonApiAnalyticalDashboardPostOptionalIdAttributes;
    /**
     *
     * @type {JsonApiFilterContextOutRelationships}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    relationships?: JsonApiFilterContextOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiFilterContextOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiFilterContextOutWithLinksTypeEnum: {
    readonly FILTER_CONTEXT: "filterContext";
};

export declare type JsonApiFilterContextOutWithLinksTypeEnum = typeof JsonApiFilterContextOutWithLinksTypeEnum[keyof typeof JsonApiFilterContextOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching filterContext entity.
 * @export
 * @interface JsonApiFilterContextPatch
 */
export declare interface JsonApiFilterContextPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFilterContextPatch
     */
    type: JsonApiFilterContextPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFilterContextPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPostOptionalIdAttributes}
     * @memberof JsonApiFilterContextPatch
     */
    attributes?: JsonApiAnalyticalDashboardPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiFilterContextPatchDocument
 */
export declare interface JsonApiFilterContextPatchDocument {
    /**
     *
     * @type {JsonApiFilterContextPatch}
     * @memberof JsonApiFilterContextPatchDocument
     */
    data: JsonApiFilterContextPatch;
}

export declare const JsonApiFilterContextPatchTypeEnum: {
    readonly FILTER_CONTEXT: "filterContext";
};

export declare type JsonApiFilterContextPatchTypeEnum = typeof JsonApiFilterContextPatchTypeEnum[keyof typeof JsonApiFilterContextPatchTypeEnum];

/**
 * JSON:API representation of filterContext entity.
 * @export
 * @interface JsonApiFilterContextPostOptionalId
 */
export declare interface JsonApiFilterContextPostOptionalId {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFilterContextPostOptionalId
     */
    type: JsonApiFilterContextPostOptionalIdTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFilterContextPostOptionalId
     */
    id?: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPostOptionalIdAttributes}
     * @memberof JsonApiFilterContextPostOptionalId
     */
    attributes?: JsonApiAnalyticalDashboardPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiFilterContextPostOptionalIdDocument
 */
export declare interface JsonApiFilterContextPostOptionalIdDocument {
    /**
     *
     * @type {JsonApiFilterContextPostOptionalId}
     * @memberof JsonApiFilterContextPostOptionalIdDocument
     */
    data: JsonApiFilterContextPostOptionalId;
}

export declare const JsonApiFilterContextPostOptionalIdTypeEnum: {
    readonly FILTER_CONTEXT: "filterContext";
};

export declare type JsonApiFilterContextPostOptionalIdTypeEnum = typeof JsonApiFilterContextPostOptionalIdTypeEnum[keyof typeof JsonApiFilterContextPostOptionalIdTypeEnum];

export declare const jsonApiHeaders: {
    Accept: string;
    "Content-Type": string;
};

/**
 * JSON:API representation of jwk entity.
 * @export
 * @interface JsonApiJwkIn
 */
export declare interface JsonApiJwkIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiJwkIn
     */
    type: JsonApiJwkInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiJwkIn
     */
    id: string;
    /**
     *
     * @type {JsonApiJwkOutAttributes}
     * @memberof JsonApiJwkIn
     */
    attributes?: JsonApiJwkOutAttributes;
}

/**
 *
 * @export
 * @interface JsonApiJwkInDocument
 */
export declare interface JsonApiJwkInDocument {
    /**
     *
     * @type {JsonApiJwkIn}
     * @memberof JsonApiJwkInDocument
     */
    data: JsonApiJwkIn;
}

export declare const JsonApiJwkInTypeEnum: {
    readonly JWK: "jwk";
};

export declare type JsonApiJwkInTypeEnum = typeof JsonApiJwkInTypeEnum[keyof typeof JsonApiJwkInTypeEnum];

/**
 * JSON:API representation of jwk entity.
 * @export
 * @interface JsonApiJwkOut
 */
export declare interface JsonApiJwkOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiJwkOut
     */
    type: JsonApiJwkOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiJwkOut
     */
    id: string;
    /**
     *
     * @type {JsonApiJwkOutAttributes}
     * @memberof JsonApiJwkOut
     */
    attributes?: JsonApiJwkOutAttributes;
}

/**
 *
 * @export
 * @interface JsonApiJwkOutAttributes
 */
export declare interface JsonApiJwkOutAttributes {
    /**
     * Specification of the cryptographic key
     * @type {RsaSpecification}
     * @memberof JsonApiJwkOutAttributes
     */
    content?: RsaSpecification;
}

/**
 *
 * @export
 * @interface JsonApiJwkOutDocument
 */
export declare interface JsonApiJwkOutDocument {
    /**
     *
     * @type {JsonApiJwkOut}
     * @memberof JsonApiJwkOutDocument
     */
    data: JsonApiJwkOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiJwkOutDocument
     */
    links?: ObjectLinks;
}

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiJwkOutList
 */
export declare interface JsonApiJwkOutList {
    /**
     *
     * @type {Array<JsonApiJwkOutWithLinks>}
     * @memberof JsonApiJwkOutList
     */
    data: Array<JsonApiJwkOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiJwkOutList
     */
    links?: ListLinks;
}

export declare const JsonApiJwkOutTypeEnum: {
    readonly JWK: "jwk";
};

export declare type JsonApiJwkOutTypeEnum = typeof JsonApiJwkOutTypeEnum[keyof typeof JsonApiJwkOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiJwkOutWithLinks
 */
export declare interface JsonApiJwkOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiJwkOutWithLinks
     */
    type: JsonApiJwkOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiJwkOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiJwkOutAttributes}
     * @memberof JsonApiJwkOutWithLinks
     */
    attributes?: JsonApiJwkOutAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiJwkOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiJwkOutWithLinksTypeEnum: {
    readonly JWK: "jwk";
};

export declare type JsonApiJwkOutWithLinksTypeEnum = typeof JsonApiJwkOutWithLinksTypeEnum[keyof typeof JsonApiJwkOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching jwk entity.
 * @export
 * @interface JsonApiJwkPatch
 */
export declare interface JsonApiJwkPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiJwkPatch
     */
    type: JsonApiJwkPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiJwkPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiJwkOutAttributes}
     * @memberof JsonApiJwkPatch
     */
    attributes?: JsonApiJwkOutAttributes;
}

/**
 *
 * @export
 * @interface JsonApiJwkPatchDocument
 */
export declare interface JsonApiJwkPatchDocument {
    /**
     *
     * @type {JsonApiJwkPatch}
     * @memberof JsonApiJwkPatchDocument
     */
    data: JsonApiJwkPatch;
}

export declare const JsonApiJwkPatchTypeEnum: {
    readonly JWK: "jwk";
};

export declare type JsonApiJwkPatchTypeEnum = typeof JsonApiJwkPatchTypeEnum[keyof typeof JsonApiJwkPatchTypeEnum];

/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiLabelLinkage
 */
export declare interface JsonApiLabelLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelLinkage
     */
    type: JsonApiLabelLinkageTypeEnum;
}

export declare const JsonApiLabelLinkageTypeEnum: {
    readonly LABEL: "label";
};

export declare type JsonApiLabelLinkageTypeEnum = typeof JsonApiLabelLinkageTypeEnum[keyof typeof JsonApiLabelLinkageTypeEnum];

/**
 * JSON:API representation of label entity.
 * @export
 * @interface JsonApiLabelOut
 */
export declare interface JsonApiLabelOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiLabelOut
     */
    type: JsonApiLabelOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiLabelOut
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutMeta}
     * @memberof JsonApiLabelOut
     */
    meta?: JsonApiAttributeHierarchyOutMeta;
    /**
     *
     * @type {JsonApiLabelOutAttributes}
     * @memberof JsonApiLabelOut
     */
    attributes?: JsonApiLabelOutAttributes;
    /**
     *
     * @type {JsonApiLabelOutRelationships}
     * @memberof JsonApiLabelOut
     */
    relationships?: JsonApiLabelOutRelationships;
}

/**
 *
 * @export
 * @interface JsonApiLabelOutAttributes
 */
export declare interface JsonApiLabelOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiLabelOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiLabelOutAttributes
     */
    primary?: boolean;
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelOutAttributes
     */
    sourceColumn?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelOutAttributes
     */
    sourceColumnDataType?: JsonApiLabelOutAttributesSourceColumnDataTypeEnum;
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelOutAttributes
     */
    valueType?: JsonApiLabelOutAttributesValueTypeEnum;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiLabelOutAttributes
     */
    areRelationsValid?: boolean;
}

export declare const JsonApiLabelOutAttributesSourceColumnDataTypeEnum: {
    readonly INT: "INT";
    readonly STRING: "STRING";
    readonly DATE: "DATE";
    readonly NUMERIC: "NUMERIC";
    readonly TIMESTAMP: "TIMESTAMP";
    readonly TIMESTAMP_TZ: "TIMESTAMP_TZ";
    readonly BOOLEAN: "BOOLEAN";
};

export declare type JsonApiLabelOutAttributesSourceColumnDataTypeEnum = typeof JsonApiLabelOutAttributesSourceColumnDataTypeEnum[keyof typeof JsonApiLabelOutAttributesSourceColumnDataTypeEnum];

export declare const JsonApiLabelOutAttributesValueTypeEnum: {
    readonly TEXT: "TEXT";
    readonly HYPERLINK: "HYPERLINK";
    readonly GEO: "GEO";
    readonly GEO_LONGITUDE: "GEO_LONGITUDE";
    readonly GEO_LATITUDE: "GEO_LATITUDE";
};

export declare type JsonApiLabelOutAttributesValueTypeEnum = typeof JsonApiLabelOutAttributesValueTypeEnum[keyof typeof JsonApiLabelOutAttributesValueTypeEnum];

/**
 *
 * @export
 * @interface JsonApiLabelOutDocument
 */
export declare interface JsonApiLabelOutDocument {
    /**
     *
     * @type {JsonApiLabelOut}
     * @memberof JsonApiLabelOutDocument
     */
    data: JsonApiLabelOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiLabelOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeOutWithLinks>}
     * @memberof JsonApiLabelOutDocument
     */
    included?: Array<JsonApiAttributeOutWithLinks>;
}

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiLabelOutList
 */
export declare interface JsonApiLabelOutList {
    /**
     *
     * @type {Array<JsonApiLabelOutWithLinks>}
     * @memberof JsonApiLabelOutList
     */
    data: Array<JsonApiLabelOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiLabelOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeOutWithLinks>}
     * @memberof JsonApiLabelOutList
     */
    included?: Array<JsonApiAttributeOutWithLinks>;
}

/**
 *
 * @export
 * @interface JsonApiLabelOutRelationships
 */
export declare interface JsonApiLabelOutRelationships {
    /**
     *
     * @type {JsonApiLabelOutRelationshipsAttribute}
     * @memberof JsonApiLabelOutRelationships
     */
    attribute?: JsonApiLabelOutRelationshipsAttribute;
}

/**
 *
 * @export
 * @interface JsonApiLabelOutRelationshipsAttribute
 */
export declare interface JsonApiLabelOutRelationshipsAttribute {
    /**
     *
     * @type {JsonApiAttributeToOneLinkage}
     * @memberof JsonApiLabelOutRelationshipsAttribute
     */
    data: JsonApiAttributeToOneLinkage | null;
}

export declare const JsonApiLabelOutTypeEnum: {
    readonly LABEL: "label";
};

export declare type JsonApiLabelOutTypeEnum = typeof JsonApiLabelOutTypeEnum[keyof typeof JsonApiLabelOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiLabelOutWithLinks
 */
export declare interface JsonApiLabelOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiLabelOutWithLinks
     */
    type: JsonApiLabelOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiLabelOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutMeta}
     * @memberof JsonApiLabelOutWithLinks
     */
    meta?: JsonApiAttributeHierarchyOutMeta;
    /**
     *
     * @type {JsonApiLabelOutAttributes}
     * @memberof JsonApiLabelOutWithLinks
     */
    attributes?: JsonApiLabelOutAttributes;
    /**
     *
     * @type {JsonApiLabelOutRelationships}
     * @memberof JsonApiLabelOutWithLinks
     */
    relationships?: JsonApiLabelOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiLabelOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiLabelOutWithLinksTypeEnum: {
    readonly LABEL: "label";
};

export declare type JsonApiLabelOutWithLinksTypeEnum = typeof JsonApiLabelOutWithLinksTypeEnum[keyof typeof JsonApiLabelOutWithLinksTypeEnum];

/**
 * @type JsonApiLabelToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export declare type JsonApiLabelToOneLinkage = JsonApiLabelLinkage;

/**
 * JSON:API representation of metric entity.
 * @export
 * @interface JsonApiMetricIn
 */
export declare interface JsonApiMetricIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiMetricIn
     */
    type: JsonApiMetricInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiMetricIn
     */
    id: string;
    /**
     *
     * @type {JsonApiMetricPostOptionalIdAttributes}
     * @memberof JsonApiMetricIn
     */
    attributes: JsonApiMetricPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiMetricInDocument
 */
export declare interface JsonApiMetricInDocument {
    /**
     *
     * @type {JsonApiMetricIn}
     * @memberof JsonApiMetricInDocument
     */
    data: JsonApiMetricIn;
}

export declare const JsonApiMetricInTypeEnum: {
    readonly METRIC: "metric";
};

export declare type JsonApiMetricInTypeEnum = typeof JsonApiMetricInTypeEnum[keyof typeof JsonApiMetricInTypeEnum];

/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiMetricLinkage
 */
export declare interface JsonApiMetricLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricLinkage
     */
    type: JsonApiMetricLinkageTypeEnum;
}

export declare const JsonApiMetricLinkageTypeEnum: {
    readonly METRIC: "metric";
};

export declare type JsonApiMetricLinkageTypeEnum = typeof JsonApiMetricLinkageTypeEnum[keyof typeof JsonApiMetricLinkageTypeEnum];

/**
 * JSON:API representation of metric entity.
 * @export
 * @interface JsonApiMetricOut
 */
export declare interface JsonApiMetricOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiMetricOut
     */
    type: JsonApiMetricOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiMetricOut
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutMeta}
     * @memberof JsonApiMetricOut
     */
    meta?: JsonApiAttributeHierarchyOutMeta;
    /**
     *
     * @type {JsonApiMetricOutAttributes}
     * @memberof JsonApiMetricOut
     */
    attributes: JsonApiMetricOutAttributes;
    /**
     *
     * @type {JsonApiMetricOutRelationships}
     * @memberof JsonApiMetricOut
     */
    relationships?: JsonApiMetricOutRelationships;
}

/**
 *
 * @export
 * @interface JsonApiMetricOutAttributes
 */
export declare interface JsonApiMetricOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricOutAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricOutAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiMetricOutAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiMetricOutAttributes
     */
    areRelationsValid?: boolean;
    /**
     *
     * @type {JsonApiMetricPostOptionalIdAttributesContent}
     * @memberof JsonApiMetricOutAttributes
     */
    content: JsonApiMetricPostOptionalIdAttributesContent;
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricOutAttributes
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricOutAttributes
     */
    modifiedAt?: string;
}

/**
 *
 * @export
 * @interface JsonApiMetricOutDocument
 */
export declare interface JsonApiMetricOutDocument {
    /**
     *
     * @type {JsonApiMetricOut}
     * @memberof JsonApiMetricOutDocument
     */
    data: JsonApiMetricOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiMetricOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiMetricOutIncludes>}
     * @memberof JsonApiMetricOutDocument
     */
    included?: Array<JsonApiMetricOutIncludes>;
}

/**
 * @type JsonApiMetricOutIncludes
 * @export
 */
export declare type JsonApiMetricOutIncludes = JsonApiAttributeOutWithLinks | JsonApiDatasetOutWithLinks | JsonApiFactOutWithLinks | JsonApiLabelOutWithLinks | JsonApiMetricOutWithLinks | JsonApiUserIdentifierOutWithLinks;

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiMetricOutList
 */
export declare interface JsonApiMetricOutList {
    /**
     *
     * @type {Array<JsonApiMetricOutWithLinks>}
     * @memberof JsonApiMetricOutList
     */
    data: Array<JsonApiMetricOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiMetricOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiMetricOutIncludes>}
     * @memberof JsonApiMetricOutList
     */
    included?: Array<JsonApiMetricOutIncludes>;
}

/**
 *
 * @export
 * @interface JsonApiMetricOutRelationships
 */
export declare interface JsonApiMetricOutRelationships {
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsCreatedBy}
     * @memberof JsonApiMetricOutRelationships
     */
    createdBy?: JsonApiAnalyticalDashboardOutRelationshipsCreatedBy;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsCreatedBy}
     * @memberof JsonApiMetricOutRelationships
     */
    modifiedBy?: JsonApiAnalyticalDashboardOutRelationshipsCreatedBy;
    /**
     *
     * @type {JsonApiMetricOutRelationshipsFacts}
     * @memberof JsonApiMetricOutRelationships
     */
    facts?: JsonApiMetricOutRelationshipsFacts;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutRelationshipsAttributes}
     * @memberof JsonApiMetricOutRelationships
     */
    attributes?: JsonApiAttributeHierarchyOutRelationshipsAttributes;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsLabels}
     * @memberof JsonApiMetricOutRelationships
     */
    labels?: JsonApiAnalyticalDashboardOutRelationshipsLabels;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsMetrics}
     * @memberof JsonApiMetricOutRelationships
     */
    metrics?: JsonApiAnalyticalDashboardOutRelationshipsMetrics;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsDatasets}
     * @memberof JsonApiMetricOutRelationships
     */
    datasets?: JsonApiAnalyticalDashboardOutRelationshipsDatasets;
}

/**
 *
 * @export
 * @interface JsonApiMetricOutRelationshipsFacts
 */
export declare interface JsonApiMetricOutRelationshipsFacts {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiFactLinkage>}
     * @memberof JsonApiMetricOutRelationshipsFacts
     */
    data: Array<JsonApiFactLinkage>;
}

export declare const JsonApiMetricOutTypeEnum: {
    readonly METRIC: "metric";
};

export declare type JsonApiMetricOutTypeEnum = typeof JsonApiMetricOutTypeEnum[keyof typeof JsonApiMetricOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiMetricOutWithLinks
 */
export declare interface JsonApiMetricOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiMetricOutWithLinks
     */
    type: JsonApiMetricOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiMetricOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutMeta}
     * @memberof JsonApiMetricOutWithLinks
     */
    meta?: JsonApiAttributeHierarchyOutMeta;
    /**
     *
     * @type {JsonApiMetricOutAttributes}
     * @memberof JsonApiMetricOutWithLinks
     */
    attributes: JsonApiMetricOutAttributes;
    /**
     *
     * @type {JsonApiMetricOutRelationships}
     * @memberof JsonApiMetricOutWithLinks
     */
    relationships?: JsonApiMetricOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiMetricOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiMetricOutWithLinksTypeEnum: {
    readonly METRIC: "metric";
};

export declare type JsonApiMetricOutWithLinksTypeEnum = typeof JsonApiMetricOutWithLinksTypeEnum[keyof typeof JsonApiMetricOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching metric entity.
 * @export
 * @interface JsonApiMetricPatch
 */
export declare interface JsonApiMetricPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiMetricPatch
     */
    type: JsonApiMetricPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiMetricPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiMetricPatchAttributes}
     * @memberof JsonApiMetricPatch
     */
    attributes: JsonApiMetricPatchAttributes;
}

/**
 *
 * @export
 * @interface JsonApiMetricPatchAttributes
 */
export declare interface JsonApiMetricPatchAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricPatchAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricPatchAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiMetricPatchAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiMetricPatchAttributes
     */
    areRelationsValid?: boolean;
    /**
     *
     * @type {JsonApiMetricPostOptionalIdAttributesContent}
     * @memberof JsonApiMetricPatchAttributes
     */
    content?: JsonApiMetricPostOptionalIdAttributesContent;
}

/**
 *
 * @export
 * @interface JsonApiMetricPatchDocument
 */
export declare interface JsonApiMetricPatchDocument {
    /**
     *
     * @type {JsonApiMetricPatch}
     * @memberof JsonApiMetricPatchDocument
     */
    data: JsonApiMetricPatch;
}

export declare const JsonApiMetricPatchTypeEnum: {
    readonly METRIC: "metric";
};

export declare type JsonApiMetricPatchTypeEnum = typeof JsonApiMetricPatchTypeEnum[keyof typeof JsonApiMetricPatchTypeEnum];

/**
 * JSON:API representation of metric entity.
 * @export
 * @interface JsonApiMetricPostOptionalId
 */
export declare interface JsonApiMetricPostOptionalId {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiMetricPostOptionalId
     */
    type: JsonApiMetricPostOptionalIdTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiMetricPostOptionalId
     */
    id?: string;
    /**
     *
     * @type {JsonApiMetricPostOptionalIdAttributes}
     * @memberof JsonApiMetricPostOptionalId
     */
    attributes: JsonApiMetricPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiMetricPostOptionalIdAttributes
 */
export declare interface JsonApiMetricPostOptionalIdAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricPostOptionalIdAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricPostOptionalIdAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiMetricPostOptionalIdAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiMetricPostOptionalIdAttributes
     */
    areRelationsValid?: boolean;
    /**
     *
     * @type {JsonApiMetricPostOptionalIdAttributesContent}
     * @memberof JsonApiMetricPostOptionalIdAttributes
     */
    content: JsonApiMetricPostOptionalIdAttributesContent;
}

/**
 *
 * @export
 * @interface JsonApiMetricPostOptionalIdAttributesContent
 */
export declare interface JsonApiMetricPostOptionalIdAttributesContent {
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricPostOptionalIdAttributesContent
     */
    format?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricPostOptionalIdAttributesContent
     */
    maql: string;
}

/**
 *
 * @export
 * @interface JsonApiMetricPostOptionalIdDocument
 */
export declare interface JsonApiMetricPostOptionalIdDocument {
    /**
     *
     * @type {JsonApiMetricPostOptionalId}
     * @memberof JsonApiMetricPostOptionalIdDocument
     */
    data: JsonApiMetricPostOptionalId;
}

export declare const JsonApiMetricPostOptionalIdTypeEnum: {
    readonly METRIC: "metric";
};

export declare type JsonApiMetricPostOptionalIdTypeEnum = typeof JsonApiMetricPostOptionalIdTypeEnum[keyof typeof JsonApiMetricPostOptionalIdTypeEnum];

/**
 * JSON:API representation of organization entity.
 * @export
 * @interface JsonApiOrganizationIn
 */
export declare interface JsonApiOrganizationIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiOrganizationIn
     */
    type: JsonApiOrganizationInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiOrganizationIn
     */
    id: string;
    /**
     *
     * @type {JsonApiOrganizationInAttributes}
     * @memberof JsonApiOrganizationIn
     */
    attributes?: JsonApiOrganizationInAttributes;
}

/**
 *
 * @export
 * @interface JsonApiOrganizationInAttributes
 */
export declare interface JsonApiOrganizationInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    hostname?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiOrganizationInAttributes
     */
    allowedOrigins?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    oauthIssuerLocation?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    oauthClientId?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    oauthClientSecret?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    earlyAccess?: string;
    /**
     * Any string identifying the OIDC provider. This value is used as suffix for OAuth2 callback (redirect) URL. If not defined, the standard callback URL is used. This value is valid only for external OIDC providers, not for the internal DEX provider.
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    oauthIssuerId?: string;
    /**
     * Any string identifying the claim in ID token, that should be used for user identification. The default value is \'sub\'.
     * @type {string}
     * @memberof JsonApiOrganizationInAttributes
     */
    oauthSubjectIdClaim?: string;
}

/**
 *
 * @export
 * @interface JsonApiOrganizationInDocument
 */
export declare interface JsonApiOrganizationInDocument {
    /**
     *
     * @type {JsonApiOrganizationIn}
     * @memberof JsonApiOrganizationInDocument
     */
    data: JsonApiOrganizationIn;
}

export declare const JsonApiOrganizationInTypeEnum: {
    readonly ORGANIZATION: "organization";
};

export declare type JsonApiOrganizationInTypeEnum = typeof JsonApiOrganizationInTypeEnum[keyof typeof JsonApiOrganizationInTypeEnum];

/**
 * JSON:API representation of organization entity.
 * @export
 * @interface JsonApiOrganizationOut
 */
export declare interface JsonApiOrganizationOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiOrganizationOut
     */
    type: JsonApiOrganizationOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiOrganizationOut
     */
    id: string;
    /**
     *
     * @type {JsonApiOrganizationOutMeta}
     * @memberof JsonApiOrganizationOut
     */
    meta?: JsonApiOrganizationOutMeta;
    /**
     *
     * @type {JsonApiOrganizationOutAttributes}
     * @memberof JsonApiOrganizationOut
     */
    attributes?: JsonApiOrganizationOutAttributes;
    /**
     *
     * @type {JsonApiOrganizationOutRelationships}
     * @memberof JsonApiOrganizationOut
     */
    relationships?: JsonApiOrganizationOutRelationships;
}

/**
 *
 * @export
 * @interface JsonApiOrganizationOutAttributes
 */
export declare interface JsonApiOrganizationOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    hostname?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiOrganizationOutAttributes
     */
    allowedOrigins?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    oauthIssuerLocation?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    oauthClientId?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    earlyAccess?: string;
    /**
     * Any string identifying the OIDC provider. This value is used as suffix for OAuth2 callback (redirect) URL. If not defined, the standard callback URL is used. This value is valid only for external OIDC providers, not for the internal DEX provider.
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    oauthIssuerId?: string;
    /**
     *
     * @type {JsonApiOrganizationOutAttributesCacheSettings}
     * @memberof JsonApiOrganizationOutAttributes
     */
    cacheSettings?: JsonApiOrganizationOutAttributesCacheSettings;
    /**
     * Any string identifying the claim in ID token, that should be used for user identification. The default value is \'sub\'.
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributes
     */
    oauthSubjectIdClaim?: string;
}

/**
 *
 * @export
 * @interface JsonApiOrganizationOutAttributesCacheSettings
 */
export declare interface JsonApiOrganizationOutAttributesCacheSettings {
    /**
     *
     * @type {number}
     * @memberof JsonApiOrganizationOutAttributesCacheSettings
     */
    extraCacheBudget?: number;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationOutAttributesCacheSettings
     */
    cacheStrategy?: JsonApiOrganizationOutAttributesCacheSettingsCacheStrategyEnum;
}

export declare const JsonApiOrganizationOutAttributesCacheSettingsCacheStrategyEnum: {
    readonly DURABLE: "DURABLE";
    readonly EPHEMERAL: "EPHEMERAL";
};

export declare type JsonApiOrganizationOutAttributesCacheSettingsCacheStrategyEnum = typeof JsonApiOrganizationOutAttributesCacheSettingsCacheStrategyEnum[keyof typeof JsonApiOrganizationOutAttributesCacheSettingsCacheStrategyEnum];

/**
 *
 * @export
 * @interface JsonApiOrganizationOutDocument
 */
export declare interface JsonApiOrganizationOutDocument {
    /**
     *
     * @type {JsonApiOrganizationOut}
     * @memberof JsonApiOrganizationOutDocument
     */
    data: JsonApiOrganizationOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiOrganizationOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiOrganizationOutIncludes>}
     * @memberof JsonApiOrganizationOutDocument
     */
    included?: Array<JsonApiOrganizationOutIncludes>;
}

/**
 * @type JsonApiOrganizationOutIncludes
 * @export
 */
export declare type JsonApiOrganizationOutIncludes = JsonApiUserGroupOutWithLinks | JsonApiUserOutWithLinks;

/**
 *
 * @export
 * @interface JsonApiOrganizationOutMeta
 */
export declare interface JsonApiOrganizationOutMeta {
    /**
     * List of valid permissions for a logged-in user.
     * @type {Array<string>}
     * @memberof JsonApiOrganizationOutMeta
     */
    permissions?: Array<JsonApiOrganizationOutMetaPermissionsEnum>;
}

export declare const JsonApiOrganizationOutMetaPermissionsEnum: {
    readonly MANAGE: "MANAGE";
};

export declare type JsonApiOrganizationOutMetaPermissionsEnum = typeof JsonApiOrganizationOutMetaPermissionsEnum[keyof typeof JsonApiOrganizationOutMetaPermissionsEnum];

/**
 *
 * @export
 * @interface JsonApiOrganizationOutRelationships
 */
export declare interface JsonApiOrganizationOutRelationships {
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsBootstrapUser}
     * @memberof JsonApiOrganizationOutRelationships
     */
    bootstrapUser?: JsonApiOrganizationOutRelationshipsBootstrapUser;
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsBootstrapUserGroup}
     * @memberof JsonApiOrganizationOutRelationships
     */
    bootstrapUserGroup?: JsonApiOrganizationOutRelationshipsBootstrapUserGroup;
}

/**
 *
 * @export
 * @interface JsonApiOrganizationOutRelationshipsBootstrapUser
 */
export declare interface JsonApiOrganizationOutRelationshipsBootstrapUser {
    /**
     *
     * @type {JsonApiUserToOneLinkage}
     * @memberof JsonApiOrganizationOutRelationshipsBootstrapUser
     */
    data: JsonApiUserToOneLinkage | null;
}

/**
 *
 * @export
 * @interface JsonApiOrganizationOutRelationshipsBootstrapUserGroup
 */
export declare interface JsonApiOrganizationOutRelationshipsBootstrapUserGroup {
    /**
     *
     * @type {JsonApiUserGroupToOneLinkage}
     * @memberof JsonApiOrganizationOutRelationshipsBootstrapUserGroup
     */
    data: JsonApiUserGroupToOneLinkage | null;
}

export declare const JsonApiOrganizationOutTypeEnum: {
    readonly ORGANIZATION: "organization";
};

export declare type JsonApiOrganizationOutTypeEnum = typeof JsonApiOrganizationOutTypeEnum[keyof typeof JsonApiOrganizationOutTypeEnum];

/**
 * JSON:API representation of patching organization entity.
 * @export
 * @interface JsonApiOrganizationPatch
 */
export declare interface JsonApiOrganizationPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiOrganizationPatch
     */
    type: JsonApiOrganizationPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiOrganizationPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiOrganizationInAttributes}
     * @memberof JsonApiOrganizationPatch
     */
    attributes?: JsonApiOrganizationInAttributes;
}

/**
 *
 * @export
 * @interface JsonApiOrganizationPatchDocument
 */
export declare interface JsonApiOrganizationPatchDocument {
    /**
     *
     * @type {JsonApiOrganizationPatch}
     * @memberof JsonApiOrganizationPatchDocument
     */
    data: JsonApiOrganizationPatch;
}

export declare const JsonApiOrganizationPatchTypeEnum: {
    readonly ORGANIZATION: "organization";
};

export declare type JsonApiOrganizationPatchTypeEnum = typeof JsonApiOrganizationPatchTypeEnum[keyof typeof JsonApiOrganizationPatchTypeEnum];

/**
 * JSON:API representation of organizationSetting entity.
 * @export
 * @interface JsonApiOrganizationSettingIn
 */
export declare interface JsonApiOrganizationSettingIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiOrganizationSettingIn
     */
    type: JsonApiOrganizationSettingInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiOrganizationSettingIn
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPostOptionalIdAttributes}
     * @memberof JsonApiOrganizationSettingIn
     */
    attributes?: JsonApiWorkspaceSettingPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiOrganizationSettingInDocument
 */
export declare interface JsonApiOrganizationSettingInDocument {
    /**
     *
     * @type {JsonApiOrganizationSettingIn}
     * @memberof JsonApiOrganizationSettingInDocument
     */
    data: JsonApiOrganizationSettingIn;
}

export declare const JsonApiOrganizationSettingInTypeEnum: {
    readonly ORGANIZATION_SETTING: "organizationSetting";
};

export declare type JsonApiOrganizationSettingInTypeEnum = typeof JsonApiOrganizationSettingInTypeEnum[keyof typeof JsonApiOrganizationSettingInTypeEnum];

/**
 * JSON:API representation of organizationSetting entity.
 * @export
 * @interface JsonApiOrganizationSettingOut
 */
export declare interface JsonApiOrganizationSettingOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiOrganizationSettingOut
     */
    type: JsonApiOrganizationSettingOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiOrganizationSettingOut
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPostOptionalIdAttributes}
     * @memberof JsonApiOrganizationSettingOut
     */
    attributes?: JsonApiWorkspaceSettingPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiOrganizationSettingOutDocument
 */
export declare interface JsonApiOrganizationSettingOutDocument {
    /**
     *
     * @type {JsonApiOrganizationSettingOut}
     * @memberof JsonApiOrganizationSettingOutDocument
     */
    data: JsonApiOrganizationSettingOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiOrganizationSettingOutDocument
     */
    links?: ObjectLinks;
}

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiOrganizationSettingOutList
 */
export declare interface JsonApiOrganizationSettingOutList {
    /**
     *
     * @type {Array<JsonApiOrganizationSettingOutWithLinks>}
     * @memberof JsonApiOrganizationSettingOutList
     */
    data: Array<JsonApiOrganizationSettingOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiOrganizationSettingOutList
     */
    links?: ListLinks;
}

export declare const JsonApiOrganizationSettingOutTypeEnum: {
    readonly ORGANIZATION_SETTING: "organizationSetting";
};

export declare type JsonApiOrganizationSettingOutTypeEnum = typeof JsonApiOrganizationSettingOutTypeEnum[keyof typeof JsonApiOrganizationSettingOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiOrganizationSettingOutWithLinks
 */
export declare interface JsonApiOrganizationSettingOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiOrganizationSettingOutWithLinks
     */
    type: JsonApiOrganizationSettingOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiOrganizationSettingOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPostOptionalIdAttributes}
     * @memberof JsonApiOrganizationSettingOutWithLinks
     */
    attributes?: JsonApiWorkspaceSettingPostOptionalIdAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiOrganizationSettingOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiOrganizationSettingOutWithLinksTypeEnum: {
    readonly ORGANIZATION_SETTING: "organizationSetting";
};

export declare type JsonApiOrganizationSettingOutWithLinksTypeEnum = typeof JsonApiOrganizationSettingOutWithLinksTypeEnum[keyof typeof JsonApiOrganizationSettingOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching organizationSetting entity.
 * @export
 * @interface JsonApiOrganizationSettingPatch
 */
export declare interface JsonApiOrganizationSettingPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiOrganizationSettingPatch
     */
    type: JsonApiOrganizationSettingPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiOrganizationSettingPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPostOptionalIdAttributes}
     * @memberof JsonApiOrganizationSettingPatch
     */
    attributes?: JsonApiWorkspaceSettingPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiOrganizationSettingPatchDocument
 */
export declare interface JsonApiOrganizationSettingPatchDocument {
    /**
     *
     * @type {JsonApiOrganizationSettingPatch}
     * @memberof JsonApiOrganizationSettingPatchDocument
     */
    data: JsonApiOrganizationSettingPatch;
}

export declare const JsonApiOrganizationSettingPatchTypeEnum: {
    readonly ORGANIZATION_SETTING: "organizationSetting";
};

export declare type JsonApiOrganizationSettingPatchTypeEnum = typeof JsonApiOrganizationSettingPatchTypeEnum[keyof typeof JsonApiOrganizationSettingPatchTypeEnum];

/**
 * JSON:API representation of theme entity.
 * @export
 * @interface JsonApiThemeIn
 */
export declare interface JsonApiThemeIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiThemeIn
     */
    type: JsonApiThemeInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiThemeIn
     */
    id: string;
    /**
     *
     * @type {JsonApiColorPaletteOutAttributes}
     * @memberof JsonApiThemeIn
     */
    attributes: JsonApiColorPaletteOutAttributes;
}

/**
 *
 * @export
 * @interface JsonApiThemeInDocument
 */
export declare interface JsonApiThemeInDocument {
    /**
     *
     * @type {JsonApiThemeIn}
     * @memberof JsonApiThemeInDocument
     */
    data: JsonApiThemeIn;
}

export declare const JsonApiThemeInTypeEnum: {
    readonly THEME: "theme";
};

export declare type JsonApiThemeInTypeEnum = typeof JsonApiThemeInTypeEnum[keyof typeof JsonApiThemeInTypeEnum];

/**
 * JSON:API representation of theme entity.
 * @export
 * @interface JsonApiThemeOut
 */
export declare interface JsonApiThemeOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiThemeOut
     */
    type: JsonApiThemeOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiThemeOut
     */
    id: string;
    /**
     *
     * @type {JsonApiColorPaletteOutAttributes}
     * @memberof JsonApiThemeOut
     */
    attributes: JsonApiColorPaletteOutAttributes;
}

/**
 *
 * @export
 * @interface JsonApiThemeOutDocument
 */
export declare interface JsonApiThemeOutDocument {
    /**
     *
     * @type {JsonApiThemeOut}
     * @memberof JsonApiThemeOutDocument
     */
    data: JsonApiThemeOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiThemeOutDocument
     */
    links?: ObjectLinks;
}

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiThemeOutList
 */
export declare interface JsonApiThemeOutList {
    /**
     *
     * @type {Array<JsonApiThemeOutWithLinks>}
     * @memberof JsonApiThemeOutList
     */
    data: Array<JsonApiThemeOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiThemeOutList
     */
    links?: ListLinks;
}

export declare const JsonApiThemeOutTypeEnum: {
    readonly THEME: "theme";
};

export declare type JsonApiThemeOutTypeEnum = typeof JsonApiThemeOutTypeEnum[keyof typeof JsonApiThemeOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiThemeOutWithLinks
 */
export declare interface JsonApiThemeOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiThemeOutWithLinks
     */
    type: JsonApiThemeOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiThemeOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiColorPaletteOutAttributes}
     * @memberof JsonApiThemeOutWithLinks
     */
    attributes: JsonApiColorPaletteOutAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiThemeOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiThemeOutWithLinksTypeEnum: {
    readonly THEME: "theme";
};

export declare type JsonApiThemeOutWithLinksTypeEnum = typeof JsonApiThemeOutWithLinksTypeEnum[keyof typeof JsonApiThemeOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching theme entity.
 * @export
 * @interface JsonApiThemePatch
 */
export declare interface JsonApiThemePatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiThemePatch
     */
    type: JsonApiThemePatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiThemePatch
     */
    id: string;
    /**
     *
     * @type {JsonApiColorPalettePatchAttributes}
     * @memberof JsonApiThemePatch
     */
    attributes: JsonApiColorPalettePatchAttributes;
}

/**
 *
 * @export
 * @interface JsonApiThemePatchDocument
 */
export declare interface JsonApiThemePatchDocument {
    /**
     *
     * @type {JsonApiThemePatch}
     * @memberof JsonApiThemePatchDocument
     */
    data: JsonApiThemePatch;
}

export declare const JsonApiThemePatchTypeEnum: {
    readonly THEME: "theme";
};

export declare type JsonApiThemePatchTypeEnum = typeof JsonApiThemePatchTypeEnum[keyof typeof JsonApiThemePatchTypeEnum];

/**
 * JSON:API representation of userDataFilter entity.
 * @export
 * @interface JsonApiUserDataFilterIn
 */
export declare interface JsonApiUserDataFilterIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserDataFilterIn
     */
    type: JsonApiUserDataFilterInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserDataFilterIn
     */
    id: string;
    /**
     *
     * @type {JsonApiUserDataFilterPostOptionalIdAttributes}
     * @memberof JsonApiUserDataFilterIn
     */
    attributes: JsonApiUserDataFilterPostOptionalIdAttributes;
    /**
     *
     * @type {JsonApiUserDataFilterPostOptionalIdRelationships}
     * @memberof JsonApiUserDataFilterIn
     */
    relationships?: JsonApiUserDataFilterPostOptionalIdRelationships;
}

/**
 *
 * @export
 * @interface JsonApiUserDataFilterInDocument
 */
export declare interface JsonApiUserDataFilterInDocument {
    /**
     *
     * @type {JsonApiUserDataFilterIn}
     * @memberof JsonApiUserDataFilterInDocument
     */
    data: JsonApiUserDataFilterIn;
}

export declare const JsonApiUserDataFilterInTypeEnum: {
    readonly USER_DATA_FILTER: "userDataFilter";
};

export declare type JsonApiUserDataFilterInTypeEnum = typeof JsonApiUserDataFilterInTypeEnum[keyof typeof JsonApiUserDataFilterInTypeEnum];

/**
 * JSON:API representation of userDataFilter entity.
 * @export
 * @interface JsonApiUserDataFilterOut
 */
export declare interface JsonApiUserDataFilterOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserDataFilterOut
     */
    type: JsonApiUserDataFilterOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserDataFilterOut
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutMeta}
     * @memberof JsonApiUserDataFilterOut
     */
    meta?: JsonApiAttributeHierarchyOutMeta;
    /**
     *
     * @type {JsonApiUserDataFilterPostOptionalIdAttributes}
     * @memberof JsonApiUserDataFilterOut
     */
    attributes: JsonApiUserDataFilterPostOptionalIdAttributes;
    /**
     *
     * @type {JsonApiUserDataFilterOutRelationships}
     * @memberof JsonApiUserDataFilterOut
     */
    relationships?: JsonApiUserDataFilterOutRelationships;
}

/**
 *
 * @export
 * @interface JsonApiUserDataFilterOutDocument
 */
export declare interface JsonApiUserDataFilterOutDocument {
    /**
     *
     * @type {JsonApiUserDataFilterOut}
     * @memberof JsonApiUserDataFilterOutDocument
     */
    data: JsonApiUserDataFilterOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserDataFilterOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserDataFilterOutIncludes>}
     * @memberof JsonApiUserDataFilterOutDocument
     */
    included?: Array<JsonApiUserDataFilterOutIncludes>;
}

/**
 * @type JsonApiUserDataFilterOutIncludes
 * @export
 */
export declare type JsonApiUserDataFilterOutIncludes = JsonApiAttributeOutWithLinks | JsonApiDatasetOutWithLinks | JsonApiFactOutWithLinks | JsonApiLabelOutWithLinks | JsonApiMetricOutWithLinks | JsonApiUserGroupOutWithLinks | JsonApiUserOutWithLinks;

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiUserDataFilterOutList
 */
export declare interface JsonApiUserDataFilterOutList {
    /**
     *
     * @type {Array<JsonApiUserDataFilterOutWithLinks>}
     * @memberof JsonApiUserDataFilterOutList
     */
    data: Array<JsonApiUserDataFilterOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiUserDataFilterOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserDataFilterOutIncludes>}
     * @memberof JsonApiUserDataFilterOutList
     */
    included?: Array<JsonApiUserDataFilterOutIncludes>;
}

/**
 *
 * @export
 * @interface JsonApiUserDataFilterOutRelationships
 */
export declare interface JsonApiUserDataFilterOutRelationships {
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsBootstrapUser}
     * @memberof JsonApiUserDataFilterOutRelationships
     */
    user?: JsonApiOrganizationOutRelationshipsBootstrapUser;
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsBootstrapUserGroup}
     * @memberof JsonApiUserDataFilterOutRelationships
     */
    userGroup?: JsonApiOrganizationOutRelationshipsBootstrapUserGroup;
    /**
     *
     * @type {JsonApiMetricOutRelationshipsFacts}
     * @memberof JsonApiUserDataFilterOutRelationships
     */
    facts?: JsonApiMetricOutRelationshipsFacts;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutRelationshipsAttributes}
     * @memberof JsonApiUserDataFilterOutRelationships
     */
    attributes?: JsonApiAttributeHierarchyOutRelationshipsAttributes;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsLabels}
     * @memberof JsonApiUserDataFilterOutRelationships
     */
    labels?: JsonApiAnalyticalDashboardOutRelationshipsLabels;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsMetrics}
     * @memberof JsonApiUserDataFilterOutRelationships
     */
    metrics?: JsonApiAnalyticalDashboardOutRelationshipsMetrics;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutRelationshipsDatasets}
     * @memberof JsonApiUserDataFilterOutRelationships
     */
    datasets?: JsonApiAnalyticalDashboardOutRelationshipsDatasets;
}

export declare const JsonApiUserDataFilterOutTypeEnum: {
    readonly USER_DATA_FILTER: "userDataFilter";
};

export declare type JsonApiUserDataFilterOutTypeEnum = typeof JsonApiUserDataFilterOutTypeEnum[keyof typeof JsonApiUserDataFilterOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiUserDataFilterOutWithLinks
 */
export declare interface JsonApiUserDataFilterOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserDataFilterOutWithLinks
     */
    type: JsonApiUserDataFilterOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserDataFilterOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutMeta}
     * @memberof JsonApiUserDataFilterOutWithLinks
     */
    meta?: JsonApiAttributeHierarchyOutMeta;
    /**
     *
     * @type {JsonApiUserDataFilterPostOptionalIdAttributes}
     * @memberof JsonApiUserDataFilterOutWithLinks
     */
    attributes: JsonApiUserDataFilterPostOptionalIdAttributes;
    /**
     *
     * @type {JsonApiUserDataFilterOutRelationships}
     * @memberof JsonApiUserDataFilterOutWithLinks
     */
    relationships?: JsonApiUserDataFilterOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserDataFilterOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiUserDataFilterOutWithLinksTypeEnum: {
    readonly USER_DATA_FILTER: "userDataFilter";
};

export declare type JsonApiUserDataFilterOutWithLinksTypeEnum = typeof JsonApiUserDataFilterOutWithLinksTypeEnum[keyof typeof JsonApiUserDataFilterOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching userDataFilter entity.
 * @export
 * @interface JsonApiUserDataFilterPatch
 */
export declare interface JsonApiUserDataFilterPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserDataFilterPatch
     */
    type: JsonApiUserDataFilterPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserDataFilterPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiUserDataFilterPatchAttributes}
     * @memberof JsonApiUserDataFilterPatch
     */
    attributes: JsonApiUserDataFilterPatchAttributes;
    /**
     *
     * @type {JsonApiUserDataFilterPostOptionalIdRelationships}
     * @memberof JsonApiUserDataFilterPatch
     */
    relationships?: JsonApiUserDataFilterPostOptionalIdRelationships;
}

/**
 *
 * @export
 * @interface JsonApiUserDataFilterPatchAttributes
 */
export declare interface JsonApiUserDataFilterPatchAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiUserDataFilterPatchAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiUserDataFilterPatchAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiUserDataFilterPatchAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiUserDataFilterPatchAttributes
     */
    areRelationsValid?: boolean;
    /**
     *
     * @type {string}
     * @memberof JsonApiUserDataFilterPatchAttributes
     */
    maql?: string;
}

/**
 *
 * @export
 * @interface JsonApiUserDataFilterPatchDocument
 */
export declare interface JsonApiUserDataFilterPatchDocument {
    /**
     *
     * @type {JsonApiUserDataFilterPatch}
     * @memberof JsonApiUserDataFilterPatchDocument
     */
    data: JsonApiUserDataFilterPatch;
}

export declare const JsonApiUserDataFilterPatchTypeEnum: {
    readonly USER_DATA_FILTER: "userDataFilter";
};

export declare type JsonApiUserDataFilterPatchTypeEnum = typeof JsonApiUserDataFilterPatchTypeEnum[keyof typeof JsonApiUserDataFilterPatchTypeEnum];

/**
 * JSON:API representation of userDataFilter entity.
 * @export
 * @interface JsonApiUserDataFilterPostOptionalId
 */
export declare interface JsonApiUserDataFilterPostOptionalId {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserDataFilterPostOptionalId
     */
    type: JsonApiUserDataFilterPostOptionalIdTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserDataFilterPostOptionalId
     */
    id?: string;
    /**
     *
     * @type {JsonApiUserDataFilterPostOptionalIdAttributes}
     * @memberof JsonApiUserDataFilterPostOptionalId
     */
    attributes: JsonApiUserDataFilterPostOptionalIdAttributes;
    /**
     *
     * @type {JsonApiUserDataFilterPostOptionalIdRelationships}
     * @memberof JsonApiUserDataFilterPostOptionalId
     */
    relationships?: JsonApiUserDataFilterPostOptionalIdRelationships;
}

/**
 *
 * @export
 * @interface JsonApiUserDataFilterPostOptionalIdAttributes
 */
export declare interface JsonApiUserDataFilterPostOptionalIdAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiUserDataFilterPostOptionalIdAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiUserDataFilterPostOptionalIdAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiUserDataFilterPostOptionalIdAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiUserDataFilterPostOptionalIdAttributes
     */
    areRelationsValid?: boolean;
    /**
     *
     * @type {string}
     * @memberof JsonApiUserDataFilterPostOptionalIdAttributes
     */
    maql: string;
}

/**
 *
 * @export
 * @interface JsonApiUserDataFilterPostOptionalIdDocument
 */
export declare interface JsonApiUserDataFilterPostOptionalIdDocument {
    /**
     *
     * @type {JsonApiUserDataFilterPostOptionalId}
     * @memberof JsonApiUserDataFilterPostOptionalIdDocument
     */
    data: JsonApiUserDataFilterPostOptionalId;
}

/**
 *
 * @export
 * @interface JsonApiUserDataFilterPostOptionalIdRelationships
 */
export declare interface JsonApiUserDataFilterPostOptionalIdRelationships {
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsBootstrapUser}
     * @memberof JsonApiUserDataFilterPostOptionalIdRelationships
     */
    user?: JsonApiOrganizationOutRelationshipsBootstrapUser;
    /**
     *
     * @type {JsonApiOrganizationOutRelationshipsBootstrapUserGroup}
     * @memberof JsonApiUserDataFilterPostOptionalIdRelationships
     */
    userGroup?: JsonApiOrganizationOutRelationshipsBootstrapUserGroup;
}

export declare const JsonApiUserDataFilterPostOptionalIdTypeEnum: {
    readonly USER_DATA_FILTER: "userDataFilter";
};

export declare type JsonApiUserDataFilterPostOptionalIdTypeEnum = typeof JsonApiUserDataFilterPostOptionalIdTypeEnum[keyof typeof JsonApiUserDataFilterPostOptionalIdTypeEnum];

/**
 * JSON:API representation of userGroup entity.
 * @export
 * @interface JsonApiUserGroupIn
 */
export declare interface JsonApiUserGroupIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserGroupIn
     */
    type: JsonApiUserGroupInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserGroupIn
     */
    id: string;
    /**
     *
     * @type {JsonApiUserGroupOutAttributes}
     * @memberof JsonApiUserGroupIn
     */
    attributes?: JsonApiUserGroupOutAttributes;
    /**
     *
     * @type {JsonApiUserGroupOutRelationships}
     * @memberof JsonApiUserGroupIn
     */
    relationships?: JsonApiUserGroupOutRelationships;
}

/**
 *
 * @export
 * @interface JsonApiUserGroupInDocument
 */
export declare interface JsonApiUserGroupInDocument {
    /**
     *
     * @type {JsonApiUserGroupIn}
     * @memberof JsonApiUserGroupInDocument
     */
    data: JsonApiUserGroupIn;
}

export declare const JsonApiUserGroupInTypeEnum: {
    readonly USER_GROUP: "userGroup";
};

export declare type JsonApiUserGroupInTypeEnum = typeof JsonApiUserGroupInTypeEnum[keyof typeof JsonApiUserGroupInTypeEnum];

/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiUserGroupLinkage
 */
export declare interface JsonApiUserGroupLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiUserGroupLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiUserGroupLinkage
     */
    type: JsonApiUserGroupLinkageTypeEnum;
}

export declare const JsonApiUserGroupLinkageTypeEnum: {
    readonly USER_GROUP: "userGroup";
};

export declare type JsonApiUserGroupLinkageTypeEnum = typeof JsonApiUserGroupLinkageTypeEnum[keyof typeof JsonApiUserGroupLinkageTypeEnum];

/**
 * JSON:API representation of userGroup entity.
 * @export
 * @interface JsonApiUserGroupOut
 */
export declare interface JsonApiUserGroupOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserGroupOut
     */
    type: JsonApiUserGroupOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserGroupOut
     */
    id: string;
    /**
     *
     * @type {JsonApiUserGroupOutAttributes}
     * @memberof JsonApiUserGroupOut
     */
    attributes?: JsonApiUserGroupOutAttributes;
    /**
     *
     * @type {JsonApiUserGroupOutRelationships}
     * @memberof JsonApiUserGroupOut
     */
    relationships?: JsonApiUserGroupOutRelationships;
}

/**
 *
 * @export
 * @interface JsonApiUserGroupOutAttributes
 */
export declare interface JsonApiUserGroupOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiUserGroupOutAttributes
     */
    name?: string;
}

/**
 *
 * @export
 * @interface JsonApiUserGroupOutDocument
 */
export declare interface JsonApiUserGroupOutDocument {
    /**
     *
     * @type {JsonApiUserGroupOut}
     * @memberof JsonApiUserGroupOutDocument
     */
    data: JsonApiUserGroupOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserGroupOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiUserGroupOutDocument
     */
    included?: Array<JsonApiUserGroupOutWithLinks>;
}

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiUserGroupOutList
 */
export declare interface JsonApiUserGroupOutList {
    /**
     *
     * @type {Array<JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiUserGroupOutList
     */
    data: Array<JsonApiUserGroupOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiUserGroupOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiUserGroupOutList
     */
    included?: Array<JsonApiUserGroupOutWithLinks>;
}

/**
 *
 * @export
 * @interface JsonApiUserGroupOutRelationships
 */
export declare interface JsonApiUserGroupOutRelationships {
    /**
     *
     * @type {JsonApiUserGroupOutRelationshipsParents}
     * @memberof JsonApiUserGroupOutRelationships
     */
    parents?: JsonApiUserGroupOutRelationshipsParents;
}

/**
 *
 * @export
 * @interface JsonApiUserGroupOutRelationshipsParents
 */
export declare interface JsonApiUserGroupOutRelationshipsParents {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiUserGroupLinkage>}
     * @memberof JsonApiUserGroupOutRelationshipsParents
     */
    data: Array<JsonApiUserGroupLinkage>;
}

export declare const JsonApiUserGroupOutTypeEnum: {
    readonly USER_GROUP: "userGroup";
};

export declare type JsonApiUserGroupOutTypeEnum = typeof JsonApiUserGroupOutTypeEnum[keyof typeof JsonApiUserGroupOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiUserGroupOutWithLinks
 */
export declare interface JsonApiUserGroupOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserGroupOutWithLinks
     */
    type: JsonApiUserGroupOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserGroupOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiUserGroupOutAttributes}
     * @memberof JsonApiUserGroupOutWithLinks
     */
    attributes?: JsonApiUserGroupOutAttributes;
    /**
     *
     * @type {JsonApiUserGroupOutRelationships}
     * @memberof JsonApiUserGroupOutWithLinks
     */
    relationships?: JsonApiUserGroupOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserGroupOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiUserGroupOutWithLinksTypeEnum: {
    readonly USER_GROUP: "userGroup";
};

export declare type JsonApiUserGroupOutWithLinksTypeEnum = typeof JsonApiUserGroupOutWithLinksTypeEnum[keyof typeof JsonApiUserGroupOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching userGroup entity.
 * @export
 * @interface JsonApiUserGroupPatch
 */
export declare interface JsonApiUserGroupPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserGroupPatch
     */
    type: JsonApiUserGroupPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserGroupPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiUserGroupOutAttributes}
     * @memberof JsonApiUserGroupPatch
     */
    attributes?: JsonApiUserGroupOutAttributes;
    /**
     *
     * @type {JsonApiUserGroupOutRelationships}
     * @memberof JsonApiUserGroupPatch
     */
    relationships?: JsonApiUserGroupOutRelationships;
}

/**
 *
 * @export
 * @interface JsonApiUserGroupPatchDocument
 */
export declare interface JsonApiUserGroupPatchDocument {
    /**
     *
     * @type {JsonApiUserGroupPatch}
     * @memberof JsonApiUserGroupPatchDocument
     */
    data: JsonApiUserGroupPatch;
}

export declare const JsonApiUserGroupPatchTypeEnum: {
    readonly USER_GROUP: "userGroup";
};

export declare type JsonApiUserGroupPatchTypeEnum = typeof JsonApiUserGroupPatchTypeEnum[keyof typeof JsonApiUserGroupPatchTypeEnum];

/**
 * @type JsonApiUserGroupToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export declare type JsonApiUserGroupToOneLinkage = JsonApiUserGroupLinkage;

/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiUserIdentifierLinkage
 */
export declare interface JsonApiUserIdentifierLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiUserIdentifierLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiUserIdentifierLinkage
     */
    type: JsonApiUserIdentifierLinkageTypeEnum;
}

export declare const JsonApiUserIdentifierLinkageTypeEnum: {
    readonly USER_IDENTIFIER: "userIdentifier";
};

export declare type JsonApiUserIdentifierLinkageTypeEnum = typeof JsonApiUserIdentifierLinkageTypeEnum[keyof typeof JsonApiUserIdentifierLinkageTypeEnum];

/**
 * JSON:API representation of userIdentifier entity.
 * @export
 * @interface JsonApiUserIdentifierOut
 */
export declare interface JsonApiUserIdentifierOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserIdentifierOut
     */
    type: JsonApiUserIdentifierOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserIdentifierOut
     */
    id: string;
    /**
     *
     * @type {JsonApiUserIdentifierOutAttributes}
     * @memberof JsonApiUserIdentifierOut
     */
    attributes?: JsonApiUserIdentifierOutAttributes;
}

/**
 *
 * @export
 * @interface JsonApiUserIdentifierOutAttributes
 */
export declare interface JsonApiUserIdentifierOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiUserIdentifierOutAttributes
     */
    firstname?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiUserIdentifierOutAttributes
     */
    lastname?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiUserIdentifierOutAttributes
     */
    email?: string;
}

/**
 *
 * @export
 * @interface JsonApiUserIdentifierOutDocument
 */
export declare interface JsonApiUserIdentifierOutDocument {
    /**
     *
     * @type {JsonApiUserIdentifierOut}
     * @memberof JsonApiUserIdentifierOutDocument
     */
    data: JsonApiUserIdentifierOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserIdentifierOutDocument
     */
    links?: ObjectLinks;
}

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiUserIdentifierOutList
 */
export declare interface JsonApiUserIdentifierOutList {
    /**
     *
     * @type {Array<JsonApiUserIdentifierOutWithLinks>}
     * @memberof JsonApiUserIdentifierOutList
     */
    data: Array<JsonApiUserIdentifierOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiUserIdentifierOutList
     */
    links?: ListLinks;
}

export declare const JsonApiUserIdentifierOutTypeEnum: {
    readonly USER_IDENTIFIER: "userIdentifier";
};

export declare type JsonApiUserIdentifierOutTypeEnum = typeof JsonApiUserIdentifierOutTypeEnum[keyof typeof JsonApiUserIdentifierOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiUserIdentifierOutWithLinks
 */
export declare interface JsonApiUserIdentifierOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserIdentifierOutWithLinks
     */
    type: JsonApiUserIdentifierOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserIdentifierOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiUserIdentifierOutAttributes}
     * @memberof JsonApiUserIdentifierOutWithLinks
     */
    attributes?: JsonApiUserIdentifierOutAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserIdentifierOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiUserIdentifierOutWithLinksTypeEnum: {
    readonly USER_IDENTIFIER: "userIdentifier";
};

export declare type JsonApiUserIdentifierOutWithLinksTypeEnum = typeof JsonApiUserIdentifierOutWithLinksTypeEnum[keyof typeof JsonApiUserIdentifierOutWithLinksTypeEnum];

/**
 * @type JsonApiUserIdentifierToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export declare type JsonApiUserIdentifierToOneLinkage = JsonApiUserIdentifierLinkage;

/**
 * JSON:API representation of user entity.
 * @export
 * @interface JsonApiUserIn
 */
export declare interface JsonApiUserIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserIn
     */
    type: JsonApiUserInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserIn
     */
    id: string;
    /**
     *
     * @type {JsonApiUserOutAttributes}
     * @memberof JsonApiUserIn
     */
    attributes?: JsonApiUserOutAttributes;
    /**
     *
     * @type {JsonApiUserOutRelationships}
     * @memberof JsonApiUserIn
     */
    relationships?: JsonApiUserOutRelationships;
}

/**
 *
 * @export
 * @interface JsonApiUserInDocument
 */
export declare interface JsonApiUserInDocument {
    /**
     *
     * @type {JsonApiUserIn}
     * @memberof JsonApiUserInDocument
     */
    data: JsonApiUserIn;
}

export declare const JsonApiUserInTypeEnum: {
    readonly USER: "user";
};

export declare type JsonApiUserInTypeEnum = typeof JsonApiUserInTypeEnum[keyof typeof JsonApiUserInTypeEnum];

/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiUserLinkage
 */
export declare interface JsonApiUserLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiUserLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiUserLinkage
     */
    type: JsonApiUserLinkageTypeEnum;
}

export declare const JsonApiUserLinkageTypeEnum: {
    readonly USER: "user";
};

export declare type JsonApiUserLinkageTypeEnum = typeof JsonApiUserLinkageTypeEnum[keyof typeof JsonApiUserLinkageTypeEnum];

/**
 * JSON:API representation of user entity.
 * @export
 * @interface JsonApiUserOut
 */
export declare interface JsonApiUserOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserOut
     */
    type: JsonApiUserOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserOut
     */
    id: string;
    /**
     *
     * @type {JsonApiUserOutAttributes}
     * @memberof JsonApiUserOut
     */
    attributes?: JsonApiUserOutAttributes;
    /**
     *
     * @type {JsonApiUserOutRelationships}
     * @memberof JsonApiUserOut
     */
    relationships?: JsonApiUserOutRelationships;
}

/**
 *
 * @export
 * @interface JsonApiUserOutAttributes
 */
export declare interface JsonApiUserOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiUserOutAttributes
     */
    authenticationId?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiUserOutAttributes
     */
    firstname?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiUserOutAttributes
     */
    lastname?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiUserOutAttributes
     */
    email?: string;
}

/**
 *
 * @export
 * @interface JsonApiUserOutDocument
 */
export declare interface JsonApiUserOutDocument {
    /**
     *
     * @type {JsonApiUserOut}
     * @memberof JsonApiUserOutDocument
     */
    data: JsonApiUserOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiUserOutDocument
     */
    included?: Array<JsonApiUserGroupOutWithLinks>;
}

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiUserOutList
 */
export declare interface JsonApiUserOutList {
    /**
     *
     * @type {Array<JsonApiUserOutWithLinks>}
     * @memberof JsonApiUserOutList
     */
    data: Array<JsonApiUserOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiUserOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserGroupOutWithLinks>}
     * @memberof JsonApiUserOutList
     */
    included?: Array<JsonApiUserGroupOutWithLinks>;
}

/**
 *
 * @export
 * @interface JsonApiUserOutRelationships
 */
export declare interface JsonApiUserOutRelationships {
    /**
     *
     * @type {JsonApiUserGroupOutRelationshipsParents}
     * @memberof JsonApiUserOutRelationships
     */
    userGroups?: JsonApiUserGroupOutRelationshipsParents;
}

export declare const JsonApiUserOutTypeEnum: {
    readonly USER: "user";
};

export declare type JsonApiUserOutTypeEnum = typeof JsonApiUserOutTypeEnum[keyof typeof JsonApiUserOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiUserOutWithLinks
 */
export declare interface JsonApiUserOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserOutWithLinks
     */
    type: JsonApiUserOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiUserOutAttributes}
     * @memberof JsonApiUserOutWithLinks
     */
    attributes?: JsonApiUserOutAttributes;
    /**
     *
     * @type {JsonApiUserOutRelationships}
     * @memberof JsonApiUserOutWithLinks
     */
    relationships?: JsonApiUserOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiUserOutWithLinksTypeEnum: {
    readonly USER: "user";
};

export declare type JsonApiUserOutWithLinksTypeEnum = typeof JsonApiUserOutWithLinksTypeEnum[keyof typeof JsonApiUserOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching user entity.
 * @export
 * @interface JsonApiUserPatch
 */
export declare interface JsonApiUserPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserPatch
     */
    type: JsonApiUserPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiUserOutAttributes}
     * @memberof JsonApiUserPatch
     */
    attributes?: JsonApiUserOutAttributes;
    /**
     *
     * @type {JsonApiUserOutRelationships}
     * @memberof JsonApiUserPatch
     */
    relationships?: JsonApiUserOutRelationships;
}

/**
 *
 * @export
 * @interface JsonApiUserPatchDocument
 */
export declare interface JsonApiUserPatchDocument {
    /**
     *
     * @type {JsonApiUserPatch}
     * @memberof JsonApiUserPatchDocument
     */
    data: JsonApiUserPatch;
}

export declare const JsonApiUserPatchTypeEnum: {
    readonly USER: "user";
};

export declare type JsonApiUserPatchTypeEnum = typeof JsonApiUserPatchTypeEnum[keyof typeof JsonApiUserPatchTypeEnum];

/**
 * JSON:API representation of userSetting entity.
 * @export
 * @interface JsonApiUserSettingIn
 */
export declare interface JsonApiUserSettingIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserSettingIn
     */
    type: JsonApiUserSettingInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserSettingIn
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPostOptionalIdAttributes}
     * @memberof JsonApiUserSettingIn
     */
    attributes?: JsonApiWorkspaceSettingPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiUserSettingInDocument
 */
export declare interface JsonApiUserSettingInDocument {
    /**
     *
     * @type {JsonApiUserSettingIn}
     * @memberof JsonApiUserSettingInDocument
     */
    data: JsonApiUserSettingIn;
}

export declare const JsonApiUserSettingInTypeEnum: {
    readonly USER_SETTING: "userSetting";
};

export declare type JsonApiUserSettingInTypeEnum = typeof JsonApiUserSettingInTypeEnum[keyof typeof JsonApiUserSettingInTypeEnum];

/**
 * JSON:API representation of userSetting entity.
 * @export
 * @interface JsonApiUserSettingOut
 */
export declare interface JsonApiUserSettingOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserSettingOut
     */
    type: JsonApiUserSettingOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserSettingOut
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPostOptionalIdAttributes}
     * @memberof JsonApiUserSettingOut
     */
    attributes?: JsonApiWorkspaceSettingPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiUserSettingOutDocument
 */
export declare interface JsonApiUserSettingOutDocument {
    /**
     *
     * @type {JsonApiUserSettingOut}
     * @memberof JsonApiUserSettingOutDocument
     */
    data: JsonApiUserSettingOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserSettingOutDocument
     */
    links?: ObjectLinks;
}

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiUserSettingOutList
 */
export declare interface JsonApiUserSettingOutList {
    /**
     *
     * @type {Array<JsonApiUserSettingOutWithLinks>}
     * @memberof JsonApiUserSettingOutList
     */
    data: Array<JsonApiUserSettingOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiUserSettingOutList
     */
    links?: ListLinks;
}

export declare const JsonApiUserSettingOutTypeEnum: {
    readonly USER_SETTING: "userSetting";
};

export declare type JsonApiUserSettingOutTypeEnum = typeof JsonApiUserSettingOutTypeEnum[keyof typeof JsonApiUserSettingOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiUserSettingOutWithLinks
 */
export declare interface JsonApiUserSettingOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserSettingOutWithLinks
     */
    type: JsonApiUserSettingOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserSettingOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPostOptionalIdAttributes}
     * @memberof JsonApiUserSettingOutWithLinks
     */
    attributes?: JsonApiWorkspaceSettingPostOptionalIdAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserSettingOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiUserSettingOutWithLinksTypeEnum: {
    readonly USER_SETTING: "userSetting";
};

export declare type JsonApiUserSettingOutWithLinksTypeEnum = typeof JsonApiUserSettingOutWithLinksTypeEnum[keyof typeof JsonApiUserSettingOutWithLinksTypeEnum];

/**
 * @type JsonApiUserToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export declare type JsonApiUserToOneLinkage = JsonApiUserLinkage;

/**
 * JSON:API representation of visualizationObject entity.
 * @export
 * @interface JsonApiVisualizationObjectIn
 */
export declare interface JsonApiVisualizationObjectIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiVisualizationObjectIn
     */
    type: JsonApiVisualizationObjectInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiVisualizationObjectIn
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPostOptionalIdAttributes}
     * @memberof JsonApiVisualizationObjectIn
     */
    attributes?: JsonApiAnalyticalDashboardPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiVisualizationObjectInDocument
 */
export declare interface JsonApiVisualizationObjectInDocument {
    /**
     *
     * @type {JsonApiVisualizationObjectIn}
     * @memberof JsonApiVisualizationObjectInDocument
     */
    data: JsonApiVisualizationObjectIn;
}

export declare const JsonApiVisualizationObjectInTypeEnum: {
    readonly VISUALIZATION_OBJECT: "visualizationObject";
};

export declare type JsonApiVisualizationObjectInTypeEnum = typeof JsonApiVisualizationObjectInTypeEnum[keyof typeof JsonApiVisualizationObjectInTypeEnum];

/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiVisualizationObjectLinkage
 */
export declare interface JsonApiVisualizationObjectLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiVisualizationObjectLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiVisualizationObjectLinkage
     */
    type: JsonApiVisualizationObjectLinkageTypeEnum;
}

export declare const JsonApiVisualizationObjectLinkageTypeEnum: {
    readonly VISUALIZATION_OBJECT: "visualizationObject";
};

export declare type JsonApiVisualizationObjectLinkageTypeEnum = typeof JsonApiVisualizationObjectLinkageTypeEnum[keyof typeof JsonApiVisualizationObjectLinkageTypeEnum];

/**
 * JSON:API representation of visualizationObject entity.
 * @export
 * @interface JsonApiVisualizationObjectOut
 */
export declare interface JsonApiVisualizationObjectOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiVisualizationObjectOut
     */
    type: JsonApiVisualizationObjectOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiVisualizationObjectOut
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutMeta}
     * @memberof JsonApiVisualizationObjectOut
     */
    meta?: JsonApiAttributeHierarchyOutMeta;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutAttributes}
     * @memberof JsonApiVisualizationObjectOut
     */
    attributes?: JsonApiAnalyticalDashboardOutAttributes;
    /**
     *
     * @type {JsonApiMetricOutRelationships}
     * @memberof JsonApiVisualizationObjectOut
     */
    relationships?: JsonApiMetricOutRelationships;
}

/**
 *
 * @export
 * @interface JsonApiVisualizationObjectOutDocument
 */
export declare interface JsonApiVisualizationObjectOutDocument {
    /**
     *
     * @type {JsonApiVisualizationObjectOut}
     * @memberof JsonApiVisualizationObjectOutDocument
     */
    data: JsonApiVisualizationObjectOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiVisualizationObjectOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiMetricOutIncludes>}
     * @memberof JsonApiVisualizationObjectOutDocument
     */
    included?: Array<JsonApiMetricOutIncludes>;
}

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiVisualizationObjectOutList
 */
export declare interface JsonApiVisualizationObjectOutList {
    /**
     *
     * @type {Array<JsonApiVisualizationObjectOutWithLinks>}
     * @memberof JsonApiVisualizationObjectOutList
     */
    data: Array<JsonApiVisualizationObjectOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiVisualizationObjectOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiMetricOutIncludes>}
     * @memberof JsonApiVisualizationObjectOutList
     */
    included?: Array<JsonApiMetricOutIncludes>;
}

export declare const JsonApiVisualizationObjectOutTypeEnum: {
    readonly VISUALIZATION_OBJECT: "visualizationObject";
};

export declare type JsonApiVisualizationObjectOutTypeEnum = typeof JsonApiVisualizationObjectOutTypeEnum[keyof typeof JsonApiVisualizationObjectOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiVisualizationObjectOutWithLinks
 */
export declare interface JsonApiVisualizationObjectOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    type: JsonApiVisualizationObjectOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutMeta}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    meta?: JsonApiAttributeHierarchyOutMeta;
    /**
     *
     * @type {JsonApiAnalyticalDashboardOutAttributes}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    attributes?: JsonApiAnalyticalDashboardOutAttributes;
    /**
     *
     * @type {JsonApiMetricOutRelationships}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    relationships?: JsonApiMetricOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiVisualizationObjectOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiVisualizationObjectOutWithLinksTypeEnum: {
    readonly VISUALIZATION_OBJECT: "visualizationObject";
};

export declare type JsonApiVisualizationObjectOutWithLinksTypeEnum = typeof JsonApiVisualizationObjectOutWithLinksTypeEnum[keyof typeof JsonApiVisualizationObjectOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching visualizationObject entity.
 * @export
 * @interface JsonApiVisualizationObjectPatch
 */
export declare interface JsonApiVisualizationObjectPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiVisualizationObjectPatch
     */
    type: JsonApiVisualizationObjectPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiVisualizationObjectPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPostOptionalIdAttributes}
     * @memberof JsonApiVisualizationObjectPatch
     */
    attributes?: JsonApiAnalyticalDashboardPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiVisualizationObjectPatchDocument
 */
export declare interface JsonApiVisualizationObjectPatchDocument {
    /**
     *
     * @type {JsonApiVisualizationObjectPatch}
     * @memberof JsonApiVisualizationObjectPatchDocument
     */
    data: JsonApiVisualizationObjectPatch;
}

export declare const JsonApiVisualizationObjectPatchTypeEnum: {
    readonly VISUALIZATION_OBJECT: "visualizationObject";
};

export declare type JsonApiVisualizationObjectPatchTypeEnum = typeof JsonApiVisualizationObjectPatchTypeEnum[keyof typeof JsonApiVisualizationObjectPatchTypeEnum];

/**
 * JSON:API representation of visualizationObject entity.
 * @export
 * @interface JsonApiVisualizationObjectPostOptionalId
 */
export declare interface JsonApiVisualizationObjectPostOptionalId {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiVisualizationObjectPostOptionalId
     */
    type: JsonApiVisualizationObjectPostOptionalIdTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiVisualizationObjectPostOptionalId
     */
    id?: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPostOptionalIdAttributes}
     * @memberof JsonApiVisualizationObjectPostOptionalId
     */
    attributes?: JsonApiAnalyticalDashboardPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiVisualizationObjectPostOptionalIdDocument
 */
export declare interface JsonApiVisualizationObjectPostOptionalIdDocument {
    /**
     *
     * @type {JsonApiVisualizationObjectPostOptionalId}
     * @memberof JsonApiVisualizationObjectPostOptionalIdDocument
     */
    data: JsonApiVisualizationObjectPostOptionalId;
}

export declare const JsonApiVisualizationObjectPostOptionalIdTypeEnum: {
    readonly VISUALIZATION_OBJECT: "visualizationObject";
};

export declare type JsonApiVisualizationObjectPostOptionalIdTypeEnum = typeof JsonApiVisualizationObjectPostOptionalIdTypeEnum[keyof typeof JsonApiVisualizationObjectPostOptionalIdTypeEnum];

/**
 * JSON:API representation of workspaceDataFilter entity.
 * @export
 * @interface JsonApiWorkspaceDataFilterIn
 */
export declare interface JsonApiWorkspaceDataFilterIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterIn
     */
    type: JsonApiWorkspaceDataFilterInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterIn
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInAttributes}
     * @memberof JsonApiWorkspaceDataFilterIn
     */
    attributes?: JsonApiWorkspaceDataFilterInAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInRelationships}
     * @memberof JsonApiWorkspaceDataFilterIn
     */
    relationships?: JsonApiWorkspaceDataFilterInRelationships;
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterInAttributes
 */
export declare interface JsonApiWorkspaceDataFilterInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterInAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterInAttributes
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterInAttributes
     */
    columnName?: string;
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterInDocument
 */
export declare interface JsonApiWorkspaceDataFilterInDocument {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterIn}
     * @memberof JsonApiWorkspaceDataFilterInDocument
     */
    data: JsonApiWorkspaceDataFilterIn;
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterInRelationships
 */
export declare interface JsonApiWorkspaceDataFilterInRelationships {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInRelationshipsFilterSettings}
     * @memberof JsonApiWorkspaceDataFilterInRelationships
     */
    filterSettings?: JsonApiWorkspaceDataFilterInRelationshipsFilterSettings;
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterInRelationshipsFilterSettings
 */
export declare interface JsonApiWorkspaceDataFilterInRelationshipsFilterSettings {
    /**
     * References to other resource objects in a to-many (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
     * @type {Array<JsonApiWorkspaceDataFilterSettingLinkage>}
     * @memberof JsonApiWorkspaceDataFilterInRelationshipsFilterSettings
     */
    data: Array<JsonApiWorkspaceDataFilterSettingLinkage>;
}

export declare const JsonApiWorkspaceDataFilterInTypeEnum: {
    readonly WORKSPACE_DATA_FILTER: "workspaceDataFilter";
};

export declare type JsonApiWorkspaceDataFilterInTypeEnum = typeof JsonApiWorkspaceDataFilterInTypeEnum[keyof typeof JsonApiWorkspaceDataFilterInTypeEnum];

/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiWorkspaceDataFilterLinkage
 */
export declare interface JsonApiWorkspaceDataFilterLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterLinkage
     */
    type: JsonApiWorkspaceDataFilterLinkageTypeEnum;
}

export declare const JsonApiWorkspaceDataFilterLinkageTypeEnum: {
    readonly WORKSPACE_DATA_FILTER: "workspaceDataFilter";
};

export declare type JsonApiWorkspaceDataFilterLinkageTypeEnum = typeof JsonApiWorkspaceDataFilterLinkageTypeEnum[keyof typeof JsonApiWorkspaceDataFilterLinkageTypeEnum];

/**
 * JSON:API representation of workspaceDataFilter entity.
 * @export
 * @interface JsonApiWorkspaceDataFilterOut
 */
export declare interface JsonApiWorkspaceDataFilterOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterOut
     */
    type: JsonApiWorkspaceDataFilterOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterOut
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInAttributes}
     * @memberof JsonApiWorkspaceDataFilterOut
     */
    attributes?: JsonApiWorkspaceDataFilterInAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInRelationships}
     * @memberof JsonApiWorkspaceDataFilterOut
     */
    relationships?: JsonApiWorkspaceDataFilterInRelationships;
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterOutDocument
 */
export declare interface JsonApiWorkspaceDataFilterOutDocument {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterOut}
     * @memberof JsonApiWorkspaceDataFilterOutDocument
     */
    data: JsonApiWorkspaceDataFilterOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceDataFilterOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterOutDocument
     */
    included?: Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>;
}

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiWorkspaceDataFilterOutList
 */
export declare interface JsonApiWorkspaceDataFilterOutList {
    /**
     *
     * @type {Array<JsonApiWorkspaceDataFilterOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterOutList
     */
    data: Array<JsonApiWorkspaceDataFilterOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiWorkspaceDataFilterOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterOutList
     */
    included?: Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>;
}

export declare const JsonApiWorkspaceDataFilterOutTypeEnum: {
    readonly WORKSPACE_DATA_FILTER: "workspaceDataFilter";
};

export declare type JsonApiWorkspaceDataFilterOutTypeEnum = typeof JsonApiWorkspaceDataFilterOutTypeEnum[keyof typeof JsonApiWorkspaceDataFilterOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterOutWithLinks
 */
export declare interface JsonApiWorkspaceDataFilterOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    type: JsonApiWorkspaceDataFilterOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInAttributes}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    attributes?: JsonApiWorkspaceDataFilterInAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInRelationships}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    relationships?: JsonApiWorkspaceDataFilterInRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceDataFilterOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiWorkspaceDataFilterOutWithLinksTypeEnum: {
    readonly WORKSPACE_DATA_FILTER: "workspaceDataFilter";
};

export declare type JsonApiWorkspaceDataFilterOutWithLinksTypeEnum = typeof JsonApiWorkspaceDataFilterOutWithLinksTypeEnum[keyof typeof JsonApiWorkspaceDataFilterOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching workspaceDataFilter entity.
 * @export
 * @interface JsonApiWorkspaceDataFilterPatch
 */
export declare interface JsonApiWorkspaceDataFilterPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterPatch
     */
    type: JsonApiWorkspaceDataFilterPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInAttributes}
     * @memberof JsonApiWorkspaceDataFilterPatch
     */
    attributes?: JsonApiWorkspaceDataFilterInAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInRelationships}
     * @memberof JsonApiWorkspaceDataFilterPatch
     */
    relationships?: JsonApiWorkspaceDataFilterInRelationships;
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterPatchDocument
 */
export declare interface JsonApiWorkspaceDataFilterPatchDocument {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterPatch}
     * @memberof JsonApiWorkspaceDataFilterPatchDocument
     */
    data: JsonApiWorkspaceDataFilterPatch;
}

export declare const JsonApiWorkspaceDataFilterPatchTypeEnum: {
    readonly WORKSPACE_DATA_FILTER: "workspaceDataFilter";
};

export declare type JsonApiWorkspaceDataFilterPatchTypeEnum = typeof JsonApiWorkspaceDataFilterPatchTypeEnum[keyof typeof JsonApiWorkspaceDataFilterPatchTypeEnum];

/**
 * JSON:API representation of workspaceDataFilterSetting entity.
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingIn
 */
export declare interface JsonApiWorkspaceDataFilterSettingIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingIn
     */
    type: JsonApiWorkspaceDataFilterSettingInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingIn
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingInAttributes}
     * @memberof JsonApiWorkspaceDataFilterSettingIn
     */
    attributes?: JsonApiWorkspaceDataFilterSettingInAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingInRelationships}
     * @memberof JsonApiWorkspaceDataFilterSettingIn
     */
    relationships?: JsonApiWorkspaceDataFilterSettingInRelationships;
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingInAttributes
 */
export declare interface JsonApiWorkspaceDataFilterSettingInAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingInAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingInAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiWorkspaceDataFilterSettingInAttributes
     */
    filterValues?: Array<string>;
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingInDocument
 */
export declare interface JsonApiWorkspaceDataFilterSettingInDocument {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingIn}
     * @memberof JsonApiWorkspaceDataFilterSettingInDocument
     */
    data: JsonApiWorkspaceDataFilterSettingIn;
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingInRelationships
 */
export declare interface JsonApiWorkspaceDataFilterSettingInRelationships {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingInRelationshipsWorkspaceDataFilter}
     * @memberof JsonApiWorkspaceDataFilterSettingInRelationships
     */
    workspaceDataFilter?: JsonApiWorkspaceDataFilterSettingInRelationshipsWorkspaceDataFilter;
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingInRelationshipsWorkspaceDataFilter
 */
export declare interface JsonApiWorkspaceDataFilterSettingInRelationshipsWorkspaceDataFilter {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterToOneLinkage}
     * @memberof JsonApiWorkspaceDataFilterSettingInRelationshipsWorkspaceDataFilter
     */
    data: JsonApiWorkspaceDataFilterToOneLinkage | null;
}

export declare const JsonApiWorkspaceDataFilterSettingInTypeEnum: {
    readonly WORKSPACE_DATA_FILTER_SETTING: "workspaceDataFilterSetting";
};

export declare type JsonApiWorkspaceDataFilterSettingInTypeEnum = typeof JsonApiWorkspaceDataFilterSettingInTypeEnum[keyof typeof JsonApiWorkspaceDataFilterSettingInTypeEnum];

/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingLinkage
 */
export declare interface JsonApiWorkspaceDataFilterSettingLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingLinkage
     */
    type: JsonApiWorkspaceDataFilterSettingLinkageTypeEnum;
}

export declare const JsonApiWorkspaceDataFilterSettingLinkageTypeEnum: {
    readonly WORKSPACE_DATA_FILTER_SETTING: "workspaceDataFilterSetting";
};

export declare type JsonApiWorkspaceDataFilterSettingLinkageTypeEnum = typeof JsonApiWorkspaceDataFilterSettingLinkageTypeEnum[keyof typeof JsonApiWorkspaceDataFilterSettingLinkageTypeEnum];

/**
 * JSON:API representation of workspaceDataFilterSetting entity.
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOut
 */
export declare interface JsonApiWorkspaceDataFilterSettingOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOut
     */
    type: JsonApiWorkspaceDataFilterSettingOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOut
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingInAttributes}
     * @memberof JsonApiWorkspaceDataFilterSettingOut
     */
    attributes?: JsonApiWorkspaceDataFilterSettingInAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingInRelationships}
     * @memberof JsonApiWorkspaceDataFilterSettingOut
     */
    relationships?: JsonApiWorkspaceDataFilterSettingInRelationships;
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutDocument
 */
export declare interface JsonApiWorkspaceDataFilterSettingOutDocument {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingOut}
     * @memberof JsonApiWorkspaceDataFilterSettingOutDocument
     */
    data: JsonApiWorkspaceDataFilterSettingOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceDataFilterSettingOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceDataFilterOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterSettingOutDocument
     */
    included?: Array<JsonApiWorkspaceDataFilterOutWithLinks>;
}

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutList
 */
export declare interface JsonApiWorkspaceDataFilterSettingOutList {
    /**
     *
     * @type {Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterSettingOutList
     */
    data: Array<JsonApiWorkspaceDataFilterSettingOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiWorkspaceDataFilterSettingOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceDataFilterOutWithLinks>}
     * @memberof JsonApiWorkspaceDataFilterSettingOutList
     */
    included?: Array<JsonApiWorkspaceDataFilterOutWithLinks>;
}

export declare const JsonApiWorkspaceDataFilterSettingOutTypeEnum: {
    readonly WORKSPACE_DATA_FILTER_SETTING: "workspaceDataFilterSetting";
};

export declare type JsonApiWorkspaceDataFilterSettingOutTypeEnum = typeof JsonApiWorkspaceDataFilterSettingOutTypeEnum[keyof typeof JsonApiWorkspaceDataFilterSettingOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingOutWithLinks
 */
export declare interface JsonApiWorkspaceDataFilterSettingOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    type: JsonApiWorkspaceDataFilterSettingOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingInAttributes}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    attributes?: JsonApiWorkspaceDataFilterSettingInAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingInRelationships}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    relationships?: JsonApiWorkspaceDataFilterSettingInRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceDataFilterSettingOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiWorkspaceDataFilterSettingOutWithLinksTypeEnum: {
    readonly WORKSPACE_DATA_FILTER_SETTING: "workspaceDataFilterSetting";
};

export declare type JsonApiWorkspaceDataFilterSettingOutWithLinksTypeEnum = typeof JsonApiWorkspaceDataFilterSettingOutWithLinksTypeEnum[keyof typeof JsonApiWorkspaceDataFilterSettingOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching workspaceDataFilterSetting entity.
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingPatch
 */
export declare interface JsonApiWorkspaceDataFilterSettingPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingPatch
     */
    type: JsonApiWorkspaceDataFilterSettingPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceDataFilterSettingPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingInAttributes}
     * @memberof JsonApiWorkspaceDataFilterSettingPatch
     */
    attributes?: JsonApiWorkspaceDataFilterSettingInAttributes;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingInRelationships}
     * @memberof JsonApiWorkspaceDataFilterSettingPatch
     */
    relationships?: JsonApiWorkspaceDataFilterSettingInRelationships;
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceDataFilterSettingPatchDocument
 */
export declare interface JsonApiWorkspaceDataFilterSettingPatchDocument {
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingPatch}
     * @memberof JsonApiWorkspaceDataFilterSettingPatchDocument
     */
    data: JsonApiWorkspaceDataFilterSettingPatch;
}

export declare const JsonApiWorkspaceDataFilterSettingPatchTypeEnum: {
    readonly WORKSPACE_DATA_FILTER_SETTING: "workspaceDataFilterSetting";
};

export declare type JsonApiWorkspaceDataFilterSettingPatchTypeEnum = typeof JsonApiWorkspaceDataFilterSettingPatchTypeEnum[keyof typeof JsonApiWorkspaceDataFilterSettingPatchTypeEnum];

/**
 * @type JsonApiWorkspaceDataFilterToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export declare type JsonApiWorkspaceDataFilterToOneLinkage = JsonApiWorkspaceDataFilterLinkage;

/**
 * JSON:API representation of workspace entity.
 * @export
 * @interface JsonApiWorkspaceIn
 */
export declare interface JsonApiWorkspaceIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceIn
     */
    type: JsonApiWorkspaceInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceIn
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceOutAttributes}
     * @memberof JsonApiWorkspaceIn
     */
    attributes?: JsonApiWorkspaceOutAttributes;
    /**
     *
     * @type {JsonApiWorkspaceOutRelationships}
     * @memberof JsonApiWorkspaceIn
     */
    relationships?: JsonApiWorkspaceOutRelationships;
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceInDocument
 */
export declare interface JsonApiWorkspaceInDocument {
    /**
     *
     * @type {JsonApiWorkspaceIn}
     * @memberof JsonApiWorkspaceInDocument
     */
    data: JsonApiWorkspaceIn;
}

export declare const JsonApiWorkspaceInTypeEnum: {
    readonly WORKSPACE: "workspace";
};

export declare type JsonApiWorkspaceInTypeEnum = typeof JsonApiWorkspaceInTypeEnum[keyof typeof JsonApiWorkspaceInTypeEnum];

/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiWorkspaceLinkage
 */
export declare interface JsonApiWorkspaceLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceLinkage
     */
    type: JsonApiWorkspaceLinkageTypeEnum;
}

export declare const JsonApiWorkspaceLinkageTypeEnum: {
    readonly WORKSPACE: "workspace";
};

export declare type JsonApiWorkspaceLinkageTypeEnum = typeof JsonApiWorkspaceLinkageTypeEnum[keyof typeof JsonApiWorkspaceLinkageTypeEnum];

/**
 * JSON:API representation of workspace entity.
 * @export
 * @interface JsonApiWorkspaceOut
 */
export declare interface JsonApiWorkspaceOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceOut
     */
    type: JsonApiWorkspaceOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceOut
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceOutMeta}
     * @memberof JsonApiWorkspaceOut
     */
    meta?: JsonApiWorkspaceOutMeta;
    /**
     *
     * @type {JsonApiWorkspaceOutAttributes}
     * @memberof JsonApiWorkspaceOut
     */
    attributes?: JsonApiWorkspaceOutAttributes;
    /**
     *
     * @type {JsonApiWorkspaceOutRelationships}
     * @memberof JsonApiWorkspaceOut
     */
    relationships?: JsonApiWorkspaceOutRelationships;
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceOutAttributes
 */
export declare interface JsonApiWorkspaceOutAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceOutAttributes
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceOutAttributes
     */
    earlyAccess?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceOutAttributes
     */
    description?: string;
    /**
     * Custom prefix of entity identifiers in workspace
     * @type {string}
     * @memberof JsonApiWorkspaceOutAttributes
     */
    prefix?: string;
    /**
     *
     * @type {number}
     * @memberof JsonApiWorkspaceOutAttributes
     */
    cacheExtraLimit?: number;
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceOutDocument
 */
export declare interface JsonApiWorkspaceOutDocument {
    /**
     *
     * @type {JsonApiWorkspaceOut}
     * @memberof JsonApiWorkspaceOutDocument
     */
    data: JsonApiWorkspaceOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceOutDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceOutWithLinks>}
     * @memberof JsonApiWorkspaceOutDocument
     */
    included?: Array<JsonApiWorkspaceOutWithLinks>;
}

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiWorkspaceOutList
 */
export declare interface JsonApiWorkspaceOutList {
    /**
     *
     * @type {Array<JsonApiWorkspaceOutWithLinks>}
     * @memberof JsonApiWorkspaceOutList
     */
    data: Array<JsonApiWorkspaceOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiWorkspaceOutList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceOutWithLinks>}
     * @memberof JsonApiWorkspaceOutList
     */
    included?: Array<JsonApiWorkspaceOutWithLinks>;
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceOutMeta
 */
export declare interface JsonApiWorkspaceOutMeta {
    /**
     *
     * @type {JsonApiWorkspaceOutMetaConfig}
     * @memberof JsonApiWorkspaceOutMeta
     */
    config?: JsonApiWorkspaceOutMetaConfig;
    /**
     * List of valid permissions for a logged-in user.
     * @type {Array<string>}
     * @memberof JsonApiWorkspaceOutMeta
     */
    permissions?: Array<JsonApiWorkspaceOutMetaPermissionsEnum>;
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceOutMetaConfig
 */
export declare interface JsonApiWorkspaceOutMetaConfig {
    /**
     * is sampling enabled - based on type of data-source connected to this workspace
     * @type {boolean}
     * @memberof JsonApiWorkspaceOutMetaConfig
     */
    dataSamplingAvailable?: boolean;
    /**
     * is approximate count enabled - based on type of data-source connected to this workspace
     * @type {boolean}
     * @memberof JsonApiWorkspaceOutMetaConfig
     */
    approximateCountAvailable?: boolean;
    /**
     * is \'show all values\' displayed for dates - based on type of data-source connected to this workspace
     * @type {boolean}
     * @memberof JsonApiWorkspaceOutMetaConfig
     */
    showAllValuesOnDatesAvailable?: boolean;
}

export declare const JsonApiWorkspaceOutMetaPermissionsEnum: {
    readonly MANAGE: "MANAGE";
    readonly ANALYZE: "ANALYZE";
    readonly EXPORT: "EXPORT";
    readonly EXPORT_TABULAR: "EXPORT_TABULAR";
    readonly EXPORT_PDF: "EXPORT_PDF";
    readonly VIEW: "VIEW";
};

export declare type JsonApiWorkspaceOutMetaPermissionsEnum = typeof JsonApiWorkspaceOutMetaPermissionsEnum[keyof typeof JsonApiWorkspaceOutMetaPermissionsEnum];

/**
 *
 * @export
 * @interface JsonApiWorkspaceOutRelationships
 */
export declare interface JsonApiWorkspaceOutRelationships {
    /**
     *
     * @type {JsonApiWorkspaceOutRelationshipsParent}
     * @memberof JsonApiWorkspaceOutRelationships
     */
    parent?: JsonApiWorkspaceOutRelationshipsParent;
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceOutRelationshipsParent
 */
export declare interface JsonApiWorkspaceOutRelationshipsParent {
    /**
     *
     * @type {JsonApiWorkspaceToOneLinkage}
     * @memberof JsonApiWorkspaceOutRelationshipsParent
     */
    data: JsonApiWorkspaceToOneLinkage | null;
}

export declare const JsonApiWorkspaceOutTypeEnum: {
    readonly WORKSPACE: "workspace";
};

export declare type JsonApiWorkspaceOutTypeEnum = typeof JsonApiWorkspaceOutTypeEnum[keyof typeof JsonApiWorkspaceOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiWorkspaceOutWithLinks
 */
export declare interface JsonApiWorkspaceOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    type: JsonApiWorkspaceOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceOutMeta}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    meta?: JsonApiWorkspaceOutMeta;
    /**
     *
     * @type {JsonApiWorkspaceOutAttributes}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    attributes?: JsonApiWorkspaceOutAttributes;
    /**
     *
     * @type {JsonApiWorkspaceOutRelationships}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    relationships?: JsonApiWorkspaceOutRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiWorkspaceOutWithLinksTypeEnum: {
    readonly WORKSPACE: "workspace";
};

export declare type JsonApiWorkspaceOutWithLinksTypeEnum = typeof JsonApiWorkspaceOutWithLinksTypeEnum[keyof typeof JsonApiWorkspaceOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching workspace entity.
 * @export
 * @interface JsonApiWorkspacePatch
 */
export declare interface JsonApiWorkspacePatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspacePatch
     */
    type: JsonApiWorkspacePatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspacePatch
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceOutAttributes}
     * @memberof JsonApiWorkspacePatch
     */
    attributes?: JsonApiWorkspaceOutAttributes;
    /**
     *
     * @type {JsonApiWorkspaceOutRelationships}
     * @memberof JsonApiWorkspacePatch
     */
    relationships?: JsonApiWorkspaceOutRelationships;
}

/**
 *
 * @export
 * @interface JsonApiWorkspacePatchDocument
 */
export declare interface JsonApiWorkspacePatchDocument {
    /**
     *
     * @type {JsonApiWorkspacePatch}
     * @memberof JsonApiWorkspacePatchDocument
     */
    data: JsonApiWorkspacePatch;
}

export declare const JsonApiWorkspacePatchTypeEnum: {
    readonly WORKSPACE: "workspace";
};

export declare type JsonApiWorkspacePatchTypeEnum = typeof JsonApiWorkspacePatchTypeEnum[keyof typeof JsonApiWorkspacePatchTypeEnum];

/**
 * JSON:API representation of workspaceSetting entity.
 * @export
 * @interface JsonApiWorkspaceSettingIn
 */
export declare interface JsonApiWorkspaceSettingIn {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceSettingIn
     */
    type: JsonApiWorkspaceSettingInTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceSettingIn
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPostOptionalIdAttributes}
     * @memberof JsonApiWorkspaceSettingIn
     */
    attributes?: JsonApiWorkspaceSettingPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceSettingInDocument
 */
export declare interface JsonApiWorkspaceSettingInDocument {
    /**
     *
     * @type {JsonApiWorkspaceSettingIn}
     * @memberof JsonApiWorkspaceSettingInDocument
     */
    data: JsonApiWorkspaceSettingIn;
}

export declare const JsonApiWorkspaceSettingInTypeEnum: {
    readonly WORKSPACE_SETTING: "workspaceSetting";
};

export declare type JsonApiWorkspaceSettingInTypeEnum = typeof JsonApiWorkspaceSettingInTypeEnum[keyof typeof JsonApiWorkspaceSettingInTypeEnum];

/**
 * JSON:API representation of workspaceSetting entity.
 * @export
 * @interface JsonApiWorkspaceSettingOut
 */
export declare interface JsonApiWorkspaceSettingOut {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceSettingOut
     */
    type: JsonApiWorkspaceSettingOutTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceSettingOut
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutMeta}
     * @memberof JsonApiWorkspaceSettingOut
     */
    meta?: JsonApiAttributeHierarchyOutMeta;
    /**
     *
     * @type {JsonApiWorkspaceSettingPostOptionalIdAttributes}
     * @memberof JsonApiWorkspaceSettingOut
     */
    attributes?: JsonApiWorkspaceSettingPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceSettingOutDocument
 */
export declare interface JsonApiWorkspaceSettingOutDocument {
    /**
     *
     * @type {JsonApiWorkspaceSettingOut}
     * @memberof JsonApiWorkspaceSettingOutDocument
     */
    data: JsonApiWorkspaceSettingOut;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceSettingOutDocument
     */
    links?: ObjectLinks;
}

/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiWorkspaceSettingOutList
 */
export declare interface JsonApiWorkspaceSettingOutList {
    /**
     *
     * @type {Array<JsonApiWorkspaceSettingOutWithLinks>}
     * @memberof JsonApiWorkspaceSettingOutList
     */
    data: Array<JsonApiWorkspaceSettingOutWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiWorkspaceSettingOutList
     */
    links?: ListLinks;
}

export declare const JsonApiWorkspaceSettingOutTypeEnum: {
    readonly WORKSPACE_SETTING: "workspaceSetting";
};

export declare type JsonApiWorkspaceSettingOutTypeEnum = typeof JsonApiWorkspaceSettingOutTypeEnum[keyof typeof JsonApiWorkspaceSettingOutTypeEnum];

/**
 *
 * @export
 * @interface JsonApiWorkspaceSettingOutWithLinks
 */
export declare interface JsonApiWorkspaceSettingOutWithLinks {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceSettingOutWithLinks
     */
    type: JsonApiWorkspaceSettingOutWithLinksTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceSettingOutWithLinks
     */
    id: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyOutMeta}
     * @memberof JsonApiWorkspaceSettingOutWithLinks
     */
    meta?: JsonApiAttributeHierarchyOutMeta;
    /**
     *
     * @type {JsonApiWorkspaceSettingPostOptionalIdAttributes}
     * @memberof JsonApiWorkspaceSettingOutWithLinks
     */
    attributes?: JsonApiWorkspaceSettingPostOptionalIdAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceSettingOutWithLinks
     */
    links?: ObjectLinks;
}

export declare const JsonApiWorkspaceSettingOutWithLinksTypeEnum: {
    readonly WORKSPACE_SETTING: "workspaceSetting";
};

export declare type JsonApiWorkspaceSettingOutWithLinksTypeEnum = typeof JsonApiWorkspaceSettingOutWithLinksTypeEnum[keyof typeof JsonApiWorkspaceSettingOutWithLinksTypeEnum];

/**
 * JSON:API representation of patching workspaceSetting entity.
 * @export
 * @interface JsonApiWorkspaceSettingPatch
 */
export declare interface JsonApiWorkspaceSettingPatch {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceSettingPatch
     */
    type: JsonApiWorkspaceSettingPatchTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceSettingPatch
     */
    id: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPostOptionalIdAttributes}
     * @memberof JsonApiWorkspaceSettingPatch
     */
    attributes?: JsonApiWorkspaceSettingPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceSettingPatchDocument
 */
export declare interface JsonApiWorkspaceSettingPatchDocument {
    /**
     *
     * @type {JsonApiWorkspaceSettingPatch}
     * @memberof JsonApiWorkspaceSettingPatchDocument
     */
    data: JsonApiWorkspaceSettingPatch;
}

export declare const JsonApiWorkspaceSettingPatchTypeEnum: {
    readonly WORKSPACE_SETTING: "workspaceSetting";
};

export declare type JsonApiWorkspaceSettingPatchTypeEnum = typeof JsonApiWorkspaceSettingPatchTypeEnum[keyof typeof JsonApiWorkspaceSettingPatchTypeEnum];

/**
 * JSON:API representation of workspaceSetting entity.
 * @export
 * @interface JsonApiWorkspaceSettingPostOptionalId
 */
export declare interface JsonApiWorkspaceSettingPostOptionalId {
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceSettingPostOptionalId
     */
    type: JsonApiWorkspaceSettingPostOptionalIdTypeEnum;
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceSettingPostOptionalId
     */
    id?: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPostOptionalIdAttributes}
     * @memberof JsonApiWorkspaceSettingPostOptionalId
     */
    attributes?: JsonApiWorkspaceSettingPostOptionalIdAttributes;
}

/**
 *
 * @export
 * @interface JsonApiWorkspaceSettingPostOptionalIdAttributes
 */
export declare interface JsonApiWorkspaceSettingPostOptionalIdAttributes {
    /**
     * Free-form JSON content. Maximum supported length is 15000 characters.
     * @type {object}
     * @memberof JsonApiWorkspaceSettingPostOptionalIdAttributes
     */
    content?: object;
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceSettingPostOptionalIdAttributes
     */
    type?: JsonApiWorkspaceSettingPostOptionalIdAttributesTypeEnum;
}

export declare const JsonApiWorkspaceSettingPostOptionalIdAttributesTypeEnum: {
    readonly TIMEZONE: "TIMEZONE";
    readonly ACTIVE_THEME: "ACTIVE_THEME";
    readonly ACTIVE_COLOR_PALETTE: "ACTIVE_COLOR_PALETTE";
    readonly WHITE_LABELING: "WHITE_LABELING";
    readonly LOCALE: "LOCALE";
    readonly FORMAT_LOCALE: "FORMAT_LOCALE";
    readonly MAPBOX_TOKEN: "MAPBOX_TOKEN";
    readonly WEEK_START: "WEEK_START";
};

export declare type JsonApiWorkspaceSettingPostOptionalIdAttributesTypeEnum = typeof JsonApiWorkspaceSettingPostOptionalIdAttributesTypeEnum[keyof typeof JsonApiWorkspaceSettingPostOptionalIdAttributesTypeEnum];

/**
 *
 * @export
 * @interface JsonApiWorkspaceSettingPostOptionalIdDocument
 */
export declare interface JsonApiWorkspaceSettingPostOptionalIdDocument {
    /**
     *
     * @type {JsonApiWorkspaceSettingPostOptionalId}
     * @memberof JsonApiWorkspaceSettingPostOptionalIdDocument
     */
    data: JsonApiWorkspaceSettingPostOptionalId;
}

export declare const JsonApiWorkspaceSettingPostOptionalIdTypeEnum: {
    readonly WORKSPACE_SETTING: "workspaceSetting";
};

export declare type JsonApiWorkspaceSettingPostOptionalIdTypeEnum = typeof JsonApiWorkspaceSettingPostOptionalIdTypeEnum[keyof typeof JsonApiWorkspaceSettingPostOptionalIdTypeEnum];

/**
 * @type JsonApiWorkspaceToOneLinkage
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export declare type JsonApiWorkspaceToOneLinkage = JsonApiWorkspaceLinkage;

/**
 *
 * @export
 * @class BaseAPI
 */
export declare class LabelElementsBaseApi {
    protected basePath: string;
    protected axios: AxiosInstance;
    protected configuration: LabelElementsConfiguration | undefined;
    constructor(configuration?: LabelElementsConfiguration, basePath?: string, axios?: AxiosInstance);
}

export declare class LabelElementsConfiguration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;
    constructor(param?: LabelElementsConfigurationParameters);
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    isJsonMime(mime: string): boolean;
}

/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
export declare interface LabelElementsConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

/**
 *
 * @export
 * @interface RequestArgs
 */
export declare interface LabelElementsRequestArgs {
    url: string;
    options: AxiosRequestConfig;
}

/**
 * A label identifier.
 * @export
 * @interface LabelIdentifier
 */
export declare interface LabelIdentifier {
    /**
     * Label ID.
     * @type {string}
     * @memberof LabelIdentifier
     */
    id: string;
    /**
     * A type of the label.
     * @type {string}
     * @memberof LabelIdentifier
     */
    type: LabelIdentifierTypeEnum;
}

export declare const LabelIdentifierTypeEnum: {
    readonly LABEL: "label";
};

export declare type LabelIdentifierTypeEnum = typeof LabelIdentifierTypeEnum[keyof typeof LabelIdentifierTypeEnum];

/**
 * LabelsApi - object-oriented interface
 * @export
 * @class LabelsApi
 * @extends {BaseAPI}
 */
export declare class LabelsApi extends MetadataBaseApi implements LabelsApiInterface {
    /**
     *
     * @summary Get all Labels
     * @param {LabelsApiGetAllEntitiesLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    getAllEntitiesLabels(requestParameters: LabelsApiGetAllEntitiesLabelsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiLabelOutList, any>>;
    /**
     *
     * @summary Get a Label
     * @param {LabelsApiGetEntityLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApi
     */
    getEntityLabels(requestParameters: LabelsApiGetEntityLabelsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiLabelOutDocument, any>>;
}

/**
 * LabelsApi - axios parameter creator
 * @export
 */
export declare const LabelsApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Get all Labels
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesLabels: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"attributes" | "attribute" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Label
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityLabels: (workspaceId: string, objectId: string, filter?: string, include?: Array<"attributes" | "attribute" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * LabelsApi - factory interface
 * @export
 */
export declare const LabelsApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get all Labels
     * @param {LabelsApiGetAllEntitiesLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesLabels(requestParameters: LabelsApiGetAllEntitiesLabelsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiLabelOutList>;
    /**
     *
     * @summary Get a Label
     * @param {LabelsApiGetEntityLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityLabels(requestParameters: LabelsApiGetEntityLabelsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiLabelOutDocument>;
};

/**
 * LabelsApi - functional programming interface
 * @export
 */
export declare const LabelsApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Get all Labels
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesLabels(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"attributes" | "attribute" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiLabelOutList>>;
    /**
     *
     * @summary Get a Label
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityLabels(workspaceId: string, objectId: string, filter?: string, include?: Array<"attributes" | "attribute" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiLabelOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesLabels operation in LabelsApi.
 * @export
 * @interface LabelsApiGetAllEntitiesLabelsRequest
 */
export declare interface LabelsApiGetAllEntitiesLabelsRequest {
    /**
     *
     * @type {string}
     * @memberof LabelsApiGetAllEntitiesLabels
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof LabelsApiGetAllEntitiesLabels
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof LabelsApiGetAllEntitiesLabels
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'attribute' | 'ALL'>}
     * @memberof LabelsApiGetAllEntitiesLabels
     */
    readonly include?: Array<"attributes" | "attribute" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof LabelsApiGetAllEntitiesLabels
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof LabelsApiGetAllEntitiesLabels
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof LabelsApiGetAllEntitiesLabels
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof LabelsApiGetAllEntitiesLabels
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof LabelsApiGetAllEntitiesLabels
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityLabels operation in LabelsApi.
 * @export
 * @interface LabelsApiGetEntityLabelsRequest
 */
export declare interface LabelsApiGetEntityLabelsRequest {
    /**
     *
     * @type {string}
     * @memberof LabelsApiGetEntityLabels
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof LabelsApiGetEntityLabels
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof LabelsApiGetEntityLabels
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'attribute' | 'ALL'>}
     * @memberof LabelsApiGetEntityLabels
     */
    readonly include?: Array<"attributes" | "attribute" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof LabelsApiGetEntityLabels
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof LabelsApiGetEntityLabels
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * LabelsApi - interface
 * @export
 * @interface LabelsApi
 */
export declare interface LabelsApiInterface {
    /**
     *
     * @summary Get all Labels
     * @param {LabelsApiGetAllEntitiesLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApiInterface
     */
    getAllEntitiesLabels(requestParameters: LabelsApiGetAllEntitiesLabelsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiLabelOutList>;
    /**
     *
     * @summary Get a Label
     * @param {LabelsApiGetEntityLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LabelsApiInterface
     */
    getEntityLabels(requestParameters: LabelsApiGetEntityLabelsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiLabelOutDocument>;
}

/**
 * LayoutApi - object-oriented interface
 * @export
 * @class LayoutApi
 * @extends {BaseAPI}
 */
export declare class LayoutApi extends MetadataBaseApi implements LayoutApiInterface {
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {LayoutApiGetAnalyticsModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getAnalyticsModel(requestParameters: LayoutApiGetAnalyticsModelRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeAnalytics, any>>;
    /**
     * Retrieve all data sources including related physical model.
     * @summary Get all data sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getDataSourcesLayout(options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeDataSources, any>>;
    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {LayoutApiGetLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getLogicalModel(requestParameters: LayoutApiGetLogicalModelRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeModel, any>>;
    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {LayoutApiGetOrganizationLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getOrganizationLayout(requestParameters?: LayoutApiGetOrganizationLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeOrganization, any>>;
    /**
     * Retrieve complete layout of tables with their columns
     * @summary Get data source physical model layout
     * @param {LayoutApiGetPdmLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getPdmLayout(requestParameters: LayoutApiGetPdmLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativePdm, any>>;
    /**
     * Retrieve current user data filters assigned to the workspace.
     * @summary Get user data filters
     * @param {LayoutApiGetUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getUserDataFilters(requestParameters: LayoutApiGetUserDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeUserDataFilters, any>>;
    /**
     * Retrieve current set of permissions of the user-group in a declarative form.
     * @summary Get permissions for the user-group
     * @param {LayoutApiGetUserGroupPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getUserGroupPermissions(requestParameters: LayoutApiGetUserGroupPermissionsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeUserGroupPermissions, any>>;
    /**
     * Retrieve all user-groups eventually with parent group.
     * @summary Get all user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getUserGroupsLayout(options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeUserGroups, any>>;
    /**
     * Retrieve current set of permissions of the user in a declarative form.
     * @summary Get permissions for the user
     * @param {LayoutApiGetUserPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getUserPermissions(requestParameters: LayoutApiGetUserPermissionsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeUserPermissions, any>>;
    /**
     * Retrieve all users including authentication properties.
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getUsersLayout(options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeUsers, any>>;
    /**
     * Retrieve all users and user groups with theirs properties.
     * @summary Get all users and user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getUsersUserGroupsLayout(options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeUsersUserGroups, any>>;
    /**
     * Retrieve all workspaces and related workspace data filters (and their settings / values).
     * @summary Get workspace data filters for all workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getWorkspaceDataFiltersLayout(options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeWorkspaceDataFilters, any>>;
    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {LayoutApiGetWorkspaceLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getWorkspaceLayout(requestParameters: LayoutApiGetWorkspaceLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeWorkspaceModel, any>>;
    /**
     * Retrieve current set of permissions of the workspace in a declarative form.
     * @summary Get permissions for the workspace
     * @param {LayoutApiGetWorkspacePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getWorkspacePermissions(requestParameters: LayoutApiGetWorkspacePermissionsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeWorkspacePermissions, any>>;
    /**
     * Gets complete layout of workspaces, their hierarchy, models.
     * @summary Get all workspaces layout
     * @param {LayoutApiGetWorkspacesLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    getWorkspacesLayout(requestParameters?: LayoutApiGetWorkspacesLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeWorkspaces, any>>;
    /**
     * Set all data sources including related physical model.
     * @summary Put all data sources
     * @param {LayoutApiPutDataSourcesLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    putDataSourcesLayout(requestParameters: LayoutApiPutDataSourcesLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Define all user groups with their parents eventually.
     * @summary Put all user groups
     * @param {LayoutApiPutUserGroupsLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    putUserGroupsLayout(requestParameters: LayoutApiPutUserGroupsLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Set all users and their authentication properties.
     * @summary Put all users
     * @param {LayoutApiPutUsersLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    putUsersLayout(requestParameters: LayoutApiPutUsersLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Define all users and user groups with theirs properties.
     * @summary Put all users and user groups
     * @param {LayoutApiPutUsersUserGroupsLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    putUsersUserGroupsLayout(requestParameters: LayoutApiPutUsersUserGroupsLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Set complete layout of workspace, like model, authorization, etc.
     * @summary Set workspace layout
     * @param {LayoutApiPutWorkspaceLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    putWorkspaceLayout(requestParameters: LayoutApiPutWorkspaceLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {LayoutApiSetAnalyticsModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    setAnalyticsModel(requestParameters: LayoutApiSetAnalyticsModelRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {LayoutApiSetLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    setLogicalModel(requestParameters: LayoutApiSetLogicalModelRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {LayoutApiSetOrganizationLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    setOrganizationLayout(requestParameters: LayoutApiSetOrganizationLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Sets complete layout of tables with their columns under corresponding Data Source.
     * @summary Set data source physical model layout
     * @param {LayoutApiSetPdmLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    setPdmLayout(requestParameters: LayoutApiSetPdmLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Set user data filters assigned to the workspace.
     * @summary Set user data filters
     * @param {LayoutApiSetUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    setUserDataFilters(requestParameters: LayoutApiSetUserDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Set effective permissions for the user-group
     * @summary Set permissions for the user-group
     * @param {LayoutApiSetUserGroupPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    setUserGroupPermissions(requestParameters: LayoutApiSetUserGroupPermissionsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Set effective permissions for the user
     * @summary Set permissions for the user
     * @param {LayoutApiSetUserPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    setUserPermissions(requestParameters: LayoutApiSetUserPermissionsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Sets workspace data filters in all workspaces in entire organization.
     * @summary Set all workspace data filters
     * @param {LayoutApiSetWorkspaceDataFiltersLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    setWorkspaceDataFiltersLayout(requestParameters: LayoutApiSetWorkspaceDataFiltersLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Set effective permissions for the workspace
     * @summary Set permissions for the workspace
     * @param {LayoutApiSetWorkspacePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    setWorkspacePermissions(requestParameters: LayoutApiSetWorkspacePermissionsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {LayoutApiSetWorkspacesLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApi
     */
    setWorkspacesLayout(requestParameters: LayoutApiSetWorkspacesLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
}

/**
 * LayoutApi - axios parameter creator
 * @export
 */
export declare const LayoutApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {string} workspaceId
     * @param {Array<'ACTIVITY_INFO'>} [exclude]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAnalyticsModel: (workspaceId: string, exclude?: Array<"ACTIVITY_INFO">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Retrieve all data sources including related physical model.
     * @summary Get all data sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourcesLayout: (options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {string} workspaceId
     * @param {boolean} [includeParents]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogicalModel: (workspaceId: string, includeParents?: boolean, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {Array<'ACTIVITY_INFO'>} [exclude]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationLayout: (exclude?: Array<"ACTIVITY_INFO">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Retrieve complete layout of tables with their columns
     * @summary Get data source physical model layout
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getPdmLayout: (dataSourceId: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Retrieve current user data filters assigned to the workspace.
     * @summary Get user data filters
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserDataFilters: (workspaceId: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Retrieve current set of permissions of the user-group in a declarative form.
     * @summary Get permissions for the user-group
     * @param {string} userGroupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroupPermissions: (userGroupId: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Retrieve all user-groups eventually with parent group.
     * @summary Get all user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroupsLayout: (options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Retrieve current set of permissions of the user in a declarative form.
     * @summary Get permissions for the user
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserPermissions: (userId: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Retrieve all users including authentication properties.
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersLayout: (options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Retrieve all users and user groups with theirs properties.
     * @summary Get all users and user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersUserGroupsLayout: (options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Retrieve all workspaces and related workspace data filters (and their settings / values).
     * @summary Get workspace data filters for all workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceDataFiltersLayout: (options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {string} workspaceId
     * @param {Array<'ACTIVITY_INFO'>} [exclude]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceLayout: (workspaceId: string, exclude?: Array<"ACTIVITY_INFO">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Retrieve current set of permissions of the workspace in a declarative form.
     * @summary Get permissions for the workspace
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspacePermissions: (workspaceId: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Gets complete layout of workspaces, their hierarchy, models.
     * @summary Get all workspaces layout
     * @param {Array<'ACTIVITY_INFO'>} [exclude]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspacesLayout: (exclude?: Array<"ACTIVITY_INFO">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Set all data sources including related physical model.
     * @summary Put all data sources
     * @param {DeclarativeDataSources} declarativeDataSources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putDataSourcesLayout: (declarativeDataSources: DeclarativeDataSources, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Define all user groups with their parents eventually.
     * @summary Put all user groups
     * @param {DeclarativeUserGroups} declarativeUserGroups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUserGroupsLayout: (declarativeUserGroups: DeclarativeUserGroups, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Set all users and their authentication properties.
     * @summary Put all users
     * @param {DeclarativeUsers} declarativeUsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUsersLayout: (declarativeUsers: DeclarativeUsers, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Define all users and user groups with theirs properties.
     * @summary Put all users and user groups
     * @param {DeclarativeUsersUserGroups} declarativeUsersUserGroups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUsersUserGroupsLayout: (declarativeUsersUserGroups: DeclarativeUsersUserGroups, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Set complete layout of workspace, like model, authorization, etc.
     * @summary Set workspace layout
     * @param {string} workspaceId
     * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putWorkspaceLayout: (workspaceId: string, declarativeWorkspaceModel: DeclarativeWorkspaceModel, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {string} workspaceId
     * @param {DeclarativeAnalytics} declarativeAnalytics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAnalyticsModel: (workspaceId: string, declarativeAnalytics: DeclarativeAnalytics, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {string} workspaceId
     * @param {DeclarativeModel} declarativeModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setLogicalModel: (workspaceId: string, declarativeModel: DeclarativeModel, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {DeclarativeOrganization} declarativeOrganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setOrganizationLayout: (declarativeOrganization: DeclarativeOrganization, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Sets complete layout of tables with their columns under corresponding Data Source.
     * @summary Set data source physical model layout
     * @param {string} dataSourceId
     * @param {DeclarativePdm} declarativePdm
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    setPdmLayout: (dataSourceId: string, declarativePdm: DeclarativePdm, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Set user data filters assigned to the workspace.
     * @summary Set user data filters
     * @param {string} workspaceId
     * @param {DeclarativeUserDataFilters} declarativeUserDataFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserDataFilters: (workspaceId: string, declarativeUserDataFilters: DeclarativeUserDataFilters, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Set effective permissions for the user-group
     * @summary Set permissions for the user-group
     * @param {string} userGroupId
     * @param {DeclarativeUserGroupPermissions} declarativeUserGroupPermissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserGroupPermissions: (userGroupId: string, declarativeUserGroupPermissions: DeclarativeUserGroupPermissions, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Set effective permissions for the user
     * @summary Set permissions for the user
     * @param {string} userId
     * @param {DeclarativeUserPermissions} declarativeUserPermissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserPermissions: (userId: string, declarativeUserPermissions: DeclarativeUserPermissions, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Sets workspace data filters in all workspaces in entire organization.
     * @summary Set all workspace data filters
     * @param {DeclarativeWorkspaceDataFilters} declarativeWorkspaceDataFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspaceDataFiltersLayout: (declarativeWorkspaceDataFilters: DeclarativeWorkspaceDataFilters, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Set effective permissions for the workspace
     * @summary Set permissions for the workspace
     * @param {string} workspaceId
     * @param {DeclarativeWorkspacePermissions} declarativeWorkspacePermissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspacePermissions: (workspaceId: string, declarativeWorkspacePermissions: DeclarativeWorkspacePermissions, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {DeclarativeWorkspaces} declarativeWorkspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspacesLayout: (declarativeWorkspaces: DeclarativeWorkspaces, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * LayoutApi - factory interface
 * @export
 */
export declare const LayoutApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {LayoutApiGetAnalyticsModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAnalyticsModel(requestParameters: LayoutApiGetAnalyticsModelRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeAnalytics>;
    /**
     * Retrieve all data sources including related physical model.
     * @summary Get all data sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourcesLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeDataSources>;
    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {LayoutApiGetLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogicalModel(requestParameters: LayoutApiGetLogicalModelRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeModel>;
    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {LayoutApiGetOrganizationLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationLayout(requestParameters: LayoutApiGetOrganizationLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeOrganization>;
    /**
     * Retrieve complete layout of tables with their columns
     * @summary Get data source physical model layout
     * @param {LayoutApiGetPdmLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getPdmLayout(requestParameters: LayoutApiGetPdmLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativePdm>;
    /**
     * Retrieve current user data filters assigned to the workspace.
     * @summary Get user data filters
     * @param {LayoutApiGetUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserDataFilters(requestParameters: LayoutApiGetUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeUserDataFilters>;
    /**
     * Retrieve current set of permissions of the user-group in a declarative form.
     * @summary Get permissions for the user-group
     * @param {LayoutApiGetUserGroupPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroupPermissions(requestParameters: LayoutApiGetUserGroupPermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeUserGroupPermissions>;
    /**
     * Retrieve all user-groups eventually with parent group.
     * @summary Get all user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroupsLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeUserGroups>;
    /**
     * Retrieve current set of permissions of the user in a declarative form.
     * @summary Get permissions for the user
     * @param {LayoutApiGetUserPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserPermissions(requestParameters: LayoutApiGetUserPermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeUserPermissions>;
    /**
     * Retrieve all users including authentication properties.
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeUsers>;
    /**
     * Retrieve all users and user groups with theirs properties.
     * @summary Get all users and user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersUserGroupsLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeUsersUserGroups>;
    /**
     * Retrieve all workspaces and related workspace data filters (and their settings / values).
     * @summary Get workspace data filters for all workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceDataFiltersLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeWorkspaceDataFilters>;
    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {LayoutApiGetWorkspaceLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceLayout(requestParameters: LayoutApiGetWorkspaceLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeWorkspaceModel>;
    /**
     * Retrieve current set of permissions of the workspace in a declarative form.
     * @summary Get permissions for the workspace
     * @param {LayoutApiGetWorkspacePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspacePermissions(requestParameters: LayoutApiGetWorkspacePermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeWorkspacePermissions>;
    /**
     * Gets complete layout of workspaces, their hierarchy, models.
     * @summary Get all workspaces layout
     * @param {LayoutApiGetWorkspacesLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspacesLayout(requestParameters: LayoutApiGetWorkspacesLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeWorkspaces>;
    /**
     * Set all data sources including related physical model.
     * @summary Put all data sources
     * @param {LayoutApiPutDataSourcesLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putDataSourcesLayout(requestParameters: LayoutApiPutDataSourcesLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Define all user groups with their parents eventually.
     * @summary Put all user groups
     * @param {LayoutApiPutUserGroupsLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUserGroupsLayout(requestParameters: LayoutApiPutUserGroupsLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Set all users and their authentication properties.
     * @summary Put all users
     * @param {LayoutApiPutUsersLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUsersLayout(requestParameters: LayoutApiPutUsersLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Define all users and user groups with theirs properties.
     * @summary Put all users and user groups
     * @param {LayoutApiPutUsersUserGroupsLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUsersUserGroupsLayout(requestParameters: LayoutApiPutUsersUserGroupsLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Set complete layout of workspace, like model, authorization, etc.
     * @summary Set workspace layout
     * @param {LayoutApiPutWorkspaceLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putWorkspaceLayout(requestParameters: LayoutApiPutWorkspaceLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {LayoutApiSetAnalyticsModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAnalyticsModel(requestParameters: LayoutApiSetAnalyticsModelRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {LayoutApiSetLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setLogicalModel(requestParameters: LayoutApiSetLogicalModelRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {LayoutApiSetOrganizationLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setOrganizationLayout(requestParameters: LayoutApiSetOrganizationLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Sets complete layout of tables with their columns under corresponding Data Source.
     * @summary Set data source physical model layout
     * @param {LayoutApiSetPdmLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    setPdmLayout(requestParameters: LayoutApiSetPdmLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Set user data filters assigned to the workspace.
     * @summary Set user data filters
     * @param {LayoutApiSetUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserDataFilters(requestParameters: LayoutApiSetUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Set effective permissions for the user-group
     * @summary Set permissions for the user-group
     * @param {LayoutApiSetUserGroupPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserGroupPermissions(requestParameters: LayoutApiSetUserGroupPermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Set effective permissions for the user
     * @summary Set permissions for the user
     * @param {LayoutApiSetUserPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserPermissions(requestParameters: LayoutApiSetUserPermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Sets workspace data filters in all workspaces in entire organization.
     * @summary Set all workspace data filters
     * @param {LayoutApiSetWorkspaceDataFiltersLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspaceDataFiltersLayout(requestParameters: LayoutApiSetWorkspaceDataFiltersLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Set effective permissions for the workspace
     * @summary Set permissions for the workspace
     * @param {LayoutApiSetWorkspacePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspacePermissions(requestParameters: LayoutApiSetWorkspacePermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {LayoutApiSetWorkspacesLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspacesLayout(requestParameters: LayoutApiSetWorkspacesLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
};

/**
 * LayoutApi - functional programming interface
 * @export
 */
export declare const LayoutApiFp: (configuration?: MetadataConfiguration) => {
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {string} workspaceId
     * @param {Array<'ACTIVITY_INFO'>} [exclude]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAnalyticsModel(workspaceId: string, exclude?: Array<"ACTIVITY_INFO">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeAnalytics>>;
    /**
     * Retrieve all data sources including related physical model.
     * @summary Get all data sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDataSourcesLayout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeDataSources>>;
    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {string} workspaceId
     * @param {boolean} [includeParents]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogicalModel(workspaceId: string, includeParents?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeModel>>;
    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {Array<'ACTIVITY_INFO'>} [exclude]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationLayout(exclude?: Array<"ACTIVITY_INFO">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeOrganization>>;
    /**
     * Retrieve complete layout of tables with their columns
     * @summary Get data source physical model layout
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getPdmLayout(dataSourceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativePdm>>;
    /**
     * Retrieve current user data filters assigned to the workspace.
     * @summary Get user data filters
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserDataFilters(workspaceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeUserDataFilters>>;
    /**
     * Retrieve current set of permissions of the user-group in a declarative form.
     * @summary Get permissions for the user-group
     * @param {string} userGroupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroupPermissions(userGroupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeUserGroupPermissions>>;
    /**
     * Retrieve all user-groups eventually with parent group.
     * @summary Get all user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroupsLayout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeUserGroups>>;
    /**
     * Retrieve current set of permissions of the user in a declarative form.
     * @summary Get permissions for the user
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserPermissions(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeUserPermissions>>;
    /**
     * Retrieve all users including authentication properties.
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersLayout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeUsers>>;
    /**
     * Retrieve all users and user groups with theirs properties.
     * @summary Get all users and user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersUserGroupsLayout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeUsersUserGroups>>;
    /**
     * Retrieve all workspaces and related workspace data filters (and their settings / values).
     * @summary Get workspace data filters for all workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceDataFiltersLayout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeWorkspaceDataFilters>>;
    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {string} workspaceId
     * @param {Array<'ACTIVITY_INFO'>} [exclude]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceLayout(workspaceId: string, exclude?: Array<"ACTIVITY_INFO">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeWorkspaceModel>>;
    /**
     * Retrieve current set of permissions of the workspace in a declarative form.
     * @summary Get permissions for the workspace
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspacePermissions(workspaceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeWorkspacePermissions>>;
    /**
     * Gets complete layout of workspaces, their hierarchy, models.
     * @summary Get all workspaces layout
     * @param {Array<'ACTIVITY_INFO'>} [exclude]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspacesLayout(exclude?: Array<"ACTIVITY_INFO">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeWorkspaces>>;
    /**
     * Set all data sources including related physical model.
     * @summary Put all data sources
     * @param {DeclarativeDataSources} declarativeDataSources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putDataSourcesLayout(declarativeDataSources: DeclarativeDataSources, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Define all user groups with their parents eventually.
     * @summary Put all user groups
     * @param {DeclarativeUserGroups} declarativeUserGroups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUserGroupsLayout(declarativeUserGroups: DeclarativeUserGroups, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Set all users and their authentication properties.
     * @summary Put all users
     * @param {DeclarativeUsers} declarativeUsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUsersLayout(declarativeUsers: DeclarativeUsers, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Define all users and user groups with theirs properties.
     * @summary Put all users and user groups
     * @param {DeclarativeUsersUserGroups} declarativeUsersUserGroups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUsersUserGroupsLayout(declarativeUsersUserGroups: DeclarativeUsersUserGroups, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Set complete layout of workspace, like model, authorization, etc.
     * @summary Set workspace layout
     * @param {string} workspaceId
     * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putWorkspaceLayout(workspaceId: string, declarativeWorkspaceModel: DeclarativeWorkspaceModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {string} workspaceId
     * @param {DeclarativeAnalytics} declarativeAnalytics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAnalyticsModel(workspaceId: string, declarativeAnalytics: DeclarativeAnalytics, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {string} workspaceId
     * @param {DeclarativeModel} declarativeModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setLogicalModel(workspaceId: string, declarativeModel: DeclarativeModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {DeclarativeOrganization} declarativeOrganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setOrganizationLayout(declarativeOrganization: DeclarativeOrganization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Sets complete layout of tables with their columns under corresponding Data Source.
     * @summary Set data source physical model layout
     * @param {string} dataSourceId
     * @param {DeclarativePdm} declarativePdm
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    setPdmLayout(dataSourceId: string, declarativePdm: DeclarativePdm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Set user data filters assigned to the workspace.
     * @summary Set user data filters
     * @param {string} workspaceId
     * @param {DeclarativeUserDataFilters} declarativeUserDataFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserDataFilters(workspaceId: string, declarativeUserDataFilters: DeclarativeUserDataFilters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Set effective permissions for the user-group
     * @summary Set permissions for the user-group
     * @param {string} userGroupId
     * @param {DeclarativeUserGroupPermissions} declarativeUserGroupPermissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserGroupPermissions(userGroupId: string, declarativeUserGroupPermissions: DeclarativeUserGroupPermissions, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Set effective permissions for the user
     * @summary Set permissions for the user
     * @param {string} userId
     * @param {DeclarativeUserPermissions} declarativeUserPermissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserPermissions(userId: string, declarativeUserPermissions: DeclarativeUserPermissions, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Sets workspace data filters in all workspaces in entire organization.
     * @summary Set all workspace data filters
     * @param {DeclarativeWorkspaceDataFilters} declarativeWorkspaceDataFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspaceDataFiltersLayout(declarativeWorkspaceDataFilters: DeclarativeWorkspaceDataFilters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Set effective permissions for the workspace
     * @summary Set permissions for the workspace
     * @param {string} workspaceId
     * @param {DeclarativeWorkspacePermissions} declarativeWorkspacePermissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspacePermissions(workspaceId: string, declarativeWorkspacePermissions: DeclarativeWorkspacePermissions, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {DeclarativeWorkspaces} declarativeWorkspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspacesLayout(declarativeWorkspaces: DeclarativeWorkspaces, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};

/**
 * Request parameters for getAnalyticsModel operation in LayoutApi.
 * @export
 * @interface LayoutApiGetAnalyticsModelRequest
 */
export declare interface LayoutApiGetAnalyticsModelRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiGetAnalyticsModel
     */
    readonly workspaceId: string;
    /**
     *
     * @type {Array<'ACTIVITY_INFO'>}
     * @memberof LayoutApiGetAnalyticsModel
     */
    readonly exclude?: Array<"ACTIVITY_INFO">;
}

/**
 * Request parameters for getLogicalModel operation in LayoutApi.
 * @export
 * @interface LayoutApiGetLogicalModelRequest
 */
export declare interface LayoutApiGetLogicalModelRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiGetLogicalModel
     */
    readonly workspaceId: string;
    /**
     *
     * @type {boolean}
     * @memberof LayoutApiGetLogicalModel
     */
    readonly includeParents?: boolean;
}

/**
 * Request parameters for getOrganizationLayout operation in LayoutApi.
 * @export
 * @interface LayoutApiGetOrganizationLayoutRequest
 */
export declare interface LayoutApiGetOrganizationLayoutRequest {
    /**
     *
     * @type {Array<'ACTIVITY_INFO'>}
     * @memberof LayoutApiGetOrganizationLayout
     */
    readonly exclude?: Array<"ACTIVITY_INFO">;
}

/**
 * Request parameters for getPdmLayout operation in LayoutApi.
 * @export
 * @interface LayoutApiGetPdmLayoutRequest
 */
export declare interface LayoutApiGetPdmLayoutRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiGetPdmLayout
     */
    readonly dataSourceId: string;
}

/**
 * Request parameters for getUserDataFilters operation in LayoutApi.
 * @export
 * @interface LayoutApiGetUserDataFiltersRequest
 */
export declare interface LayoutApiGetUserDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiGetUserDataFilters
     */
    readonly workspaceId: string;
}

/**
 * Request parameters for getUserGroupPermissions operation in LayoutApi.
 * @export
 * @interface LayoutApiGetUserGroupPermissionsRequest
 */
export declare interface LayoutApiGetUserGroupPermissionsRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiGetUserGroupPermissions
     */
    readonly userGroupId: string;
}

/**
 * Request parameters for getUserPermissions operation in LayoutApi.
 * @export
 * @interface LayoutApiGetUserPermissionsRequest
 */
export declare interface LayoutApiGetUserPermissionsRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiGetUserPermissions
     */
    readonly userId: string;
}

/**
 * Request parameters for getWorkspaceLayout operation in LayoutApi.
 * @export
 * @interface LayoutApiGetWorkspaceLayoutRequest
 */
export declare interface LayoutApiGetWorkspaceLayoutRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiGetWorkspaceLayout
     */
    readonly workspaceId: string;
    /**
     *
     * @type {Array<'ACTIVITY_INFO'>}
     * @memberof LayoutApiGetWorkspaceLayout
     */
    readonly exclude?: Array<"ACTIVITY_INFO">;
}

/**
 * Request parameters for getWorkspacePermissions operation in LayoutApi.
 * @export
 * @interface LayoutApiGetWorkspacePermissionsRequest
 */
export declare interface LayoutApiGetWorkspacePermissionsRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiGetWorkspacePermissions
     */
    readonly workspaceId: string;
}

/**
 * Request parameters for getWorkspacesLayout operation in LayoutApi.
 * @export
 * @interface LayoutApiGetWorkspacesLayoutRequest
 */
export declare interface LayoutApiGetWorkspacesLayoutRequest {
    /**
     *
     * @type {Array<'ACTIVITY_INFO'>}
     * @memberof LayoutApiGetWorkspacesLayout
     */
    readonly exclude?: Array<"ACTIVITY_INFO">;
}

/**
 * LayoutApi - interface
 * @export
 * @interface LayoutApi
 */
export declare interface LayoutApiInterface {
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {LayoutApiGetAnalyticsModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getAnalyticsModel(requestParameters: LayoutApiGetAnalyticsModelRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeAnalytics>;
    /**
     * Retrieve all data sources including related physical model.
     * @summary Get all data sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getDataSourcesLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeDataSources>;
    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {LayoutApiGetLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getLogicalModel(requestParameters: LayoutApiGetLogicalModelRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeModel>;
    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {LayoutApiGetOrganizationLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getOrganizationLayout(requestParameters: LayoutApiGetOrganizationLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeOrganization>;
    /**
     * Retrieve complete layout of tables with their columns
     * @summary Get data source physical model layout
     * @param {LayoutApiGetPdmLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getPdmLayout(requestParameters: LayoutApiGetPdmLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativePdm>;
    /**
     * Retrieve current user data filters assigned to the workspace.
     * @summary Get user data filters
     * @param {LayoutApiGetUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getUserDataFilters(requestParameters: LayoutApiGetUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeUserDataFilters>;
    /**
     * Retrieve current set of permissions of the user-group in a declarative form.
     * @summary Get permissions for the user-group
     * @param {LayoutApiGetUserGroupPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getUserGroupPermissions(requestParameters: LayoutApiGetUserGroupPermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeUserGroupPermissions>;
    /**
     * Retrieve all user-groups eventually with parent group.
     * @summary Get all user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getUserGroupsLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeUserGroups>;
    /**
     * Retrieve current set of permissions of the user in a declarative form.
     * @summary Get permissions for the user
     * @param {LayoutApiGetUserPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getUserPermissions(requestParameters: LayoutApiGetUserPermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeUserPermissions>;
    /**
     * Retrieve all users including authentication properties.
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getUsersLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeUsers>;
    /**
     * Retrieve all users and user groups with theirs properties.
     * @summary Get all users and user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getUsersUserGroupsLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeUsersUserGroups>;
    /**
     * Retrieve all workspaces and related workspace data filters (and their settings / values).
     * @summary Get workspace data filters for all workspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getWorkspaceDataFiltersLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeWorkspaceDataFilters>;
    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {LayoutApiGetWorkspaceLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getWorkspaceLayout(requestParameters: LayoutApiGetWorkspaceLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeWorkspaceModel>;
    /**
     * Retrieve current set of permissions of the workspace in a declarative form.
     * @summary Get permissions for the workspace
     * @param {LayoutApiGetWorkspacePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getWorkspacePermissions(requestParameters: LayoutApiGetWorkspacePermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeWorkspacePermissions>;
    /**
     * Gets complete layout of workspaces, their hierarchy, models.
     * @summary Get all workspaces layout
     * @param {LayoutApiGetWorkspacesLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    getWorkspacesLayout(requestParameters: LayoutApiGetWorkspacesLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeWorkspaces>;
    /**
     * Set all data sources including related physical model.
     * @summary Put all data sources
     * @param {LayoutApiPutDataSourcesLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    putDataSourcesLayout(requestParameters: LayoutApiPutDataSourcesLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Define all user groups with their parents eventually.
     * @summary Put all user groups
     * @param {LayoutApiPutUserGroupsLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    putUserGroupsLayout(requestParameters: LayoutApiPutUserGroupsLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Set all users and their authentication properties.
     * @summary Put all users
     * @param {LayoutApiPutUsersLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    putUsersLayout(requestParameters: LayoutApiPutUsersLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Define all users and user groups with theirs properties.
     * @summary Put all users and user groups
     * @param {LayoutApiPutUsersUserGroupsLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    putUsersUserGroupsLayout(requestParameters: LayoutApiPutUsersUserGroupsLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Set complete layout of workspace, like model, authorization, etc.
     * @summary Set workspace layout
     * @param {LayoutApiPutWorkspaceLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    putWorkspaceLayout(requestParameters: LayoutApiPutWorkspaceLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {LayoutApiSetAnalyticsModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    setAnalyticsModel(requestParameters: LayoutApiSetAnalyticsModelRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {LayoutApiSetLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    setLogicalModel(requestParameters: LayoutApiSetLogicalModelRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {LayoutApiSetOrganizationLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    setOrganizationLayout(requestParameters: LayoutApiSetOrganizationLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Sets complete layout of tables with their columns under corresponding Data Source.
     * @summary Set data source physical model layout
     * @param {LayoutApiSetPdmLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    setPdmLayout(requestParameters: LayoutApiSetPdmLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Set user data filters assigned to the workspace.
     * @summary Set user data filters
     * @param {LayoutApiSetUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    setUserDataFilters(requestParameters: LayoutApiSetUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Set effective permissions for the user-group
     * @summary Set permissions for the user-group
     * @param {LayoutApiSetUserGroupPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    setUserGroupPermissions(requestParameters: LayoutApiSetUserGroupPermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Set effective permissions for the user
     * @summary Set permissions for the user
     * @param {LayoutApiSetUserPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    setUserPermissions(requestParameters: LayoutApiSetUserPermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Sets workspace data filters in all workspaces in entire organization.
     * @summary Set all workspace data filters
     * @param {LayoutApiSetWorkspaceDataFiltersLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    setWorkspaceDataFiltersLayout(requestParameters: LayoutApiSetWorkspaceDataFiltersLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Set effective permissions for the workspace
     * @summary Set permissions for the workspace
     * @param {LayoutApiSetWorkspacePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    setWorkspacePermissions(requestParameters: LayoutApiSetWorkspacePermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {LayoutApiSetWorkspacesLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LayoutApiInterface
     */
    setWorkspacesLayout(requestParameters: LayoutApiSetWorkspacesLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
}

/**
 * Request parameters for putDataSourcesLayout operation in LayoutApi.
 * @export
 * @interface LayoutApiPutDataSourcesLayoutRequest
 */
export declare interface LayoutApiPutDataSourcesLayoutRequest {
    /**
     *
     * @type {DeclarativeDataSources}
     * @memberof LayoutApiPutDataSourcesLayout
     */
    readonly declarativeDataSources: DeclarativeDataSources;
}

/**
 * Request parameters for putUserGroupsLayout operation in LayoutApi.
 * @export
 * @interface LayoutApiPutUserGroupsLayoutRequest
 */
export declare interface LayoutApiPutUserGroupsLayoutRequest {
    /**
     *
     * @type {DeclarativeUserGroups}
     * @memberof LayoutApiPutUserGroupsLayout
     */
    readonly declarativeUserGroups: DeclarativeUserGroups;
}

/**
 * Request parameters for putUsersLayout operation in LayoutApi.
 * @export
 * @interface LayoutApiPutUsersLayoutRequest
 */
export declare interface LayoutApiPutUsersLayoutRequest {
    /**
     *
     * @type {DeclarativeUsers}
     * @memberof LayoutApiPutUsersLayout
     */
    readonly declarativeUsers: DeclarativeUsers;
}

/**
 * Request parameters for putUsersUserGroupsLayout operation in LayoutApi.
 * @export
 * @interface LayoutApiPutUsersUserGroupsLayoutRequest
 */
export declare interface LayoutApiPutUsersUserGroupsLayoutRequest {
    /**
     *
     * @type {DeclarativeUsersUserGroups}
     * @memberof LayoutApiPutUsersUserGroupsLayout
     */
    readonly declarativeUsersUserGroups: DeclarativeUsersUserGroups;
}

/**
 * Request parameters for putWorkspaceLayout operation in LayoutApi.
 * @export
 * @interface LayoutApiPutWorkspaceLayoutRequest
 */
export declare interface LayoutApiPutWorkspaceLayoutRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiPutWorkspaceLayout
     */
    readonly workspaceId: string;
    /**
     *
     * @type {DeclarativeWorkspaceModel}
     * @memberof LayoutApiPutWorkspaceLayout
     */
    readonly declarativeWorkspaceModel: DeclarativeWorkspaceModel;
}

/**
 * Request parameters for setAnalyticsModel operation in LayoutApi.
 * @export
 * @interface LayoutApiSetAnalyticsModelRequest
 */
export declare interface LayoutApiSetAnalyticsModelRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiSetAnalyticsModel
     */
    readonly workspaceId: string;
    /**
     *
     * @type {DeclarativeAnalytics}
     * @memberof LayoutApiSetAnalyticsModel
     */
    readonly declarativeAnalytics: DeclarativeAnalytics;
}

/**
 * Request parameters for setLogicalModel operation in LayoutApi.
 * @export
 * @interface LayoutApiSetLogicalModelRequest
 */
export declare interface LayoutApiSetLogicalModelRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiSetLogicalModel
     */
    readonly workspaceId: string;
    /**
     *
     * @type {DeclarativeModel}
     * @memberof LayoutApiSetLogicalModel
     */
    readonly declarativeModel: DeclarativeModel;
}

/**
 * Request parameters for setOrganizationLayout operation in LayoutApi.
 * @export
 * @interface LayoutApiSetOrganizationLayoutRequest
 */
export declare interface LayoutApiSetOrganizationLayoutRequest {
    /**
     *
     * @type {DeclarativeOrganization}
     * @memberof LayoutApiSetOrganizationLayout
     */
    readonly declarativeOrganization: DeclarativeOrganization;
}

/**
 * Request parameters for setPdmLayout operation in LayoutApi.
 * @export
 * @interface LayoutApiSetPdmLayoutRequest
 */
export declare interface LayoutApiSetPdmLayoutRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiSetPdmLayout
     */
    readonly dataSourceId: string;
    /**
     *
     * @type {DeclarativePdm}
     * @memberof LayoutApiSetPdmLayout
     */
    readonly declarativePdm: DeclarativePdm;
}

/**
 * Request parameters for setUserDataFilters operation in LayoutApi.
 * @export
 * @interface LayoutApiSetUserDataFiltersRequest
 */
export declare interface LayoutApiSetUserDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiSetUserDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {DeclarativeUserDataFilters}
     * @memberof LayoutApiSetUserDataFilters
     */
    readonly declarativeUserDataFilters: DeclarativeUserDataFilters;
}

/**
 * Request parameters for setUserGroupPermissions operation in LayoutApi.
 * @export
 * @interface LayoutApiSetUserGroupPermissionsRequest
 */
export declare interface LayoutApiSetUserGroupPermissionsRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiSetUserGroupPermissions
     */
    readonly userGroupId: string;
    /**
     *
     * @type {DeclarativeUserGroupPermissions}
     * @memberof LayoutApiSetUserGroupPermissions
     */
    readonly declarativeUserGroupPermissions: DeclarativeUserGroupPermissions;
}

/**
 * Request parameters for setUserPermissions operation in LayoutApi.
 * @export
 * @interface LayoutApiSetUserPermissionsRequest
 */
export declare interface LayoutApiSetUserPermissionsRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiSetUserPermissions
     */
    readonly userId: string;
    /**
     *
     * @type {DeclarativeUserPermissions}
     * @memberof LayoutApiSetUserPermissions
     */
    readonly declarativeUserPermissions: DeclarativeUserPermissions;
}

/**
 * Request parameters for setWorkspaceDataFiltersLayout operation in LayoutApi.
 * @export
 * @interface LayoutApiSetWorkspaceDataFiltersLayoutRequest
 */
export declare interface LayoutApiSetWorkspaceDataFiltersLayoutRequest {
    /**
     *
     * @type {DeclarativeWorkspaceDataFilters}
     * @memberof LayoutApiSetWorkspaceDataFiltersLayout
     */
    readonly declarativeWorkspaceDataFilters: DeclarativeWorkspaceDataFilters;
}

/**
 * Request parameters for setWorkspacePermissions operation in LayoutApi.
 * @export
 * @interface LayoutApiSetWorkspacePermissionsRequest
 */
export declare interface LayoutApiSetWorkspacePermissionsRequest {
    /**
     *
     * @type {string}
     * @memberof LayoutApiSetWorkspacePermissions
     */
    readonly workspaceId: string;
    /**
     *
     * @type {DeclarativeWorkspacePermissions}
     * @memberof LayoutApiSetWorkspacePermissions
     */
    readonly declarativeWorkspacePermissions: DeclarativeWorkspacePermissions;
}

/**
 * Request parameters for setWorkspacesLayout operation in LayoutApi.
 * @export
 * @interface LayoutApiSetWorkspacesLayoutRequest
 */
export declare interface LayoutApiSetWorkspacesLayoutRequest {
    /**
     *
     * @type {DeclarativeWorkspaces}
     * @memberof LayoutApiSetWorkspacesLayout
     */
    readonly declarativeWorkspaces: DeclarativeWorkspaces;
}

/**
 * LDMDeclarativeAPIsApi - object-oriented interface
 * @export
 * @class LDMDeclarativeAPIsApi
 * @extends {BaseAPI}
 */
export declare class LDMDeclarativeAPIsApi extends MetadataBaseApi implements LDMDeclarativeAPIsApiInterface {
    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {LDMDeclarativeAPIsApiGetLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LDMDeclarativeAPIsApi
     */
    getLogicalModel(requestParameters: LDMDeclarativeAPIsApiGetLogicalModelRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeModel, any>>;
    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {LDMDeclarativeAPIsApiSetLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LDMDeclarativeAPIsApi
     */
    setLogicalModel(requestParameters: LDMDeclarativeAPIsApiSetLogicalModelRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
}

/**
 * LDMDeclarativeAPIsApi - axios parameter creator
 * @export
 */
export declare const LDMDeclarativeAPIsApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {string} workspaceId
     * @param {boolean} [includeParents]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogicalModel: (workspaceId: string, includeParents?: boolean, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {string} workspaceId
     * @param {DeclarativeModel} declarativeModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setLogicalModel: (workspaceId: string, declarativeModel: DeclarativeModel, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * LDMDeclarativeAPIsApi - factory interface
 * @export
 */
export declare const LDMDeclarativeAPIsApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {LDMDeclarativeAPIsApiGetLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogicalModel(requestParameters: LDMDeclarativeAPIsApiGetLogicalModelRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeModel>;
    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {LDMDeclarativeAPIsApiSetLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setLogicalModel(requestParameters: LDMDeclarativeAPIsApiSetLogicalModelRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
};

/**
 * LDMDeclarativeAPIsApi - functional programming interface
 * @export
 */
export declare const LDMDeclarativeAPIsApiFp: (configuration?: MetadataConfiguration) => {
    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {string} workspaceId
     * @param {boolean} [includeParents]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLogicalModel(workspaceId: string, includeParents?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeModel>>;
    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {string} workspaceId
     * @param {DeclarativeModel} declarativeModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setLogicalModel(workspaceId: string, declarativeModel: DeclarativeModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};

/**
 * Request parameters for getLogicalModel operation in LDMDeclarativeAPIsApi.
 * @export
 * @interface LDMDeclarativeAPIsApiGetLogicalModelRequest
 */
export declare interface LDMDeclarativeAPIsApiGetLogicalModelRequest {
    /**
     *
     * @type {string}
     * @memberof LDMDeclarativeAPIsApiGetLogicalModel
     */
    readonly workspaceId: string;
    /**
     *
     * @type {boolean}
     * @memberof LDMDeclarativeAPIsApiGetLogicalModel
     */
    readonly includeParents?: boolean;
}

/**
 * LDMDeclarativeAPIsApi - interface
 * @export
 * @interface LDMDeclarativeAPIsApi
 */
export declare interface LDMDeclarativeAPIsApiInterface {
    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {LDMDeclarativeAPIsApiGetLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LDMDeclarativeAPIsApiInterface
     */
    getLogicalModel(requestParameters: LDMDeclarativeAPIsApiGetLogicalModelRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeModel>;
    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {LDMDeclarativeAPIsApiSetLogicalModelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LDMDeclarativeAPIsApiInterface
     */
    setLogicalModel(requestParameters: LDMDeclarativeAPIsApiSetLogicalModelRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
}

/**
 * Request parameters for setLogicalModel operation in LDMDeclarativeAPIsApi.
 * @export
 * @interface LDMDeclarativeAPIsApiSetLogicalModelRequest
 */
export declare interface LDMDeclarativeAPIsApiSetLogicalModelRequest {
    /**
     *
     * @type {string}
     * @memberof LDMDeclarativeAPIsApiSetLogicalModel
     */
    readonly workspaceId: string;
    /**
     *
     * @type {DeclarativeModel}
     * @memberof LDMDeclarativeAPIsApiSetLogicalModel
     */
    readonly declarativeModel: DeclarativeModel;
}

/**
 *
 * @export
 * @interface ListLinks
 */
export declare interface ListLinks {
    /**
     * A string containing the link\'s URL.
     * @type {string}
     * @memberof ListLinks
     */
    self: string;
    /**
     * A string containing the link\'s URL for the next page of data.
     * @type {string}
     * @memberof ListLinks
     */
    next?: string;
}

/**
 *
 * @export
 * @interface ListLinksAllOf
 */
export declare interface ListLinksAllOf {
    /**
     * A string containing the link\'s URL for the next page of data.
     * @type {string}
     * @memberof ListLinksAllOf
     */
    next?: string;
}

/**
 * @type MeasureDefinition
 * Abstract metric definition type
 * @export
 */
export declare type MeasureDefinition = ArithmeticMeasureDefinition | InlineMeasureDefinition | PopMeasureDefinition | SimpleMeasureDefinition;

/**
 *
 * @export
 * @interface MeasureExecutionResultHeader
 */
export declare interface MeasureExecutionResultHeader {
    /**
     *
     * @type {MeasureResultHeader}
     * @memberof MeasureExecutionResultHeader
     */
    measureHeader: MeasureResultHeader;
}

/**
 *
 * @export
 * @interface MeasureGroupHeaders
 */
export declare interface MeasureGroupHeaders {
    /**
     *
     * @type {Array<MeasureHeaderOut>}
     * @memberof MeasureGroupHeaders
     */
    measureGroupHeaders?: Array<MeasureHeaderOut>;
}

/**
 *
 * @export
 * @interface MeasureHeaderOut
 */
export declare interface MeasureHeaderOut {
    /**
     *
     * @type {string}
     * @memberof MeasureHeaderOut
     */
    localIdentifier: string;
    /**
     *
     * @type {string}
     * @memberof MeasureHeaderOut
     */
    format?: string;
    /**
     *
     * @type {string}
     * @memberof MeasureHeaderOut
     */
    name?: string;
}

/**
 *
 * @export
 * @interface MeasureItem
 */
export declare interface MeasureItem {
    /**
     *
     * @type {string}
     * @memberof MeasureItem
     */
    localIdentifier: string;
    /**
     *
     * @type {MeasureDefinition}
     * @memberof MeasureItem
     */
    definition: MeasureDefinition;
}

/**
 * Header containing the information related to metrics.
 * @export
 * @interface MeasureResultHeader
 */
export declare interface MeasureResultHeader {
    /**
     * Metric index. Starts at 0.
     * @type {number}
     * @memberof MeasureResultHeader
     */
    measureIndex: number;
}

/**
 * @type MeasureValueFilter
 * Abstract filter definition type filtering by the value of the metric.
 * @export
 */
export declare type MeasureValueFilter = ComparisonMeasureValueFilter | RangeMeasureValueFilter;

/**
 *
 * @export
 * @class BaseAPI
 */
export declare class MetadataBaseApi {
    protected basePath: string;
    protected axios: AxiosInstance;
    protected configuration: MetadataConfiguration | undefined;
    constructor(configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance);
}

export declare class MetadataConfiguration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;
    constructor(param?: MetadataConfigurationParameters);
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    isJsonMime(mime: string): boolean;
}

/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
export declare interface MetadataConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

/**
 * Color palette get entities params
 *
 * @internal
 */
export declare type MetadataGetEntitiesColorPaletteParams = {
    filter?: string;
};

/**
 * All API client getEntities* functions follow this signature.
 *
 * @internal
 */
export declare type MetadataGetEntitiesFn<T extends MetadataGetEntitiesResult, P extends MetadataGetEntitiesParams> = (params: P, options: MetadataGetEntitiesOptions) => AxiosPromise<T>;

/**
 * Common parameters for all API client getEntities* parameters.
 *
 * @internal
 */
export declare type MetadataGetEntitiesOptions = {
    headers?: object;
    params?: {
        page?: number;
        size?: number;
        include?: any;
        sort?: any;
        tags?: any;
    };
};

/**
 * Common parameters for all API client getEntities* parameters.
 *
 * Note: the different generated client functions are actually incorrect. They list page, size, include, sort in
 * the params, but they are not picked from there anyway. They need to be passed in options as query parameters.
 *
 * @internal
 */
export declare type MetadataGetEntitiesParams = MetadataGetEntitiesWorkspaceParams | MetadataGetEntitiesUserParams | MetadataGetEntitiesThemeParams | MetadataGetEntitiesColorPaletteParams;

/**
 * All possible responses of API client getEntities* functions.
 *
 * @internal
 */
export declare type MetadataGetEntitiesResult = JsonApiVisualizationObjectOutList | JsonApiAnalyticalDashboardOutList | JsonApiDashboardPluginOutList | JsonApiDatasetOutList | JsonApiAttributeOutList | JsonApiLabelOutList | JsonApiMetricOutList | JsonApiFactOutList | JsonApiFilterContextOutList | JsonApiApiTokenOutList | JsonApiThemeOutList | JsonApiColorPaletteOutList;

/**
 * Theme get entities params
 *
 * @internal
 */
export declare type MetadataGetEntitiesThemeParams = {
    filter?: string;
};

/**
 * User get entities params
 *
 * @internal
 */
export declare type MetadataGetEntitiesUserParams = {
    userId: string;
    filter?: string;
};

/**
 * Workspace get entities params
 *
 * @internal
 */
export declare type MetadataGetEntitiesWorkspaceParams = {
    workspaceId: string;
    filter?: string;
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export declare interface MetadataRequestArgs {
    url: string;
    options: AxiosRequestConfig;
}

/**
 * Tiger metadata utility functions
 *
 * @internal
 */
export declare class MetadataUtilities {
    /**
     * Given a function to get a paged list of metadata entities, API call parameters and options, this function will
     * retrieve all pages from the metadata.
     *
     * The parameters are passed to the function as is. The options will be used as a 'template'. If the options specify
     * page `size`, it will be retained and used for paging. Otherwise, the size will be set to a default value (250). The
     * `page` number will be added dynamically upon each page request.
     *
     * @param client - API client to use, this is required so that function can correctly bind 'this' for
     *  the entitiesGet function
     * @param entitiesGet - function to get pages list of entities
     * @param params - parameters accepted by the function
     * @param options - options accepted by the function
     * @internal
     */
    static getAllPagesOf: <T extends MetadataGetEntitiesResult, P extends MetadataGetEntitiesParams>(client: ITigerClient, entitiesGet: MetadataGetEntitiesFn<T, P>, params: P, options?: MetadataGetEntitiesOptions) => Promise<T[]>;
    /**
     * This function merges multiple pages containing metadata entities into a single page. The entity data from different
     * pages are concatenated. The side-loaded entities are concatenated and their uniqueness is ensured so that same
     * entity side-loaded on multiple pages only appears once.
     *
     * The merges result WILL NOT contain any links section.
     *
     * @param pages - pages to merge
     * @internal
     */
    static mergeEntitiesResults<T extends MetadataGetEntitiesResult>(pages: T[]): T;
    /**
     * Given list of JSON API entities, return those which have not broken relations to other MD objects. This
     * info is computed by backend when "X-GDC-VALIDATE-RELATIONS" is sent with the GET request. Note that backend
     * checks the relations recursively.
     *
     * @param result - MetadataGetEntitiesResult
     */
    static filterValidEntities<T extends MetadataGetEntitiesResult>(result: T): T;
}

/**
 * MetricsApi - object-oriented interface
 * @export
 * @class MetricsApi
 * @extends {BaseAPI}
 */
export declare class MetricsApi extends MetadataBaseApi implements MetricsApiInterface {
    /**
     *
     * @summary Post Metrics
     * @param {MetricsApiCreateEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    createEntityMetrics(requestParameters: MetricsApiCreateEntityMetricsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiMetricOutDocument, any>>;
    /**
     *
     * @summary Delete a Metric
     * @param {MetricsApiDeleteEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    deleteEntityMetrics(requestParameters: MetricsApiDeleteEntityMetricsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Get all Metrics
     * @param {MetricsApiGetAllEntitiesMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    getAllEntitiesMetrics(requestParameters: MetricsApiGetAllEntitiesMetricsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiMetricOutList, any>>;
    /**
     *
     * @summary Get a Metric
     * @param {MetricsApiGetEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    getEntityMetrics(requestParameters: MetricsApiGetEntityMetricsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiMetricOutDocument, any>>;
    /**
     *
     * @summary Patch a Metric
     * @param {MetricsApiPatchEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    patchEntityMetrics(requestParameters: MetricsApiPatchEntityMetricsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiMetricOutDocument, any>>;
    /**
     *
     * @summary Put a Metric
     * @param {MetricsApiUpdateEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    updateEntityMetrics(requestParameters: MetricsApiUpdateEntityMetricsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiMetricOutDocument, any>>;
}

/**
 * MetricsApi - axios parameter creator
 * @export
 */
export declare const MetricsApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post Metrics
     * @param {string} workspaceId
     * @param {JsonApiMetricPostOptionalIdDocument} jsonApiMetricPostOptionalIdDocument
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityMetrics: (workspaceId: string, jsonApiMetricPostOptionalIdDocument: JsonApiMetricPostOptionalIdDocument, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Metric
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityMetrics: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Metrics
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesMetrics: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Metric
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityMetrics: (workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Metric
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricPatchDocument} jsonApiMetricPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityMetrics: (workspaceId: string, objectId: string, jsonApiMetricPatchDocument: JsonApiMetricPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a Metric
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityMetrics: (workspaceId: string, objectId: string, jsonApiMetricInDocument: JsonApiMetricInDocument, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * Request parameters for createEntityMetrics operation in MetricsApi.
 * @export
 * @interface MetricsApiCreateEntityMetricsRequest
 */
export declare interface MetricsApiCreateEntityMetricsRequest {
    /**
     *
     * @type {string}
     * @memberof MetricsApiCreateEntityMetrics
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiMetricPostOptionalIdDocument}
     * @memberof MetricsApiCreateEntityMetrics
     */
    readonly jsonApiMetricPostOptionalIdDocument: JsonApiMetricPostOptionalIdDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof MetricsApiCreateEntityMetrics
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof MetricsApiCreateEntityMetrics
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for deleteEntityMetrics operation in MetricsApi.
 * @export
 * @interface MetricsApiDeleteEntityMetricsRequest
 */
export declare interface MetricsApiDeleteEntityMetricsRequest {
    /**
     *
     * @type {string}
     * @memberof MetricsApiDeleteEntityMetrics
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof MetricsApiDeleteEntityMetrics
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof MetricsApiDeleteEntityMetrics
     */
    readonly filter?: string;
}

/**
 * MetricsApi - factory interface
 * @export
 */
export declare const MetricsApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Post Metrics
     * @param {MetricsApiCreateEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityMetrics(requestParameters: MetricsApiCreateEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @summary Delete a Metric
     * @param {MetricsApiDeleteEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityMetrics(requestParameters: MetricsApiDeleteEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all Metrics
     * @param {MetricsApiGetAllEntitiesMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesMetrics(requestParameters: MetricsApiGetAllEntitiesMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutList>;
    /**
     *
     * @summary Get a Metric
     * @param {MetricsApiGetEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityMetrics(requestParameters: MetricsApiGetEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @summary Patch a Metric
     * @param {MetricsApiPatchEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityMetrics(requestParameters: MetricsApiPatchEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @summary Put a Metric
     * @param {MetricsApiUpdateEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityMetrics(requestParameters: MetricsApiUpdateEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutDocument>;
};

/**
 * MetricsApi - functional programming interface
 * @export
 */
export declare const MetricsApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post Metrics
     * @param {string} workspaceId
     * @param {JsonApiMetricPostOptionalIdDocument} jsonApiMetricPostOptionalIdDocument
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityMetrics(workspaceId: string, jsonApiMetricPostOptionalIdDocument: JsonApiMetricPostOptionalIdDocument, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutDocument>>;
    /**
     *
     * @summary Delete a Metric
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityMetrics(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get all Metrics
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesMetrics(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutList>>;
    /**
     *
     * @summary Get a Metric
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityMetrics(workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutDocument>>;
    /**
     *
     * @summary Patch a Metric
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricPatchDocument} jsonApiMetricPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityMetrics(workspaceId: string, objectId: string, jsonApiMetricPatchDocument: JsonApiMetricPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutDocument>>;
    /**
     *
     * @summary Put a Metric
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityMetrics(workspaceId: string, objectId: string, jsonApiMetricInDocument: JsonApiMetricInDocument, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesMetrics operation in MetricsApi.
 * @export
 * @interface MetricsApiGetAllEntitiesMetricsRequest
 */
export declare interface MetricsApiGetAllEntitiesMetricsRequest {
    /**
     *
     * @type {string}
     * @memberof MetricsApiGetAllEntitiesMetrics
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof MetricsApiGetAllEntitiesMetrics
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof MetricsApiGetAllEntitiesMetrics
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof MetricsApiGetAllEntitiesMetrics
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof MetricsApiGetAllEntitiesMetrics
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof MetricsApiGetAllEntitiesMetrics
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof MetricsApiGetAllEntitiesMetrics
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof MetricsApiGetAllEntitiesMetrics
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof MetricsApiGetAllEntitiesMetrics
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityMetrics operation in MetricsApi.
 * @export
 * @interface MetricsApiGetEntityMetricsRequest
 */
export declare interface MetricsApiGetEntityMetricsRequest {
    /**
     *
     * @type {string}
     * @memberof MetricsApiGetEntityMetrics
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof MetricsApiGetEntityMetrics
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof MetricsApiGetEntityMetrics
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof MetricsApiGetEntityMetrics
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof MetricsApiGetEntityMetrics
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof MetricsApiGetEntityMetrics
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * MetricsApi - interface
 * @export
 * @interface MetricsApi
 */
export declare interface MetricsApiInterface {
    /**
     *
     * @summary Post Metrics
     * @param {MetricsApiCreateEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApiInterface
     */
    createEntityMetrics(requestParameters: MetricsApiCreateEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @summary Delete a Metric
     * @param {MetricsApiDeleteEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApiInterface
     */
    deleteEntityMetrics(requestParameters: MetricsApiDeleteEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all Metrics
     * @param {MetricsApiGetAllEntitiesMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApiInterface
     */
    getAllEntitiesMetrics(requestParameters: MetricsApiGetAllEntitiesMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutList>;
    /**
     *
     * @summary Get a Metric
     * @param {MetricsApiGetEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApiInterface
     */
    getEntityMetrics(requestParameters: MetricsApiGetEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @summary Patch a Metric
     * @param {MetricsApiPatchEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApiInterface
     */
    patchEntityMetrics(requestParameters: MetricsApiPatchEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @summary Put a Metric
     * @param {MetricsApiUpdateEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApiInterface
     */
    updateEntityMetrics(requestParameters: MetricsApiUpdateEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutDocument>;
}

/**
 * Request parameters for patchEntityMetrics operation in MetricsApi.
 * @export
 * @interface MetricsApiPatchEntityMetricsRequest
 */
export declare interface MetricsApiPatchEntityMetricsRequest {
    /**
     *
     * @type {string}
     * @memberof MetricsApiPatchEntityMetrics
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof MetricsApiPatchEntityMetrics
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiMetricPatchDocument}
     * @memberof MetricsApiPatchEntityMetrics
     */
    readonly jsonApiMetricPatchDocument: JsonApiMetricPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof MetricsApiPatchEntityMetrics
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof MetricsApiPatchEntityMetrics
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for updateEntityMetrics operation in MetricsApi.
 * @export
 * @interface MetricsApiUpdateEntityMetricsRequest
 */
export declare interface MetricsApiUpdateEntityMetricsRequest {
    /**
     *
     * @type {string}
     * @memberof MetricsApiUpdateEntityMetrics
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof MetricsApiUpdateEntityMetrics
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiMetricInDocument}
     * @memberof MetricsApiUpdateEntityMetrics
     */
    readonly jsonApiMetricInDocument: JsonApiMetricInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof MetricsApiUpdateEntityMetrics
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof MetricsApiUpdateEntityMetrics
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Filter able to limit element values by label and related selected negated elements.
 * @export
 * @interface NegativeAttributeFilter
 */
export declare interface NegativeAttributeFilter {
    /**
     *
     * @type {NegativeAttributeFilterNegativeAttributeFilter}
     * @memberof NegativeAttributeFilter
     */
    negativeAttributeFilter: NegativeAttributeFilterNegativeAttributeFilter;
}

/**
 *
 * @export
 * @interface NegativeAttributeFilterNegativeAttributeFilter
 */
export declare interface NegativeAttributeFilterNegativeAttributeFilter {
    /**
     *
     * @type {AttributeFilterElements}
     * @memberof NegativeAttributeFilterNegativeAttributeFilter
     */
    notIn: AttributeFilterElements;
    /**
     *
     * @type {boolean}
     * @memberof NegativeAttributeFilterNegativeAttributeFilter
     */
    applyOnResult?: boolean;
    /**
     *
     * @type {AfmIdentifier}
     * @memberof NegativeAttributeFilterNegativeAttributeFilter
     */
    label: AfmIdentifier;
}

/**
 * Creates a new instance of axios.
 *
 * @param baseUrl - hostname, optional, will default to current origin
 * @param headers - object mapping header name → header value
 * @returns always new instance
 * @public
 */
export declare function newAxios(baseUrl?: string, headers?: {
    [name: string]: string;
}): AxiosInstance;

/**
 *
 * @export
 * @interface ObjectLinks
 */
export declare interface ObjectLinks {
    /**
     * A string containing the link\'s URL.
     * @type {string}
     * @memberof ObjectLinks
     */
    self: string;
}

/**
 *
 * @export
 * @interface ObjectLinksContainer
 */
export declare interface ObjectLinksContainer {
    /**
     *
     * @type {ObjectLinks}
     * @memberof ObjectLinksContainer
     */
    links?: ObjectLinks;
}

/**
 * OptionsApi - object-oriented interface
 * @export
 * @class OptionsApi
 * @extends {BaseAPI}
 */
export declare class OptionsApi extends MetadataBaseApi implements OptionsApiInterface {
    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsApi
     */
    getAllOptions(options?: AxiosRequestConfig): Promise<AxiosResponse<object, any>>;
}

/**
 * OptionsApi - axios parameter creator
 * @export
 */
export declare const OptionsApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllOptions: (options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * OptionsApi - factory interface
 * @export
 */
export declare const OptionsApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllOptions(options?: AxiosRequestConfig): AxiosPromise<object>;
};

/**
 * OptionsApi - functional programming interface
 * @export
 */
export declare const OptionsApiFp: (configuration?: MetadataConfiguration) => {
    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllOptions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};

/**
 * OptionsApi - interface
 * @export
 * @interface OptionsApi
 */
export declare interface OptionsApiInterface {
    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsApiInterface
     */
    getAllOptions(options?: AxiosRequestConfig): AxiosPromise<object>;
}

/**
 * OrganizationControllerApi - object-oriented interface
 * @export
 * @class OrganizationControllerApi
 * @extends {BaseAPI}
 */
export declare class OrganizationControllerApi extends MetadataBaseApi implements OrganizationControllerApiInterface {
    /**
     *
     * @summary Get CookieSecurityConfiguration
     * @param {OrganizationControllerApiGetEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    getEntityCookieSecurityConfigurations(requestParameters: OrganizationControllerApiGetEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCookieSecurityConfigurationOutDocument, any>>;
    /**
     *
     * @summary Get Organizations
     * @param {OrganizationControllerApiGetEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    getEntityOrganizations(requestParameters: OrganizationControllerApiGetEntityOrganizationsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiOrganizationOutDocument, any>>;
    /**
     *
     * @summary Patch CookieSecurityConfiguration
     * @param {OrganizationControllerApiPatchEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    patchEntityCookieSecurityConfigurations(requestParameters: OrganizationControllerApiPatchEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCookieSecurityConfigurationOutDocument, any>>;
    /**
     *
     * @summary Patch Organization
     * @param {OrganizationControllerApiPatchEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    patchEntityOrganizations(requestParameters: OrganizationControllerApiPatchEntityOrganizationsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiOrganizationOutDocument, any>>;
    /**
     *
     * @summary Put CookieSecurityConfiguration
     * @param {OrganizationControllerApiUpdateEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    updateEntityCookieSecurityConfigurations(requestParameters: OrganizationControllerApiUpdateEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCookieSecurityConfigurationOutDocument, any>>;
    /**
     *
     * @summary Put Organization
     * @param {OrganizationControllerApiUpdateEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    updateEntityOrganizations(requestParameters: OrganizationControllerApiUpdateEntityOrganizationsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiOrganizationOutDocument, any>>;
}

/**
 * OrganizationControllerApi - axios parameter creator
 * @export
 */
export declare const OrganizationControllerApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Get CookieSecurityConfiguration
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCookieSecurityConfigurations: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get Organizations
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityOrganizations: (id: string, filter?: string, include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch CookieSecurityConfiguration
     * @param {string} id
     * @param {JsonApiCookieSecurityConfigurationPatchDocument} jsonApiCookieSecurityConfigurationPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCookieSecurityConfigurations: (id: string, jsonApiCookieSecurityConfigurationPatchDocument: JsonApiCookieSecurityConfigurationPatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch Organization
     * @param {string} id
     * @param {JsonApiOrganizationPatchDocument} jsonApiOrganizationPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityOrganizations: (id: string, jsonApiOrganizationPatchDocument: JsonApiOrganizationPatchDocument, filter?: string, include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put CookieSecurityConfiguration
     * @param {string} id
     * @param {JsonApiCookieSecurityConfigurationInDocument} jsonApiCookieSecurityConfigurationInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCookieSecurityConfigurations: (id: string, jsonApiCookieSecurityConfigurationInDocument: JsonApiCookieSecurityConfigurationInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put Organization
     * @param {string} id
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityOrganizations: (id: string, jsonApiOrganizationInDocument: JsonApiOrganizationInDocument, filter?: string, include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * OrganizationControllerApi - factory interface
 * @export
 */
export declare const OrganizationControllerApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get CookieSecurityConfiguration
     * @param {OrganizationControllerApiGetEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCookieSecurityConfigurations(requestParameters: OrganizationControllerApiGetEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @summary Get Organizations
     * @param {OrganizationControllerApiGetEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityOrganizations(requestParameters: OrganizationControllerApiGetEntityOrganizationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     *
     * @summary Patch CookieSecurityConfiguration
     * @param {OrganizationControllerApiPatchEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCookieSecurityConfigurations(requestParameters: OrganizationControllerApiPatchEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @summary Patch Organization
     * @param {OrganizationControllerApiPatchEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityOrganizations(requestParameters: OrganizationControllerApiPatchEntityOrganizationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     *
     * @summary Put CookieSecurityConfiguration
     * @param {OrganizationControllerApiUpdateEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCookieSecurityConfigurations(requestParameters: OrganizationControllerApiUpdateEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @summary Put Organization
     * @param {OrganizationControllerApiUpdateEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityOrganizations(requestParameters: OrganizationControllerApiUpdateEntityOrganizationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationOutDocument>;
};

/**
 * OrganizationControllerApi - functional programming interface
 * @export
 */
export declare const OrganizationControllerApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Get CookieSecurityConfiguration
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCookieSecurityConfigurations(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>>;
    /**
     *
     * @summary Get Organizations
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityOrganizations(id: string, filter?: string, include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationOutDocument>>;
    /**
     *
     * @summary Patch CookieSecurityConfiguration
     * @param {string} id
     * @param {JsonApiCookieSecurityConfigurationPatchDocument} jsonApiCookieSecurityConfigurationPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCookieSecurityConfigurations(id: string, jsonApiCookieSecurityConfigurationPatchDocument: JsonApiCookieSecurityConfigurationPatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>>;
    /**
     *
     * @summary Patch Organization
     * @param {string} id
     * @param {JsonApiOrganizationPatchDocument} jsonApiOrganizationPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityOrganizations(id: string, jsonApiOrganizationPatchDocument: JsonApiOrganizationPatchDocument, filter?: string, include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationOutDocument>>;
    /**
     *
     * @summary Put CookieSecurityConfiguration
     * @param {string} id
     * @param {JsonApiCookieSecurityConfigurationInDocument} jsonApiCookieSecurityConfigurationInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCookieSecurityConfigurations(id: string, jsonApiCookieSecurityConfigurationInDocument: JsonApiCookieSecurityConfigurationInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>>;
    /**
     *
     * @summary Put Organization
     * @param {string} id
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityOrganizations(id: string, jsonApiOrganizationInDocument: JsonApiOrganizationInDocument, filter?: string, include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationOutDocument>>;
};

/**
 * Request parameters for getEntityCookieSecurityConfigurations operation in OrganizationControllerApi.
 * @export
 * @interface OrganizationControllerApiGetEntityCookieSecurityConfigurationsRequest
 */
export declare interface OrganizationControllerApiGetEntityCookieSecurityConfigurationsRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationControllerApiGetEntityCookieSecurityConfigurations
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationControllerApiGetEntityCookieSecurityConfigurations
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityOrganizations operation in OrganizationControllerApi.
 * @export
 * @interface OrganizationControllerApiGetEntityOrganizationsRequest
 */
export declare interface OrganizationControllerApiGetEntityOrganizationsRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationControllerApiGetEntityOrganizations
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationControllerApiGetEntityOrganizations
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>}
     * @memberof OrganizationControllerApiGetEntityOrganizations
     */
    readonly include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'all' | 'ALL'>}
     * @memberof OrganizationControllerApiGetEntityOrganizations
     */
    readonly metaInclude?: Array<"permissions" | "all" | "ALL">;
}

/**
 * OrganizationControllerApi - interface
 * @export
 * @interface OrganizationControllerApi
 */
export declare interface OrganizationControllerApiInterface {
    /**
     *
     * @summary Get CookieSecurityConfiguration
     * @param {OrganizationControllerApiGetEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApiInterface
     */
    getEntityCookieSecurityConfigurations(requestParameters: OrganizationControllerApiGetEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @summary Get Organizations
     * @param {OrganizationControllerApiGetEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApiInterface
     */
    getEntityOrganizations(requestParameters: OrganizationControllerApiGetEntityOrganizationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     *
     * @summary Patch CookieSecurityConfiguration
     * @param {OrganizationControllerApiPatchEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApiInterface
     */
    patchEntityCookieSecurityConfigurations(requestParameters: OrganizationControllerApiPatchEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @summary Patch Organization
     * @param {OrganizationControllerApiPatchEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApiInterface
     */
    patchEntityOrganizations(requestParameters: OrganizationControllerApiPatchEntityOrganizationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     *
     * @summary Put CookieSecurityConfiguration
     * @param {OrganizationControllerApiUpdateEntityCookieSecurityConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApiInterface
     */
    updateEntityCookieSecurityConfigurations(requestParameters: OrganizationControllerApiUpdateEntityCookieSecurityConfigurationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCookieSecurityConfigurationOutDocument>;
    /**
     *
     * @summary Put Organization
     * @param {OrganizationControllerApiUpdateEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApiInterface
     */
    updateEntityOrganizations(requestParameters: OrganizationControllerApiUpdateEntityOrganizationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationOutDocument>;
}

/**
 * Request parameters for patchEntityCookieSecurityConfigurations operation in OrganizationControllerApi.
 * @export
 * @interface OrganizationControllerApiPatchEntityCookieSecurityConfigurationsRequest
 */
export declare interface OrganizationControllerApiPatchEntityCookieSecurityConfigurationsRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationControllerApiPatchEntityCookieSecurityConfigurations
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiCookieSecurityConfigurationPatchDocument}
     * @memberof OrganizationControllerApiPatchEntityCookieSecurityConfigurations
     */
    readonly jsonApiCookieSecurityConfigurationPatchDocument: JsonApiCookieSecurityConfigurationPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationControllerApiPatchEntityCookieSecurityConfigurations
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityOrganizations operation in OrganizationControllerApi.
 * @export
 * @interface OrganizationControllerApiPatchEntityOrganizationsRequest
 */
export declare interface OrganizationControllerApiPatchEntityOrganizationsRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationControllerApiPatchEntityOrganizations
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiOrganizationPatchDocument}
     * @memberof OrganizationControllerApiPatchEntityOrganizations
     */
    readonly jsonApiOrganizationPatchDocument: JsonApiOrganizationPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationControllerApiPatchEntityOrganizations
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>}
     * @memberof OrganizationControllerApiPatchEntityOrganizations
     */
    readonly include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">;
}

/**
 * Request parameters for updateEntityCookieSecurityConfigurations operation in OrganizationControllerApi.
 * @export
 * @interface OrganizationControllerApiUpdateEntityCookieSecurityConfigurationsRequest
 */
export declare interface OrganizationControllerApiUpdateEntityCookieSecurityConfigurationsRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationControllerApiUpdateEntityCookieSecurityConfigurations
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiCookieSecurityConfigurationInDocument}
     * @memberof OrganizationControllerApiUpdateEntityCookieSecurityConfigurations
     */
    readonly jsonApiCookieSecurityConfigurationInDocument: JsonApiCookieSecurityConfigurationInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationControllerApiUpdateEntityCookieSecurityConfigurations
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityOrganizations operation in OrganizationControllerApi.
 * @export
 * @interface OrganizationControllerApiUpdateEntityOrganizationsRequest
 */
export declare interface OrganizationControllerApiUpdateEntityOrganizationsRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationControllerApiUpdateEntityOrganizations
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiOrganizationInDocument}
     * @memberof OrganizationControllerApiUpdateEntityOrganizations
     */
    readonly jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationControllerApiUpdateEntityOrganizations
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>}
     * @memberof OrganizationControllerApiUpdateEntityOrganizations
     */
    readonly include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">;
}

/**
 * OrganizationDeclarativeAPIsApi - object-oriented interface
 * @export
 * @class OrganizationDeclarativeAPIsApi
 * @extends {BaseAPI}
 */
export declare class OrganizationDeclarativeAPIsApi extends MetadataBaseApi implements OrganizationDeclarativeAPIsApiInterface {
    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {OrganizationDeclarativeAPIsApiGetOrganizationLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationDeclarativeAPIsApi
     */
    getOrganizationLayout(requestParameters?: OrganizationDeclarativeAPIsApiGetOrganizationLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeOrganization, any>>;
    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {OrganizationDeclarativeAPIsApiSetOrganizationLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationDeclarativeAPIsApi
     */
    setOrganizationLayout(requestParameters: OrganizationDeclarativeAPIsApiSetOrganizationLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
}

/**
 * OrganizationDeclarativeAPIsApi - axios parameter creator
 * @export
 */
export declare const OrganizationDeclarativeAPIsApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {Array<'ACTIVITY_INFO'>} [exclude]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationLayout: (exclude?: Array<"ACTIVITY_INFO">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {DeclarativeOrganization} declarativeOrganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setOrganizationLayout: (declarativeOrganization: DeclarativeOrganization, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * OrganizationDeclarativeAPIsApi - factory interface
 * @export
 */
export declare const OrganizationDeclarativeAPIsApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {OrganizationDeclarativeAPIsApiGetOrganizationLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationLayout(requestParameters: OrganizationDeclarativeAPIsApiGetOrganizationLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeOrganization>;
    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {OrganizationDeclarativeAPIsApiSetOrganizationLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setOrganizationLayout(requestParameters: OrganizationDeclarativeAPIsApiSetOrganizationLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
};

/**
 * OrganizationDeclarativeAPIsApi - functional programming interface
 * @export
 */
export declare const OrganizationDeclarativeAPIsApiFp: (configuration?: MetadataConfiguration) => {
    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {Array<'ACTIVITY_INFO'>} [exclude]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationLayout(exclude?: Array<"ACTIVITY_INFO">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeOrganization>>;
    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {DeclarativeOrganization} declarativeOrganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setOrganizationLayout(declarativeOrganization: DeclarativeOrganization, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};

/**
 * Request parameters for getOrganizationLayout operation in OrganizationDeclarativeAPIsApi.
 * @export
 * @interface OrganizationDeclarativeAPIsApiGetOrganizationLayoutRequest
 */
export declare interface OrganizationDeclarativeAPIsApiGetOrganizationLayoutRequest {
    /**
     *
     * @type {Array<'ACTIVITY_INFO'>}
     * @memberof OrganizationDeclarativeAPIsApiGetOrganizationLayout
     */
    readonly exclude?: Array<"ACTIVITY_INFO">;
}

/**
 * OrganizationDeclarativeAPIsApi - interface
 * @export
 * @interface OrganizationDeclarativeAPIsApi
 */
export declare interface OrganizationDeclarativeAPIsApiInterface {
    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {OrganizationDeclarativeAPIsApiGetOrganizationLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationDeclarativeAPIsApiInterface
     */
    getOrganizationLayout(requestParameters: OrganizationDeclarativeAPIsApiGetOrganizationLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeOrganization>;
    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {OrganizationDeclarativeAPIsApiSetOrganizationLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationDeclarativeAPIsApiInterface
     */
    setOrganizationLayout(requestParameters: OrganizationDeclarativeAPIsApiSetOrganizationLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
}

/**
 * Request parameters for setOrganizationLayout operation in OrganizationDeclarativeAPIsApi.
 * @export
 * @interface OrganizationDeclarativeAPIsApiSetOrganizationLayoutRequest
 */
export declare interface OrganizationDeclarativeAPIsApiSetOrganizationLayoutRequest {
    /**
     *
     * @type {DeclarativeOrganization}
     * @memberof OrganizationDeclarativeAPIsApiSetOrganizationLayout
     */
    readonly declarativeOrganization: DeclarativeOrganization;
}

/**
 * OrganizationEntityAPIsApi - object-oriented interface
 * @export
 * @class OrganizationEntityAPIsApi
 * @extends {BaseAPI}
 */
export declare class OrganizationEntityAPIsApi extends MetadataBaseApi implements OrganizationEntityAPIsApiInterface {
    /**
     *
     * @summary Post Organization Setting entities
     * @param {OrganizationEntityAPIsApiCreateEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationEntityAPIsApi
     */
    createEntityOrganizationSettings(requestParameters: OrganizationEntityAPIsApiCreateEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiOrganizationSettingOutDocument, any>>;
    /**
     *
     * @summary Delete Organization entity
     * @param {OrganizationEntityAPIsApiDeleteEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationEntityAPIsApi
     */
    deleteEntityOrganizationSettings(requestParameters: OrganizationEntityAPIsApiDeleteEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Get Organization entities
     * @param {OrganizationEntityAPIsApiGetAllEntitiesOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationEntityAPIsApi
     */
    getAllEntitiesOrganizationSettings(requestParameters?: OrganizationEntityAPIsApiGetAllEntitiesOrganizationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiOrganizationSettingOutList, any>>;
    /**
     *
     * @summary Get Organization entity
     * @param {OrganizationEntityAPIsApiGetEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationEntityAPIsApi
     */
    getEntityOrganizationSettings(requestParameters: OrganizationEntityAPIsApiGetEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiOrganizationSettingOutDocument, any>>;
    /**
     *
     * @summary Get Organizations
     * @param {OrganizationEntityAPIsApiGetEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationEntityAPIsApi
     */
    getEntityOrganizations(requestParameters: OrganizationEntityAPIsApiGetEntityOrganizationsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiOrganizationOutDocument, any>>;
    /**
     * Gets a basic information about organization.
     * @summary Get current organization info
     * @param {OrganizationEntityAPIsApiGetOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationEntityAPIsApi
     */
    getOrganization(requestParameters?: OrganizationEntityAPIsApiGetOrganizationRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Patch Organization entity
     * @param {OrganizationEntityAPIsApiPatchEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationEntityAPIsApi
     */
    patchEntityOrganizationSettings(requestParameters: OrganizationEntityAPIsApiPatchEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiOrganizationSettingOutDocument, any>>;
    /**
     *
     * @summary Patch Organization
     * @param {OrganizationEntityAPIsApiPatchEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationEntityAPIsApi
     */
    patchEntityOrganizations(requestParameters: OrganizationEntityAPIsApiPatchEntityOrganizationsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiOrganizationOutDocument, any>>;
    /**
     *
     * @summary Put Organization entity
     * @param {OrganizationEntityAPIsApiUpdateEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationEntityAPIsApi
     */
    updateEntityOrganizationSettings(requestParameters: OrganizationEntityAPIsApiUpdateEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiOrganizationSettingOutDocument, any>>;
    /**
     *
     * @summary Put Organization
     * @param {OrganizationEntityAPIsApiUpdateEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationEntityAPIsApi
     */
    updateEntityOrganizations(requestParameters: OrganizationEntityAPIsApiUpdateEntityOrganizationsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiOrganizationOutDocument, any>>;
}

/**
 * OrganizationEntityAPIsApi - axios parameter creator
 * @export
 */
export declare const OrganizationEntityAPIsApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post Organization Setting entities
     * @param {JsonApiOrganizationSettingInDocument} jsonApiOrganizationSettingInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityOrganizationSettings: (jsonApiOrganizationSettingInDocument: JsonApiOrganizationSettingInDocument, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete Organization entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityOrganizationSettings: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get Organization entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesOrganizationSettings: (filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get Organization entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityOrganizationSettings: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get Organizations
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityOrganizations: (id: string, filter?: string, include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Gets a basic information about organization.
     * @summary Get current organization info
     * @param {Array<'permissions' | 'all'>} [metaInclude] Return list of permissions available to logged user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization: (metaInclude?: Array<"permissions" | "all">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch Organization entity
     * @param {string} id
     * @param {JsonApiOrganizationSettingPatchDocument} jsonApiOrganizationSettingPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityOrganizationSettings: (id: string, jsonApiOrganizationSettingPatchDocument: JsonApiOrganizationSettingPatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch Organization
     * @param {string} id
     * @param {JsonApiOrganizationPatchDocument} jsonApiOrganizationPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityOrganizations: (id: string, jsonApiOrganizationPatchDocument: JsonApiOrganizationPatchDocument, filter?: string, include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put Organization entity
     * @param {string} id
     * @param {JsonApiOrganizationSettingInDocument} jsonApiOrganizationSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityOrganizationSettings: (id: string, jsonApiOrganizationSettingInDocument: JsonApiOrganizationSettingInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put Organization
     * @param {string} id
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityOrganizations: (id: string, jsonApiOrganizationInDocument: JsonApiOrganizationInDocument, filter?: string, include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * Request parameters for createEntityOrganizationSettings operation in OrganizationEntityAPIsApi.
 * @export
 * @interface OrganizationEntityAPIsApiCreateEntityOrganizationSettingsRequest
 */
export declare interface OrganizationEntityAPIsApiCreateEntityOrganizationSettingsRequest {
    /**
     *
     * @type {JsonApiOrganizationSettingInDocument}
     * @memberof OrganizationEntityAPIsApiCreateEntityOrganizationSettings
     */
    readonly jsonApiOrganizationSettingInDocument: JsonApiOrganizationSettingInDocument;
}

/**
 * Request parameters for deleteEntityOrganizationSettings operation in OrganizationEntityAPIsApi.
 * @export
 * @interface OrganizationEntityAPIsApiDeleteEntityOrganizationSettingsRequest
 */
export declare interface OrganizationEntityAPIsApiDeleteEntityOrganizationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationEntityAPIsApiDeleteEntityOrganizationSettings
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationEntityAPIsApiDeleteEntityOrganizationSettings
     */
    readonly filter?: string;
}

/**
 * OrganizationEntityAPIsApi - factory interface
 * @export
 */
export declare const OrganizationEntityAPIsApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Post Organization Setting entities
     * @param {OrganizationEntityAPIsApiCreateEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityOrganizationSettings(requestParameters: OrganizationEntityAPIsApiCreateEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutDocument>;
    /**
     *
     * @summary Delete Organization entity
     * @param {OrganizationEntityAPIsApiDeleteEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityOrganizationSettings(requestParameters: OrganizationEntityAPIsApiDeleteEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get Organization entities
     * @param {OrganizationEntityAPIsApiGetAllEntitiesOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesOrganizationSettings(requestParameters: OrganizationEntityAPIsApiGetAllEntitiesOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutList>;
    /**
     *
     * @summary Get Organization entity
     * @param {OrganizationEntityAPIsApiGetEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityOrganizationSettings(requestParameters: OrganizationEntityAPIsApiGetEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutDocument>;
    /**
     *
     * @summary Get Organizations
     * @param {OrganizationEntityAPIsApiGetEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityOrganizations(requestParameters: OrganizationEntityAPIsApiGetEntityOrganizationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     * Gets a basic information about organization.
     * @summary Get current organization info
     * @param {OrganizationEntityAPIsApiGetOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(requestParameters: OrganizationEntityAPIsApiGetOrganizationRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Patch Organization entity
     * @param {OrganizationEntityAPIsApiPatchEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityOrganizationSettings(requestParameters: OrganizationEntityAPIsApiPatchEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutDocument>;
    /**
     *
     * @summary Patch Organization
     * @param {OrganizationEntityAPIsApiPatchEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityOrganizations(requestParameters: OrganizationEntityAPIsApiPatchEntityOrganizationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     *
     * @summary Put Organization entity
     * @param {OrganizationEntityAPIsApiUpdateEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityOrganizationSettings(requestParameters: OrganizationEntityAPIsApiUpdateEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutDocument>;
    /**
     *
     * @summary Put Organization
     * @param {OrganizationEntityAPIsApiUpdateEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityOrganizations(requestParameters: OrganizationEntityAPIsApiUpdateEntityOrganizationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationOutDocument>;
};

/**
 * OrganizationEntityAPIsApi - functional programming interface
 * @export
 */
export declare const OrganizationEntityAPIsApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post Organization Setting entities
     * @param {JsonApiOrganizationSettingInDocument} jsonApiOrganizationSettingInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityOrganizationSettings(jsonApiOrganizationSettingInDocument: JsonApiOrganizationSettingInDocument, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationSettingOutDocument>>;
    /**
     *
     * @summary Delete Organization entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityOrganizationSettings(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get Organization entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesOrganizationSettings(filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationSettingOutList>>;
    /**
     *
     * @summary Get Organization entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityOrganizationSettings(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationSettingOutDocument>>;
    /**
     *
     * @summary Get Organizations
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityOrganizations(id: string, filter?: string, include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationOutDocument>>;
    /**
     * Gets a basic information about organization.
     * @summary Get current organization info
     * @param {Array<'permissions' | 'all'>} [metaInclude] Return list of permissions available to logged user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(metaInclude?: Array<"permissions" | "all">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Patch Organization entity
     * @param {string} id
     * @param {JsonApiOrganizationSettingPatchDocument} jsonApiOrganizationSettingPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityOrganizationSettings(id: string, jsonApiOrganizationSettingPatchDocument: JsonApiOrganizationSettingPatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationSettingOutDocument>>;
    /**
     *
     * @summary Patch Organization
     * @param {string} id
     * @param {JsonApiOrganizationPatchDocument} jsonApiOrganizationPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityOrganizations(id: string, jsonApiOrganizationPatchDocument: JsonApiOrganizationPatchDocument, filter?: string, include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationOutDocument>>;
    /**
     *
     * @summary Put Organization entity
     * @param {string} id
     * @param {JsonApiOrganizationSettingInDocument} jsonApiOrganizationSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityOrganizationSettings(id: string, jsonApiOrganizationSettingInDocument: JsonApiOrganizationSettingInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationSettingOutDocument>>;
    /**
     *
     * @summary Put Organization
     * @param {string} id
     * @param {JsonApiOrganizationInDocument} jsonApiOrganizationInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityOrganizations(id: string, jsonApiOrganizationInDocument: JsonApiOrganizationInDocument, filter?: string, include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesOrganizationSettings operation in OrganizationEntityAPIsApi.
 * @export
 * @interface OrganizationEntityAPIsApiGetAllEntitiesOrganizationSettingsRequest
 */
export declare interface OrganizationEntityAPIsApiGetAllEntitiesOrganizationSettingsRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationEntityAPIsApiGetAllEntitiesOrganizationSettings
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof OrganizationEntityAPIsApiGetAllEntitiesOrganizationSettings
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof OrganizationEntityAPIsApiGetAllEntitiesOrganizationSettings
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof OrganizationEntityAPIsApiGetAllEntitiesOrganizationSettings
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getEntityOrganizationSettings operation in OrganizationEntityAPIsApi.
 * @export
 * @interface OrganizationEntityAPIsApiGetEntityOrganizationSettingsRequest
 */
export declare interface OrganizationEntityAPIsApiGetEntityOrganizationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationEntityAPIsApiGetEntityOrganizationSettings
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationEntityAPIsApiGetEntityOrganizationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityOrganizations operation in OrganizationEntityAPIsApi.
 * @export
 * @interface OrganizationEntityAPIsApiGetEntityOrganizationsRequest
 */
export declare interface OrganizationEntityAPIsApiGetEntityOrganizationsRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationEntityAPIsApiGetEntityOrganizations
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationEntityAPIsApiGetEntityOrganizations
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>}
     * @memberof OrganizationEntityAPIsApiGetEntityOrganizations
     */
    readonly include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'all' | 'ALL'>}
     * @memberof OrganizationEntityAPIsApiGetEntityOrganizations
     */
    readonly metaInclude?: Array<"permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getOrganization operation in OrganizationEntityAPIsApi.
 * @export
 * @interface OrganizationEntityAPIsApiGetOrganizationRequest
 */
export declare interface OrganizationEntityAPIsApiGetOrganizationRequest {
    /**
     * Return list of permissions available to logged user.
     * @type {Array<'permissions' | 'all'>}
     * @memberof OrganizationEntityAPIsApiGetOrganization
     */
    readonly metaInclude?: Array<"permissions" | "all">;
}

/**
 * OrganizationEntityAPIsApi - interface
 * @export
 * @interface OrganizationEntityAPIsApi
 */
export declare interface OrganizationEntityAPIsApiInterface {
    /**
     *
     * @summary Post Organization Setting entities
     * @param {OrganizationEntityAPIsApiCreateEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationEntityAPIsApiInterface
     */
    createEntityOrganizationSettings(requestParameters: OrganizationEntityAPIsApiCreateEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutDocument>;
    /**
     *
     * @summary Delete Organization entity
     * @param {OrganizationEntityAPIsApiDeleteEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationEntityAPIsApiInterface
     */
    deleteEntityOrganizationSettings(requestParameters: OrganizationEntityAPIsApiDeleteEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get Organization entities
     * @param {OrganizationEntityAPIsApiGetAllEntitiesOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationEntityAPIsApiInterface
     */
    getAllEntitiesOrganizationSettings(requestParameters: OrganizationEntityAPIsApiGetAllEntitiesOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutList>;
    /**
     *
     * @summary Get Organization entity
     * @param {OrganizationEntityAPIsApiGetEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationEntityAPIsApiInterface
     */
    getEntityOrganizationSettings(requestParameters: OrganizationEntityAPIsApiGetEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutDocument>;
    /**
     *
     * @summary Get Organizations
     * @param {OrganizationEntityAPIsApiGetEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationEntityAPIsApiInterface
     */
    getEntityOrganizations(requestParameters: OrganizationEntityAPIsApiGetEntityOrganizationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     * Gets a basic information about organization.
     * @summary Get current organization info
     * @param {OrganizationEntityAPIsApiGetOrganizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationEntityAPIsApiInterface
     */
    getOrganization(requestParameters: OrganizationEntityAPIsApiGetOrganizationRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Patch Organization entity
     * @param {OrganizationEntityAPIsApiPatchEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationEntityAPIsApiInterface
     */
    patchEntityOrganizationSettings(requestParameters: OrganizationEntityAPIsApiPatchEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutDocument>;
    /**
     *
     * @summary Patch Organization
     * @param {OrganizationEntityAPIsApiPatchEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationEntityAPIsApiInterface
     */
    patchEntityOrganizations(requestParameters: OrganizationEntityAPIsApiPatchEntityOrganizationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationOutDocument>;
    /**
     *
     * @summary Put Organization entity
     * @param {OrganizationEntityAPIsApiUpdateEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationEntityAPIsApiInterface
     */
    updateEntityOrganizationSettings(requestParameters: OrganizationEntityAPIsApiUpdateEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutDocument>;
    /**
     *
     * @summary Put Organization
     * @param {OrganizationEntityAPIsApiUpdateEntityOrganizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationEntityAPIsApiInterface
     */
    updateEntityOrganizations(requestParameters: OrganizationEntityAPIsApiUpdateEntityOrganizationsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationOutDocument>;
}

/**
 * Request parameters for patchEntityOrganizationSettings operation in OrganizationEntityAPIsApi.
 * @export
 * @interface OrganizationEntityAPIsApiPatchEntityOrganizationSettingsRequest
 */
export declare interface OrganizationEntityAPIsApiPatchEntityOrganizationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationEntityAPIsApiPatchEntityOrganizationSettings
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiOrganizationSettingPatchDocument}
     * @memberof OrganizationEntityAPIsApiPatchEntityOrganizationSettings
     */
    readonly jsonApiOrganizationSettingPatchDocument: JsonApiOrganizationSettingPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationEntityAPIsApiPatchEntityOrganizationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityOrganizations operation in OrganizationEntityAPIsApi.
 * @export
 * @interface OrganizationEntityAPIsApiPatchEntityOrganizationsRequest
 */
export declare interface OrganizationEntityAPIsApiPatchEntityOrganizationsRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationEntityAPIsApiPatchEntityOrganizations
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiOrganizationPatchDocument}
     * @memberof OrganizationEntityAPIsApiPatchEntityOrganizations
     */
    readonly jsonApiOrganizationPatchDocument: JsonApiOrganizationPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationEntityAPIsApiPatchEntityOrganizations
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>}
     * @memberof OrganizationEntityAPIsApiPatchEntityOrganizations
     */
    readonly include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">;
}

/**
 * Request parameters for updateEntityOrganizationSettings operation in OrganizationEntityAPIsApi.
 * @export
 * @interface OrganizationEntityAPIsApiUpdateEntityOrganizationSettingsRequest
 */
export declare interface OrganizationEntityAPIsApiUpdateEntityOrganizationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationEntityAPIsApiUpdateEntityOrganizationSettings
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiOrganizationSettingInDocument}
     * @memberof OrganizationEntityAPIsApiUpdateEntityOrganizationSettings
     */
    readonly jsonApiOrganizationSettingInDocument: JsonApiOrganizationSettingInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationEntityAPIsApiUpdateEntityOrganizationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityOrganizations operation in OrganizationEntityAPIsApi.
 * @export
 * @interface OrganizationEntityAPIsApiUpdateEntityOrganizationsRequest
 */
export declare interface OrganizationEntityAPIsApiUpdateEntityOrganizationsRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationEntityAPIsApiUpdateEntityOrganizations
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiOrganizationInDocument}
     * @memberof OrganizationEntityAPIsApiUpdateEntityOrganizations
     */
    readonly jsonApiOrganizationInDocument: JsonApiOrganizationInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationEntityAPIsApiUpdateEntityOrganizations
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'bootstrapUser' | 'bootstrapUserGroup' | 'ALL'>}
     * @memberof OrganizationEntityAPIsApiUpdateEntityOrganizations
     */
    readonly include?: Array<"users" | "userGroups" | "bootstrapUser" | "bootstrapUserGroup" | "ALL">;
}

/**
 * All API client getEntities* functions follow this signature.
 *
 * @internal
 */
export declare type OrganizationGetEntitiesFn<T extends OrganizationGetEntitiesResult, P extends OrganizationGetEntitiesParams> = (params: P, options: AxiosRequestConfig) => AxiosPromise<T>;

/**
 * All possible params of API client getEntities* functions.
 *
 * @internal
 */
export declare type OrganizationGetEntitiesParams = EntitiesApiGetAllEntitiesAttributesRequest | EntitiesApiGetAllEntitiesFactsRequest | EntitiesApiGetAllEntitiesAnalyticalDashboardsRequest | EntitiesApiGetAllEntitiesDashboardPluginsRequest | EntitiesApiGetAllEntitiesVisualizationObjectsRequest | EntitiesApiGetAllEntitiesMetricsRequest | EntitiesApiGetAllEntitiesWorkspacesRequest;

/**
 * All possible responses of API client getEntities* functions.
 *
 * @internal
 */
export declare type OrganizationGetEntitiesResult = JsonApiDataSourceIdentifierOutList | OrganizationGetEntitiesSupportingIncludedResult;

/**
 * All possible responses of API client getEntities* functions which support `included` field
 *
 * @internal
 */
export declare type OrganizationGetEntitiesSupportingIncludedResult = JsonApiUserOutList | JsonApiUserGroupOutList | JsonApiWorkspaceOutList;

/**
 * OrganizationModelControllerApi - object-oriented interface
 * @export
 * @class OrganizationModelControllerApi
 * @extends {BaseAPI}
 */
export declare class OrganizationModelControllerApi extends MetadataBaseApi implements OrganizationModelControllerApiInterface {
    /**
     *
     * @summary Post Color Pallettes
     * @param {OrganizationModelControllerApiCreateEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    createEntityColorPalettes(requestParameters: OrganizationModelControllerApiCreateEntityColorPalettesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiColorPaletteOutDocument, any>>;
    /**
     *  Context Security Police Directive
     * @summary Post CSP Directives
     * @param {OrganizationModelControllerApiCreateEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    createEntityCspDirectives(requestParameters: OrganizationModelControllerApiCreateEntityCspDirectivesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCspDirectiveOutDocument, any>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Post Data Sources
     * @param {OrganizationModelControllerApiCreateEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    createEntityDataSources(requestParameters: OrganizationModelControllerApiCreateEntityDataSourcesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceOutDocument, any>>;
    /**
     * Creates JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Post Jwks
     * @param {OrganizationModelControllerApiCreateEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    createEntityJwks(requestParameters: OrganizationModelControllerApiCreateEntityJwksRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiJwkOutDocument, any>>;
    /**
     *
     * @summary Post Organization Setting entities
     * @param {OrganizationModelControllerApiCreateEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    createEntityOrganizationSettings(requestParameters: OrganizationModelControllerApiCreateEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiOrganizationSettingOutDocument, any>>;
    /**
     *
     * @summary Post Theming
     * @param {OrganizationModelControllerApiCreateEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    createEntityThemes(requestParameters: OrganizationModelControllerApiCreateEntityThemesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiThemeOutDocument, any>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Post User Group entities
     * @param {OrganizationModelControllerApiCreateEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    createEntityUserGroups(requestParameters: OrganizationModelControllerApiCreateEntityUserGroupsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserGroupOutDocument, any>>;
    /**
     * User - represents entity interacting with platform
     * @summary Post User entities
     * @param {OrganizationModelControllerApiCreateEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    createEntityUsers(requestParameters: OrganizationModelControllerApiCreateEntityUsersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserOutDocument, any>>;
    /**
     * Space of the shared interest
     * @summary Post Workspace entities
     * @param {OrganizationModelControllerApiCreateEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    createEntityWorkspaces(requestParameters: OrganizationModelControllerApiCreateEntityWorkspacesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceOutDocument, any>>;
    /**
     *
     * @summary Delete a Color Pallette
     * @param {OrganizationModelControllerApiDeleteEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    deleteEntityColorPalettes(requestParameters: OrganizationModelControllerApiDeleteEntityColorPalettesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *  Context Security Police Directive
     * @summary Delete CSP Directives
     * @param {OrganizationModelControllerApiDeleteEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    deleteEntityCspDirectives(requestParameters: OrganizationModelControllerApiDeleteEntityCspDirectivesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Delete Data Source entity
     * @param {OrganizationModelControllerApiDeleteEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    deleteEntityDataSources(requestParameters: OrganizationModelControllerApiDeleteEntityDataSourcesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Deletes JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Delete Jwk
     * @param {OrganizationModelControllerApiDeleteEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    deleteEntityJwks(requestParameters: OrganizationModelControllerApiDeleteEntityJwksRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete Organization entity
     * @param {OrganizationModelControllerApiDeleteEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    deleteEntityOrganizationSettings(requestParameters: OrganizationModelControllerApiDeleteEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete Theming
     * @param {OrganizationModelControllerApiDeleteEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    deleteEntityThemes(requestParameters: OrganizationModelControllerApiDeleteEntityThemesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Delete UserGroup entity
     * @param {OrganizationModelControllerApiDeleteEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    deleteEntityUserGroups(requestParameters: OrganizationModelControllerApiDeleteEntityUserGroupsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * User - represents entity interacting with platform
     * @summary Delete User entity
     * @param {OrganizationModelControllerApiDeleteEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    deleteEntityUsers(requestParameters: OrganizationModelControllerApiDeleteEntityUsersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Space of the shared interest
     * @summary Delete Workspace entity
     * @param {OrganizationModelControllerApiDeleteEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    deleteEntityWorkspaces(requestParameters: OrganizationModelControllerApiDeleteEntityWorkspacesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Get all Color Pallettes
     * @param {OrganizationModelControllerApiGetAllEntitiesColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getAllEntitiesColorPalettes(requestParameters?: OrganizationModelControllerApiGetAllEntitiesColorPalettesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiColorPaletteOutList, any>>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {OrganizationModelControllerApiGetAllEntitiesCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getAllEntitiesCspDirectives(requestParameters?: OrganizationModelControllerApiGetAllEntitiesCspDirectivesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCspDirectiveOutList, any>>;
    /**
     *
     * @summary Get all Data Source Identifiers
     * @param {OrganizationModelControllerApiGetAllEntitiesDataSourceIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getAllEntitiesDataSourceIdentifiers(requestParameters?: OrganizationModelControllerApiGetAllEntitiesDataSourceIdentifiersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceIdentifierOutList, any>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entities
     * @param {OrganizationModelControllerApiGetAllEntitiesDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getAllEntitiesDataSources(requestParameters?: OrganizationModelControllerApiGetAllEntitiesDataSourcesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceOutList, any>>;
    /**
     * Space of the shared interest
     * @summary Get Entitlements
     * @param {OrganizationModelControllerApiGetAllEntitiesEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getAllEntitiesEntitlements(requestParameters?: OrganizationModelControllerApiGetAllEntitiesEntitlementsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiEntitlementOutList, any>>;
    /**
     * Returns all JSON web keys - used to verify JSON web tokens (Jwts)
     * @summary Get all Jwks
     * @param {OrganizationModelControllerApiGetAllEntitiesJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getAllEntitiesJwks(requestParameters?: OrganizationModelControllerApiGetAllEntitiesJwksRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiJwkOutList, any>>;
    /**
     *
     * @summary Get Organization entities
     * @param {OrganizationModelControllerApiGetAllEntitiesOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getAllEntitiesOrganizationSettings(requestParameters?: OrganizationModelControllerApiGetAllEntitiesOrganizationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiOrganizationSettingOutList, any>>;
    /**
     *
     * @summary Get all Theming entities
     * @param {OrganizationModelControllerApiGetAllEntitiesThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getAllEntitiesThemes(requestParameters?: OrganizationModelControllerApiGetAllEntitiesThemesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiThemeOutList, any>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entities
     * @param {OrganizationModelControllerApiGetAllEntitiesUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getAllEntitiesUserGroups(requestParameters?: OrganizationModelControllerApiGetAllEntitiesUserGroupsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserGroupOutList, any>>;
    /**
     * UserIdentifier - represents entity interacting with platform
     * @summary Get UserIdentifier entities
     * @param {OrganizationModelControllerApiGetAllEntitiesUserIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getAllEntitiesUserIdentifiers(requestParameters?: OrganizationModelControllerApiGetAllEntitiesUserIdentifiersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserIdentifierOutList, any>>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entities
     * @param {OrganizationModelControllerApiGetAllEntitiesUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getAllEntitiesUsers(requestParameters?: OrganizationModelControllerApiGetAllEntitiesUsersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserOutList, any>>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entities
     * @param {OrganizationModelControllerApiGetAllEntitiesWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getAllEntitiesWorkspaces(requestParameters?: OrganizationModelControllerApiGetAllEntitiesWorkspacesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceOutList, any>>;
    /**
     *
     * @summary Get Color Pallette
     * @param {OrganizationModelControllerApiGetEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getEntityColorPalettes(requestParameters: OrganizationModelControllerApiGetEntityColorPalettesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiColorPaletteOutDocument, any>>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {OrganizationModelControllerApiGetEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getEntityCspDirectives(requestParameters: OrganizationModelControllerApiGetEntityCspDirectivesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCspDirectiveOutDocument, any>>;
    /**
     *
     * @summary Get Data Source Identifier
     * @param {OrganizationModelControllerApiGetEntityDataSourceIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getEntityDataSourceIdentifiers(requestParameters: OrganizationModelControllerApiGetEntityDataSourceIdentifiersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceIdentifierOutDocument, any>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entity
     * @param {OrganizationModelControllerApiGetEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getEntityDataSources(requestParameters: OrganizationModelControllerApiGetEntityDataSourcesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceOutDocument, any>>;
    /**
     * Space of the shared interest
     * @summary Get Entitlement
     * @param {OrganizationModelControllerApiGetEntityEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getEntityEntitlements(requestParameters: OrganizationModelControllerApiGetEntityEntitlementsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiEntitlementOutDocument, any>>;
    /**
     * Returns JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Get Jwk
     * @param {OrganizationModelControllerApiGetEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getEntityJwks(requestParameters: OrganizationModelControllerApiGetEntityJwksRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiJwkOutDocument, any>>;
    /**
     *
     * @summary Get Organization entity
     * @param {OrganizationModelControllerApiGetEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getEntityOrganizationSettings(requestParameters: OrganizationModelControllerApiGetEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiOrganizationSettingOutDocument, any>>;
    /**
     *
     * @summary Get Theming
     * @param {OrganizationModelControllerApiGetEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getEntityThemes(requestParameters: OrganizationModelControllerApiGetEntityThemesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiThemeOutDocument, any>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entity
     * @param {OrganizationModelControllerApiGetEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getEntityUserGroups(requestParameters: OrganizationModelControllerApiGetEntityUserGroupsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserGroupOutDocument, any>>;
    /**
     * UserIdentifier - represents basic informationZ about entity interacting with platform
     * @summary Get UserIdentifier entity
     * @param {OrganizationModelControllerApiGetEntityUserIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getEntityUserIdentifiers(requestParameters: OrganizationModelControllerApiGetEntityUserIdentifiersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserIdentifierOutDocument, any>>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entity
     * @param {OrganizationModelControllerApiGetEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getEntityUsers(requestParameters: OrganizationModelControllerApiGetEntityUsersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserOutDocument, any>>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entity
     * @param {OrganizationModelControllerApiGetEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    getEntityWorkspaces(requestParameters: OrganizationModelControllerApiGetEntityWorkspacesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceOutDocument, any>>;
    /**
     *
     * @summary Patch Color Pallette
     * @param {OrganizationModelControllerApiPatchEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    patchEntityColorPalettes(requestParameters: OrganizationModelControllerApiPatchEntityColorPalettesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiColorPaletteOutDocument, any>>;
    /**
     *  Context Security Police Directive
     * @summary Patch CSP Directives
     * @param {OrganizationModelControllerApiPatchEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    patchEntityCspDirectives(requestParameters: OrganizationModelControllerApiPatchEntityCspDirectivesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCspDirectiveOutDocument, any>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Patch Data Source entity
     * @param {OrganizationModelControllerApiPatchEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    patchEntityDataSources(requestParameters: OrganizationModelControllerApiPatchEntityDataSourcesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceOutDocument, any>>;
    /**
     * Patches JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Patch Jwk
     * @param {OrganizationModelControllerApiPatchEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    patchEntityJwks(requestParameters: OrganizationModelControllerApiPatchEntityJwksRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiJwkOutDocument, any>>;
    /**
     *
     * @summary Patch Organization entity
     * @param {OrganizationModelControllerApiPatchEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    patchEntityOrganizationSettings(requestParameters: OrganizationModelControllerApiPatchEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiOrganizationSettingOutDocument, any>>;
    /**
     *
     * @summary Patch Theming
     * @param {OrganizationModelControllerApiPatchEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    patchEntityThemes(requestParameters: OrganizationModelControllerApiPatchEntityThemesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiThemeOutDocument, any>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Patch UserGroup entity
     * @param {OrganizationModelControllerApiPatchEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    patchEntityUserGroups(requestParameters: OrganizationModelControllerApiPatchEntityUserGroupsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserGroupOutDocument, any>>;
    /**
     * User - represents entity interacting with platform
     * @summary Patch User entity
     * @param {OrganizationModelControllerApiPatchEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    patchEntityUsers(requestParameters: OrganizationModelControllerApiPatchEntityUsersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserOutDocument, any>>;
    /**
     * Space of the shared interest
     * @summary Patch Workspace entity
     * @param {OrganizationModelControllerApiPatchEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    patchEntityWorkspaces(requestParameters: OrganizationModelControllerApiPatchEntityWorkspacesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceOutDocument, any>>;
    /**
     *
     * @summary Put Color Pallette
     * @param {OrganizationModelControllerApiUpdateEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    updateEntityColorPalettes(requestParameters: OrganizationModelControllerApiUpdateEntityColorPalettesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiColorPaletteOutDocument, any>>;
    /**
     *  Context Security Police Directive
     * @summary Put CSP Directives
     * @param {OrganizationModelControllerApiUpdateEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    updateEntityCspDirectives(requestParameters: OrganizationModelControllerApiUpdateEntityCspDirectivesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCspDirectiveOutDocument, any>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Put Data Source entity
     * @param {OrganizationModelControllerApiUpdateEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    updateEntityDataSources(requestParameters: OrganizationModelControllerApiUpdateEntityDataSourcesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDataSourceOutDocument, any>>;
    /**
     * Updates JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Put Jwk
     * @param {OrganizationModelControllerApiUpdateEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    updateEntityJwks(requestParameters: OrganizationModelControllerApiUpdateEntityJwksRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiJwkOutDocument, any>>;
    /**
     *
     * @summary Put Organization entity
     * @param {OrganizationModelControllerApiUpdateEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    updateEntityOrganizationSettings(requestParameters: OrganizationModelControllerApiUpdateEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiOrganizationSettingOutDocument, any>>;
    /**
     *
     * @summary Put Theming
     * @param {OrganizationModelControllerApiUpdateEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    updateEntityThemes(requestParameters: OrganizationModelControllerApiUpdateEntityThemesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiThemeOutDocument, any>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Put UserGroup entity
     * @param {OrganizationModelControllerApiUpdateEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    updateEntityUserGroups(requestParameters: OrganizationModelControllerApiUpdateEntityUserGroupsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserGroupOutDocument, any>>;
    /**
     * User - represents entity interacting with platform
     * @summary Put User entity
     * @param {OrganizationModelControllerApiUpdateEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    updateEntityUsers(requestParameters: OrganizationModelControllerApiUpdateEntityUsersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserOutDocument, any>>;
    /**
     * Space of the shared interest
     * @summary Put Workspace entity
     * @param {OrganizationModelControllerApiUpdateEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    updateEntityWorkspaces(requestParameters: OrganizationModelControllerApiUpdateEntityWorkspacesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceOutDocument, any>>;
}

/**
 * OrganizationModelControllerApi - axios parameter creator
 * @export
 */
export declare const OrganizationModelControllerApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post Color Pallettes
     * @param {JsonApiColorPaletteInDocument} jsonApiColorPaletteInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityColorPalettes: (jsonApiColorPaletteInDocument: JsonApiColorPaletteInDocument, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *  Context Security Police Directive
     * @summary Post CSP Directives
     * @param {JsonApiCspDirectiveInDocument} jsonApiCspDirectiveInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityCspDirectives: (jsonApiCspDirectiveInDocument: JsonApiCspDirectiveInDocument, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Post Data Sources
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDataSources: (jsonApiDataSourceInDocument: JsonApiDataSourceInDocument, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Creates JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Post Jwks
     * @param {JsonApiJwkInDocument} jsonApiJwkInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityJwks: (jsonApiJwkInDocument: JsonApiJwkInDocument, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Organization Setting entities
     * @param {JsonApiOrganizationSettingInDocument} jsonApiOrganizationSettingInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityOrganizationSettings: (jsonApiOrganizationSettingInDocument: JsonApiOrganizationSettingInDocument, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Theming
     * @param {JsonApiThemeInDocument} jsonApiThemeInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityThemes: (jsonApiThemeInDocument: JsonApiThemeInDocument, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Post User Group entities
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserGroups: (jsonApiUserGroupInDocument: JsonApiUserGroupInDocument, include?: Array<"userGroups" | "parents" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User - represents entity interacting with platform
     * @summary Post User entities
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUsers: (jsonApiUserInDocument: JsonApiUserInDocument, include?: Array<"userGroups" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Space of the shared interest
     * @summary Post Workspace entities
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaces: (jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument, include?: Array<"workspaces" | "parent" | "ALL">, metaInclude?: Array<"config" | "permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Color Pallette
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityColorPalettes: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *  Context Security Police Directive
     * @summary Delete CSP Directives
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityCspDirectives: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Delete Data Source entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDataSources: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Deletes JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Delete Jwk
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityJwks: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete Organization entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityOrganizationSettings: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete Theming
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityThemes: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Delete UserGroup entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserGroups: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User - represents entity interacting with platform
     * @summary Delete User entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUsers: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Space of the shared interest
     * @summary Delete Workspace entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaces: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Color Pallettes
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesColorPalettes: (filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesCspDirectives: (filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Data Source Identifiers
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSourceIdentifiers: (filter?: string, page?: number, size?: number, sort?: Array<string>, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSources: (filter?: string, page?: number, size?: number, sort?: Array<string>, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Space of the shared interest
     * @summary Get Entitlements
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesEntitlements: (filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Returns all JSON web keys - used to verify JSON web tokens (Jwts)
     * @summary Get all Jwks
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesJwks: (filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get Organization entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesOrganizationSettings: (filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Theming entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesThemes: (filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserGroups: (filter?: string, include?: Array<"userGroups" | "parents" | "ALL">, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * UserIdentifier - represents entity interacting with platform
     * @summary Get UserIdentifier entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserIdentifiers: (filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUsers: (filter?: string, include?: Array<"userGroups" | "ALL">, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaces: (filter?: string, include?: Array<"workspaces" | "parent" | "ALL">, page?: number, size?: number, sort?: Array<string>, metaInclude?: Array<"config" | "permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get Color Pallette
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityColorPalettes: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCspDirectives: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get Data Source Identifier
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSourceIdentifiers: (id: string, filter?: string, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSources: (id: string, filter?: string, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Space of the shared interest
     * @summary Get Entitlement
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityEntitlements: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Returns JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Get Jwk
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityJwks: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get Organization entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityOrganizationSettings: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get Theming
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityThemes: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserGroups: (id: string, filter?: string, include?: Array<"userGroups" | "parents" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * UserIdentifier - represents basic informationZ about entity interacting with platform
     * @summary Get UserIdentifier entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserIdentifiers: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUsers: (id: string, filter?: string, include?: Array<"userGroups" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaces: (id: string, filter?: string, include?: Array<"workspaces" | "parent" | "ALL">, metaInclude?: Array<"config" | "permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch Color Pallette
     * @param {string} id
     * @param {JsonApiColorPalettePatchDocument} jsonApiColorPalettePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityColorPalettes: (id: string, jsonApiColorPalettePatchDocument: JsonApiColorPalettePatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *  Context Security Police Directive
     * @summary Patch CSP Directives
     * @param {string} id
     * @param {JsonApiCspDirectivePatchDocument} jsonApiCspDirectivePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCspDirectives: (id: string, jsonApiCspDirectivePatchDocument: JsonApiCspDirectivePatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Patch Data Source entity
     * @param {string} id
     * @param {JsonApiDataSourcePatchDocument} jsonApiDataSourcePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityDataSources: (id: string, jsonApiDataSourcePatchDocument: JsonApiDataSourcePatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Patches JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Patch Jwk
     * @param {string} id
     * @param {JsonApiJwkPatchDocument} jsonApiJwkPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityJwks: (id: string, jsonApiJwkPatchDocument: JsonApiJwkPatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch Organization entity
     * @param {string} id
     * @param {JsonApiOrganizationSettingPatchDocument} jsonApiOrganizationSettingPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityOrganizationSettings: (id: string, jsonApiOrganizationSettingPatchDocument: JsonApiOrganizationSettingPatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch Theming
     * @param {string} id
     * @param {JsonApiThemePatchDocument} jsonApiThemePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityThemes: (id: string, jsonApiThemePatchDocument: JsonApiThemePatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Patch UserGroup entity
     * @param {string} id
     * @param {JsonApiUserGroupPatchDocument} jsonApiUserGroupPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUserGroups: (id: string, jsonApiUserGroupPatchDocument: JsonApiUserGroupPatchDocument, filter?: string, include?: Array<"userGroups" | "parents" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User - represents entity interacting with platform
     * @summary Patch User entity
     * @param {string} id
     * @param {JsonApiUserPatchDocument} jsonApiUserPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUsers: (id: string, jsonApiUserPatchDocument: JsonApiUserPatchDocument, filter?: string, include?: Array<"userGroups" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Space of the shared interest
     * @summary Patch Workspace entity
     * @param {string} id
     * @param {JsonApiWorkspacePatchDocument} jsonApiWorkspacePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaces: (id: string, jsonApiWorkspacePatchDocument: JsonApiWorkspacePatchDocument, filter?: string, include?: Array<"workspaces" | "parent" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put Color Pallette
     * @param {string} id
     * @param {JsonApiColorPaletteInDocument} jsonApiColorPaletteInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityColorPalettes: (id: string, jsonApiColorPaletteInDocument: JsonApiColorPaletteInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *  Context Security Police Directive
     * @summary Put CSP Directives
     * @param {string} id
     * @param {JsonApiCspDirectiveInDocument} jsonApiCspDirectiveInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCspDirectives: (id: string, jsonApiCspDirectiveInDocument: JsonApiCspDirectiveInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Put Data Source entity
     * @param {string} id
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDataSources: (id: string, jsonApiDataSourceInDocument: JsonApiDataSourceInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Updates JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Put Jwk
     * @param {string} id
     * @param {JsonApiJwkInDocument} jsonApiJwkInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityJwks: (id: string, jsonApiJwkInDocument: JsonApiJwkInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put Organization entity
     * @param {string} id
     * @param {JsonApiOrganizationSettingInDocument} jsonApiOrganizationSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityOrganizationSettings: (id: string, jsonApiOrganizationSettingInDocument: JsonApiOrganizationSettingInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put Theming
     * @param {string} id
     * @param {JsonApiThemeInDocument} jsonApiThemeInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityThemes: (id: string, jsonApiThemeInDocument: JsonApiThemeInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Put UserGroup entity
     * @param {string} id
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserGroups: (id: string, jsonApiUserGroupInDocument: JsonApiUserGroupInDocument, filter?: string, include?: Array<"userGroups" | "parents" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User - represents entity interacting with platform
     * @summary Put User entity
     * @param {string} id
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUsers: (id: string, jsonApiUserInDocument: JsonApiUserInDocument, filter?: string, include?: Array<"userGroups" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Space of the shared interest
     * @summary Put Workspace entity
     * @param {string} id
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaces: (id: string, jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument, filter?: string, include?: Array<"workspaces" | "parent" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * Request parameters for createEntityColorPalettes operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiCreateEntityColorPalettesRequest
 */
export declare interface OrganizationModelControllerApiCreateEntityColorPalettesRequest {
    /**
     *
     * @type {JsonApiColorPaletteInDocument}
     * @memberof OrganizationModelControllerApiCreateEntityColorPalettes
     */
    readonly jsonApiColorPaletteInDocument: JsonApiColorPaletteInDocument;
}

/**
 * Request parameters for createEntityCspDirectives operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiCreateEntityCspDirectivesRequest
 */
export declare interface OrganizationModelControllerApiCreateEntityCspDirectivesRequest {
    /**
     *
     * @type {JsonApiCspDirectiveInDocument}
     * @memberof OrganizationModelControllerApiCreateEntityCspDirectives
     */
    readonly jsonApiCspDirectiveInDocument: JsonApiCspDirectiveInDocument;
}

/**
 * Request parameters for createEntityDataSources operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiCreateEntityDataSourcesRequest
 */
export declare interface OrganizationModelControllerApiCreateEntityDataSourcesRequest {
    /**
     *
     * @type {JsonApiDataSourceInDocument}
     * @memberof OrganizationModelControllerApiCreateEntityDataSources
     */
    readonly jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'all' | 'ALL'>}
     * @memberof OrganizationModelControllerApiCreateEntityDataSources
     */
    readonly metaInclude?: Array<"permissions" | "all" | "ALL">;
}

/**
 * Request parameters for createEntityJwks operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiCreateEntityJwksRequest
 */
export declare interface OrganizationModelControllerApiCreateEntityJwksRequest {
    /**
     *
     * @type {JsonApiJwkInDocument}
     * @memberof OrganizationModelControllerApiCreateEntityJwks
     */
    readonly jsonApiJwkInDocument: JsonApiJwkInDocument;
}

/**
 * Request parameters for createEntityOrganizationSettings operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiCreateEntityOrganizationSettingsRequest
 */
export declare interface OrganizationModelControllerApiCreateEntityOrganizationSettingsRequest {
    /**
     *
     * @type {JsonApiOrganizationSettingInDocument}
     * @memberof OrganizationModelControllerApiCreateEntityOrganizationSettings
     */
    readonly jsonApiOrganizationSettingInDocument: JsonApiOrganizationSettingInDocument;
}

/**
 * Request parameters for createEntityThemes operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiCreateEntityThemesRequest
 */
export declare interface OrganizationModelControllerApiCreateEntityThemesRequest {
    /**
     *
     * @type {JsonApiThemeInDocument}
     * @memberof OrganizationModelControllerApiCreateEntityThemes
     */
    readonly jsonApiThemeInDocument: JsonApiThemeInDocument;
}

/**
 * Request parameters for createEntityUserGroups operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiCreateEntityUserGroupsRequest
 */
export declare interface OrganizationModelControllerApiCreateEntityUserGroupsRequest {
    /**
     *
     * @type {JsonApiUserGroupInDocument}
     * @memberof OrganizationModelControllerApiCreateEntityUserGroups
     */
    readonly jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'parents' | 'ALL'>}
     * @memberof OrganizationModelControllerApiCreateEntityUserGroups
     */
    readonly include?: Array<"userGroups" | "parents" | "ALL">;
}

/**
 * Request parameters for createEntityUsers operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiCreateEntityUsersRequest
 */
export declare interface OrganizationModelControllerApiCreateEntityUsersRequest {
    /**
     *
     * @type {JsonApiUserInDocument}
     * @memberof OrganizationModelControllerApiCreateEntityUsers
     */
    readonly jsonApiUserInDocument: JsonApiUserInDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'ALL'>}
     * @memberof OrganizationModelControllerApiCreateEntityUsers
     */
    readonly include?: Array<"userGroups" | "ALL">;
}

/**
 * Request parameters for createEntityWorkspaces operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiCreateEntityWorkspacesRequest
 */
export declare interface OrganizationModelControllerApiCreateEntityWorkspacesRequest {
    /**
     *
     * @type {JsonApiWorkspaceInDocument}
     * @memberof OrganizationModelControllerApiCreateEntityWorkspaces
     */
    readonly jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaces' | 'parent' | 'ALL'>}
     * @memberof OrganizationModelControllerApiCreateEntityWorkspaces
     */
    readonly include?: Array<"workspaces" | "parent" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'config' | 'permissions' | 'all' | 'ALL'>}
     * @memberof OrganizationModelControllerApiCreateEntityWorkspaces
     */
    readonly metaInclude?: Array<"config" | "permissions" | "all" | "ALL">;
}

/**
 * Request parameters for deleteEntityColorPalettes operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiDeleteEntityColorPalettesRequest
 */
export declare interface OrganizationModelControllerApiDeleteEntityColorPalettesRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiDeleteEntityColorPalettes
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiDeleteEntityColorPalettes
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityCspDirectives operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiDeleteEntityCspDirectivesRequest
 */
export declare interface OrganizationModelControllerApiDeleteEntityCspDirectivesRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiDeleteEntityCspDirectives
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiDeleteEntityCspDirectives
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityDataSources operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiDeleteEntityDataSourcesRequest
 */
export declare interface OrganizationModelControllerApiDeleteEntityDataSourcesRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiDeleteEntityDataSources
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiDeleteEntityDataSources
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityJwks operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiDeleteEntityJwksRequest
 */
export declare interface OrganizationModelControllerApiDeleteEntityJwksRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiDeleteEntityJwks
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiDeleteEntityJwks
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityOrganizationSettings operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiDeleteEntityOrganizationSettingsRequest
 */
export declare interface OrganizationModelControllerApiDeleteEntityOrganizationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiDeleteEntityOrganizationSettings
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiDeleteEntityOrganizationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityThemes operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiDeleteEntityThemesRequest
 */
export declare interface OrganizationModelControllerApiDeleteEntityThemesRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiDeleteEntityThemes
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiDeleteEntityThemes
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityUserGroups operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiDeleteEntityUserGroupsRequest
 */
export declare interface OrganizationModelControllerApiDeleteEntityUserGroupsRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiDeleteEntityUserGroups
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiDeleteEntityUserGroups
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityUsers operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiDeleteEntityUsersRequest
 */
export declare interface OrganizationModelControllerApiDeleteEntityUsersRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiDeleteEntityUsers
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiDeleteEntityUsers
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityWorkspaces operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiDeleteEntityWorkspacesRequest
 */
export declare interface OrganizationModelControllerApiDeleteEntityWorkspacesRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiDeleteEntityWorkspaces
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiDeleteEntityWorkspaces
     */
    readonly filter?: string;
}

/**
 * OrganizationModelControllerApi - factory interface
 * @export
 */
export declare const OrganizationModelControllerApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Post Color Pallettes
     * @param {OrganizationModelControllerApiCreateEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityColorPalettes(requestParameters: OrganizationModelControllerApiCreateEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutDocument>;
    /**
     *  Context Security Police Directive
     * @summary Post CSP Directives
     * @param {OrganizationModelControllerApiCreateEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityCspDirectives(requestParameters: OrganizationModelControllerApiCreateEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutDocument>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Post Data Sources
     * @param {OrganizationModelControllerApiCreateEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDataSources(requestParameters: OrganizationModelControllerApiCreateEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     * Creates JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Post Jwks
     * @param {OrganizationModelControllerApiCreateEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityJwks(requestParameters: OrganizationModelControllerApiCreateEntityJwksRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiJwkOutDocument>;
    /**
     *
     * @summary Post Organization Setting entities
     * @param {OrganizationModelControllerApiCreateEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityOrganizationSettings(requestParameters: OrganizationModelControllerApiCreateEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutDocument>;
    /**
     *
     * @summary Post Theming
     * @param {OrganizationModelControllerApiCreateEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityThemes(requestParameters: OrganizationModelControllerApiCreateEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutDocument>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Post User Group entities
     * @param {OrganizationModelControllerApiCreateEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserGroups(requestParameters: OrganizationModelControllerApiCreateEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     * User - represents entity interacting with platform
     * @summary Post User entities
     * @param {OrganizationModelControllerApiCreateEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUsers(requestParameters: OrganizationModelControllerApiCreateEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutDocument>;
    /**
     * Space of the shared interest
     * @summary Post Workspace entities
     * @param {OrganizationModelControllerApiCreateEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaces(requestParameters: OrganizationModelControllerApiCreateEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     *
     * @summary Delete a Color Pallette
     * @param {OrganizationModelControllerApiDeleteEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityColorPalettes(requestParameters: OrganizationModelControllerApiDeleteEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *  Context Security Police Directive
     * @summary Delete CSP Directives
     * @param {OrganizationModelControllerApiDeleteEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityCspDirectives(requestParameters: OrganizationModelControllerApiDeleteEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Delete Data Source entity
     * @param {OrganizationModelControllerApiDeleteEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDataSources(requestParameters: OrganizationModelControllerApiDeleteEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Deletes JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Delete Jwk
     * @param {OrganizationModelControllerApiDeleteEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityJwks(requestParameters: OrganizationModelControllerApiDeleteEntityJwksRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete Organization entity
     * @param {OrganizationModelControllerApiDeleteEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityOrganizationSettings(requestParameters: OrganizationModelControllerApiDeleteEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete Theming
     * @param {OrganizationModelControllerApiDeleteEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityThemes(requestParameters: OrganizationModelControllerApiDeleteEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Delete UserGroup entity
     * @param {OrganizationModelControllerApiDeleteEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserGroups(requestParameters: OrganizationModelControllerApiDeleteEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * User - represents entity interacting with platform
     * @summary Delete User entity
     * @param {OrganizationModelControllerApiDeleteEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUsers(requestParameters: OrganizationModelControllerApiDeleteEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Space of the shared interest
     * @summary Delete Workspace entity
     * @param {OrganizationModelControllerApiDeleteEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaces(requestParameters: OrganizationModelControllerApiDeleteEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all Color Pallettes
     * @param {OrganizationModelControllerApiGetAllEntitiesColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesColorPalettes(requestParameters: OrganizationModelControllerApiGetAllEntitiesColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutList>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {OrganizationModelControllerApiGetAllEntitiesCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesCspDirectives(requestParameters: OrganizationModelControllerApiGetAllEntitiesCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutList>;
    /**
     *
     * @summary Get all Data Source Identifiers
     * @param {OrganizationModelControllerApiGetAllEntitiesDataSourceIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSourceIdentifiers(requestParameters: OrganizationModelControllerApiGetAllEntitiesDataSourceIdentifiersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceIdentifierOutList>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entities
     * @param {OrganizationModelControllerApiGetAllEntitiesDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSources(requestParameters: OrganizationModelControllerApiGetAllEntitiesDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutList>;
    /**
     * Space of the shared interest
     * @summary Get Entitlements
     * @param {OrganizationModelControllerApiGetAllEntitiesEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesEntitlements(requestParameters: OrganizationModelControllerApiGetAllEntitiesEntitlementsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiEntitlementOutList>;
    /**
     * Returns all JSON web keys - used to verify JSON web tokens (Jwts)
     * @summary Get all Jwks
     * @param {OrganizationModelControllerApiGetAllEntitiesJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesJwks(requestParameters: OrganizationModelControllerApiGetAllEntitiesJwksRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiJwkOutList>;
    /**
     *
     * @summary Get Organization entities
     * @param {OrganizationModelControllerApiGetAllEntitiesOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesOrganizationSettings(requestParameters: OrganizationModelControllerApiGetAllEntitiesOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutList>;
    /**
     *
     * @summary Get all Theming entities
     * @param {OrganizationModelControllerApiGetAllEntitiesThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesThemes(requestParameters: OrganizationModelControllerApiGetAllEntitiesThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutList>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entities
     * @param {OrganizationModelControllerApiGetAllEntitiesUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserGroups(requestParameters: OrganizationModelControllerApiGetAllEntitiesUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutList>;
    /**
     * UserIdentifier - represents entity interacting with platform
     * @summary Get UserIdentifier entities
     * @param {OrganizationModelControllerApiGetAllEntitiesUserIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserIdentifiers(requestParameters: OrganizationModelControllerApiGetAllEntitiesUserIdentifiersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserIdentifierOutList>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entities
     * @param {OrganizationModelControllerApiGetAllEntitiesUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUsers(requestParameters: OrganizationModelControllerApiGetAllEntitiesUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutList>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entities
     * @param {OrganizationModelControllerApiGetAllEntitiesWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaces(requestParameters: OrganizationModelControllerApiGetAllEntitiesWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutList>;
    /**
     *
     * @summary Get Color Pallette
     * @param {OrganizationModelControllerApiGetEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityColorPalettes(requestParameters: OrganizationModelControllerApiGetEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutDocument>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {OrganizationModelControllerApiGetEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCspDirectives(requestParameters: OrganizationModelControllerApiGetEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutDocument>;
    /**
     *
     * @summary Get Data Source Identifier
     * @param {OrganizationModelControllerApiGetEntityDataSourceIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSourceIdentifiers(requestParameters: OrganizationModelControllerApiGetEntityDataSourceIdentifiersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceIdentifierOutDocument>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entity
     * @param {OrganizationModelControllerApiGetEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSources(requestParameters: OrganizationModelControllerApiGetEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     * Space of the shared interest
     * @summary Get Entitlement
     * @param {OrganizationModelControllerApiGetEntityEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityEntitlements(requestParameters: OrganizationModelControllerApiGetEntityEntitlementsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiEntitlementOutDocument>;
    /**
     * Returns JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Get Jwk
     * @param {OrganizationModelControllerApiGetEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityJwks(requestParameters: OrganizationModelControllerApiGetEntityJwksRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiJwkOutDocument>;
    /**
     *
     * @summary Get Organization entity
     * @param {OrganizationModelControllerApiGetEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityOrganizationSettings(requestParameters: OrganizationModelControllerApiGetEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutDocument>;
    /**
     *
     * @summary Get Theming
     * @param {OrganizationModelControllerApiGetEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityThemes(requestParameters: OrganizationModelControllerApiGetEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutDocument>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entity
     * @param {OrganizationModelControllerApiGetEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserGroups(requestParameters: OrganizationModelControllerApiGetEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     * UserIdentifier - represents basic informationZ about entity interacting with platform
     * @summary Get UserIdentifier entity
     * @param {OrganizationModelControllerApiGetEntityUserIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserIdentifiers(requestParameters: OrganizationModelControllerApiGetEntityUserIdentifiersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserIdentifierOutDocument>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entity
     * @param {OrganizationModelControllerApiGetEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUsers(requestParameters: OrganizationModelControllerApiGetEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutDocument>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entity
     * @param {OrganizationModelControllerApiGetEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaces(requestParameters: OrganizationModelControllerApiGetEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     *
     * @summary Patch Color Pallette
     * @param {OrganizationModelControllerApiPatchEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityColorPalettes(requestParameters: OrganizationModelControllerApiPatchEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutDocument>;
    /**
     *  Context Security Police Directive
     * @summary Patch CSP Directives
     * @param {OrganizationModelControllerApiPatchEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCspDirectives(requestParameters: OrganizationModelControllerApiPatchEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutDocument>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Patch Data Source entity
     * @param {OrganizationModelControllerApiPatchEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityDataSources(requestParameters: OrganizationModelControllerApiPatchEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     * Patches JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Patch Jwk
     * @param {OrganizationModelControllerApiPatchEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityJwks(requestParameters: OrganizationModelControllerApiPatchEntityJwksRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiJwkOutDocument>;
    /**
     *
     * @summary Patch Organization entity
     * @param {OrganizationModelControllerApiPatchEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityOrganizationSettings(requestParameters: OrganizationModelControllerApiPatchEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutDocument>;
    /**
     *
     * @summary Patch Theming
     * @param {OrganizationModelControllerApiPatchEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityThemes(requestParameters: OrganizationModelControllerApiPatchEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutDocument>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Patch UserGroup entity
     * @param {OrganizationModelControllerApiPatchEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUserGroups(requestParameters: OrganizationModelControllerApiPatchEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     * User - represents entity interacting with platform
     * @summary Patch User entity
     * @param {OrganizationModelControllerApiPatchEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUsers(requestParameters: OrganizationModelControllerApiPatchEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutDocument>;
    /**
     * Space of the shared interest
     * @summary Patch Workspace entity
     * @param {OrganizationModelControllerApiPatchEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaces(requestParameters: OrganizationModelControllerApiPatchEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     *
     * @summary Put Color Pallette
     * @param {OrganizationModelControllerApiUpdateEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityColorPalettes(requestParameters: OrganizationModelControllerApiUpdateEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutDocument>;
    /**
     *  Context Security Police Directive
     * @summary Put CSP Directives
     * @param {OrganizationModelControllerApiUpdateEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCspDirectives(requestParameters: OrganizationModelControllerApiUpdateEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutDocument>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Put Data Source entity
     * @param {OrganizationModelControllerApiUpdateEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDataSources(requestParameters: OrganizationModelControllerApiUpdateEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     * Updates JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Put Jwk
     * @param {OrganizationModelControllerApiUpdateEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityJwks(requestParameters: OrganizationModelControllerApiUpdateEntityJwksRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiJwkOutDocument>;
    /**
     *
     * @summary Put Organization entity
     * @param {OrganizationModelControllerApiUpdateEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityOrganizationSettings(requestParameters: OrganizationModelControllerApiUpdateEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutDocument>;
    /**
     *
     * @summary Put Theming
     * @param {OrganizationModelControllerApiUpdateEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityThemes(requestParameters: OrganizationModelControllerApiUpdateEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutDocument>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Put UserGroup entity
     * @param {OrganizationModelControllerApiUpdateEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserGroups(requestParameters: OrganizationModelControllerApiUpdateEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     * User - represents entity interacting with platform
     * @summary Put User entity
     * @param {OrganizationModelControllerApiUpdateEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUsers(requestParameters: OrganizationModelControllerApiUpdateEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutDocument>;
    /**
     * Space of the shared interest
     * @summary Put Workspace entity
     * @param {OrganizationModelControllerApiUpdateEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaces(requestParameters: OrganizationModelControllerApiUpdateEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutDocument>;
};

/**
 * OrganizationModelControllerApi - functional programming interface
 * @export
 */
export declare const OrganizationModelControllerApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post Color Pallettes
     * @param {JsonApiColorPaletteInDocument} jsonApiColorPaletteInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityColorPalettes(jsonApiColorPaletteInDocument: JsonApiColorPaletteInDocument, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiColorPaletteOutDocument>>;
    /**
     *  Context Security Police Directive
     * @summary Post CSP Directives
     * @param {JsonApiCspDirectiveInDocument} jsonApiCspDirectiveInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityCspDirectives(jsonApiCspDirectiveInDocument: JsonApiCspDirectiveInDocument, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCspDirectiveOutDocument>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Post Data Sources
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDataSources(jsonApiDataSourceInDocument: JsonApiDataSourceInDocument, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutDocument>>;
    /**
     * Creates JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Post Jwks
     * @param {JsonApiJwkInDocument} jsonApiJwkInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityJwks(jsonApiJwkInDocument: JsonApiJwkInDocument, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiJwkOutDocument>>;
    /**
     *
     * @summary Post Organization Setting entities
     * @param {JsonApiOrganizationSettingInDocument} jsonApiOrganizationSettingInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityOrganizationSettings(jsonApiOrganizationSettingInDocument: JsonApiOrganizationSettingInDocument, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationSettingOutDocument>>;
    /**
     *
     * @summary Post Theming
     * @param {JsonApiThemeInDocument} jsonApiThemeInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityThemes(jsonApiThemeInDocument: JsonApiThemeInDocument, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiThemeOutDocument>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Post User Group entities
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserGroups(jsonApiUserGroupInDocument: JsonApiUserGroupInDocument, include?: Array<"userGroups" | "parents" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutDocument>>;
    /**
     * User - represents entity interacting with platform
     * @summary Post User entities
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUsers(jsonApiUserInDocument: JsonApiUserInDocument, include?: Array<"userGroups" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutDocument>>;
    /**
     * Space of the shared interest
     * @summary Post Workspace entities
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaces(jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument, include?: Array<"workspaces" | "parent" | "ALL">, metaInclude?: Array<"config" | "permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutDocument>>;
    /**
     *
     * @summary Delete a Color Pallette
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityColorPalettes(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *  Context Security Police Directive
     * @summary Delete CSP Directives
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityCspDirectives(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Delete Data Source entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDataSources(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Deletes JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Delete Jwk
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityJwks(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete Organization entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityOrganizationSettings(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete Theming
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityThemes(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Delete UserGroup entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserGroups(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * User - represents entity interacting with platform
     * @summary Delete User entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUsers(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Space of the shared interest
     * @summary Delete Workspace entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaces(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get all Color Pallettes
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesColorPalettes(filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiColorPaletteOutList>>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesCspDirectives(filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCspDirectiveOutList>>;
    /**
     *
     * @summary Get all Data Source Identifiers
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSourceIdentifiers(filter?: string, page?: number, size?: number, sort?: Array<string>, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceIdentifierOutList>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDataSources(filter?: string, page?: number, size?: number, sort?: Array<string>, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutList>>;
    /**
     * Space of the shared interest
     * @summary Get Entitlements
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesEntitlements(filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiEntitlementOutList>>;
    /**
     * Returns all JSON web keys - used to verify JSON web tokens (Jwts)
     * @summary Get all Jwks
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesJwks(filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiJwkOutList>>;
    /**
     *
     * @summary Get Organization entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesOrganizationSettings(filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationSettingOutList>>;
    /**
     *
     * @summary Get all Theming entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesThemes(filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiThemeOutList>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserGroups(filter?: string, include?: Array<"userGroups" | "parents" | "ALL">, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutList>>;
    /**
     * UserIdentifier - represents entity interacting with platform
     * @summary Get UserIdentifier entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserIdentifiers(filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserIdentifierOutList>>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUsers(filter?: string, include?: Array<"userGroups" | "ALL">, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutList>>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaces(filter?: string, include?: Array<"workspaces" | "parent" | "ALL">, page?: number, size?: number, sort?: Array<string>, metaInclude?: Array<"config" | "permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutList>>;
    /**
     *
     * @summary Get Color Pallette
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityColorPalettes(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiColorPaletteOutDocument>>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCspDirectives(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCspDirectiveOutDocument>>;
    /**
     *
     * @summary Get Data Source Identifier
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSourceIdentifiers(id: string, filter?: string, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceIdentifierOutDocument>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDataSources(id: string, filter?: string, metaInclude?: Array<"permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutDocument>>;
    /**
     * Space of the shared interest
     * @summary Get Entitlement
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityEntitlements(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiEntitlementOutDocument>>;
    /**
     * Returns JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Get Jwk
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityJwks(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiJwkOutDocument>>;
    /**
     *
     * @summary Get Organization entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityOrganizationSettings(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationSettingOutDocument>>;
    /**
     *
     * @summary Get Theming
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityThemes(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiThemeOutDocument>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserGroups(id: string, filter?: string, include?: Array<"userGroups" | "parents" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutDocument>>;
    /**
     * UserIdentifier - represents basic informationZ about entity interacting with platform
     * @summary Get UserIdentifier entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserIdentifiers(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserIdentifierOutDocument>>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUsers(id: string, filter?: string, include?: Array<"userGroups" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutDocument>>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaces(id: string, filter?: string, include?: Array<"workspaces" | "parent" | "ALL">, metaInclude?: Array<"config" | "permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutDocument>>;
    /**
     *
     * @summary Patch Color Pallette
     * @param {string} id
     * @param {JsonApiColorPalettePatchDocument} jsonApiColorPalettePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityColorPalettes(id: string, jsonApiColorPalettePatchDocument: JsonApiColorPalettePatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiColorPaletteOutDocument>>;
    /**
     *  Context Security Police Directive
     * @summary Patch CSP Directives
     * @param {string} id
     * @param {JsonApiCspDirectivePatchDocument} jsonApiCspDirectivePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCspDirectives(id: string, jsonApiCspDirectivePatchDocument: JsonApiCspDirectivePatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCspDirectiveOutDocument>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Patch Data Source entity
     * @param {string} id
     * @param {JsonApiDataSourcePatchDocument} jsonApiDataSourcePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityDataSources(id: string, jsonApiDataSourcePatchDocument: JsonApiDataSourcePatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutDocument>>;
    /**
     * Patches JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Patch Jwk
     * @param {string} id
     * @param {JsonApiJwkPatchDocument} jsonApiJwkPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityJwks(id: string, jsonApiJwkPatchDocument: JsonApiJwkPatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiJwkOutDocument>>;
    /**
     *
     * @summary Patch Organization entity
     * @param {string} id
     * @param {JsonApiOrganizationSettingPatchDocument} jsonApiOrganizationSettingPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityOrganizationSettings(id: string, jsonApiOrganizationSettingPatchDocument: JsonApiOrganizationSettingPatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationSettingOutDocument>>;
    /**
     *
     * @summary Patch Theming
     * @param {string} id
     * @param {JsonApiThemePatchDocument} jsonApiThemePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityThemes(id: string, jsonApiThemePatchDocument: JsonApiThemePatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiThemeOutDocument>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Patch UserGroup entity
     * @param {string} id
     * @param {JsonApiUserGroupPatchDocument} jsonApiUserGroupPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUserGroups(id: string, jsonApiUserGroupPatchDocument: JsonApiUserGroupPatchDocument, filter?: string, include?: Array<"userGroups" | "parents" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutDocument>>;
    /**
     * User - represents entity interacting with platform
     * @summary Patch User entity
     * @param {string} id
     * @param {JsonApiUserPatchDocument} jsonApiUserPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUsers(id: string, jsonApiUserPatchDocument: JsonApiUserPatchDocument, filter?: string, include?: Array<"userGroups" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutDocument>>;
    /**
     * Space of the shared interest
     * @summary Patch Workspace entity
     * @param {string} id
     * @param {JsonApiWorkspacePatchDocument} jsonApiWorkspacePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaces(id: string, jsonApiWorkspacePatchDocument: JsonApiWorkspacePatchDocument, filter?: string, include?: Array<"workspaces" | "parent" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutDocument>>;
    /**
     *
     * @summary Put Color Pallette
     * @param {string} id
     * @param {JsonApiColorPaletteInDocument} jsonApiColorPaletteInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityColorPalettes(id: string, jsonApiColorPaletteInDocument: JsonApiColorPaletteInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiColorPaletteOutDocument>>;
    /**
     *  Context Security Police Directive
     * @summary Put CSP Directives
     * @param {string} id
     * @param {JsonApiCspDirectiveInDocument} jsonApiCspDirectiveInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCspDirectives(id: string, jsonApiCspDirectiveInDocument: JsonApiCspDirectiveInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCspDirectiveOutDocument>>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Put Data Source entity
     * @param {string} id
     * @param {JsonApiDataSourceInDocument} jsonApiDataSourceInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDataSources(id: string, jsonApiDataSourceInDocument: JsonApiDataSourceInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceOutDocument>>;
    /**
     * Updates JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Put Jwk
     * @param {string} id
     * @param {JsonApiJwkInDocument} jsonApiJwkInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityJwks(id: string, jsonApiJwkInDocument: JsonApiJwkInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiJwkOutDocument>>;
    /**
     *
     * @summary Put Organization entity
     * @param {string} id
     * @param {JsonApiOrganizationSettingInDocument} jsonApiOrganizationSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityOrganizationSettings(id: string, jsonApiOrganizationSettingInDocument: JsonApiOrganizationSettingInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationSettingOutDocument>>;
    /**
     *
     * @summary Put Theming
     * @param {string} id
     * @param {JsonApiThemeInDocument} jsonApiThemeInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityThemes(id: string, jsonApiThemeInDocument: JsonApiThemeInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiThemeOutDocument>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Put UserGroup entity
     * @param {string} id
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserGroups(id: string, jsonApiUserGroupInDocument: JsonApiUserGroupInDocument, filter?: string, include?: Array<"userGroups" | "parents" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutDocument>>;
    /**
     * User - represents entity interacting with platform
     * @summary Put User entity
     * @param {string} id
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUsers(id: string, jsonApiUserInDocument: JsonApiUserInDocument, filter?: string, include?: Array<"userGroups" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutDocument>>;
    /**
     * Space of the shared interest
     * @summary Put Workspace entity
     * @param {string} id
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaces(id: string, jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument, filter?: string, include?: Array<"workspaces" | "parent" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesColorPalettes operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiGetAllEntitiesColorPalettesRequest
 */
export declare interface OrganizationModelControllerApiGetAllEntitiesColorPalettesRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiGetAllEntitiesColorPalettes
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof OrganizationModelControllerApiGetAllEntitiesColorPalettes
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof OrganizationModelControllerApiGetAllEntitiesColorPalettes
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof OrganizationModelControllerApiGetAllEntitiesColorPalettes
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesCspDirectives operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiGetAllEntitiesCspDirectivesRequest
 */
export declare interface OrganizationModelControllerApiGetAllEntitiesCspDirectivesRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiGetAllEntitiesCspDirectives
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof OrganizationModelControllerApiGetAllEntitiesCspDirectives
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof OrganizationModelControllerApiGetAllEntitiesCspDirectives
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof OrganizationModelControllerApiGetAllEntitiesCspDirectives
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesDataSourceIdentifiers operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiGetAllEntitiesDataSourceIdentifiersRequest
 */
export declare interface OrganizationModelControllerApiGetAllEntitiesDataSourceIdentifiersRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiGetAllEntitiesDataSourceIdentifiers
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof OrganizationModelControllerApiGetAllEntitiesDataSourceIdentifiers
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof OrganizationModelControllerApiGetAllEntitiesDataSourceIdentifiers
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof OrganizationModelControllerApiGetAllEntitiesDataSourceIdentifiers
     */
    readonly sort?: Array<string>;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'all' | 'ALL'>}
     * @memberof OrganizationModelControllerApiGetAllEntitiesDataSourceIdentifiers
     */
    readonly metaInclude?: Array<"permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesDataSources operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiGetAllEntitiesDataSourcesRequest
 */
export declare interface OrganizationModelControllerApiGetAllEntitiesDataSourcesRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiGetAllEntitiesDataSources
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof OrganizationModelControllerApiGetAllEntitiesDataSources
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof OrganizationModelControllerApiGetAllEntitiesDataSources
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof OrganizationModelControllerApiGetAllEntitiesDataSources
     */
    readonly sort?: Array<string>;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'all' | 'ALL'>}
     * @memberof OrganizationModelControllerApiGetAllEntitiesDataSources
     */
    readonly metaInclude?: Array<"permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesEntitlements operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiGetAllEntitiesEntitlementsRequest
 */
export declare interface OrganizationModelControllerApiGetAllEntitiesEntitlementsRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiGetAllEntitiesEntitlements
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof OrganizationModelControllerApiGetAllEntitiesEntitlements
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof OrganizationModelControllerApiGetAllEntitiesEntitlements
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof OrganizationModelControllerApiGetAllEntitiesEntitlements
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesJwks operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiGetAllEntitiesJwksRequest
 */
export declare interface OrganizationModelControllerApiGetAllEntitiesJwksRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiGetAllEntitiesJwks
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof OrganizationModelControllerApiGetAllEntitiesJwks
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof OrganizationModelControllerApiGetAllEntitiesJwks
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof OrganizationModelControllerApiGetAllEntitiesJwks
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesOrganizationSettings operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiGetAllEntitiesOrganizationSettingsRequest
 */
export declare interface OrganizationModelControllerApiGetAllEntitiesOrganizationSettingsRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiGetAllEntitiesOrganizationSettings
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof OrganizationModelControllerApiGetAllEntitiesOrganizationSettings
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof OrganizationModelControllerApiGetAllEntitiesOrganizationSettings
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof OrganizationModelControllerApiGetAllEntitiesOrganizationSettings
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesThemes operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiGetAllEntitiesThemesRequest
 */
export declare interface OrganizationModelControllerApiGetAllEntitiesThemesRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiGetAllEntitiesThemes
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof OrganizationModelControllerApiGetAllEntitiesThemes
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof OrganizationModelControllerApiGetAllEntitiesThemes
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof OrganizationModelControllerApiGetAllEntitiesThemes
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesUserGroups operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiGetAllEntitiesUserGroupsRequest
 */
export declare interface OrganizationModelControllerApiGetAllEntitiesUserGroupsRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiGetAllEntitiesUserGroups
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'parents' | 'ALL'>}
     * @memberof OrganizationModelControllerApiGetAllEntitiesUserGroups
     */
    readonly include?: Array<"userGroups" | "parents" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof OrganizationModelControllerApiGetAllEntitiesUserGroups
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof OrganizationModelControllerApiGetAllEntitiesUserGroups
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof OrganizationModelControllerApiGetAllEntitiesUserGroups
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesUserIdentifiers operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiGetAllEntitiesUserIdentifiersRequest
 */
export declare interface OrganizationModelControllerApiGetAllEntitiesUserIdentifiersRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiGetAllEntitiesUserIdentifiers
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof OrganizationModelControllerApiGetAllEntitiesUserIdentifiers
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof OrganizationModelControllerApiGetAllEntitiesUserIdentifiers
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof OrganizationModelControllerApiGetAllEntitiesUserIdentifiers
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesUsers operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiGetAllEntitiesUsersRequest
 */
export declare interface OrganizationModelControllerApiGetAllEntitiesUsersRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiGetAllEntitiesUsers
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'ALL'>}
     * @memberof OrganizationModelControllerApiGetAllEntitiesUsers
     */
    readonly include?: Array<"userGroups" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof OrganizationModelControllerApiGetAllEntitiesUsers
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof OrganizationModelControllerApiGetAllEntitiesUsers
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof OrganizationModelControllerApiGetAllEntitiesUsers
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesWorkspaces operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiGetAllEntitiesWorkspacesRequest
 */
export declare interface OrganizationModelControllerApiGetAllEntitiesWorkspacesRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiGetAllEntitiesWorkspaces
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaces' | 'parent' | 'ALL'>}
     * @memberof OrganizationModelControllerApiGetAllEntitiesWorkspaces
     */
    readonly include?: Array<"workspaces" | "parent" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof OrganizationModelControllerApiGetAllEntitiesWorkspaces
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof OrganizationModelControllerApiGetAllEntitiesWorkspaces
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof OrganizationModelControllerApiGetAllEntitiesWorkspaces
     */
    readonly sort?: Array<string>;
    /**
     * Include Meta objects.
     * @type {Array<'config' | 'permissions' | 'all' | 'ALL'>}
     * @memberof OrganizationModelControllerApiGetAllEntitiesWorkspaces
     */
    readonly metaInclude?: Array<"config" | "permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityColorPalettes operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiGetEntityColorPalettesRequest
 */
export declare interface OrganizationModelControllerApiGetEntityColorPalettesRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiGetEntityColorPalettes
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiGetEntityColorPalettes
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityCspDirectives operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiGetEntityCspDirectivesRequest
 */
export declare interface OrganizationModelControllerApiGetEntityCspDirectivesRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiGetEntityCspDirectives
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiGetEntityCspDirectives
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityDataSourceIdentifiers operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiGetEntityDataSourceIdentifiersRequest
 */
export declare interface OrganizationModelControllerApiGetEntityDataSourceIdentifiersRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiGetEntityDataSourceIdentifiers
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiGetEntityDataSourceIdentifiers
     */
    readonly filter?: string;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'all' | 'ALL'>}
     * @memberof OrganizationModelControllerApiGetEntityDataSourceIdentifiers
     */
    readonly metaInclude?: Array<"permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityDataSources operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiGetEntityDataSourcesRequest
 */
export declare interface OrganizationModelControllerApiGetEntityDataSourcesRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiGetEntityDataSources
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiGetEntityDataSources
     */
    readonly filter?: string;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'all' | 'ALL'>}
     * @memberof OrganizationModelControllerApiGetEntityDataSources
     */
    readonly metaInclude?: Array<"permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityEntitlements operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiGetEntityEntitlementsRequest
 */
export declare interface OrganizationModelControllerApiGetEntityEntitlementsRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiGetEntityEntitlements
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiGetEntityEntitlements
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityJwks operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiGetEntityJwksRequest
 */
export declare interface OrganizationModelControllerApiGetEntityJwksRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiGetEntityJwks
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiGetEntityJwks
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityOrganizationSettings operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiGetEntityOrganizationSettingsRequest
 */
export declare interface OrganizationModelControllerApiGetEntityOrganizationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiGetEntityOrganizationSettings
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiGetEntityOrganizationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityThemes operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiGetEntityThemesRequest
 */
export declare interface OrganizationModelControllerApiGetEntityThemesRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiGetEntityThemes
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiGetEntityThemes
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityUserGroups operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiGetEntityUserGroupsRequest
 */
export declare interface OrganizationModelControllerApiGetEntityUserGroupsRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiGetEntityUserGroups
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiGetEntityUserGroups
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'parents' | 'ALL'>}
     * @memberof OrganizationModelControllerApiGetEntityUserGroups
     */
    readonly include?: Array<"userGroups" | "parents" | "ALL">;
}

/**
 * Request parameters for getEntityUserIdentifiers operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiGetEntityUserIdentifiersRequest
 */
export declare interface OrganizationModelControllerApiGetEntityUserIdentifiersRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiGetEntityUserIdentifiers
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiGetEntityUserIdentifiers
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityUsers operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiGetEntityUsersRequest
 */
export declare interface OrganizationModelControllerApiGetEntityUsersRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiGetEntityUsers
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiGetEntityUsers
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'ALL'>}
     * @memberof OrganizationModelControllerApiGetEntityUsers
     */
    readonly include?: Array<"userGroups" | "ALL">;
}

/**
 * Request parameters for getEntityWorkspaces operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiGetEntityWorkspacesRequest
 */
export declare interface OrganizationModelControllerApiGetEntityWorkspacesRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiGetEntityWorkspaces
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiGetEntityWorkspaces
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaces' | 'parent' | 'ALL'>}
     * @memberof OrganizationModelControllerApiGetEntityWorkspaces
     */
    readonly include?: Array<"workspaces" | "parent" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'config' | 'permissions' | 'all' | 'ALL'>}
     * @memberof OrganizationModelControllerApiGetEntityWorkspaces
     */
    readonly metaInclude?: Array<"config" | "permissions" | "all" | "ALL">;
}

/**
 * OrganizationModelControllerApi - interface
 * @export
 * @interface OrganizationModelControllerApi
 */
export declare interface OrganizationModelControllerApiInterface {
    /**
     *
     * @summary Post Color Pallettes
     * @param {OrganizationModelControllerApiCreateEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityColorPalettes(requestParameters: OrganizationModelControllerApiCreateEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutDocument>;
    /**
     *  Context Security Police Directive
     * @summary Post CSP Directives
     * @param {OrganizationModelControllerApiCreateEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityCspDirectives(requestParameters: OrganizationModelControllerApiCreateEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutDocument>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Post Data Sources
     * @param {OrganizationModelControllerApiCreateEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityDataSources(requestParameters: OrganizationModelControllerApiCreateEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     * Creates JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Post Jwks
     * @param {OrganizationModelControllerApiCreateEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityJwks(requestParameters: OrganizationModelControllerApiCreateEntityJwksRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiJwkOutDocument>;
    /**
     *
     * @summary Post Organization Setting entities
     * @param {OrganizationModelControllerApiCreateEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityOrganizationSettings(requestParameters: OrganizationModelControllerApiCreateEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutDocument>;
    /**
     *
     * @summary Post Theming
     * @param {OrganizationModelControllerApiCreateEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityThemes(requestParameters: OrganizationModelControllerApiCreateEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutDocument>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Post User Group entities
     * @param {OrganizationModelControllerApiCreateEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityUserGroups(requestParameters: OrganizationModelControllerApiCreateEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     * User - represents entity interacting with platform
     * @summary Post User entities
     * @param {OrganizationModelControllerApiCreateEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityUsers(requestParameters: OrganizationModelControllerApiCreateEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutDocument>;
    /**
     * Space of the shared interest
     * @summary Post Workspace entities
     * @param {OrganizationModelControllerApiCreateEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityWorkspaces(requestParameters: OrganizationModelControllerApiCreateEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     *
     * @summary Delete a Color Pallette
     * @param {OrganizationModelControllerApiDeleteEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityColorPalettes(requestParameters: OrganizationModelControllerApiDeleteEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *  Context Security Police Directive
     * @summary Delete CSP Directives
     * @param {OrganizationModelControllerApiDeleteEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityCspDirectives(requestParameters: OrganizationModelControllerApiDeleteEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Delete Data Source entity
     * @param {OrganizationModelControllerApiDeleteEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityDataSources(requestParameters: OrganizationModelControllerApiDeleteEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Deletes JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Delete Jwk
     * @param {OrganizationModelControllerApiDeleteEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityJwks(requestParameters: OrganizationModelControllerApiDeleteEntityJwksRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete Organization entity
     * @param {OrganizationModelControllerApiDeleteEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityOrganizationSettings(requestParameters: OrganizationModelControllerApiDeleteEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete Theming
     * @param {OrganizationModelControllerApiDeleteEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityThemes(requestParameters: OrganizationModelControllerApiDeleteEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Delete UserGroup entity
     * @param {OrganizationModelControllerApiDeleteEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityUserGroups(requestParameters: OrganizationModelControllerApiDeleteEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * User - represents entity interacting with platform
     * @summary Delete User entity
     * @param {OrganizationModelControllerApiDeleteEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityUsers(requestParameters: OrganizationModelControllerApiDeleteEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Space of the shared interest
     * @summary Delete Workspace entity
     * @param {OrganizationModelControllerApiDeleteEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityWorkspaces(requestParameters: OrganizationModelControllerApiDeleteEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all Color Pallettes
     * @param {OrganizationModelControllerApiGetAllEntitiesColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesColorPalettes(requestParameters: OrganizationModelControllerApiGetAllEntitiesColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutList>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {OrganizationModelControllerApiGetAllEntitiesCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesCspDirectives(requestParameters: OrganizationModelControllerApiGetAllEntitiesCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutList>;
    /**
     *
     * @summary Get all Data Source Identifiers
     * @param {OrganizationModelControllerApiGetAllEntitiesDataSourceIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesDataSourceIdentifiers(requestParameters: OrganizationModelControllerApiGetAllEntitiesDataSourceIdentifiersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceIdentifierOutList>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entities
     * @param {OrganizationModelControllerApiGetAllEntitiesDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesDataSources(requestParameters: OrganizationModelControllerApiGetAllEntitiesDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutList>;
    /**
     * Space of the shared interest
     * @summary Get Entitlements
     * @param {OrganizationModelControllerApiGetAllEntitiesEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesEntitlements(requestParameters: OrganizationModelControllerApiGetAllEntitiesEntitlementsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiEntitlementOutList>;
    /**
     * Returns all JSON web keys - used to verify JSON web tokens (Jwts)
     * @summary Get all Jwks
     * @param {OrganizationModelControllerApiGetAllEntitiesJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesJwks(requestParameters: OrganizationModelControllerApiGetAllEntitiesJwksRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiJwkOutList>;
    /**
     *
     * @summary Get Organization entities
     * @param {OrganizationModelControllerApiGetAllEntitiesOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesOrganizationSettings(requestParameters: OrganizationModelControllerApiGetAllEntitiesOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutList>;
    /**
     *
     * @summary Get all Theming entities
     * @param {OrganizationModelControllerApiGetAllEntitiesThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesThemes(requestParameters: OrganizationModelControllerApiGetAllEntitiesThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutList>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entities
     * @param {OrganizationModelControllerApiGetAllEntitiesUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesUserGroups(requestParameters: OrganizationModelControllerApiGetAllEntitiesUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutList>;
    /**
     * UserIdentifier - represents entity interacting with platform
     * @summary Get UserIdentifier entities
     * @param {OrganizationModelControllerApiGetAllEntitiesUserIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesUserIdentifiers(requestParameters: OrganizationModelControllerApiGetAllEntitiesUserIdentifiersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserIdentifierOutList>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entities
     * @param {OrganizationModelControllerApiGetAllEntitiesUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesUsers(requestParameters: OrganizationModelControllerApiGetAllEntitiesUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutList>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entities
     * @param {OrganizationModelControllerApiGetAllEntitiesWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesWorkspaces(requestParameters: OrganizationModelControllerApiGetAllEntitiesWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutList>;
    /**
     *
     * @summary Get Color Pallette
     * @param {OrganizationModelControllerApiGetEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityColorPalettes(requestParameters: OrganizationModelControllerApiGetEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutDocument>;
    /**
     *  Context Security Police Directive
     * @summary Get CSP Directives
     * @param {OrganizationModelControllerApiGetEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityCspDirectives(requestParameters: OrganizationModelControllerApiGetEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutDocument>;
    /**
     *
     * @summary Get Data Source Identifier
     * @param {OrganizationModelControllerApiGetEntityDataSourceIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityDataSourceIdentifiers(requestParameters: OrganizationModelControllerApiGetEntityDataSourceIdentifiersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceIdentifierOutDocument>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Get Data Source entity
     * @param {OrganizationModelControllerApiGetEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityDataSources(requestParameters: OrganizationModelControllerApiGetEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     * Space of the shared interest
     * @summary Get Entitlement
     * @param {OrganizationModelControllerApiGetEntityEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityEntitlements(requestParameters: OrganizationModelControllerApiGetEntityEntitlementsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiEntitlementOutDocument>;
    /**
     * Returns JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Get Jwk
     * @param {OrganizationModelControllerApiGetEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityJwks(requestParameters: OrganizationModelControllerApiGetEntityJwksRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiJwkOutDocument>;
    /**
     *
     * @summary Get Organization entity
     * @param {OrganizationModelControllerApiGetEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityOrganizationSettings(requestParameters: OrganizationModelControllerApiGetEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutDocument>;
    /**
     *
     * @summary Get Theming
     * @param {OrganizationModelControllerApiGetEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityThemes(requestParameters: OrganizationModelControllerApiGetEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutDocument>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entity
     * @param {OrganizationModelControllerApiGetEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityUserGroups(requestParameters: OrganizationModelControllerApiGetEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     * UserIdentifier - represents basic informationZ about entity interacting with platform
     * @summary Get UserIdentifier entity
     * @param {OrganizationModelControllerApiGetEntityUserIdentifiersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityUserIdentifiers(requestParameters: OrganizationModelControllerApiGetEntityUserIdentifiersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserIdentifierOutDocument>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entity
     * @param {OrganizationModelControllerApiGetEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityUsers(requestParameters: OrganizationModelControllerApiGetEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutDocument>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entity
     * @param {OrganizationModelControllerApiGetEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityWorkspaces(requestParameters: OrganizationModelControllerApiGetEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     *
     * @summary Patch Color Pallette
     * @param {OrganizationModelControllerApiPatchEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    patchEntityColorPalettes(requestParameters: OrganizationModelControllerApiPatchEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutDocument>;
    /**
     *  Context Security Police Directive
     * @summary Patch CSP Directives
     * @param {OrganizationModelControllerApiPatchEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    patchEntityCspDirectives(requestParameters: OrganizationModelControllerApiPatchEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutDocument>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Patch Data Source entity
     * @param {OrganizationModelControllerApiPatchEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    patchEntityDataSources(requestParameters: OrganizationModelControllerApiPatchEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     * Patches JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Patch Jwk
     * @param {OrganizationModelControllerApiPatchEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    patchEntityJwks(requestParameters: OrganizationModelControllerApiPatchEntityJwksRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiJwkOutDocument>;
    /**
     *
     * @summary Patch Organization entity
     * @param {OrganizationModelControllerApiPatchEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    patchEntityOrganizationSettings(requestParameters: OrganizationModelControllerApiPatchEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutDocument>;
    /**
     *
     * @summary Patch Theming
     * @param {OrganizationModelControllerApiPatchEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    patchEntityThemes(requestParameters: OrganizationModelControllerApiPatchEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutDocument>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Patch UserGroup entity
     * @param {OrganizationModelControllerApiPatchEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    patchEntityUserGroups(requestParameters: OrganizationModelControllerApiPatchEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     * User - represents entity interacting with platform
     * @summary Patch User entity
     * @param {OrganizationModelControllerApiPatchEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    patchEntityUsers(requestParameters: OrganizationModelControllerApiPatchEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutDocument>;
    /**
     * Space of the shared interest
     * @summary Patch Workspace entity
     * @param {OrganizationModelControllerApiPatchEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    patchEntityWorkspaces(requestParameters: OrganizationModelControllerApiPatchEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     *
     * @summary Put Color Pallette
     * @param {OrganizationModelControllerApiUpdateEntityColorPalettesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityColorPalettes(requestParameters: OrganizationModelControllerApiUpdateEntityColorPalettesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiColorPaletteOutDocument>;
    /**
     *  Context Security Police Directive
     * @summary Put CSP Directives
     * @param {OrganizationModelControllerApiUpdateEntityCspDirectivesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityCspDirectives(requestParameters: OrganizationModelControllerApiUpdateEntityCspDirectivesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCspDirectiveOutDocument>;
    /**
     * Data Source - represents data source for the workspace
     * @summary Put Data Source entity
     * @param {OrganizationModelControllerApiUpdateEntityDataSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityDataSources(requestParameters: OrganizationModelControllerApiUpdateEntityDataSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDataSourceOutDocument>;
    /**
     * Updates JSON web key - used to verify JSON web tokens (Jwts)
     * @summary Put Jwk
     * @param {OrganizationModelControllerApiUpdateEntityJwksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityJwks(requestParameters: OrganizationModelControllerApiUpdateEntityJwksRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiJwkOutDocument>;
    /**
     *
     * @summary Put Organization entity
     * @param {OrganizationModelControllerApiUpdateEntityOrganizationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityOrganizationSettings(requestParameters: OrganizationModelControllerApiUpdateEntityOrganizationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiOrganizationSettingOutDocument>;
    /**
     *
     * @summary Put Theming
     * @param {OrganizationModelControllerApiUpdateEntityThemesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityThemes(requestParameters: OrganizationModelControllerApiUpdateEntityThemesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiThemeOutDocument>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Put UserGroup entity
     * @param {OrganizationModelControllerApiUpdateEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityUserGroups(requestParameters: OrganizationModelControllerApiUpdateEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     * User - represents entity interacting with platform
     * @summary Put User entity
     * @param {OrganizationModelControllerApiUpdateEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityUsers(requestParameters: OrganizationModelControllerApiUpdateEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutDocument>;
    /**
     * Space of the shared interest
     * @summary Put Workspace entity
     * @param {OrganizationModelControllerApiUpdateEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityWorkspaces(requestParameters: OrganizationModelControllerApiUpdateEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutDocument>;
}

/**
 * Request parameters for patchEntityColorPalettes operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiPatchEntityColorPalettesRequest
 */
export declare interface OrganizationModelControllerApiPatchEntityColorPalettesRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiPatchEntityColorPalettes
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiColorPalettePatchDocument}
     * @memberof OrganizationModelControllerApiPatchEntityColorPalettes
     */
    readonly jsonApiColorPalettePatchDocument: JsonApiColorPalettePatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiPatchEntityColorPalettes
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityCspDirectives operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiPatchEntityCspDirectivesRequest
 */
export declare interface OrganizationModelControllerApiPatchEntityCspDirectivesRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiPatchEntityCspDirectives
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiCspDirectivePatchDocument}
     * @memberof OrganizationModelControllerApiPatchEntityCspDirectives
     */
    readonly jsonApiCspDirectivePatchDocument: JsonApiCspDirectivePatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiPatchEntityCspDirectives
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityDataSources operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiPatchEntityDataSourcesRequest
 */
export declare interface OrganizationModelControllerApiPatchEntityDataSourcesRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiPatchEntityDataSources
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiDataSourcePatchDocument}
     * @memberof OrganizationModelControllerApiPatchEntityDataSources
     */
    readonly jsonApiDataSourcePatchDocument: JsonApiDataSourcePatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiPatchEntityDataSources
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityJwks operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiPatchEntityJwksRequest
 */
export declare interface OrganizationModelControllerApiPatchEntityJwksRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiPatchEntityJwks
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiJwkPatchDocument}
     * @memberof OrganizationModelControllerApiPatchEntityJwks
     */
    readonly jsonApiJwkPatchDocument: JsonApiJwkPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiPatchEntityJwks
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityOrganizationSettings operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiPatchEntityOrganizationSettingsRequest
 */
export declare interface OrganizationModelControllerApiPatchEntityOrganizationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiPatchEntityOrganizationSettings
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiOrganizationSettingPatchDocument}
     * @memberof OrganizationModelControllerApiPatchEntityOrganizationSettings
     */
    readonly jsonApiOrganizationSettingPatchDocument: JsonApiOrganizationSettingPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiPatchEntityOrganizationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityThemes operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiPatchEntityThemesRequest
 */
export declare interface OrganizationModelControllerApiPatchEntityThemesRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiPatchEntityThemes
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiThemePatchDocument}
     * @memberof OrganizationModelControllerApiPatchEntityThemes
     */
    readonly jsonApiThemePatchDocument: JsonApiThemePatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiPatchEntityThemes
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityUserGroups operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiPatchEntityUserGroupsRequest
 */
export declare interface OrganizationModelControllerApiPatchEntityUserGroupsRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiPatchEntityUserGroups
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiUserGroupPatchDocument}
     * @memberof OrganizationModelControllerApiPatchEntityUserGroups
     */
    readonly jsonApiUserGroupPatchDocument: JsonApiUserGroupPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiPatchEntityUserGroups
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'parents' | 'ALL'>}
     * @memberof OrganizationModelControllerApiPatchEntityUserGroups
     */
    readonly include?: Array<"userGroups" | "parents" | "ALL">;
}

/**
 * Request parameters for patchEntityUsers operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiPatchEntityUsersRequest
 */
export declare interface OrganizationModelControllerApiPatchEntityUsersRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiPatchEntityUsers
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiUserPatchDocument}
     * @memberof OrganizationModelControllerApiPatchEntityUsers
     */
    readonly jsonApiUserPatchDocument: JsonApiUserPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiPatchEntityUsers
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'ALL'>}
     * @memberof OrganizationModelControllerApiPatchEntityUsers
     */
    readonly include?: Array<"userGroups" | "ALL">;
}

/**
 * Request parameters for patchEntityWorkspaces operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiPatchEntityWorkspacesRequest
 */
export declare interface OrganizationModelControllerApiPatchEntityWorkspacesRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiPatchEntityWorkspaces
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiWorkspacePatchDocument}
     * @memberof OrganizationModelControllerApiPatchEntityWorkspaces
     */
    readonly jsonApiWorkspacePatchDocument: JsonApiWorkspacePatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiPatchEntityWorkspaces
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaces' | 'parent' | 'ALL'>}
     * @memberof OrganizationModelControllerApiPatchEntityWorkspaces
     */
    readonly include?: Array<"workspaces" | "parent" | "ALL">;
}

/**
 * Request parameters for updateEntityColorPalettes operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiUpdateEntityColorPalettesRequest
 */
export declare interface OrganizationModelControllerApiUpdateEntityColorPalettesRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiUpdateEntityColorPalettes
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiColorPaletteInDocument}
     * @memberof OrganizationModelControllerApiUpdateEntityColorPalettes
     */
    readonly jsonApiColorPaletteInDocument: JsonApiColorPaletteInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiUpdateEntityColorPalettes
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityCspDirectives operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiUpdateEntityCspDirectivesRequest
 */
export declare interface OrganizationModelControllerApiUpdateEntityCspDirectivesRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiUpdateEntityCspDirectives
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiCspDirectiveInDocument}
     * @memberof OrganizationModelControllerApiUpdateEntityCspDirectives
     */
    readonly jsonApiCspDirectiveInDocument: JsonApiCspDirectiveInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiUpdateEntityCspDirectives
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityDataSources operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiUpdateEntityDataSourcesRequest
 */
export declare interface OrganizationModelControllerApiUpdateEntityDataSourcesRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiUpdateEntityDataSources
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiDataSourceInDocument}
     * @memberof OrganizationModelControllerApiUpdateEntityDataSources
     */
    readonly jsonApiDataSourceInDocument: JsonApiDataSourceInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiUpdateEntityDataSources
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityJwks operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiUpdateEntityJwksRequest
 */
export declare interface OrganizationModelControllerApiUpdateEntityJwksRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiUpdateEntityJwks
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiJwkInDocument}
     * @memberof OrganizationModelControllerApiUpdateEntityJwks
     */
    readonly jsonApiJwkInDocument: JsonApiJwkInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiUpdateEntityJwks
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityOrganizationSettings operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiUpdateEntityOrganizationSettingsRequest
 */
export declare interface OrganizationModelControllerApiUpdateEntityOrganizationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiUpdateEntityOrganizationSettings
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiOrganizationSettingInDocument}
     * @memberof OrganizationModelControllerApiUpdateEntityOrganizationSettings
     */
    readonly jsonApiOrganizationSettingInDocument: JsonApiOrganizationSettingInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiUpdateEntityOrganizationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityThemes operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiUpdateEntityThemesRequest
 */
export declare interface OrganizationModelControllerApiUpdateEntityThemesRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiUpdateEntityThemes
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiThemeInDocument}
     * @memberof OrganizationModelControllerApiUpdateEntityThemes
     */
    readonly jsonApiThemeInDocument: JsonApiThemeInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiUpdateEntityThemes
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityUserGroups operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiUpdateEntityUserGroupsRequest
 */
export declare interface OrganizationModelControllerApiUpdateEntityUserGroupsRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiUpdateEntityUserGroups
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiUserGroupInDocument}
     * @memberof OrganizationModelControllerApiUpdateEntityUserGroups
     */
    readonly jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiUpdateEntityUserGroups
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'parents' | 'ALL'>}
     * @memberof OrganizationModelControllerApiUpdateEntityUserGroups
     */
    readonly include?: Array<"userGroups" | "parents" | "ALL">;
}

/**
 * Request parameters for updateEntityUsers operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiUpdateEntityUsersRequest
 */
export declare interface OrganizationModelControllerApiUpdateEntityUsersRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiUpdateEntityUsers
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiUserInDocument}
     * @memberof OrganizationModelControllerApiUpdateEntityUsers
     */
    readonly jsonApiUserInDocument: JsonApiUserInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiUpdateEntityUsers
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'ALL'>}
     * @memberof OrganizationModelControllerApiUpdateEntityUsers
     */
    readonly include?: Array<"userGroups" | "ALL">;
}

/**
 * Request parameters for updateEntityWorkspaces operation in OrganizationModelControllerApi.
 * @export
 * @interface OrganizationModelControllerApiUpdateEntityWorkspacesRequest
 */
export declare interface OrganizationModelControllerApiUpdateEntityWorkspacesRequest {
    /**
     *
     * @type {string}
     * @memberof OrganizationModelControllerApiUpdateEntityWorkspaces
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiWorkspaceInDocument}
     * @memberof OrganizationModelControllerApiUpdateEntityWorkspaces
     */
    readonly jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof OrganizationModelControllerApiUpdateEntityWorkspaces
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaces' | 'parent' | 'ALL'>}
     * @memberof OrganizationModelControllerApiUpdateEntityWorkspaces
     */
    readonly include?: Array<"workspaces" | "parent" | "ALL">;
}

/**
 * Tiger organization utility functions
 *
 * @internal
 */
export declare class OrganizationUtilities {
    /**
     * Guard for recognizing entities which support `included` field.
     * @internal
     */
    private static supportsIncluded;
    /**
     * Given a function to get a paged list of metadata entities, API call parameters and options, this function will
     * retrieve all pages from the metadata.
     *
     * The parameters are passed to the function as is. The options will be used as a 'template'. If the options specify
     * page `size`, it will be retained and used for paging. Otherwise the size will be set to a default value (250). The
     * `page` number will be added dynamically upon each page request.
     *
     * @param client - API client to use, this is required so that function can correctly bind 'this' for
     *  the entitiesGet function
     * @param entitiesGet - function to get pages list of entities
     * @param params - parameters accepted by the function
     * @param options - options accepted by the function
     * @internal
     */
    static getAllPagesOf: <T extends OrganizationGetEntitiesResult, P extends OrganizationGetEntitiesParams>(client: ITigerClient, entitiesGet: OrganizationGetEntitiesFn<T, P>, params: P, options?: AxiosRequestConfig) => Promise<T[]>;
    /**
     * This function merges multiple pages containing metadata entities into a single page. The entity data from different
     * pages are concatenated. The side-loaded entities are concatenated and their uniqueness is ensured so that same
     * entity sideloaded on multiple pages only appears once.
     *
     * The merges result WILL NOT contain any links section.
     *
     * @param pages - pages to merge
     * @internal
     */
    static mergeEntitiesResults<T extends OrganizationGetEntitiesResult>(pages: T[]): T;
}

/**
 * Current page description.
 * @export
 * @interface Paging
 */
export declare interface Paging {
    /**
     * Count of returnable items ignoring paging.
     * @type {number}
     * @memberof Paging
     */
    total: number;
    /**
     * Count of items in this page.
     * @type {number}
     * @memberof Paging
     */
    count: number;
    /**
     * Offset of this page.
     * @type {number}
     * @memberof Paging
     */
    offset: number;
    /**
     * Link to next page, or null if this is last page.
     * @type {string}
     * @memberof Paging
     */
    next?: string;
}

/**
 *
 * @export
 * @interface Parameter
 */
export declare interface Parameter {
    /**
     *
     * @type {string}
     * @memberof Parameter
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof Parameter
     */
    value: string;
}

/**
 * Export request object describing the export properties and metadata for pdf exports.
 * @export
 * @interface PdfExportRequest
 */
export declare interface PdfExportRequest {
    /**
     * File name to be used for retrieving the pdf document.
     * @type {string}
     * @memberof PdfExportRequest
     */
    fileName: string;
    /**
     * Dashboard identifier
     * @type {string}
     * @memberof PdfExportRequest
     */
    dashboardId: string;
    /**
     * Metadata definition in open form JSON format.
     * @type {object}
     * @memberof PdfExportRequest
     */
    metadata?: object;
}

/**
 * PDMDeclarativeAPIsApi - object-oriented interface
 * @export
 * @class PDMDeclarativeAPIsApi
 * @extends {BaseAPI}
 */
export declare class PDMDeclarativeAPIsApi extends MetadataBaseApi implements PDMDeclarativeAPIsApiInterface {
    /**
     * Retrieve complete layout of tables with their columns
     * @summary Get data source physical model layout
     * @param {PDMDeclarativeAPIsApiGetPdmLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof PDMDeclarativeAPIsApi
     */
    getPdmLayout(requestParameters: PDMDeclarativeAPIsApiGetPdmLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativePdm, any>>;
    /**
     * Sets complete layout of tables with their columns under corresponding Data Source.
     * @summary Set data source physical model layout
     * @param {PDMDeclarativeAPIsApiSetPdmLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof PDMDeclarativeAPIsApi
     */
    setPdmLayout(requestParameters: PDMDeclarativeAPIsApiSetPdmLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
}

/**
 * PDMDeclarativeAPIsApi - axios parameter creator
 * @export
 */
export declare const PDMDeclarativeAPIsApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     * Retrieve complete layout of tables with their columns
     * @summary Get data source physical model layout
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getPdmLayout: (dataSourceId: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Sets complete layout of tables with their columns under corresponding Data Source.
     * @summary Set data source physical model layout
     * @param {string} dataSourceId
     * @param {DeclarativePdm} declarativePdm
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    setPdmLayout: (dataSourceId: string, declarativePdm: DeclarativePdm, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * PDMDeclarativeAPIsApi - factory interface
 * @export
 */
export declare const PDMDeclarativeAPIsApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieve complete layout of tables with their columns
     * @summary Get data source physical model layout
     * @param {PDMDeclarativeAPIsApiGetPdmLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getPdmLayout(requestParameters: PDMDeclarativeAPIsApiGetPdmLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativePdm>;
    /**
     * Sets complete layout of tables with their columns under corresponding Data Source.
     * @summary Set data source physical model layout
     * @param {PDMDeclarativeAPIsApiSetPdmLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    setPdmLayout(requestParameters: PDMDeclarativeAPIsApiSetPdmLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
};

/**
 * PDMDeclarativeAPIsApi - functional programming interface
 * @export
 */
export declare const PDMDeclarativeAPIsApiFp: (configuration?: MetadataConfiguration) => {
    /**
     * Retrieve complete layout of tables with their columns
     * @summary Get data source physical model layout
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getPdmLayout(dataSourceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativePdm>>;
    /**
     * Sets complete layout of tables with their columns under corresponding Data Source.
     * @summary Set data source physical model layout
     * @param {string} dataSourceId
     * @param {DeclarativePdm} declarativePdm
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    setPdmLayout(dataSourceId: string, declarativePdm: DeclarativePdm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};

/**
 * Request parameters for getPdmLayout operation in PDMDeclarativeAPIsApi.
 * @export
 * @interface PDMDeclarativeAPIsApiGetPdmLayoutRequest
 */
export declare interface PDMDeclarativeAPIsApiGetPdmLayoutRequest {
    /**
     *
     * @type {string}
     * @memberof PDMDeclarativeAPIsApiGetPdmLayout
     */
    readonly dataSourceId: string;
}

/**
 * PDMDeclarativeAPIsApi - interface
 * @export
 * @interface PDMDeclarativeAPIsApi
 */
export declare interface PDMDeclarativeAPIsApiInterface {
    /**
     * Retrieve complete layout of tables with their columns
     * @summary Get data source physical model layout
     * @param {PDMDeclarativeAPIsApiGetPdmLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof PDMDeclarativeAPIsApiInterface
     */
    getPdmLayout(requestParameters: PDMDeclarativeAPIsApiGetPdmLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativePdm>;
    /**
     * Sets complete layout of tables with their columns under corresponding Data Source.
     * @summary Set data source physical model layout
     * @param {PDMDeclarativeAPIsApiSetPdmLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof PDMDeclarativeAPIsApiInterface
     */
    setPdmLayout(requestParameters: PDMDeclarativeAPIsApiSetPdmLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
}

/**
 * Request parameters for setPdmLayout operation in PDMDeclarativeAPIsApi.
 * @export
 * @interface PDMDeclarativeAPIsApiSetPdmLayoutRequest
 */
export declare interface PDMDeclarativeAPIsApiSetPdmLayoutRequest {
    /**
     *
     * @type {string}
     * @memberof PDMDeclarativeAPIsApiSetPdmLayout
     */
    readonly dataSourceId: string;
    /**
     *
     * @type {DeclarativePdm}
     * @memberof PDMDeclarativeAPIsApiSetPdmLayout
     */
    readonly declarativePdm: DeclarativePdm;
}

/**
 * PDM additions wrapper.
 * @export
 * @interface PdmLdmRequest
 */
export declare interface PdmLdmRequest {
    /**
     * List of SQL datasets.
     * @type {Array<PdmSql>}
     * @memberof PdmLdmRequest
     */
    sqls?: Array<PdmSql>;
    /**
     * List of physical database tables.
     * @type {Array<DeclarativeTable>}
     * @memberof PdmLdmRequest
     */
    tables?: Array<DeclarativeTable>;
}

/**
 * SQL dataset definition.
 * @export
 * @interface PdmSql
 */
export declare interface PdmSql {
    /**
     * SQL statement.
     * @type {string}
     * @memberof PdmSql
     */
    statement: string;
    /**
     * SQL dataset title.
     * @type {string}
     * @memberof PdmSql
     */
    title: string;
    /**
     * Columns defining SQL dataset.
     * @type {Array<SqlColumn>}
     * @memberof PdmSql
     */
    columns?: Array<SqlColumn>;
}

/**
 * PermissionsApi - object-oriented interface
 * @export
 * @class PermissionsApi
 * @extends {BaseAPI}
 */
export declare class PermissionsApi extends MetadataBaseApi implements PermissionsApiInterface {
    /**
     *
     * @summary Get Available Assignees
     * @param {PermissionsApiAvailableAssigneesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    availableAssignees(requestParameters: PermissionsApiAvailableAssigneesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<AvailableAssignees, any>>;
    /**
     *
     * @summary Get Dashboard Permissions
     * @param {PermissionsApiDashboardPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    dashboardPermissions(requestParameters: PermissionsApiDashboardPermissionsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DashboardPermissions, any>>;
    /**
     * Retrieve current set of permissions of the workspace in a declarative form.
     * @summary Get permissions for the workspace
     * @param {PermissionsApiGetWorkspacePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    getWorkspacePermissions(requestParameters: PermissionsApiGetWorkspacePermissionsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeWorkspacePermissions, any>>;
    /**
     *
     * @summary Manage Permissions for a Dashboard
     * @param {PermissionsApiManageDashboardPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    manageDashboardPermissions(requestParameters: PermissionsApiManageDashboardPermissionsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Set effective permissions for the workspace
     * @summary Set permissions for the workspace
     * @param {PermissionsApiSetWorkspacePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApi
     */
    setWorkspacePermissions(requestParameters: PermissionsApiSetWorkspacePermissionsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
}

/**
 * Request parameters for availableAssignees operation in PermissionsApi.
 * @export
 * @interface PermissionsApiAvailableAssigneesRequest
 */
export declare interface PermissionsApiAvailableAssigneesRequest {
    /**
     *
     * @type {string}
     * @memberof PermissionsApiAvailableAssignees
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof PermissionsApiAvailableAssignees
     */
    readonly dashboardId: string;
}

/**
 * PermissionsApi - axios parameter creator
 * @export
 */
export declare const PermissionsApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Get Available Assignees
     * @param {string} workspaceId
     * @param {string} dashboardId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    availableAssignees: (workspaceId: string, dashboardId: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get Dashboard Permissions
     * @param {string} workspaceId
     * @param {string} dashboardId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardPermissions: (workspaceId: string, dashboardId: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Retrieve current set of permissions of the workspace in a declarative form.
     * @summary Get permissions for the workspace
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspacePermissions: (workspaceId: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Manage Permissions for a Dashboard
     * @param {string} workspaceId
     * @param {string} dashboardId
     * @param {Array<PermissionsForAssignee>} permissionsForAssignee
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    manageDashboardPermissions: (workspaceId: string, dashboardId: string, permissionsForAssignee: Array<PermissionsForAssignee>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Set effective permissions for the workspace
     * @summary Set permissions for the workspace
     * @param {string} workspaceId
     * @param {DeclarativeWorkspacePermissions} declarativeWorkspacePermissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspacePermissions: (workspaceId: string, declarativeWorkspacePermissions: DeclarativeWorkspacePermissions, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * Request parameters for dashboardPermissions operation in PermissionsApi.
 * @export
 * @interface PermissionsApiDashboardPermissionsRequest
 */
export declare interface PermissionsApiDashboardPermissionsRequest {
    /**
     *
     * @type {string}
     * @memberof PermissionsApiDashboardPermissions
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof PermissionsApiDashboardPermissions
     */
    readonly dashboardId: string;
}

/**
 * PermissionsApi - factory interface
 * @export
 */
export declare const PermissionsApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get Available Assignees
     * @param {PermissionsApiAvailableAssigneesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    availableAssignees(requestParameters: PermissionsApiAvailableAssigneesRequest, options?: AxiosRequestConfig): AxiosPromise<AvailableAssignees>;
    /**
     *
     * @summary Get Dashboard Permissions
     * @param {PermissionsApiDashboardPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardPermissions(requestParameters: PermissionsApiDashboardPermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<DashboardPermissions>;
    /**
     * Retrieve current set of permissions of the workspace in a declarative form.
     * @summary Get permissions for the workspace
     * @param {PermissionsApiGetWorkspacePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspacePermissions(requestParameters: PermissionsApiGetWorkspacePermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeWorkspacePermissions>;
    /**
     *
     * @summary Manage Permissions for a Dashboard
     * @param {PermissionsApiManageDashboardPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    manageDashboardPermissions(requestParameters: PermissionsApiManageDashboardPermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Set effective permissions for the workspace
     * @summary Set permissions for the workspace
     * @param {PermissionsApiSetWorkspacePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspacePermissions(requestParameters: PermissionsApiSetWorkspacePermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
};

/**
 * PermissionsApi - functional programming interface
 * @export
 */
export declare const PermissionsApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Get Available Assignees
     * @param {string} workspaceId
     * @param {string} dashboardId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    availableAssignees(workspaceId: string, dashboardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvailableAssignees>>;
    /**
     *
     * @summary Get Dashboard Permissions
     * @param {string} workspaceId
     * @param {string} dashboardId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dashboardPermissions(workspaceId: string, dashboardId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardPermissions>>;
    /**
     * Retrieve current set of permissions of the workspace in a declarative form.
     * @summary Get permissions for the workspace
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspacePermissions(workspaceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeWorkspacePermissions>>;
    /**
     *
     * @summary Manage Permissions for a Dashboard
     * @param {string} workspaceId
     * @param {string} dashboardId
     * @param {Array<PermissionsForAssignee>} permissionsForAssignee
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    manageDashboardPermissions(workspaceId: string, dashboardId: string, permissionsForAssignee: Array<PermissionsForAssignee>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Set effective permissions for the workspace
     * @summary Set permissions for the workspace
     * @param {string} workspaceId
     * @param {DeclarativeWorkspacePermissions} declarativeWorkspacePermissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspacePermissions(workspaceId: string, declarativeWorkspacePermissions: DeclarativeWorkspacePermissions, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};

/**
 * Request parameters for getWorkspacePermissions operation in PermissionsApi.
 * @export
 * @interface PermissionsApiGetWorkspacePermissionsRequest
 */
export declare interface PermissionsApiGetWorkspacePermissionsRequest {
    /**
     *
     * @type {string}
     * @memberof PermissionsApiGetWorkspacePermissions
     */
    readonly workspaceId: string;
}

/**
 * PermissionsApi - interface
 * @export
 * @interface PermissionsApi
 */
export declare interface PermissionsApiInterface {
    /**
     *
     * @summary Get Available Assignees
     * @param {PermissionsApiAvailableAssigneesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApiInterface
     */
    availableAssignees(requestParameters: PermissionsApiAvailableAssigneesRequest, options?: AxiosRequestConfig): AxiosPromise<AvailableAssignees>;
    /**
     *
     * @summary Get Dashboard Permissions
     * @param {PermissionsApiDashboardPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApiInterface
     */
    dashboardPermissions(requestParameters: PermissionsApiDashboardPermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<DashboardPermissions>;
    /**
     * Retrieve current set of permissions of the workspace in a declarative form.
     * @summary Get permissions for the workspace
     * @param {PermissionsApiGetWorkspacePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApiInterface
     */
    getWorkspacePermissions(requestParameters: PermissionsApiGetWorkspacePermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeWorkspacePermissions>;
    /**
     *
     * @summary Manage Permissions for a Dashboard
     * @param {PermissionsApiManageDashboardPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApiInterface
     */
    manageDashboardPermissions(requestParameters: PermissionsApiManageDashboardPermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Set effective permissions for the workspace
     * @summary Set permissions for the workspace
     * @param {PermissionsApiSetWorkspacePermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionsApiInterface
     */
    setWorkspacePermissions(requestParameters: PermissionsApiSetWorkspacePermissionsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
}

/**
 * Request parameters for manageDashboardPermissions operation in PermissionsApi.
 * @export
 * @interface PermissionsApiManageDashboardPermissionsRequest
 */
export declare interface PermissionsApiManageDashboardPermissionsRequest {
    /**
     *
     * @type {string}
     * @memberof PermissionsApiManageDashboardPermissions
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof PermissionsApiManageDashboardPermissions
     */
    readonly dashboardId: string;
    /**
     *
     * @type {Array<PermissionsForAssignee>}
     * @memberof PermissionsApiManageDashboardPermissions
     */
    readonly permissionsForAssignee: Array<PermissionsForAssignee>;
}

/**
 * Request parameters for setWorkspacePermissions operation in PermissionsApi.
 * @export
 * @interface PermissionsApiSetWorkspacePermissionsRequest
 */
export declare interface PermissionsApiSetWorkspacePermissionsRequest {
    /**
     *
     * @type {string}
     * @memberof PermissionsApiSetWorkspacePermissions
     */
    readonly workspaceId: string;
    /**
     *
     * @type {DeclarativeWorkspacePermissions}
     * @memberof PermissionsApiSetWorkspacePermissions
     */
    readonly declarativeWorkspacePermissions: DeclarativeWorkspacePermissions;
}

/**
 * Desired levels of permissions for an assignee.
 * @export
 * @interface PermissionsForAssignee
 */
export declare interface PermissionsForAssignee {
    /**
     *
     * @type {AssigneeIdentifier}
     * @memberof PermissionsForAssignee
     */
    assigneeIdentifier: AssigneeIdentifier;
    /**
     *
     * @type {Array<string>}
     * @memberof PermissionsForAssignee
     */
    permissions: Array<PermissionsForAssigneePermissionsEnum>;
}

export declare const PermissionsForAssigneePermissionsEnum: {
    readonly EDIT: "EDIT";
    readonly SHARE: "SHARE";
    readonly VIEW: "VIEW";
};

export declare type PermissionsForAssigneePermissionsEnum = typeof PermissionsForAssigneePermissionsEnum[keyof typeof PermissionsForAssigneePermissionsEnum];

/**
 *
 * @export
 * @interface PlatformUsage
 */
export declare interface PlatformUsage {
    /**
     *
     * @type {string}
     * @memberof PlatformUsage
     */
    name: PlatformUsageNameEnum;
    /**
     *
     * @type {number}
     * @memberof PlatformUsage
     */
    count?: number;
}

export declare const PlatformUsageNameEnum: {
    readonly USER_COUNT: "UserCount";
    readonly WORKSPACE_COUNT: "WorkspaceCount";
};

export declare type PlatformUsageNameEnum = typeof PlatformUsageNameEnum[keyof typeof PlatformUsageNameEnum];

/**
 *
 * @export
 * @interface PlatformUsageRequest
 */
export declare interface PlatformUsageRequest {
    /**
     *
     * @type {Array<string>}
     * @memberof PlatformUsageRequest
     */
    usageItemNames: Array<PlatformUsageRequestUsageItemNamesEnum>;
}

export declare const PlatformUsageRequestUsageItemNamesEnum: {
    readonly USER_COUNT: "UserCount";
    readonly WORKSPACE_COUNT: "WorkspaceCount";
};

export declare type PlatformUsageRequestUsageItemNamesEnum = typeof PlatformUsageRequestUsageItemNamesEnum[keyof typeof PlatformUsageRequestUsageItemNamesEnum];

/**
 * PluginsApi - object-oriented interface
 * @export
 * @class PluginsApi
 * @extends {BaseAPI}
 */
export declare class PluginsApi extends MetadataBaseApi implements PluginsApiInterface {
    /**
     *
     * @summary Post Plugins
     * @param {PluginsApiCreateEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    createEntityDashboardPlugins(requestParameters: PluginsApiCreateEntityDashboardPluginsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDashboardPluginOutDocument, any>>;
    /**
     *
     * @summary Delete a Plugin
     * @param {PluginsApiDeleteEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    deleteEntityDashboardPlugins(requestParameters: PluginsApiDeleteEntityDashboardPluginsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Get all Plugins
     * @param {PluginsApiGetAllEntitiesDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    getAllEntitiesDashboardPlugins(requestParameters: PluginsApiGetAllEntitiesDashboardPluginsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDashboardPluginOutList, any>>;
    /**
     *
     * @summary Get a Plugin
     * @param {PluginsApiGetEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    getEntityDashboardPlugins(requestParameters: PluginsApiGetEntityDashboardPluginsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDashboardPluginOutDocument, any>>;
    /**
     *
     * @summary Patch a Plugin
     * @param {PluginsApiPatchEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    patchEntityDashboardPlugins(requestParameters: PluginsApiPatchEntityDashboardPluginsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDashboardPluginOutDocument, any>>;
    /**
     *
     * @summary Put a Plugin
     * @param {PluginsApiUpdateEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    updateEntityDashboardPlugins(requestParameters: PluginsApiUpdateEntityDashboardPluginsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDashboardPluginOutDocument, any>>;
}

/**
 * PluginsApi - axios parameter creator
 * @export
 */
export declare const PluginsApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post Plugins
     * @param {string} workspaceId
     * @param {JsonApiDashboardPluginPostOptionalIdDocument} jsonApiDashboardPluginPostOptionalIdDocument
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDashboardPlugins: (workspaceId: string, jsonApiDashboardPluginPostOptionalIdDocument: JsonApiDashboardPluginPostOptionalIdDocument, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Plugin
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDashboardPlugins: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Plugins
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDashboardPlugins: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Plugin
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDashboardPlugins: (workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Plugin
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiDashboardPluginPatchDocument} jsonApiDashboardPluginPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityDashboardPlugins: (workspaceId: string, objectId: string, jsonApiDashboardPluginPatchDocument: JsonApiDashboardPluginPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a Plugin
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDashboardPlugins: (workspaceId: string, objectId: string, jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument, filter?: string, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * Request parameters for createEntityDashboardPlugins operation in PluginsApi.
 * @export
 * @interface PluginsApiCreateEntityDashboardPluginsRequest
 */
export declare interface PluginsApiCreateEntityDashboardPluginsRequest {
    /**
     *
     * @type {string}
     * @memberof PluginsApiCreateEntityDashboardPlugins
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiDashboardPluginPostOptionalIdDocument}
     * @memberof PluginsApiCreateEntityDashboardPlugins
     */
    readonly jsonApiDashboardPluginPostOptionalIdDocument: JsonApiDashboardPluginPostOptionalIdDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof PluginsApiCreateEntityDashboardPlugins
     */
    readonly include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof PluginsApiCreateEntityDashboardPlugins
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for deleteEntityDashboardPlugins operation in PluginsApi.
 * @export
 * @interface PluginsApiDeleteEntityDashboardPluginsRequest
 */
export declare interface PluginsApiDeleteEntityDashboardPluginsRequest {
    /**
     *
     * @type {string}
     * @memberof PluginsApiDeleteEntityDashboardPlugins
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof PluginsApiDeleteEntityDashboardPlugins
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof PluginsApiDeleteEntityDashboardPlugins
     */
    readonly filter?: string;
}

/**
 * PluginsApi - factory interface
 * @export
 */
export declare const PluginsApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Post Plugins
     * @param {PluginsApiCreateEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDashboardPlugins(requestParameters: PluginsApiCreateEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @summary Delete a Plugin
     * @param {PluginsApiDeleteEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDashboardPlugins(requestParameters: PluginsApiDeleteEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all Plugins
     * @param {PluginsApiGetAllEntitiesDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDashboardPlugins(requestParameters: PluginsApiGetAllEntitiesDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutList>;
    /**
     *
     * @summary Get a Plugin
     * @param {PluginsApiGetEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDashboardPlugins(requestParameters: PluginsApiGetEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @summary Patch a Plugin
     * @param {PluginsApiPatchEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityDashboardPlugins(requestParameters: PluginsApiPatchEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @summary Put a Plugin
     * @param {PluginsApiUpdateEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDashboardPlugins(requestParameters: PluginsApiUpdateEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutDocument>;
};

/**
 * PluginsApi - functional programming interface
 * @export
 */
export declare const PluginsApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post Plugins
     * @param {string} workspaceId
     * @param {JsonApiDashboardPluginPostOptionalIdDocument} jsonApiDashboardPluginPostOptionalIdDocument
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDashboardPlugins(workspaceId: string, jsonApiDashboardPluginPostOptionalIdDocument: JsonApiDashboardPluginPostOptionalIdDocument, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDashboardPluginOutDocument>>;
    /**
     *
     * @summary Delete a Plugin
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDashboardPlugins(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get all Plugins
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDashboardPlugins(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDashboardPluginOutList>>;
    /**
     *
     * @summary Get a Plugin
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDashboardPlugins(workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDashboardPluginOutDocument>>;
    /**
     *
     * @summary Patch a Plugin
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiDashboardPluginPatchDocument} jsonApiDashboardPluginPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityDashboardPlugins(workspaceId: string, objectId: string, jsonApiDashboardPluginPatchDocument: JsonApiDashboardPluginPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDashboardPluginOutDocument>>;
    /**
     *
     * @summary Put a Plugin
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDashboardPlugins(workspaceId: string, objectId: string, jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument, filter?: string, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDashboardPluginOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesDashboardPlugins operation in PluginsApi.
 * @export
 * @interface PluginsApiGetAllEntitiesDashboardPluginsRequest
 */
export declare interface PluginsApiGetAllEntitiesDashboardPluginsRequest {
    /**
     *
     * @type {string}
     * @memberof PluginsApiGetAllEntitiesDashboardPlugins
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof PluginsApiGetAllEntitiesDashboardPlugins
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof PluginsApiGetAllEntitiesDashboardPlugins
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof PluginsApiGetAllEntitiesDashboardPlugins
     */
    readonly include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof PluginsApiGetAllEntitiesDashboardPlugins
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof PluginsApiGetAllEntitiesDashboardPlugins
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof PluginsApiGetAllEntitiesDashboardPlugins
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof PluginsApiGetAllEntitiesDashboardPlugins
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof PluginsApiGetAllEntitiesDashboardPlugins
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityDashboardPlugins operation in PluginsApi.
 * @export
 * @interface PluginsApiGetEntityDashboardPluginsRequest
 */
export declare interface PluginsApiGetEntityDashboardPluginsRequest {
    /**
     *
     * @type {string}
     * @memberof PluginsApiGetEntityDashboardPlugins
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof PluginsApiGetEntityDashboardPlugins
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof PluginsApiGetEntityDashboardPlugins
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof PluginsApiGetEntityDashboardPlugins
     */
    readonly include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof PluginsApiGetEntityDashboardPlugins
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof PluginsApiGetEntityDashboardPlugins
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * PluginsApi - interface
 * @export
 * @interface PluginsApi
 */
export declare interface PluginsApiInterface {
    /**
     *
     * @summary Post Plugins
     * @param {PluginsApiCreateEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    createEntityDashboardPlugins(requestParameters: PluginsApiCreateEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @summary Delete a Plugin
     * @param {PluginsApiDeleteEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    deleteEntityDashboardPlugins(requestParameters: PluginsApiDeleteEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all Plugins
     * @param {PluginsApiGetAllEntitiesDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    getAllEntitiesDashboardPlugins(requestParameters: PluginsApiGetAllEntitiesDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutList>;
    /**
     *
     * @summary Get a Plugin
     * @param {PluginsApiGetEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    getEntityDashboardPlugins(requestParameters: PluginsApiGetEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @summary Patch a Plugin
     * @param {PluginsApiPatchEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    patchEntityDashboardPlugins(requestParameters: PluginsApiPatchEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @summary Put a Plugin
     * @param {PluginsApiUpdateEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    updateEntityDashboardPlugins(requestParameters: PluginsApiUpdateEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutDocument>;
}

/**
 * Request parameters for patchEntityDashboardPlugins operation in PluginsApi.
 * @export
 * @interface PluginsApiPatchEntityDashboardPluginsRequest
 */
export declare interface PluginsApiPatchEntityDashboardPluginsRequest {
    /**
     *
     * @type {string}
     * @memberof PluginsApiPatchEntityDashboardPlugins
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof PluginsApiPatchEntityDashboardPlugins
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiDashboardPluginPatchDocument}
     * @memberof PluginsApiPatchEntityDashboardPlugins
     */
    readonly jsonApiDashboardPluginPatchDocument: JsonApiDashboardPluginPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof PluginsApiPatchEntityDashboardPlugins
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof PluginsApiPatchEntityDashboardPlugins
     */
    readonly include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for updateEntityDashboardPlugins operation in PluginsApi.
 * @export
 * @interface PluginsApiUpdateEntityDashboardPluginsRequest
 */
export declare interface PluginsApiUpdateEntityDashboardPluginsRequest {
    /**
     *
     * @type {string}
     * @memberof PluginsApiUpdateEntityDashboardPlugins
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof PluginsApiUpdateEntityDashboardPlugins
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiDashboardPluginInDocument}
     * @memberof PluginsApiUpdateEntityDashboardPlugins
     */
    readonly jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof PluginsApiUpdateEntityDashboardPlugins
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof PluginsApiUpdateEntityDashboardPlugins
     */
    readonly include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 *
 * @export
 * @interface PopDataset
 */
export declare interface PopDataset {
    /**
     *
     * @type {AfmObjectIdentifierDataset}
     * @memberof PopDataset
     */
    dataset: AfmObjectIdentifierDataset;
    /**
     *
     * @type {number}
     * @memberof PopDataset
     */
    periodsAgo: number;
}

/**
 * Previous period type of metric.
 * @export
 * @interface PopDatasetMeasureDefinition
 */
export declare interface PopDatasetMeasureDefinition {
    /**
     *
     * @type {PopDatasetMeasureDefinitionPreviousPeriodMeasure}
     * @memberof PopDatasetMeasureDefinition
     */
    previousPeriodMeasure: PopDatasetMeasureDefinitionPreviousPeriodMeasure;
}

/**
 *
 * @export
 * @interface PopDatasetMeasureDefinitionPreviousPeriodMeasure
 */
export declare interface PopDatasetMeasureDefinitionPreviousPeriodMeasure {
    /**
     *
     * @type {AfmLocalIdentifier}
     * @memberof PopDatasetMeasureDefinitionPreviousPeriodMeasure
     */
    measureIdentifier: AfmLocalIdentifier;
    /**
     *
     * @type {Array<PopDataset>}
     * @memberof PopDatasetMeasureDefinitionPreviousPeriodMeasure
     */
    dateDatasets: Array<PopDataset>;
}

/**
 *
 * @export
 * @interface PopDate
 */
export declare interface PopDate {
    /**
     *
     * @type {AfmObjectIdentifierAttribute}
     * @memberof PopDate
     */
    attribute: AfmObjectIdentifierAttribute;
    /**
     *
     * @type {number}
     * @memberof PopDate
     */
    periodsAgo: number;
}

/**
 * Period over period type of metric.
 * @export
 * @interface PopDateMeasureDefinition
 */
export declare interface PopDateMeasureDefinition {
    /**
     *
     * @type {PopDateMeasureDefinitionOverPeriodMeasure}
     * @memberof PopDateMeasureDefinition
     */
    overPeriodMeasure: PopDateMeasureDefinitionOverPeriodMeasure;
}

/**
 *
 * @export
 * @interface PopDateMeasureDefinitionOverPeriodMeasure
 */
export declare interface PopDateMeasureDefinitionOverPeriodMeasure {
    /**
     *
     * @type {AfmLocalIdentifier}
     * @memberof PopDateMeasureDefinitionOverPeriodMeasure
     */
    measureIdentifier: AfmLocalIdentifier;
    /**
     *
     * @type {Array<PopDate>}
     * @memberof PopDateMeasureDefinitionOverPeriodMeasure
     */
    dateAttributes: Array<PopDate>;
}

/**
 * @type PopMeasureDefinition
 * @export
 */
export declare type PopMeasureDefinition = PopDatasetMeasureDefinition | PopDateMeasureDefinition;

/**
 * Filter able to limit element values by label and related selected elements.
 * @export
 * @interface PositiveAttributeFilter
 */
export declare interface PositiveAttributeFilter {
    /**
     *
     * @type {PositiveAttributeFilterPositiveAttributeFilter}
     * @memberof PositiveAttributeFilter
     */
    positiveAttributeFilter: PositiveAttributeFilterPositiveAttributeFilter;
}

/**
 *
 * @export
 * @interface PositiveAttributeFilterPositiveAttributeFilter
 */
export declare interface PositiveAttributeFilterPositiveAttributeFilter {
    /**
     *
     * @type {AttributeFilterElements}
     * @memberof PositiveAttributeFilterPositiveAttributeFilter
     */
    in: AttributeFilterElements;
    /**
     *
     * @type {boolean}
     * @memberof PositiveAttributeFilterPositiveAttributeFilter
     */
    applyOnResult?: boolean;
    /**
     *
     * @type {AfmIdentifier}
     * @memberof PositiveAttributeFilterPositiveAttributeFilter
     */
    label: AfmIdentifier;
}

export declare interface ProfileApiInterface {
    getCurrent: () => Promise<IUserProfile>;
}

/**
 * Filter the result by comparing specified metric to given range of values.
 * @export
 * @interface RangeMeasureValueFilter
 */
export declare interface RangeMeasureValueFilter {
    /**
     *
     * @type {RangeMeasureValueFilterRangeMeasureValueFilter}
     * @memberof RangeMeasureValueFilter
     */
    rangeMeasureValueFilter: RangeMeasureValueFilterRangeMeasureValueFilter;
}

/**
 *
 * @export
 * @interface RangeMeasureValueFilterRangeMeasureValueFilter
 */
export declare interface RangeMeasureValueFilterRangeMeasureValueFilter {
    /**
     *
     * @type {number}
     * @memberof RangeMeasureValueFilterRangeMeasureValueFilter
     */
    treatNullValuesAs?: number;
    /**
     *
     * @type {string}
     * @memberof RangeMeasureValueFilterRangeMeasureValueFilter
     */
    operator: RangeMeasureValueFilterRangeMeasureValueFilterOperatorEnum;
    /**
     *
     * @type {number}
     * @memberof RangeMeasureValueFilterRangeMeasureValueFilter
     */
    from: number;
    /**
     *
     * @type {number}
     * @memberof RangeMeasureValueFilterRangeMeasureValueFilter
     */
    to: number;
    /**
     *
     * @type {boolean}
     * @memberof RangeMeasureValueFilterRangeMeasureValueFilter
     */
    applyOnResult?: boolean;
    /**
     *
     * @type {AfmIdentifier}
     * @memberof RangeMeasureValueFilterRangeMeasureValueFilter
     */
    measure: AfmIdentifier;
}

export declare const RangeMeasureValueFilterRangeMeasureValueFilterOperatorEnum: {
    readonly BETWEEN: "BETWEEN";
    readonly NOT_BETWEEN: "NOT_BETWEEN";
};

export declare type RangeMeasureValueFilterRangeMeasureValueFilterOperatorEnum = typeof RangeMeasureValueFilterRangeMeasureValueFilterOperatorEnum[keyof typeof RangeMeasureValueFilterRangeMeasureValueFilterOperatorEnum];

/**
 * Filter the result on top/bottom N values according to given metric(s).
 * @export
 * @interface RankingFilter
 */
export declare interface RankingFilter {
    /**
     *
     * @type {RankingFilterRankingFilter}
     * @memberof RankingFilter
     */
    rankingFilter: RankingFilterRankingFilter;
}

/**
 *
 * @export
 * @interface RankingFilterRankingFilter
 */
export declare interface RankingFilterRankingFilter {
    /**
     *
     * @type {Array<AfmIdentifier>}
     * @memberof RankingFilterRankingFilter
     */
    measures: Array<AfmIdentifier>;
    /**
     *
     * @type {string}
     * @memberof RankingFilterRankingFilter
     */
    operator: RankingFilterRankingFilterOperatorEnum;
    /**
     *
     * @type {number}
     * @memberof RankingFilterRankingFilter
     */
    value: number;
    /**
     *
     * @type {boolean}
     * @memberof RankingFilterRankingFilter
     */
    applyOnResult?: boolean;
}

export declare const RankingFilterRankingFilterOperatorEnum: {
    readonly TOP: "TOP";
    readonly BOTTOM: "BOTTOM";
};

export declare type RankingFilterRankingFilterOperatorEnum = typeof RankingFilterRankingFilterOperatorEnum[keyof typeof RankingFilterRankingFilterOperatorEnum];

/**
 * A reference identifier.
 * @export
 * @interface ReferenceIdentifier
 */
export declare interface ReferenceIdentifier {
    /**
     * Reference ID.
     * @type {string}
     * @memberof ReferenceIdentifier
     */
    id: string;
    /**
     * A type of the reference.
     * @type {string}
     * @memberof ReferenceIdentifier
     */
    type: ReferenceIdentifierTypeEnum;
}

export declare const ReferenceIdentifierTypeEnum: {
    readonly DATASET: "dataset";
};

export declare type ReferenceIdentifierTypeEnum = typeof ReferenceIdentifierTypeEnum[keyof typeof ReferenceIdentifierTypeEnum];

/**
 * A date filter specifying a time interval that is relative to the current date. For example, last week, next month, and so on. Field dataset is representing qualifier of date dimension.
 * @export
 * @interface RelativeDateFilter
 */
export declare interface RelativeDateFilter {
    /**
     *
     * @type {RelativeDateFilterRelativeDateFilter}
     * @memberof RelativeDateFilter
     */
    relativeDateFilter: RelativeDateFilterRelativeDateFilter;
}

/**
 *
 * @export
 * @interface RelativeDateFilterRelativeDateFilter
 */
export declare interface RelativeDateFilterRelativeDateFilter {
    /**
     * Date granularity specifying particular date attribute in given dimension.
     * @type {string}
     * @memberof RelativeDateFilterRelativeDateFilter
     */
    granularity: RelativeDateFilterRelativeDateFilterGranularityEnum;
    /**
     * Start of the filtering interval. Specified by number of periods (with respect to given granularity). Typically negative (historical time interval like -2 for \'2 days/weeks, ... ago\').
     * @type {number}
     * @memberof RelativeDateFilterRelativeDateFilter
     */
    from: number;
    /**
     * End of the filtering interval. Specified by number of periods (with respect to given granularity). Value \'O\' is representing current time-interval (current day, week, ...).
     * @type {number}
     * @memberof RelativeDateFilterRelativeDateFilter
     */
    to: number;
    /**
     *
     * @type {boolean}
     * @memberof RelativeDateFilterRelativeDateFilter
     */
    applyOnResult?: boolean;
    /**
     *
     * @type {AfmObjectIdentifierDataset}
     * @memberof RelativeDateFilterRelativeDateFilter
     */
    dataset: AfmObjectIdentifierDataset;
}

export declare const RelativeDateFilterRelativeDateFilterGranularityEnum: {
    readonly MINUTE: "MINUTE";
    readonly HOUR: "HOUR";
    readonly DAY: "DAY";
    readonly WEEK: "WEEK";
    readonly MONTH: "MONTH";
    readonly QUARTER: "QUARTER";
    readonly YEAR: "YEAR";
    readonly MINUTE_OF_HOUR: "MINUTE_OF_HOUR";
    readonly HOUR_OF_DAY: "HOUR_OF_DAY";
    readonly DAY_OF_WEEK: "DAY_OF_WEEK";
    readonly DAY_OF_MONTH: "DAY_OF_MONTH";
    readonly DAY_OF_YEAR: "DAY_OF_YEAR";
    readonly WEEK_OF_YEAR: "WEEK_OF_YEAR";
    readonly MONTH_OF_YEAR: "MONTH_OF_YEAR";
    readonly QUARTER_OF_YEAR: "QUARTER_OF_YEAR";
};

export declare type RelativeDateFilterRelativeDateFilterGranularityEnum = typeof RelativeDateFilterRelativeDateFilterGranularityEnum[keyof typeof RelativeDateFilterRelativeDateFilterGranularityEnum];

/**
 * ReportingSettingsApi - object-oriented interface
 * @export
 * @class ReportingSettingsApi
 * @extends {BaseAPI}
 */
export declare class ReportingSettingsApi extends MetadataBaseApi implements ReportingSettingsApiInterface {
    /**
     * Resolves values for all settings without workspace by current user, organization, or default settings.
     * @summary Values for all settings without workspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportingSettingsApi
     */
    resolveAllSettingsWithoutWorkspace(options?: AxiosRequestConfig): Promise<AxiosResponse<ResolvedSetting[], any>>;
    /**
     * Resolves values for selected settings without workspace by current user, organization, or default settings.
     * @summary Values for selected settings without workspace.
     * @param {ReportingSettingsApiResolveSettingsWithoutWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportingSettingsApi
     */
    resolveSettingsWithoutWorkspace(requestParameters: ReportingSettingsApiResolveSettingsWithoutWorkspaceRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ResolvedSetting[], any>>;
}

/**
 * ReportingSettingsApi - axios parameter creator
 * @export
 */
export declare const ReportingSettingsApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     * Resolves values for all settings without workspace by current user, organization, or default settings.
     * @summary Values for all settings without workspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveAllSettingsWithoutWorkspace: (options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Resolves values for selected settings without workspace by current user, organization, or default settings.
     * @summary Values for selected settings without workspace.
     * @param {ResolveSettingsRequest} resolveSettingsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveSettingsWithoutWorkspace: (resolveSettingsRequest: ResolveSettingsRequest, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * ReportingSettingsApi - factory interface
 * @export
 */
export declare const ReportingSettingsApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Resolves values for all settings without workspace by current user, organization, or default settings.
     * @summary Values for all settings without workspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveAllSettingsWithoutWorkspace(options?: AxiosRequestConfig): AxiosPromise<Array<ResolvedSetting>>;
    /**
     * Resolves values for selected settings without workspace by current user, organization, or default settings.
     * @summary Values for selected settings without workspace.
     * @param {ReportingSettingsApiResolveSettingsWithoutWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveSettingsWithoutWorkspace(requestParameters: ReportingSettingsApiResolveSettingsWithoutWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ResolvedSetting>>;
};

/**
 * ReportingSettingsApi - functional programming interface
 * @export
 */
export declare const ReportingSettingsApiFp: (configuration?: MetadataConfiguration) => {
    /**
     * Resolves values for all settings without workspace by current user, organization, or default settings.
     * @summary Values for all settings without workspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveAllSettingsWithoutWorkspace(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResolvedSetting>>>;
    /**
     * Resolves values for selected settings without workspace by current user, organization, or default settings.
     * @summary Values for selected settings without workspace.
     * @param {ResolveSettingsRequest} resolveSettingsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resolveSettingsWithoutWorkspace(resolveSettingsRequest: ResolveSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResolvedSetting>>>;
};

/**
 * ReportingSettingsApi - interface
 * @export
 * @interface ReportingSettingsApi
 */
export declare interface ReportingSettingsApiInterface {
    /**
     * Resolves values for all settings without workspace by current user, organization, or default settings.
     * @summary Values for all settings without workspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportingSettingsApiInterface
     */
    resolveAllSettingsWithoutWorkspace(options?: AxiosRequestConfig): AxiosPromise<Array<ResolvedSetting>>;
    /**
     * Resolves values for selected settings without workspace by current user, organization, or default settings.
     * @summary Values for selected settings without workspace.
     * @param {ReportingSettingsApiResolveSettingsWithoutWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportingSettingsApiInterface
     */
    resolveSettingsWithoutWorkspace(requestParameters: ReportingSettingsApiResolveSettingsWithoutWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ResolvedSetting>>;
}

/**
 * Request parameters for resolveSettingsWithoutWorkspace operation in ReportingSettingsApi.
 * @export
 * @interface ReportingSettingsApiResolveSettingsWithoutWorkspaceRequest
 */
export declare interface ReportingSettingsApiResolveSettingsWithoutWorkspaceRequest {
    /**
     *
     * @type {ResolveSettingsRequest}
     * @memberof ReportingSettingsApiResolveSettingsWithoutWorkspace
     */
    readonly resolveSettingsRequest: ResolveSettingsRequest;
}

/**
 * Setting and its value.
 * @export
 * @interface ResolvedSetting
 */
export declare interface ResolvedSetting {
    /**
     * Setting ID. Formerly used to identify a type of a particular setting, going to be removed in a favor of setting\'s type.
     * @type {string}
     * @memberof ResolvedSetting
     * @deprecated
     */
    id: string;
    /**
     * A definition of the metric in JSON format.
     * @type {object}
     * @memberof ResolvedSetting
     */
    content?: object;
    /**
     * Type of the setting.
     * @type {string}
     * @memberof ResolvedSetting
     */
    type?: ResolvedSettingTypeEnum;
}

export declare const ResolvedSettingTypeEnum: {
    readonly TIMEZONE: "TIMEZONE";
    readonly ACTIVE_THEME: "ACTIVE_THEME";
    readonly ACTIVE_COLOR_PALETTE: "ACTIVE_COLOR_PALETTE";
    readonly WHITE_LABELING: "WHITE_LABELING";
    readonly LOCALE: "LOCALE";
    readonly FORMAT_LOCALE: "FORMAT_LOCALE";
    readonly MAPBOX_TOKEN: "MAPBOX_TOKEN";
    readonly WEEK_START: "WEEK_START";
};

export declare type ResolvedSettingTypeEnum = typeof ResolvedSettingTypeEnum[keyof typeof ResolvedSettingTypeEnum];

/**
 * A request containing setting IDs to resolve.
 * @export
 * @interface ResolveSettingsRequest
 */
export declare interface ResolveSettingsRequest {
    /**
     * An array of setting IDs to resolve.
     * @type {Array<string>}
     * @memberof ResolveSettingsRequest
     */
    settings: Array<string>;
}

/**
 * Object identifier.
 * @export
 * @interface RestApiIdentifier
 */
export declare interface RestApiIdentifier {
    /**
     *
     * @type {string}
     * @memberof RestApiIdentifier
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof RestApiIdentifier
     */
    type: string;
}

/**
 * All execution result\'s metadata used for calculation including ExecutionResponse
 * @export
 * @interface ResultCacheMetadata
 */
export declare interface ResultCacheMetadata {
    /**
     *
     * @type {AFM}
     * @memberof ResultCacheMetadata
     */
    afm: AFM;
    /**
     *
     * @type {ExecutionResponse}
     * @memberof ResultCacheMetadata
     */
    executionResponse: ExecutionResponse;
    /**
     *
     * @type {ResultSpec}
     * @memberof ResultCacheMetadata
     */
    resultSpec: ResultSpec;
    /**
     *
     * @type {number}
     * @memberof ResultCacheMetadata
     */
    resultSize: number;
}

/**
 *
 * @export
 * @interface ResultDimension
 */
export declare interface ResultDimension {
    /**
     *
     * @type {Array<ResultDimensionHeader>}
     * @memberof ResultDimension
     */
    headers: Array<ResultDimensionHeader>;
    /**
     *
     * @type {string}
     * @memberof ResultDimension
     */
    localIdentifier: string;
}

/**
 * @type ResultDimensionHeader
 * @export
 */
export declare type ResultDimensionHeader = AttributeHeaderOut | MeasureGroupHeaders;

/**
 * Specifies how the result data will be formatted (```dimensions```) and which additional data shall be computed (```totals```).
 * @export
 * @interface ResultSpec
 */
export declare interface ResultSpec {
    /**
     *
     * @type {Array<Dimension>}
     * @memberof ResultSpec
     */
    dimensions: Array<Dimension>;
    /**
     *
     * @type {Array<Total>}
     * @memberof ResultSpec
     */
    totals?: Array<Total>;
}

/**
 *
 * @export
 * @interface RsaSpecification
 */
export declare interface RsaSpecification {
    /**
     *
     * @type {string}
     * @memberof RsaSpecification
     */
    kty: RsaSpecificationKtyEnum;
    /**
     *
     * @type {string}
     * @memberof RsaSpecification
     */
    alg: RsaSpecificationAlgEnum;
    /**
     *
     * @type {string}
     * @memberof RsaSpecification
     */
    use: RsaSpecificationUseEnum;
    /**
     *
     * @type {Array<string>}
     * @memberof RsaSpecification
     */
    x5c: Array<string>;
    /**
     *
     * @type {string}
     * @memberof RsaSpecification
     */
    n: string;
    /**
     *
     * @type {string}
     * @memberof RsaSpecification
     */
    e: string;
    /**
     *
     * @type {string}
     * @memberof RsaSpecification
     */
    kid: string;
    /**
     *
     * @type {string}
     * @memberof RsaSpecification
     */
    x5t: string;
}

export declare const RsaSpecificationAlgEnum: {
    readonly RS256: "RS256";
    readonly RS384: "RS384";
    readonly RS512: "RS512";
};

export declare type RsaSpecificationAlgEnum = typeof RsaSpecificationAlgEnum[keyof typeof RsaSpecificationAlgEnum];

export declare const RsaSpecificationKtyEnum: {
    readonly RSA: "RSA";
};

export declare type RsaSpecificationKtyEnum = typeof RsaSpecificationKtyEnum[keyof typeof RsaSpecificationKtyEnum];

export declare const RsaSpecificationUseEnum: {
    readonly SIG: "sig";
};

export declare type RsaSpecificationUseEnum = typeof RsaSpecificationUseEnum[keyof typeof RsaSpecificationUseEnum];

/**
 * A SQL query result column.
 * @export
 * @interface SqlColumn
 */
export declare interface ScanApiSqlColumn {
    /**
     * Column name
     * @type {string}
     * @memberof SqlColumn
     */
    name: string;
    /**
     * Column type
     * @type {string}
     * @memberof SqlColumn
     */
    dataType: ScanApiSqlColumnDataTypeEnum;
}

export declare const ScanApiSqlColumnDataTypeEnum: {
    readonly INT: "INT";
    readonly STRING: "STRING";
    readonly DATE: "DATE";
    readonly NUMERIC: "NUMERIC";
    readonly TIMESTAMP: "TIMESTAMP";
    readonly TIMESTAMP_TZ: "TIMESTAMP_TZ";
    readonly BOOLEAN: "BOOLEAN";
};

export declare type ScanApiSqlColumnDataTypeEnum = typeof ScanApiSqlColumnDataTypeEnum[keyof typeof ScanApiSqlColumnDataTypeEnum];

/**
 * ActionsApi - interface
 * @export
 * @interface ActionsApi
 */
export declare interface ScanModelActionsApiInterface {
    /**
     * It scans a database and reads metadata. The result of the request contains a list of schema names of a database.
     * @summary Get a list of schema names of a database
     * @param {ActionsApiGetDataSourceSchemataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    getDataSourceSchemata(requestParameters: ActionsApiGetDataSourceSchemataRequest, options?: AxiosRequestConfig): AxiosPromise<DataSourceSchemata>;
    /**
     * It scans a database and transforms its metadata to a declarative definition of the physical data model (PDM). The result of the request contains the mentioned physical data model (PDM) of a database within warning, for example, about unsupported columns.
     * @summary Scan a database to get a physical data model (PDM)
     * @param {ActionsApiScanDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    scanDataSource(requestParameters: ActionsApiScanDataSourceRequest, options?: AxiosRequestConfig): AxiosPromise<ScanResultPdm>;
    /**
     * It executes SQL query against specified data source and extracts metadata. Metadata consist of column names and column data types. It can optionally provide also preview of data returned by SQL query
     * @summary Collect metadata about SQL query
     * @param {ActionsApiScanSqlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    scanSql(requestParameters: ActionsApiScanSqlRequest, options?: AxiosRequestConfig): AxiosPromise<ScanSqlResponse>;
    /**
     * Test if it is possible to connect to a database using an existing data source definition.
     * @summary Test data source connection by data source id
     * @param {ActionsApiTestDataSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    testDataSource(requestParameters: ActionsApiTestDataSourceRequest, options?: AxiosRequestConfig): AxiosPromise<TestResponse>;
    /**
     * Test if it is possible to connect to a database using a connection provided by the data source definition in the request body.
     * @summary Test connection by data source definition
     * @param {ActionsApiTestDataSourceDefinitionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApiInterface
     */
    testDataSourceDefinition(requestParameters: ActionsApiTestDataSourceDefinitionRequest, options?: AxiosRequestConfig): AxiosPromise<TestResponse>;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export declare class ScanModelBaseApi {
    protected basePath: string;
    protected axios: AxiosInstance;
    protected configuration: ScanModelConfiguration | undefined;
    constructor(configuration?: ScanModelConfiguration, basePath?: string, axios?: AxiosInstance);
}

export declare class ScanModelConfiguration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;
    constructor(param?: ScanModelConfigurationParameters);
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    isJsonMime(mime: string): boolean;
}

/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
export declare interface ScanModelConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    baseOptions?: any;
    formDataCtor?: new () => any;
}

/**
 * A table column.
 * @export
 * @interface DeclarativeColumn
 */
export declare interface ScanModelDeclarativeColumn {
    /**
     * Column name
     * @type {string}
     * @memberof DeclarativeColumn
     */
    name: string;
    /**
     * Column type
     * @type {string}
     * @memberof DeclarativeColumn
     */
    dataType: ScanModelDeclarativeColumnDataTypeEnum;
    /**
     * Is column part of primary key?
     * @type {boolean}
     * @memberof DeclarativeColumn
     */
    isPrimaryKey?: boolean;
    /**
     * Referenced table (Foreign key)
     * @type {string}
     * @memberof DeclarativeColumn
     */
    referencedTableId?: string;
    /**
     * Referenced table (Foreign key)
     * @type {string}
     * @memberof DeclarativeColumn
     */
    referencedTableColumn?: string;
}

export declare const ScanModelDeclarativeColumnDataTypeEnum: {
    readonly INT: "INT";
    readonly STRING: "STRING";
    readonly DATE: "DATE";
    readonly NUMERIC: "NUMERIC";
    readonly TIMESTAMP: "TIMESTAMP";
    readonly TIMESTAMP_TZ: "TIMESTAMP_TZ";
    readonly BOOLEAN: "BOOLEAN";
};

export declare type ScanModelDeclarativeColumnDataTypeEnum = typeof ScanModelDeclarativeColumnDataTypeEnum[keyof typeof ScanModelDeclarativeColumnDataTypeEnum];

/**
 * A database table.
 * @export
 * @interface DeclarativeTable
 */
export declare interface ScanModelDeclarativeTable {
    /**
     * Table id.
     * @type {string}
     * @memberof DeclarativeTable
     */
    id: string;
    /**
     * Path to table.
     * @type {Array<string>}
     * @memberof DeclarativeTable
     */
    path: Array<string>;
    /**
     * Table type: TABLE or VIEW.
     * @type {string}
     * @memberof DeclarativeTable
     */
    type: string;
    /**
     * Table or view name prefix used in scan. Will be stripped when generating LDM.
     * @type {string}
     * @memberof DeclarativeTable
     */
    namePrefix?: string;
    /**
     * An array of physical columns
     * @type {Array<DeclarativeColumn>}
     * @memberof DeclarativeTable
     */
    columns: Array<ScanModelDeclarativeColumn>;
}

/**
 * A physical data model (PDM) tables.
 * @export
 * @interface DeclarativeTables
 */
export declare interface ScanModelDeclarativeTables {
    /**
     * An array of physical database tables.
     * @type {Array<DeclarativeTable>}
     * @memberof DeclarativeTables
     */
    tables: Array<ScanModelDeclarativeTable>;
}

/**
 *
 * @export
 * @interface RequestArgs
 */
export declare interface ScanModelRequestArgs {
    url: string;
    options: AxiosRequestConfig;
}

/**
 * A request containing all information critical to model scanning.
 * @export
 * @interface ScanRequest
 */
export declare interface ScanRequest {
    /**
     * A separator between prefixes and the names.
     * @type {string}
     * @memberof ScanRequest
     */
    separator: string;
    /**
     * A flag indicating whether the tables should be scanned.
     * @type {boolean}
     * @memberof ScanRequest
     */
    scanTables: boolean;
    /**
     * A flag indicating whether the views should be scanned.
     * @type {boolean}
     * @memberof ScanRequest
     */
    scanViews: boolean;
    /**
     * What schemata will be scanned.
     * @type {Array<string>}
     * @memberof ScanRequest
     */
    schemata?: Array<string>;
    /**
     * Tables starting with this prefix will be scanned. The prefix is then followed by the value of `separator` parameter. Given the table prefix is `out_table` and separator is `__`, the table with name like `out_table__customers` will be scanned.
     * @type {string}
     * @memberof ScanRequest
     */
    tablePrefix?: string;
    /**
     * Views starting with this prefix will be scanned. The prefix is then followed by the value of `separator` parameter. Given the view prefix is `out_view` and separator is `__`, the table with name like `out_view__us_customers` will be scanned.
     * @type {string}
     * @memberof ScanRequest
     */
    viewPrefix?: string;
}

/**
 * Result of scan of data source physical model.
 * @export
 * @interface ScanResultPdm
 */
export declare interface ScanResultPdm {
    /**
     *
     * @type {DeclarativeTables}
     * @memberof ScanResultPdm
     */
    pdm: ScanModelDeclarativeTables;
    /**
     *
     * @type {Array<TableWarning>}
     * @memberof ScanResultPdm
     */
    warnings: Array<TableWarning>;
}

/**
 * A request with SQL query to by analyzed.
 * @export
 * @interface ScanSqlRequest
 */
export declare interface ScanSqlRequest {
    /**
     * SQL query to be analyzed.
     * @type {string}
     * @memberof ScanSqlRequest
     */
    sql: string;
}

/**
 * Result of scanSql. Consists of array of query columns including type. Sql query result data preview can be attached optionally
 * @export
 * @interface ScanSqlResponse
 */
export declare interface ScanSqlResponse {
    /**
     * Array of columns with types.
     * @type {Array<SqlColumn>}
     * @memberof ScanSqlResponse
     */
    columns: Array<ScanApiSqlColumn>;
    /**
     * Array of rows where each row is another array of string values.
     * @type {Array<Array<string>>}
     * @memberof ScanSqlResponse
     */
    dataPreview?: Array<Array<string>>;
}

/**
 * Sets or clears Authorization token to use in the provided axios instance. If the token is provided,
 * then it will be used in `common` Authorization header which will be sent on all requests.
 *
 * If the token is undefined, the common Authorization header setting will be removed from axios config.
 *
 * @param axios - an instance of axios to update with authorization token
 * @param token - token to set or undefined to clear
 * @public
 */
export declare function setAxiosAuthorizationToken(axios: AxiosInstance, token: string | undefined): void;

/**
 * This function sets global API token to send in Authorization header on all API calls done by axios. If the token is
 * undefined then no Authorization header will be sent.
 *
 * Make your code obtain the token as you see fit (for instance from env variable available in CLI tool) and set
 * it before calling {@link newAxios}.
 *
 * Note: this setting WILL NOT reflect any existing `AxiosInstance`s. It will be in effect for all new
 * instances created by calling {@link newAxios}.
 *
 * @param token - token to set; if undefined to
 * @public
 */
export declare function setGlobalAuthorizationToken(token: string | undefined): void;

/**
 * XLSX specific settings.
 * @export
 * @interface Settings
 */
export declare interface Settings {
    /**
     * Merge equal headers in neighbouring cells.
     * @type {boolean}
     * @memberof Settings
     */
    mergeHeaders: boolean;
    /**
     * Print applied filters on top of the document.
     * @type {boolean}
     * @memberof Settings
     */
    showFilters: boolean;
}

/**
 *
 * @export
 * @interface SimpleMeasureDefinition
 */
export declare interface SimpleMeasureDefinition {
    /**
     *
     * @type {SimpleMeasureDefinitionMeasure}
     * @memberof SimpleMeasureDefinition
     */
    measure: SimpleMeasureDefinitionMeasure;
}

/**
 *
 * @export
 * @interface SimpleMeasureDefinitionMeasure
 */
export declare interface SimpleMeasureDefinitionMeasure {
    /**
     *
     * @type {AfmObjectIdentifierCore}
     * @memberof SimpleMeasureDefinitionMeasure
     */
    item: AfmObjectIdentifierCore;
    /**
     * Definition of aggregation type of the metric.
     * @type {string}
     * @memberof SimpleMeasureDefinitionMeasure
     */
    aggregation?: SimpleMeasureDefinitionMeasureAggregationEnum;
    /**
     * If true compute the percentage of given metric values (broken down by AFM attributes) to the total (not broken down).
     * @type {boolean}
     * @memberof SimpleMeasureDefinitionMeasure
     */
    computeRatio?: boolean;
    /**
     * Metrics can be filtered by attribute filters with the same interface as ones for global AFM. Note that only one DateFilter is allowed.
     * @type {Array<FilterDefinitionForSimpleMeasure>}
     * @memberof SimpleMeasureDefinitionMeasure
     */
    filters?: Array<FilterDefinitionForSimpleMeasure>;
}

export declare const SimpleMeasureDefinitionMeasureAggregationEnum: {
    readonly SUM: "SUM";
    readonly COUNT: "COUNT";
    readonly AVG: "AVG";
    readonly MIN: "MIN";
    readonly MAX: "MAX";
    readonly MEDIAN: "MEDIAN";
    readonly RUNSUM: "RUNSUM";
    readonly APPROXIMATE_COUNT: "APPROXIMATE_COUNT";
};

export declare type SimpleMeasureDefinitionMeasureAggregationEnum = typeof SimpleMeasureDefinitionMeasureAggregationEnum[keyof typeof SimpleMeasureDefinitionMeasureAggregationEnum];

/**
 * @type SortKey
 * @export
 */
export declare type SortKey = SortKeyAttribute | SortKeyTotal | SortKeyValue;

/**
 * @public
 */
declare type SortKey_2 = SortKeyAttribute | SortKeyValue;

/**
 * Sorting rule for sorting by attribute value in current dimension.
 * @export
 * @interface SortKeyAttribute
 */
export declare interface SortKeyAttribute {
    /**
     *
     * @type {SortKeyAttributeAttribute}
     * @memberof SortKeyAttribute
     */
    attribute: SortKeyAttributeAttribute;
}

/**
 *
 * @export
 * @interface SortKeyAttributeAttribute
 */
export declare interface SortKeyAttributeAttribute {
    /**
     * Item reference (to \'itemIdentifiers\') referencing, which item should be used for sorting. Only references to attributes are allowed.
     * @type {string}
     * @memberof SortKeyAttributeAttribute
     */
    attributeIdentifier: string;
    /**
     * Mechanism by which this attribute should be sorted. Available options are: - DEFAULT: sorting based on default rules (using sort column if defined, otherwise this label)  - LABEL: sorting by this label values  - ATTRIBUTE: sorting by values of this label\'s attribute (or rather the primary label)  - AREA: sorting by area (total or subtotal) corresponding to each attribute value. The area is computed by summing up all metric values in all other dimensions.
     * @type {string}
     * @memberof SortKeyAttributeAttribute
     */
    sortType?: SortKeyAttributeAttributeSortTypeEnum;
    /**
     * Sorting elements - ascending/descending order.
     * @type {string}
     * @memberof SortKeyAttributeAttribute
     */
    direction?: SortKeyAttributeAttributeDirectionEnum;
}

export declare const SortKeyAttributeAttributeDirectionEnum: {
    readonly ASC: "ASC";
    readonly DESC: "DESC";
};

export declare type SortKeyAttributeAttributeDirectionEnum = typeof SortKeyAttributeAttributeDirectionEnum[keyof typeof SortKeyAttributeAttributeDirectionEnum];

export declare const SortKeyAttributeAttributeSortTypeEnum: {
    readonly DEFAULT: "DEFAULT";
    readonly LABEL: "LABEL";
    readonly ATTRIBUTE: "ATTRIBUTE";
    readonly AREA: "AREA";
};

export declare type SortKeyAttributeAttributeSortTypeEnum = typeof SortKeyAttributeAttributeSortTypeEnum[keyof typeof SortKeyAttributeAttributeSortTypeEnum];

/**
 * Sorting rule for sorting by total value. DataColumnLocators are only required if there is ambiguity. Locator for measureGroup is taken from the metric of the total.
 * @export
 * @interface SortKeyTotal
 */
export declare interface SortKeyTotal {
    /**
     *
     * @type {SortKeyTotalTotal}
     * @memberof SortKeyTotal
     */
    total: SortKeyTotalTotal;
}

/**
 *
 * @export
 * @interface SortKeyTotalTotal
 */
export declare interface SortKeyTotalTotal {
    /**
     *
     * @type {string}
     * @memberof SortKeyTotalTotal
     */
    totalIdentifier: string;
    /**
     *
     * @type {DataColumnLocators}
     * @memberof SortKeyTotalTotal
     */
    dataColumnLocators?: DataColumnLocators;
    /**
     * Sorting elements - ascending/descending order.
     * @type {string}
     * @memberof SortKeyTotalTotal
     */
    direction?: SortKeyTotalTotalDirectionEnum;
}

export declare const SortKeyTotalTotalDirectionEnum: {
    readonly ASC: "ASC";
    readonly DESC: "DESC";
};

export declare type SortKeyTotalTotalDirectionEnum = typeof SortKeyTotalTotalDirectionEnum[keyof typeof SortKeyTotalTotalDirectionEnum];

/**
 * Sorting rule for sorting by measure value. DataColumnLocators for each dimension opposite to the sorted one must be specified.
 * @export
 * @interface SortKeyValue
 */
export declare interface SortKeyValue {
    /**
     *
     * @type {SortKeyValueValue}
     * @memberof SortKeyValue
     */
    value: SortKeyValueValue;
}

/**
 *
 * @export
 * @interface SortKeyValueValue
 */
export declare interface SortKeyValueValue {
    /**
     *
     * @type {DataColumnLocators}
     * @memberof SortKeyValueValue
     */
    dataColumnLocators: DataColumnLocators;
    /**
     * Sorting elements - ascending/descending order.
     * @type {string}
     * @memberof SortKeyValueValue
     */
    direction?: SortKeyValueValueDirectionEnum;
}

export declare const SortKeyValueValueDirectionEnum: {
    readonly ASC: "ASC";
    readonly DESC: "DESC";
};

export declare type SortKeyValueValueDirectionEnum = typeof SortKeyValueValueDirectionEnum[keyof typeof SortKeyValueValueDirectionEnum];

/**
 * Columns defining SQL dataset.
 * @export
 * @interface SqlColumn
 */
export declare interface SqlColumn {
    /**
     * Column name.
     * @type {string}
     * @memberof SqlColumn
     */
    name: string;
    /**
     * Column data type.
     * @type {string}
     * @memberof SqlColumn
     */
    dataType: SqlColumnDataTypeEnum;
}

export declare const SqlColumnDataTypeEnum: {
    readonly INT: "INT";
    readonly STRING: "STRING";
    readonly DATE: "DATE";
    readonly NUMERIC: "NUMERIC";
    readonly TIMESTAMP: "TIMESTAMP";
    readonly TIMESTAMP_TZ: "TIMESTAMP_TZ";
    readonly BOOLEAN: "BOOLEAN";
};

export declare type SqlColumnDataTypeEnum = typeof SqlColumnDataTypeEnum[keyof typeof SqlColumnDataTypeEnum];

/**
 * Warnings related to single table.
 * @export
 * @interface TableWarning
 */
export declare interface TableWarning {
    /**
     * Table name.
     * @type {Array<string>}
     * @memberof TableWarning
     */
    name: Array<string>;
    /**
     * Warning message related to the table.
     * @type {Array<string>}
     * @memberof TableWarning
     */
    message?: Array<string>;
    /**
     *
     * @type {Array<ColumnWarning>}
     * @memberof TableWarning
     */
    columns: Array<ColumnWarning>;
}

/**
 * Export request object describing the export properties and overrides for tabular exports.
 * @export
 * @interface TabularExportRequest
 */
export declare interface TabularExportRequest {
    /**
     * Expected file format.
     * @type {string}
     * @memberof TabularExportRequest
     */
    format: TabularExportRequestFormatEnum;
    /**
     * Execution result identifier.
     * @type {string}
     * @memberof TabularExportRequest
     */
    executionResult: string;
    /**
     * Filename of downloaded file without extension.
     * @type {string}
     * @memberof TabularExportRequest
     */
    fileName: string;
    /**
     *
     * @type {Settings}
     * @memberof TabularExportRequest
     */
    settings?: Settings;
    /**
     *
     * @type {CustomOverride}
     * @memberof TabularExportRequest
     */
    customOverride?: CustomOverride;
}

export declare const TabularExportRequestFormatEnum: {
    readonly CSV: "CSV";
    readonly XLSX: "XLSX";
};

export declare type TabularExportRequestFormatEnum = typeof TabularExportRequestFormatEnum[keyof typeof TabularExportRequestFormatEnum];

/**
 * A request containing all information for testing data source definition.
 * @export
 * @interface TestDefinitionRequest
 */
export declare interface TestDefinitionRequest {
    /**
     * Type of database, where test should connect to.
     * @type {string}
     * @memberof TestDefinitionRequest
     */
    type: TestDefinitionRequestTypeEnum;
    /**
     * URL to database in JDBC format, where test should connect to.
     * @type {string}
     * @memberof TestDefinitionRequest
     */
    url?: string;
    /**
     * Database schema.
     * @type {string}
     * @memberof TestDefinitionRequest
     */
    schema?: string;
    /**
     * Database user name.
     * @type {string}
     * @memberof TestDefinitionRequest
     */
    username?: string;
    /**
     * Database user password.
     * @type {string}
     * @memberof TestDefinitionRequest
     */
    password?: string;
    /**
     * Secret for token based authentication for data sources which supports it.
     * @type {string}
     * @memberof TestDefinitionRequest
     */
    token?: string;
    /**
     *
     * @type {Array<DataSourceParameter>}
     * @memberof TestDefinitionRequest
     */
    parameters?: Array<DataSourceParameter>;
}

export declare const TestDefinitionRequestTypeEnum: {
    readonly POSTGRESQL: "POSTGRESQL";
    readonly REDSHIFT: "REDSHIFT";
    readonly VERTICA: "VERTICA";
    readonly SNOWFLAKE: "SNOWFLAKE";
    readonly ADS: "ADS";
    readonly BIGQUERY: "BIGQUERY";
    readonly MSSQL: "MSSQL";
    readonly PRESTO: "PRESTO";
    readonly DREMIO: "DREMIO";
    readonly DRILL: "DRILL";
    readonly GREENPLUM: "GREENPLUM";
    readonly AZURESQL: "AZURESQL";
    readonly SYNAPSESQL: "SYNAPSESQL";
    readonly DATABRICKS: "DATABRICKS";
};

export declare type TestDefinitionRequestTypeEnum = typeof TestDefinitionRequestTypeEnum[keyof typeof TestDefinitionRequestTypeEnum];

/**
 * A structure containing duration of the test queries run on a data source. It is omitted if an error happens.
 * @export
 * @interface TestQueryDuration
 */
export declare interface TestQueryDuration {
    /**
     * Field containing duration of a test select query on a data source. In milliseconds.
     * @type {number}
     * @memberof TestQueryDuration
     */
    simpleSelect: number;
    /**
     * Field containing duration of a test \'create table as select\' query on a datasource. In milliseconds. The field is omitted if a data source doesn\'t support caching.
     * @type {number}
     * @memberof TestQueryDuration
     */
    createCacheTable?: number;
}

/**
 * A request containing all information for testing existing data source.
 * @export
 * @interface TestRequest
 */
export declare interface TestRequest {
    /**
     * URL to database in JDBC format, where test should connect to.
     * @type {string}
     * @memberof TestRequest
     */
    url?: string;
    /**
     * Database schema.
     * @type {string}
     * @memberof TestRequest
     */
    schema?: string;
    /**
     * Database user name.
     * @type {string}
     * @memberof TestRequest
     */
    username?: string;
    /**
     * Database user password.
     * @type {string}
     * @memberof TestRequest
     */
    password?: string;
    /**
     * Secret for token based authentication for data sources which supports it.
     * @type {string}
     * @memberof TestRequest
     */
    token?: string;
    /**
     * Enable caching of intermediate results.
     * @type {boolean}
     * @memberof TestRequest
     */
    enableCaching?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof TestRequest
     */
    cachePath?: Array<string>;
    /**
     *
     * @type {Array<DataSourceParameter>}
     * @memberof TestRequest
     */
    parameters?: Array<DataSourceParameter>;
}

/**
 * Response from data source testing.
 * @export
 * @interface TestResponse
 */
export declare interface TestResponse {
    /**
     * A flag indicating whether test passed or not.
     * @type {boolean}
     * @memberof TestResponse
     */
    successful: boolean;
    /**
     * Field containing more details in case of a failure. Details are available to a privileged user only.
     * @type {string}
     * @memberof TestResponse
     */
    error?: string;
    /**
     *
     * @type {TestQueryDuration}
     * @memberof TestResponse
     */
    queryDurationMillis?: TestQueryDuration;
}

export declare const tigerActionsClientFactory: (axios: AxiosInstance) => ActionsApiInterface;

export declare const tigerAfmExplainClientFactory: (axios: AxiosInstance) => Pick<AfmActionsApiInterface, "explainAFM">;

export declare const tigerAuthActionsClientFactory: (axios: AxiosInstance) => AuthActionsApiInterface;

/**
 * Tiger execution client
 *
 */
export declare const tigerClientFactory: (axios: AxiosInstance) => ITigerClient;

export declare const tigerEntitiesObjectsClientFactory: (axios: AxiosInstance) => EntitiesApiInterface;

/**
 * Tiger execution client factory
 */
export declare const tigerExecutionClientFactory: (axios: AxiosInstance) => Pick<AfmActionsApiInterface, "computeReport">;

/**
 * Tiger execution result client factory
 *
 */
export declare const tigerExecutionResultClientFactory: (axios: AxiosInstance) => Pick<AfmActionsApiInterface, "retrieveResult">;

export declare const tigerExportClientFactory: (axios: AxiosInstance) => ExportActionsApiInterface;

export declare const tigerLabelElementsClientFactory: (axios: AxiosInstance) => Pick<AfmActionsApiInterface, "computeLabelElementsPost">;

export declare const tigerLayoutClientFactory: (axios: AxiosInstance) => LayoutApiInterface;

export declare const tigerProfileClientFactory: (axios: AxiosInstance) => ProfileApiInterface;

export declare const tigerScanModelClientFactory: (axios: AxiosInstance) => ScanModelActionsApiInterface;

export declare const tigerValidObjectsClientFactory: (axios: AxiosInstance) => Pick<AfmActionsApiInterface, "computeValidObjects">;

/**
 * Definition of a total. There are two types of totals: grand totals and subtotals. Grand total data will be returned in a separate section of the result structure while subtotals are fully integrated into the main result data. The mechanism for this distinction is automatic and it\'s described in `TotalDimension`
 * @export
 * @interface Total
 */
export declare interface Total {
    /**
     * Total identification within this request. Used e.g. in sorting by a total.
     * @type {string}
     * @memberof Total
     */
    localIdentifier: string;
    /**
     * Aggregation function to compute the total.
     * @type {string}
     * @memberof Total
     */
    function: TotalFunctionEnum;
    /**
     * The metric for which the total will be computed
     * @type {string}
     * @memberof Total
     */
    metric: string;
    /**
     *
     * @type {Array<TotalDimension>}
     * @memberof Total
     */
    totalDimensions: Array<TotalDimension>;
}

/**
 * A list of dimensions across which the total will be computed. Total headers for only these dimensions will be returned in the result.
 * @export
 * @interface TotalDimension
 */
export declare interface TotalDimension {
    /**
     * An identifier of a dimension for which the total will be computed.
     * @type {string}
     * @memberof TotalDimension
     */
    dimensionIdentifier: string;
    /**
     * List of dimension items which will be used for total computation. The total is a grand total in this dimension if the list is empty or it includes the first dimension item from the dimension definition, and its data and header will be returned in a separate `ExecutionResultGrandTotal` structure. Otherwise, it is a subtotal and the data will be integrated into the main result.
     * @type {Array<string>}
     * @memberof TotalDimension
     */
    totalDimensionItems: Array<string>;
}

/**
 *
 * @export
 * @interface TotalExecutionResultHeader
 */
export declare interface TotalExecutionResultHeader {
    /**
     *
     * @type {TotalResultHeader}
     * @memberof TotalExecutionResultHeader
     */
    totalHeader: TotalResultHeader;
}

export declare const TotalFunctionEnum: {
    readonly SUM: "SUM";
    readonly MIN: "MIN";
    readonly MAX: "MAX";
    readonly AVG: "AVG";
    readonly MED: "MED";
};

export declare type TotalFunctionEnum = typeof TotalFunctionEnum[keyof typeof TotalFunctionEnum];

/**
 * Header containing the information related to a subtotal.
 * @export
 * @interface TotalResultHeader
 */
export declare interface TotalResultHeader {
    /**
     *
     * @type {string}
     * @memberof TotalResultHeader
     */
    function: string;
}

/**
 * @public
 */
declare type TotalType = "sum" | "avg" | "max" | "min" | "nat" | "med";

/**
 * UsageApi - object-oriented interface
 * @export
 * @class UsageApi
 * @extends {BaseAPI}
 */
export declare class UsageApi extends MetadataBaseApi implements UsageApiInterface {
    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageApi
     */
    allPlatformUsage(options?: AxiosRequestConfig): Promise<AxiosResponse<PlatformUsage[], any>>;
    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage for particular items.
     * @param {UsageApiParticularPlatformUsageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageApi
     */
    particularPlatformUsage(requestParameters: UsageApiParticularPlatformUsageRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<PlatformUsage[], any>>;
}

/**
 * UsageApi - axios parameter creator
 * @export
 */
export declare const UsageApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    allPlatformUsage: (options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage for particular items.
     * @param {PlatformUsageRequest} platformUsageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    particularPlatformUsage: (platformUsageRequest: PlatformUsageRequest, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * UsageApi - factory interface
 * @export
 */
export declare const UsageApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    allPlatformUsage(options?: AxiosRequestConfig): AxiosPromise<Array<PlatformUsage>>;
    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage for particular items.
     * @param {UsageApiParticularPlatformUsageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    particularPlatformUsage(requestParameters: UsageApiParticularPlatformUsageRequest, options?: AxiosRequestConfig): AxiosPromise<Array<PlatformUsage>>;
};

/**
 * UsageApi - functional programming interface
 * @export
 */
export declare const UsageApiFp: (configuration?: MetadataConfiguration) => {
    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    allPlatformUsage(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlatformUsage>>>;
    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage for particular items.
     * @param {PlatformUsageRequest} platformUsageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    particularPlatformUsage(platformUsageRequest: PlatformUsageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlatformUsage>>>;
};

/**
 * UsageApi - interface
 * @export
 * @interface UsageApi
 */
export declare interface UsageApiInterface {
    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageApiInterface
     */
    allPlatformUsage(options?: AxiosRequestConfig): AxiosPromise<Array<PlatformUsage>>;
    /**
     * Provides information about platform usage, like amount of users, workspaces, ...
     * @summary Info about the platform usage for particular items.
     * @param {UsageApiParticularPlatformUsageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageApiInterface
     */
    particularPlatformUsage(requestParameters: UsageApiParticularPlatformUsageRequest, options?: AxiosRequestConfig): AxiosPromise<Array<PlatformUsage>>;
}

/**
 * Request parameters for particularPlatformUsage operation in UsageApi.
 * @export
 * @interface UsageApiParticularPlatformUsageRequest
 */
export declare interface UsageApiParticularPlatformUsageRequest {
    /**
     *
     * @type {PlatformUsageRequest}
     * @memberof UsageApiParticularPlatformUsage
     */
    readonly platformUsageRequest: PlatformUsageRequest;
}

/**
 * List of users
 * @export
 * @interface UserAssignee
 */
export declare interface UserAssignee {
    /**
     *
     * @type {string}
     * @memberof UserAssignee
     */
    id: string;
    /**
     * User name
     * @type {string}
     * @memberof UserAssignee
     */
    name?: string;
    /**
     * User email address
     * @type {string}
     * @memberof UserAssignee
     */
    email?: string;
}

/**
 * UserDataFiltersApi - object-oriented interface
 * @export
 * @class UserDataFiltersApi
 * @extends {BaseAPI}
 */
export declare class UserDataFiltersApi extends MetadataBaseApi implements UserDataFiltersApiInterface {
    /**
     * Retrieve current user data filters assigned to the workspace.
     * @summary Get user data filters
     * @param {UserDataFiltersApiGetUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserDataFiltersApi
     */
    getUserDataFilters(requestParameters: UserDataFiltersApiGetUserDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeUserDataFilters, any>>;
    /**
     * Set user data filters assigned to the workspace.
     * @summary Set user data filters
     * @param {UserDataFiltersApiSetUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserDataFiltersApi
     */
    setUserDataFilters(requestParameters: UserDataFiltersApiSetUserDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
}

/**
 * UserDataFiltersApi - axios parameter creator
 * @export
 */
export declare const UserDataFiltersApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     * Retrieve current user data filters assigned to the workspace.
     * @summary Get user data filters
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserDataFilters: (workspaceId: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Set user data filters assigned to the workspace.
     * @summary Set user data filters
     * @param {string} workspaceId
     * @param {DeclarativeUserDataFilters} declarativeUserDataFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserDataFilters: (workspaceId: string, declarativeUserDataFilters: DeclarativeUserDataFilters, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * UserDataFiltersApi - factory interface
 * @export
 */
export declare const UserDataFiltersApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieve current user data filters assigned to the workspace.
     * @summary Get user data filters
     * @param {UserDataFiltersApiGetUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserDataFilters(requestParameters: UserDataFiltersApiGetUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeUserDataFilters>;
    /**
     * Set user data filters assigned to the workspace.
     * @summary Set user data filters
     * @param {UserDataFiltersApiSetUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserDataFilters(requestParameters: UserDataFiltersApiSetUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
};

/**
 * UserDataFiltersApi - functional programming interface
 * @export
 */
export declare const UserDataFiltersApiFp: (configuration?: MetadataConfiguration) => {
    /**
     * Retrieve current user data filters assigned to the workspace.
     * @summary Get user data filters
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserDataFilters(workspaceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeUserDataFilters>>;
    /**
     * Set user data filters assigned to the workspace.
     * @summary Set user data filters
     * @param {string} workspaceId
     * @param {DeclarativeUserDataFilters} declarativeUserDataFilters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserDataFilters(workspaceId: string, declarativeUserDataFilters: DeclarativeUserDataFilters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};

/**
 * Request parameters for getUserDataFilters operation in UserDataFiltersApi.
 * @export
 * @interface UserDataFiltersApiGetUserDataFiltersRequest
 */
export declare interface UserDataFiltersApiGetUserDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof UserDataFiltersApiGetUserDataFilters
     */
    readonly workspaceId: string;
}

/**
 * UserDataFiltersApi - interface
 * @export
 * @interface UserDataFiltersApi
 */
export declare interface UserDataFiltersApiInterface {
    /**
     * Retrieve current user data filters assigned to the workspace.
     * @summary Get user data filters
     * @param {UserDataFiltersApiGetUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserDataFiltersApiInterface
     */
    getUserDataFilters(requestParameters: UserDataFiltersApiGetUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeUserDataFilters>;
    /**
     * Set user data filters assigned to the workspace.
     * @summary Set user data filters
     * @param {UserDataFiltersApiSetUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserDataFiltersApiInterface
     */
    setUserDataFilters(requestParameters: UserDataFiltersApiSetUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
}

/**
 * Request parameters for setUserDataFilters operation in UserDataFiltersApi.
 * @export
 * @interface UserDataFiltersApiSetUserDataFiltersRequest
 */
export declare interface UserDataFiltersApiSetUserDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof UserDataFiltersApiSetUserDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {DeclarativeUserDataFilters}
     * @memberof UserDataFiltersApiSetUserDataFilters
     */
    readonly declarativeUserDataFilters: DeclarativeUserDataFilters;
}

/**
 * List of user groups
 * @export
 * @interface UserGroupAssignee
 */
export declare interface UserGroupAssignee {
    /**
     *
     * @type {string}
     * @memberof UserGroupAssignee
     */
    id: string;
    /**
     * User group name
     * @type {string}
     * @memberof UserGroupAssignee
     */
    name?: string;
}

/**
 * A user group identifier.
 * @export
 * @interface UserGroupIdentifier
 */
export declare interface UserGroupIdentifier {
    /**
     * Identifier of the user group.
     * @type {string}
     * @memberof UserGroupIdentifier
     */
    id: string;
    /**
     * A type.
     * @type {string}
     * @memberof UserGroupIdentifier
     */
    type: UserGroupIdentifierTypeEnum;
}

export declare const UserGroupIdentifierTypeEnum: {
    readonly USER_GROUP: "userGroup";
};

export declare type UserGroupIdentifierTypeEnum = typeof UserGroupIdentifierTypeEnum[keyof typeof UserGroupIdentifierTypeEnum];

/**
 * List of user groups
 * @export
 * @interface UserGroupPermission
 */
export declare interface UserGroupPermission {
    /**
     *
     * @type {string}
     * @memberof UserGroupPermission
     */
    id: string;
    /**
     * Name of the user group
     * @type {string}
     * @memberof UserGroupPermission
     */
    name?: string;
    /**
     * Permissions granted to the user group
     * @type {Array<GrantedPermission>}
     * @memberof UserGroupPermission
     */
    permissions?: Array<GrantedPermission>;
}

/**
 * UserGroupsDeclarativeAPIsApi - object-oriented interface
 * @export
 * @class UserGroupsDeclarativeAPIsApi
 * @extends {BaseAPI}
 */
export declare class UserGroupsDeclarativeAPIsApi extends MetadataBaseApi implements UserGroupsDeclarativeAPIsApiInterface {
    /**
     * Retrieve all user-groups eventually with parent group.
     * @summary Get all user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupsDeclarativeAPIsApi
     */
    getUserGroupsLayout(options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeUserGroups, any>>;
    /**
     * Retrieve all users and user groups with theirs properties.
     * @summary Get all users and user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupsDeclarativeAPIsApi
     */
    getUsersUserGroupsLayout(options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeUsersUserGroups, any>>;
    /**
     * Define all user groups with their parents eventually.
     * @summary Put all user groups
     * @param {UserGroupsDeclarativeAPIsApiPutUserGroupsLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupsDeclarativeAPIsApi
     */
    putUserGroupsLayout(requestParameters: UserGroupsDeclarativeAPIsApiPutUserGroupsLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Define all users and user groups with theirs properties.
     * @summary Put all users and user groups
     * @param {UserGroupsDeclarativeAPIsApiPutUsersUserGroupsLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupsDeclarativeAPIsApi
     */
    putUsersUserGroupsLayout(requestParameters: UserGroupsDeclarativeAPIsApiPutUsersUserGroupsLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
}

/**
 * UserGroupsDeclarativeAPIsApi - axios parameter creator
 * @export
 */
export declare const UserGroupsDeclarativeAPIsApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     * Retrieve all user-groups eventually with parent group.
     * @summary Get all user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroupsLayout: (options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Retrieve all users and user groups with theirs properties.
     * @summary Get all users and user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersUserGroupsLayout: (options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Define all user groups with their parents eventually.
     * @summary Put all user groups
     * @param {DeclarativeUserGroups} declarativeUserGroups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUserGroupsLayout: (declarativeUserGroups: DeclarativeUserGroups, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Define all users and user groups with theirs properties.
     * @summary Put all users and user groups
     * @param {DeclarativeUsersUserGroups} declarativeUsersUserGroups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUsersUserGroupsLayout: (declarativeUsersUserGroups: DeclarativeUsersUserGroups, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * UserGroupsDeclarativeAPIsApi - factory interface
 * @export
 */
export declare const UserGroupsDeclarativeAPIsApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieve all user-groups eventually with parent group.
     * @summary Get all user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroupsLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeUserGroups>;
    /**
     * Retrieve all users and user groups with theirs properties.
     * @summary Get all users and user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersUserGroupsLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeUsersUserGroups>;
    /**
     * Define all user groups with their parents eventually.
     * @summary Put all user groups
     * @param {UserGroupsDeclarativeAPIsApiPutUserGroupsLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUserGroupsLayout(requestParameters: UserGroupsDeclarativeAPIsApiPutUserGroupsLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Define all users and user groups with theirs properties.
     * @summary Put all users and user groups
     * @param {UserGroupsDeclarativeAPIsApiPutUsersUserGroupsLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUsersUserGroupsLayout(requestParameters: UserGroupsDeclarativeAPIsApiPutUsersUserGroupsLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
};

/**
 * UserGroupsDeclarativeAPIsApi - functional programming interface
 * @export
 */
export declare const UserGroupsDeclarativeAPIsApiFp: (configuration?: MetadataConfiguration) => {
    /**
     * Retrieve all user-groups eventually with parent group.
     * @summary Get all user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroupsLayout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeUserGroups>>;
    /**
     * Retrieve all users and user groups with theirs properties.
     * @summary Get all users and user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersUserGroupsLayout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeUsersUserGroups>>;
    /**
     * Define all user groups with their parents eventually.
     * @summary Put all user groups
     * @param {DeclarativeUserGroups} declarativeUserGroups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUserGroupsLayout(declarativeUserGroups: DeclarativeUserGroups, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Define all users and user groups with theirs properties.
     * @summary Put all users and user groups
     * @param {DeclarativeUsersUserGroups} declarativeUsersUserGroups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUsersUserGroupsLayout(declarativeUsersUserGroups: DeclarativeUsersUserGroups, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};

/**
 * UserGroupsDeclarativeAPIsApi - interface
 * @export
 * @interface UserGroupsDeclarativeAPIsApi
 */
export declare interface UserGroupsDeclarativeAPIsApiInterface {
    /**
     * Retrieve all user-groups eventually with parent group.
     * @summary Get all user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupsDeclarativeAPIsApiInterface
     */
    getUserGroupsLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeUserGroups>;
    /**
     * Retrieve all users and user groups with theirs properties.
     * @summary Get all users and user groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupsDeclarativeAPIsApiInterface
     */
    getUsersUserGroupsLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeUsersUserGroups>;
    /**
     * Define all user groups with their parents eventually.
     * @summary Put all user groups
     * @param {UserGroupsDeclarativeAPIsApiPutUserGroupsLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupsDeclarativeAPIsApiInterface
     */
    putUserGroupsLayout(requestParameters: UserGroupsDeclarativeAPIsApiPutUserGroupsLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Define all users and user groups with theirs properties.
     * @summary Put all users and user groups
     * @param {UserGroupsDeclarativeAPIsApiPutUsersUserGroupsLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupsDeclarativeAPIsApiInterface
     */
    putUsersUserGroupsLayout(requestParameters: UserGroupsDeclarativeAPIsApiPutUsersUserGroupsLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
}

/**
 * Request parameters for putUserGroupsLayout operation in UserGroupsDeclarativeAPIsApi.
 * @export
 * @interface UserGroupsDeclarativeAPIsApiPutUserGroupsLayoutRequest
 */
export declare interface UserGroupsDeclarativeAPIsApiPutUserGroupsLayoutRequest {
    /**
     *
     * @type {DeclarativeUserGroups}
     * @memberof UserGroupsDeclarativeAPIsApiPutUserGroupsLayout
     */
    readonly declarativeUserGroups: DeclarativeUserGroups;
}

/**
 * Request parameters for putUsersUserGroupsLayout operation in UserGroupsDeclarativeAPIsApi.
 * @export
 * @interface UserGroupsDeclarativeAPIsApiPutUsersUserGroupsLayoutRequest
 */
export declare interface UserGroupsDeclarativeAPIsApiPutUsersUserGroupsLayoutRequest {
    /**
     *
     * @type {DeclarativeUsersUserGroups}
     * @memberof UserGroupsDeclarativeAPIsApiPutUsersUserGroupsLayout
     */
    readonly declarativeUsersUserGroups: DeclarativeUsersUserGroups;
}

/**
 * UserGroupsEntityAPIsApi - object-oriented interface
 * @export
 * @class UserGroupsEntityAPIsApi
 * @extends {BaseAPI}
 */
export declare class UserGroupsEntityAPIsApi extends MetadataBaseApi implements UserGroupsEntityAPIsApiInterface {
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Post User Group entities
     * @param {UserGroupsEntityAPIsApiCreateEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupsEntityAPIsApi
     */
    createEntityUserGroups(requestParameters: UserGroupsEntityAPIsApiCreateEntityUserGroupsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserGroupOutDocument, any>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Delete UserGroup entity
     * @param {UserGroupsEntityAPIsApiDeleteEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupsEntityAPIsApi
     */
    deleteEntityUserGroups(requestParameters: UserGroupsEntityAPIsApiDeleteEntityUserGroupsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entities
     * @param {UserGroupsEntityAPIsApiGetAllEntitiesUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupsEntityAPIsApi
     */
    getAllEntitiesUserGroups(requestParameters?: UserGroupsEntityAPIsApiGetAllEntitiesUserGroupsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserGroupOutList, any>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entity
     * @param {UserGroupsEntityAPIsApiGetEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupsEntityAPIsApi
     */
    getEntityUserGroups(requestParameters: UserGroupsEntityAPIsApiGetEntityUserGroupsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserGroupOutDocument, any>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Patch UserGroup entity
     * @param {UserGroupsEntityAPIsApiPatchEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupsEntityAPIsApi
     */
    patchEntityUserGroups(requestParameters: UserGroupsEntityAPIsApiPatchEntityUserGroupsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserGroupOutDocument, any>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Put UserGroup entity
     * @param {UserGroupsEntityAPIsApiUpdateEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupsEntityAPIsApi
     */
    updateEntityUserGroups(requestParameters: UserGroupsEntityAPIsApiUpdateEntityUserGroupsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserGroupOutDocument, any>>;
}

/**
 * UserGroupsEntityAPIsApi - axios parameter creator
 * @export
 */
export declare const UserGroupsEntityAPIsApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Post User Group entities
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserGroups: (jsonApiUserGroupInDocument: JsonApiUserGroupInDocument, include?: Array<"userGroups" | "parents" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Delete UserGroup entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserGroups: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserGroups: (filter?: string, include?: Array<"userGroups" | "parents" | "ALL">, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserGroups: (id: string, filter?: string, include?: Array<"userGroups" | "parents" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Patch UserGroup entity
     * @param {string} id
     * @param {JsonApiUserGroupPatchDocument} jsonApiUserGroupPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUserGroups: (id: string, jsonApiUserGroupPatchDocument: JsonApiUserGroupPatchDocument, filter?: string, include?: Array<"userGroups" | "parents" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Put UserGroup entity
     * @param {string} id
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserGroups: (id: string, jsonApiUserGroupInDocument: JsonApiUserGroupInDocument, filter?: string, include?: Array<"userGroups" | "parents" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * Request parameters for createEntityUserGroups operation in UserGroupsEntityAPIsApi.
 * @export
 * @interface UserGroupsEntityAPIsApiCreateEntityUserGroupsRequest
 */
export declare interface UserGroupsEntityAPIsApiCreateEntityUserGroupsRequest {
    /**
     *
     * @type {JsonApiUserGroupInDocument}
     * @memberof UserGroupsEntityAPIsApiCreateEntityUserGroups
     */
    readonly jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'parents' | 'ALL'>}
     * @memberof UserGroupsEntityAPIsApiCreateEntityUserGroups
     */
    readonly include?: Array<"userGroups" | "parents" | "ALL">;
}

/**
 * Request parameters for deleteEntityUserGroups operation in UserGroupsEntityAPIsApi.
 * @export
 * @interface UserGroupsEntityAPIsApiDeleteEntityUserGroupsRequest
 */
export declare interface UserGroupsEntityAPIsApiDeleteEntityUserGroupsRequest {
    /**
     *
     * @type {string}
     * @memberof UserGroupsEntityAPIsApiDeleteEntityUserGroups
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof UserGroupsEntityAPIsApiDeleteEntityUserGroups
     */
    readonly filter?: string;
}

/**
 * UserGroupsEntityAPIsApi - factory interface
 * @export
 */
export declare const UserGroupsEntityAPIsApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Post User Group entities
     * @param {UserGroupsEntityAPIsApiCreateEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserGroups(requestParameters: UserGroupsEntityAPIsApiCreateEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Delete UserGroup entity
     * @param {UserGroupsEntityAPIsApiDeleteEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserGroups(requestParameters: UserGroupsEntityAPIsApiDeleteEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entities
     * @param {UserGroupsEntityAPIsApiGetAllEntitiesUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserGroups(requestParameters: UserGroupsEntityAPIsApiGetAllEntitiesUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutList>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entity
     * @param {UserGroupsEntityAPIsApiGetEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserGroups(requestParameters: UserGroupsEntityAPIsApiGetEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Patch UserGroup entity
     * @param {UserGroupsEntityAPIsApiPatchEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUserGroups(requestParameters: UserGroupsEntityAPIsApiPatchEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Put UserGroup entity
     * @param {UserGroupsEntityAPIsApiUpdateEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserGroups(requestParameters: UserGroupsEntityAPIsApiUpdateEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutDocument>;
};

/**
 * UserGroupsEntityAPIsApi - functional programming interface
 * @export
 */
export declare const UserGroupsEntityAPIsApiFp: (configuration?: MetadataConfiguration) => {
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Post User Group entities
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserGroups(jsonApiUserGroupInDocument: JsonApiUserGroupInDocument, include?: Array<"userGroups" | "parents" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutDocument>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Delete UserGroup entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserGroups(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserGroups(filter?: string, include?: Array<"userGroups" | "parents" | "ALL">, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutList>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserGroups(id: string, filter?: string, include?: Array<"userGroups" | "parents" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutDocument>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Patch UserGroup entity
     * @param {string} id
     * @param {JsonApiUserGroupPatchDocument} jsonApiUserGroupPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUserGroups(id: string, jsonApiUserGroupPatchDocument: JsonApiUserGroupPatchDocument, filter?: string, include?: Array<"userGroups" | "parents" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutDocument>>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Put UserGroup entity
     * @param {string} id
     * @param {JsonApiUserGroupInDocument} jsonApiUserGroupInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'parents' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserGroups(id: string, jsonApiUserGroupInDocument: JsonApiUserGroupInDocument, filter?: string, include?: Array<"userGroups" | "parents" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesUserGroups operation in UserGroupsEntityAPIsApi.
 * @export
 * @interface UserGroupsEntityAPIsApiGetAllEntitiesUserGroupsRequest
 */
export declare interface UserGroupsEntityAPIsApiGetAllEntitiesUserGroupsRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof UserGroupsEntityAPIsApiGetAllEntitiesUserGroups
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'parents' | 'ALL'>}
     * @memberof UserGroupsEntityAPIsApiGetAllEntitiesUserGroups
     */
    readonly include?: Array<"userGroups" | "parents" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof UserGroupsEntityAPIsApiGetAllEntitiesUserGroups
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof UserGroupsEntityAPIsApiGetAllEntitiesUserGroups
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof UserGroupsEntityAPIsApiGetAllEntitiesUserGroups
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getEntityUserGroups operation in UserGroupsEntityAPIsApi.
 * @export
 * @interface UserGroupsEntityAPIsApiGetEntityUserGroupsRequest
 */
export declare interface UserGroupsEntityAPIsApiGetEntityUserGroupsRequest {
    /**
     *
     * @type {string}
     * @memberof UserGroupsEntityAPIsApiGetEntityUserGroups
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof UserGroupsEntityAPIsApiGetEntityUserGroups
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'parents' | 'ALL'>}
     * @memberof UserGroupsEntityAPIsApiGetEntityUserGroups
     */
    readonly include?: Array<"userGroups" | "parents" | "ALL">;
}

/**
 * UserGroupsEntityAPIsApi - interface
 * @export
 * @interface UserGroupsEntityAPIsApi
 */
export declare interface UserGroupsEntityAPIsApiInterface {
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Post User Group entities
     * @param {UserGroupsEntityAPIsApiCreateEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupsEntityAPIsApiInterface
     */
    createEntityUserGroups(requestParameters: UserGroupsEntityAPIsApiCreateEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Delete UserGroup entity
     * @param {UserGroupsEntityAPIsApiDeleteEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupsEntityAPIsApiInterface
     */
    deleteEntityUserGroups(requestParameters: UserGroupsEntityAPIsApiDeleteEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entities
     * @param {UserGroupsEntityAPIsApiGetAllEntitiesUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupsEntityAPIsApiInterface
     */
    getAllEntitiesUserGroups(requestParameters: UserGroupsEntityAPIsApiGetAllEntitiesUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutList>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Get UserGroup entity
     * @param {UserGroupsEntityAPIsApiGetEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupsEntityAPIsApiInterface
     */
    getEntityUserGroups(requestParameters: UserGroupsEntityAPIsApiGetEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Patch UserGroup entity
     * @param {UserGroupsEntityAPIsApiPatchEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupsEntityAPIsApiInterface
     */
    patchEntityUserGroups(requestParameters: UserGroupsEntityAPIsApiPatchEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutDocument>;
    /**
     * User Group - creates tree-like structure for categorizing users
     * @summary Put UserGroup entity
     * @param {UserGroupsEntityAPIsApiUpdateEntityUserGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupsEntityAPIsApiInterface
     */
    updateEntityUserGroups(requestParameters: UserGroupsEntityAPIsApiUpdateEntityUserGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserGroupOutDocument>;
}

/**
 * Request parameters for patchEntityUserGroups operation in UserGroupsEntityAPIsApi.
 * @export
 * @interface UserGroupsEntityAPIsApiPatchEntityUserGroupsRequest
 */
export declare interface UserGroupsEntityAPIsApiPatchEntityUserGroupsRequest {
    /**
     *
     * @type {string}
     * @memberof UserGroupsEntityAPIsApiPatchEntityUserGroups
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiUserGroupPatchDocument}
     * @memberof UserGroupsEntityAPIsApiPatchEntityUserGroups
     */
    readonly jsonApiUserGroupPatchDocument: JsonApiUserGroupPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof UserGroupsEntityAPIsApiPatchEntityUserGroups
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'parents' | 'ALL'>}
     * @memberof UserGroupsEntityAPIsApiPatchEntityUserGroups
     */
    readonly include?: Array<"userGroups" | "parents" | "ALL">;
}

/**
 * Request parameters for updateEntityUserGroups operation in UserGroupsEntityAPIsApi.
 * @export
 * @interface UserGroupsEntityAPIsApiUpdateEntityUserGroupsRequest
 */
export declare interface UserGroupsEntityAPIsApiUpdateEntityUserGroupsRequest {
    /**
     *
     * @type {string}
     * @memberof UserGroupsEntityAPIsApiUpdateEntityUserGroups
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiUserGroupInDocument}
     * @memberof UserGroupsEntityAPIsApiUpdateEntityUserGroups
     */
    readonly jsonApiUserGroupInDocument: JsonApiUserGroupInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof UserGroupsEntityAPIsApiUpdateEntityUserGroups
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'parents' | 'ALL'>}
     * @memberof UserGroupsEntityAPIsApiUpdateEntityUserGroups
     */
    readonly include?: Array<"userGroups" | "parents" | "ALL">;
}

/**
 * UserModelControllerApi - object-oriented interface
 * @export
 * @class UserModelControllerApi
 * @extends {BaseAPI}
 */
export declare class UserModelControllerApi extends MetadataBaseApi implements UserModelControllerApiInterface {
    /**
     *
     * @summary Post a new API token for the user
     * @param {UserModelControllerApiCreateEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    createEntityApiTokens(requestParameters: UserModelControllerApiCreateEntityApiTokensRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiApiTokenOutDocument, any>>;
    /**
     *
     * @summary Post new user settings for the user
     * @param {UserModelControllerApiCreateEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    createEntityUserSettings(requestParameters: UserModelControllerApiCreateEntityUserSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserSettingOutDocument, any>>;
    /**
     *
     * @summary Delete an API Token for a user
     * @param {UserModelControllerApiDeleteEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    deleteEntityApiTokens(requestParameters: UserModelControllerApiDeleteEntityApiTokensRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a setting for a user
     * @param {UserModelControllerApiDeleteEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    deleteEntityUserSettings(requestParameters: UserModelControllerApiDeleteEntityUserSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary List all api tokens for a user
     * @param {UserModelControllerApiGetAllEntitiesApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    getAllEntitiesApiTokens(requestParameters: UserModelControllerApiGetAllEntitiesApiTokensRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiApiTokenOutList, any>>;
    /**
     *
     * @summary List all settings for a user
     * @param {UserModelControllerApiGetAllEntitiesUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    getAllEntitiesUserSettings(requestParameters: UserModelControllerApiGetAllEntitiesUserSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserSettingOutList, any>>;
    /**
     *
     * @summary Get an API Token for a user
     * @param {UserModelControllerApiGetEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    getEntityApiTokens(requestParameters: UserModelControllerApiGetEntityApiTokensRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiApiTokenOutDocument, any>>;
    /**
     *
     * @summary Get a setting for a user
     * @param {UserModelControllerApiGetEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    getEntityUserSettings(requestParameters: UserModelControllerApiGetEntityUserSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserSettingOutDocument, any>>;
    /**
     *
     * @summary Put new API token for the user
     * @param {UserModelControllerApiUpdateEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    updateEntityApiTokens(requestParameters: UserModelControllerApiUpdateEntityApiTokensRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiApiTokenOutDocument, any>>;
    /**
     *
     * @summary Put new user settings for the user
     * @param {UserModelControllerApiUpdateEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    updateEntityUserSettings(requestParameters: UserModelControllerApiUpdateEntityUserSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserSettingOutDocument, any>>;
}

/**
 * UserModelControllerApi - axios parameter creator
 * @export
 */
export declare const UserModelControllerApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post a new API token for the user
     * @param {string} userId
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityApiTokens: (userId: string, jsonApiApiTokenInDocument: JsonApiApiTokenInDocument, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post new user settings for the user
     * @param {string} userId
     * @param {JsonApiUserSettingInDocument} jsonApiUserSettingInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserSettings: (userId: string, jsonApiUserSettingInDocument: JsonApiUserSettingInDocument, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete an API Token for a user
     * @param {string} userId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityApiTokens: (userId: string, id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a setting for a user
     * @param {string} userId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserSettings: (userId: string, id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary List all api tokens for a user
     * @param {string} userId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesApiTokens: (userId: string, filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary List all settings for a user
     * @param {string} userId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserSettings: (userId: string, filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get an API Token for a user
     * @param {string} userId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityApiTokens: (userId: string, id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a setting for a user
     * @param {string} userId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserSettings: (userId: string, id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put new API token for the user
     * @param {string} userId
     * @param {string} id
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityApiTokens: (userId: string, id: string, jsonApiApiTokenInDocument: JsonApiApiTokenInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put new user settings for the user
     * @param {string} userId
     * @param {string} id
     * @param {JsonApiUserSettingInDocument} jsonApiUserSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserSettings: (userId: string, id: string, jsonApiUserSettingInDocument: JsonApiUserSettingInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * Request parameters for createEntityApiTokens operation in UserModelControllerApi.
 * @export
 * @interface UserModelControllerApiCreateEntityApiTokensRequest
 */
export declare interface UserModelControllerApiCreateEntityApiTokensRequest {
    /**
     *
     * @type {string}
     * @memberof UserModelControllerApiCreateEntityApiTokens
     */
    readonly userId: string;
    /**
     *
     * @type {JsonApiApiTokenInDocument}
     * @memberof UserModelControllerApiCreateEntityApiTokens
     */
    readonly jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
}

/**
 * Request parameters for createEntityUserSettings operation in UserModelControllerApi.
 * @export
 * @interface UserModelControllerApiCreateEntityUserSettingsRequest
 */
export declare interface UserModelControllerApiCreateEntityUserSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof UserModelControllerApiCreateEntityUserSettings
     */
    readonly userId: string;
    /**
     *
     * @type {JsonApiUserSettingInDocument}
     * @memberof UserModelControllerApiCreateEntityUserSettings
     */
    readonly jsonApiUserSettingInDocument: JsonApiUserSettingInDocument;
}

/**
 * Request parameters for deleteEntityApiTokens operation in UserModelControllerApi.
 * @export
 * @interface UserModelControllerApiDeleteEntityApiTokensRequest
 */
export declare interface UserModelControllerApiDeleteEntityApiTokensRequest {
    /**
     *
     * @type {string}
     * @memberof UserModelControllerApiDeleteEntityApiTokens
     */
    readonly userId: string;
    /**
     *
     * @type {string}
     * @memberof UserModelControllerApiDeleteEntityApiTokens
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof UserModelControllerApiDeleteEntityApiTokens
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityUserSettings operation in UserModelControllerApi.
 * @export
 * @interface UserModelControllerApiDeleteEntityUserSettingsRequest
 */
export declare interface UserModelControllerApiDeleteEntityUserSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof UserModelControllerApiDeleteEntityUserSettings
     */
    readonly userId: string;
    /**
     *
     * @type {string}
     * @memberof UserModelControllerApiDeleteEntityUserSettings
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof UserModelControllerApiDeleteEntityUserSettings
     */
    readonly filter?: string;
}

/**
 * UserModelControllerApi - factory interface
 * @export
 */
export declare const UserModelControllerApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Post a new API token for the user
     * @param {UserModelControllerApiCreateEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityApiTokens(requestParameters: UserModelControllerApiCreateEntityApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @summary Post new user settings for the user
     * @param {UserModelControllerApiCreateEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserSettings(requestParameters: UserModelControllerApiCreateEntityUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserSettingOutDocument>;
    /**
     *
     * @summary Delete an API Token for a user
     * @param {UserModelControllerApiDeleteEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityApiTokens(requestParameters: UserModelControllerApiDeleteEntityApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a setting for a user
     * @param {UserModelControllerApiDeleteEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserSettings(requestParameters: UserModelControllerApiDeleteEntityUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary List all api tokens for a user
     * @param {UserModelControllerApiGetAllEntitiesApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesApiTokens(requestParameters: UserModelControllerApiGetAllEntitiesApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiApiTokenOutList>;
    /**
     *
     * @summary List all settings for a user
     * @param {UserModelControllerApiGetAllEntitiesUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserSettings(requestParameters: UserModelControllerApiGetAllEntitiesUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserSettingOutList>;
    /**
     *
     * @summary Get an API Token for a user
     * @param {UserModelControllerApiGetEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityApiTokens(requestParameters: UserModelControllerApiGetEntityApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @summary Get a setting for a user
     * @param {UserModelControllerApiGetEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserSettings(requestParameters: UserModelControllerApiGetEntityUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserSettingOutDocument>;
    /**
     *
     * @summary Put new API token for the user
     * @param {UserModelControllerApiUpdateEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityApiTokens(requestParameters: UserModelControllerApiUpdateEntityApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @summary Put new user settings for the user
     * @param {UserModelControllerApiUpdateEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserSettings(requestParameters: UserModelControllerApiUpdateEntityUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserSettingOutDocument>;
};

/**
 * UserModelControllerApi - functional programming interface
 * @export
 */
export declare const UserModelControllerApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post a new API token for the user
     * @param {string} userId
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityApiTokens(userId: string, jsonApiApiTokenInDocument: JsonApiApiTokenInDocument, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiApiTokenOutDocument>>;
    /**
     *
     * @summary Post new user settings for the user
     * @param {string} userId
     * @param {JsonApiUserSettingInDocument} jsonApiUserSettingInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserSettings(userId: string, jsonApiUserSettingInDocument: JsonApiUserSettingInDocument, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserSettingOutDocument>>;
    /**
     *
     * @summary Delete an API Token for a user
     * @param {string} userId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityApiTokens(userId: string, id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a setting for a user
     * @param {string} userId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserSettings(userId: string, id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary List all api tokens for a user
     * @param {string} userId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesApiTokens(userId: string, filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiApiTokenOutList>>;
    /**
     *
     * @summary List all settings for a user
     * @param {string} userId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserSettings(userId: string, filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserSettingOutList>>;
    /**
     *
     * @summary Get an API Token for a user
     * @param {string} userId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityApiTokens(userId: string, id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiApiTokenOutDocument>>;
    /**
     *
     * @summary Get a setting for a user
     * @param {string} userId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserSettings(userId: string, id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserSettingOutDocument>>;
    /**
     *
     * @summary Put new API token for the user
     * @param {string} userId
     * @param {string} id
     * @param {JsonApiApiTokenInDocument} jsonApiApiTokenInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityApiTokens(userId: string, id: string, jsonApiApiTokenInDocument: JsonApiApiTokenInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiApiTokenOutDocument>>;
    /**
     *
     * @summary Put new user settings for the user
     * @param {string} userId
     * @param {string} id
     * @param {JsonApiUserSettingInDocument} jsonApiUserSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserSettings(userId: string, id: string, jsonApiUserSettingInDocument: JsonApiUserSettingInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserSettingOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesApiTokens operation in UserModelControllerApi.
 * @export
 * @interface UserModelControllerApiGetAllEntitiesApiTokensRequest
 */
export declare interface UserModelControllerApiGetAllEntitiesApiTokensRequest {
    /**
     *
     * @type {string}
     * @memberof UserModelControllerApiGetAllEntitiesApiTokens
     */
    readonly userId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof UserModelControllerApiGetAllEntitiesApiTokens
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof UserModelControllerApiGetAllEntitiesApiTokens
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof UserModelControllerApiGetAllEntitiesApiTokens
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof UserModelControllerApiGetAllEntitiesApiTokens
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getAllEntitiesUserSettings operation in UserModelControllerApi.
 * @export
 * @interface UserModelControllerApiGetAllEntitiesUserSettingsRequest
 */
export declare interface UserModelControllerApiGetAllEntitiesUserSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof UserModelControllerApiGetAllEntitiesUserSettings
     */
    readonly userId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof UserModelControllerApiGetAllEntitiesUserSettings
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof UserModelControllerApiGetAllEntitiesUserSettings
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof UserModelControllerApiGetAllEntitiesUserSettings
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof UserModelControllerApiGetAllEntitiesUserSettings
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getEntityApiTokens operation in UserModelControllerApi.
 * @export
 * @interface UserModelControllerApiGetEntityApiTokensRequest
 */
export declare interface UserModelControllerApiGetEntityApiTokensRequest {
    /**
     *
     * @type {string}
     * @memberof UserModelControllerApiGetEntityApiTokens
     */
    readonly userId: string;
    /**
     *
     * @type {string}
     * @memberof UserModelControllerApiGetEntityApiTokens
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof UserModelControllerApiGetEntityApiTokens
     */
    readonly filter?: string;
}

/**
 * Request parameters for getEntityUserSettings operation in UserModelControllerApi.
 * @export
 * @interface UserModelControllerApiGetEntityUserSettingsRequest
 */
export declare interface UserModelControllerApiGetEntityUserSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof UserModelControllerApiGetEntityUserSettings
     */
    readonly userId: string;
    /**
     *
     * @type {string}
     * @memberof UserModelControllerApiGetEntityUserSettings
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof UserModelControllerApiGetEntityUserSettings
     */
    readonly filter?: string;
}

/**
 * UserModelControllerApi - interface
 * @export
 * @interface UserModelControllerApi
 */
export declare interface UserModelControllerApiInterface {
    /**
     *
     * @summary Post a new API token for the user
     * @param {UserModelControllerApiCreateEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    createEntityApiTokens(requestParameters: UserModelControllerApiCreateEntityApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @summary Post new user settings for the user
     * @param {UserModelControllerApiCreateEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    createEntityUserSettings(requestParameters: UserModelControllerApiCreateEntityUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserSettingOutDocument>;
    /**
     *
     * @summary Delete an API Token for a user
     * @param {UserModelControllerApiDeleteEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    deleteEntityApiTokens(requestParameters: UserModelControllerApiDeleteEntityApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a setting for a user
     * @param {UserModelControllerApiDeleteEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    deleteEntityUserSettings(requestParameters: UserModelControllerApiDeleteEntityUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary List all api tokens for a user
     * @param {UserModelControllerApiGetAllEntitiesApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    getAllEntitiesApiTokens(requestParameters: UserModelControllerApiGetAllEntitiesApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiApiTokenOutList>;
    /**
     *
     * @summary List all settings for a user
     * @param {UserModelControllerApiGetAllEntitiesUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    getAllEntitiesUserSettings(requestParameters: UserModelControllerApiGetAllEntitiesUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserSettingOutList>;
    /**
     *
     * @summary Get an API Token for a user
     * @param {UserModelControllerApiGetEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    getEntityApiTokens(requestParameters: UserModelControllerApiGetEntityApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @summary Get a setting for a user
     * @param {UserModelControllerApiGetEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    getEntityUserSettings(requestParameters: UserModelControllerApiGetEntityUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserSettingOutDocument>;
    /**
     *
     * @summary Put new API token for the user
     * @param {UserModelControllerApiUpdateEntityApiTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    updateEntityApiTokens(requestParameters: UserModelControllerApiUpdateEntityApiTokensRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiApiTokenOutDocument>;
    /**
     *
     * @summary Put new user settings for the user
     * @param {UserModelControllerApiUpdateEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    updateEntityUserSettings(requestParameters: UserModelControllerApiUpdateEntityUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserSettingOutDocument>;
}

/**
 * Request parameters for updateEntityApiTokens operation in UserModelControllerApi.
 * @export
 * @interface UserModelControllerApiUpdateEntityApiTokensRequest
 */
export declare interface UserModelControllerApiUpdateEntityApiTokensRequest {
    /**
     *
     * @type {string}
     * @memberof UserModelControllerApiUpdateEntityApiTokens
     */
    readonly userId: string;
    /**
     *
     * @type {string}
     * @memberof UserModelControllerApiUpdateEntityApiTokens
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiApiTokenInDocument}
     * @memberof UserModelControllerApiUpdateEntityApiTokens
     */
    readonly jsonApiApiTokenInDocument: JsonApiApiTokenInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof UserModelControllerApiUpdateEntityApiTokens
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityUserSettings operation in UserModelControllerApi.
 * @export
 * @interface UserModelControllerApiUpdateEntityUserSettingsRequest
 */
export declare interface UserModelControllerApiUpdateEntityUserSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof UserModelControllerApiUpdateEntityUserSettings
     */
    readonly userId: string;
    /**
     *
     * @type {string}
     * @memberof UserModelControllerApiUpdateEntityUserSettings
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiUserSettingInDocument}
     * @memberof UserModelControllerApiUpdateEntityUserSettings
     */
    readonly jsonApiUserSettingInDocument: JsonApiUserSettingInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof UserModelControllerApiUpdateEntityUserSettings
     */
    readonly filter?: string;
}

/**
 * List of users
 * @export
 * @interface UserPermission
 */
export declare interface UserPermission {
    /**
     *
     * @type {string}
     * @memberof UserPermission
     */
    id: string;
    /**
     * Name of user
     * @type {string}
     * @memberof UserPermission
     */
    name?: string;
    /**
     * User email address
     * @type {string}
     * @memberof UserPermission
     */
    email?: string;
    /**
     * Permissions granted to the user
     * @type {Array<GrantedPermission>}
     * @memberof UserPermission
     */
    permissions?: Array<GrantedPermission>;
}

/**
 * UsersDeclarativeAPIsApi - object-oriented interface
 * @export
 * @class UsersDeclarativeAPIsApi
 * @extends {BaseAPI}
 */
export declare class UsersDeclarativeAPIsApi extends MetadataBaseApi implements UsersDeclarativeAPIsApiInterface {
    /**
     * Retrieve all users including authentication properties.
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersDeclarativeAPIsApi
     */
    getUsersLayout(options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeUsers, any>>;
    /**
     * Set all users and their authentication properties.
     * @summary Put all users
     * @param {UsersDeclarativeAPIsApiPutUsersLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersDeclarativeAPIsApi
     */
    putUsersLayout(requestParameters: UsersDeclarativeAPIsApiPutUsersLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
}

/**
 * UsersDeclarativeAPIsApi - axios parameter creator
 * @export
 */
export declare const UsersDeclarativeAPIsApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     * Retrieve all users including authentication properties.
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersLayout: (options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Set all users and their authentication properties.
     * @summary Put all users
     * @param {DeclarativeUsers} declarativeUsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUsersLayout: (declarativeUsers: DeclarativeUsers, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * UsersDeclarativeAPIsApi - factory interface
 * @export
 */
export declare const UsersDeclarativeAPIsApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieve all users including authentication properties.
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeUsers>;
    /**
     * Set all users and their authentication properties.
     * @summary Put all users
     * @param {UsersDeclarativeAPIsApiPutUsersLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUsersLayout(requestParameters: UsersDeclarativeAPIsApiPutUsersLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
};

/**
 * UsersDeclarativeAPIsApi - functional programming interface
 * @export
 */
export declare const UsersDeclarativeAPIsApiFp: (configuration?: MetadataConfiguration) => {
    /**
     * Retrieve all users including authentication properties.
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsersLayout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeUsers>>;
    /**
     * Set all users and their authentication properties.
     * @summary Put all users
     * @param {DeclarativeUsers} declarativeUsers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUsersLayout(declarativeUsers: DeclarativeUsers, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};

/**
 * UsersDeclarativeAPIsApi - interface
 * @export
 * @interface UsersDeclarativeAPIsApi
 */
export declare interface UsersDeclarativeAPIsApiInterface {
    /**
     * Retrieve all users including authentication properties.
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersDeclarativeAPIsApiInterface
     */
    getUsersLayout(options?: AxiosRequestConfig): AxiosPromise<DeclarativeUsers>;
    /**
     * Set all users and their authentication properties.
     * @summary Put all users
     * @param {UsersDeclarativeAPIsApiPutUsersLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersDeclarativeAPIsApiInterface
     */
    putUsersLayout(requestParameters: UsersDeclarativeAPIsApiPutUsersLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
}

/**
 * Request parameters for putUsersLayout operation in UsersDeclarativeAPIsApi.
 * @export
 * @interface UsersDeclarativeAPIsApiPutUsersLayoutRequest
 */
export declare interface UsersDeclarativeAPIsApiPutUsersLayoutRequest {
    /**
     *
     * @type {DeclarativeUsers}
     * @memberof UsersDeclarativeAPIsApiPutUsersLayout
     */
    readonly declarativeUsers: DeclarativeUsers;
}

/**
 * UsersEntityAPIsApi - object-oriented interface
 * @export
 * @class UsersEntityAPIsApi
 * @extends {BaseAPI}
 */
export declare class UsersEntityAPIsApi extends MetadataBaseApi implements UsersEntityAPIsApiInterface {
    /**
     * User - represents entity interacting with platform
     * @summary Post User entities
     * @param {UsersEntityAPIsApiCreateEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersEntityAPIsApi
     */
    createEntityUsers(requestParameters: UsersEntityAPIsApiCreateEntityUsersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserOutDocument, any>>;
    /**
     * User - represents entity interacting with platform
     * @summary Delete User entity
     * @param {UsersEntityAPIsApiDeleteEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersEntityAPIsApi
     */
    deleteEntityUsers(requestParameters: UsersEntityAPIsApiDeleteEntityUsersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entities
     * @param {UsersEntityAPIsApiGetAllEntitiesUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersEntityAPIsApi
     */
    getAllEntitiesUsers(requestParameters?: UsersEntityAPIsApiGetAllEntitiesUsersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserOutList, any>>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entity
     * @param {UsersEntityAPIsApiGetEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersEntityAPIsApi
     */
    getEntityUsers(requestParameters: UsersEntityAPIsApiGetEntityUsersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserOutDocument, any>>;
    /**
     * User - represents entity interacting with platform
     * @summary Patch User entity
     * @param {UsersEntityAPIsApiPatchEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersEntityAPIsApi
     */
    patchEntityUsers(requestParameters: UsersEntityAPIsApiPatchEntityUsersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserOutDocument, any>>;
    /**
     * User - represents entity interacting with platform
     * @summary Put User entity
     * @param {UsersEntityAPIsApiUpdateEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersEntityAPIsApi
     */
    updateEntityUsers(requestParameters: UsersEntityAPIsApiUpdateEntityUsersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserOutDocument, any>>;
}

/**
 * UsersEntityAPIsApi - axios parameter creator
 * @export
 */
export declare const UsersEntityAPIsApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     * User - represents entity interacting with platform
     * @summary Post User entities
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUsers: (jsonApiUserInDocument: JsonApiUserInDocument, include?: Array<"userGroups" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User - represents entity interacting with platform
     * @summary Delete User entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUsers: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUsers: (filter?: string, include?: Array<"userGroups" | "ALL">, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUsers: (id: string, filter?: string, include?: Array<"userGroups" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User - represents entity interacting with platform
     * @summary Patch User entity
     * @param {string} id
     * @param {JsonApiUserPatchDocument} jsonApiUserPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUsers: (id: string, jsonApiUserPatchDocument: JsonApiUserPatchDocument, filter?: string, include?: Array<"userGroups" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * User - represents entity interacting with platform
     * @summary Put User entity
     * @param {string} id
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUsers: (id: string, jsonApiUserInDocument: JsonApiUserInDocument, filter?: string, include?: Array<"userGroups" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * Request parameters for createEntityUsers operation in UsersEntityAPIsApi.
 * @export
 * @interface UsersEntityAPIsApiCreateEntityUsersRequest
 */
export declare interface UsersEntityAPIsApiCreateEntityUsersRequest {
    /**
     *
     * @type {JsonApiUserInDocument}
     * @memberof UsersEntityAPIsApiCreateEntityUsers
     */
    readonly jsonApiUserInDocument: JsonApiUserInDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'ALL'>}
     * @memberof UsersEntityAPIsApiCreateEntityUsers
     */
    readonly include?: Array<"userGroups" | "ALL">;
}

/**
 * Request parameters for deleteEntityUsers operation in UsersEntityAPIsApi.
 * @export
 * @interface UsersEntityAPIsApiDeleteEntityUsersRequest
 */
export declare interface UsersEntityAPIsApiDeleteEntityUsersRequest {
    /**
     *
     * @type {string}
     * @memberof UsersEntityAPIsApiDeleteEntityUsers
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof UsersEntityAPIsApiDeleteEntityUsers
     */
    readonly filter?: string;
}

/**
 * UsersEntityAPIsApi - factory interface
 * @export
 */
export declare const UsersEntityAPIsApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * User - represents entity interacting with platform
     * @summary Post User entities
     * @param {UsersEntityAPIsApiCreateEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUsers(requestParameters: UsersEntityAPIsApiCreateEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutDocument>;
    /**
     * User - represents entity interacting with platform
     * @summary Delete User entity
     * @param {UsersEntityAPIsApiDeleteEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUsers(requestParameters: UsersEntityAPIsApiDeleteEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entities
     * @param {UsersEntityAPIsApiGetAllEntitiesUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUsers(requestParameters: UsersEntityAPIsApiGetAllEntitiesUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutList>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entity
     * @param {UsersEntityAPIsApiGetEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUsers(requestParameters: UsersEntityAPIsApiGetEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutDocument>;
    /**
     * User - represents entity interacting with platform
     * @summary Patch User entity
     * @param {UsersEntityAPIsApiPatchEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUsers(requestParameters: UsersEntityAPIsApiPatchEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutDocument>;
    /**
     * User - represents entity interacting with platform
     * @summary Put User entity
     * @param {UsersEntityAPIsApiUpdateEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUsers(requestParameters: UsersEntityAPIsApiUpdateEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutDocument>;
};

/**
 * UsersEntityAPIsApi - functional programming interface
 * @export
 */
export declare const UsersEntityAPIsApiFp: (configuration?: MetadataConfiguration) => {
    /**
     * User - represents entity interacting with platform
     * @summary Post User entities
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUsers(jsonApiUserInDocument: JsonApiUserInDocument, include?: Array<"userGroups" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutDocument>>;
    /**
     * User - represents entity interacting with platform
     * @summary Delete User entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUsers(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUsers(filter?: string, include?: Array<"userGroups" | "ALL">, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutList>>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUsers(id: string, filter?: string, include?: Array<"userGroups" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutDocument>>;
    /**
     * User - represents entity interacting with platform
     * @summary Patch User entity
     * @param {string} id
     * @param {JsonApiUserPatchDocument} jsonApiUserPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUsers(id: string, jsonApiUserPatchDocument: JsonApiUserPatchDocument, filter?: string, include?: Array<"userGroups" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutDocument>>;
    /**
     * User - represents entity interacting with platform
     * @summary Put User entity
     * @param {string} id
     * @param {JsonApiUserInDocument} jsonApiUserInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userGroups' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUsers(id: string, jsonApiUserInDocument: JsonApiUserInDocument, filter?: string, include?: Array<"userGroups" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesUsers operation in UsersEntityAPIsApi.
 * @export
 * @interface UsersEntityAPIsApiGetAllEntitiesUsersRequest
 */
export declare interface UsersEntityAPIsApiGetAllEntitiesUsersRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof UsersEntityAPIsApiGetAllEntitiesUsers
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'ALL'>}
     * @memberof UsersEntityAPIsApiGetAllEntitiesUsers
     */
    readonly include?: Array<"userGroups" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof UsersEntityAPIsApiGetAllEntitiesUsers
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof UsersEntityAPIsApiGetAllEntitiesUsers
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof UsersEntityAPIsApiGetAllEntitiesUsers
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getEntityUsers operation in UsersEntityAPIsApi.
 * @export
 * @interface UsersEntityAPIsApiGetEntityUsersRequest
 */
export declare interface UsersEntityAPIsApiGetEntityUsersRequest {
    /**
     *
     * @type {string}
     * @memberof UsersEntityAPIsApiGetEntityUsers
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof UsersEntityAPIsApiGetEntityUsers
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'ALL'>}
     * @memberof UsersEntityAPIsApiGetEntityUsers
     */
    readonly include?: Array<"userGroups" | "ALL">;
}

/**
 * UsersEntityAPIsApi - interface
 * @export
 * @interface UsersEntityAPIsApi
 */
export declare interface UsersEntityAPIsApiInterface {
    /**
     * User - represents entity interacting with platform
     * @summary Post User entities
     * @param {UsersEntityAPIsApiCreateEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersEntityAPIsApiInterface
     */
    createEntityUsers(requestParameters: UsersEntityAPIsApiCreateEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutDocument>;
    /**
     * User - represents entity interacting with platform
     * @summary Delete User entity
     * @param {UsersEntityAPIsApiDeleteEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersEntityAPIsApiInterface
     */
    deleteEntityUsers(requestParameters: UsersEntityAPIsApiDeleteEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entities
     * @param {UsersEntityAPIsApiGetAllEntitiesUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersEntityAPIsApiInterface
     */
    getAllEntitiesUsers(requestParameters: UsersEntityAPIsApiGetAllEntitiesUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutList>;
    /**
     * User - represents entity interacting with platform
     * @summary Get User entity
     * @param {UsersEntityAPIsApiGetEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersEntityAPIsApiInterface
     */
    getEntityUsers(requestParameters: UsersEntityAPIsApiGetEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutDocument>;
    /**
     * User - represents entity interacting with platform
     * @summary Patch User entity
     * @param {UsersEntityAPIsApiPatchEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersEntityAPIsApiInterface
     */
    patchEntityUsers(requestParameters: UsersEntityAPIsApiPatchEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutDocument>;
    /**
     * User - represents entity interacting with platform
     * @summary Put User entity
     * @param {UsersEntityAPIsApiUpdateEntityUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersEntityAPIsApiInterface
     */
    updateEntityUsers(requestParameters: UsersEntityAPIsApiUpdateEntityUsersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserOutDocument>;
}

/**
 * Request parameters for patchEntityUsers operation in UsersEntityAPIsApi.
 * @export
 * @interface UsersEntityAPIsApiPatchEntityUsersRequest
 */
export declare interface UsersEntityAPIsApiPatchEntityUsersRequest {
    /**
     *
     * @type {string}
     * @memberof UsersEntityAPIsApiPatchEntityUsers
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiUserPatchDocument}
     * @memberof UsersEntityAPIsApiPatchEntityUsers
     */
    readonly jsonApiUserPatchDocument: JsonApiUserPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof UsersEntityAPIsApiPatchEntityUsers
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'ALL'>}
     * @memberof UsersEntityAPIsApiPatchEntityUsers
     */
    readonly include?: Array<"userGroups" | "ALL">;
}

/**
 * Request parameters for updateEntityUsers operation in UsersEntityAPIsApi.
 * @export
 * @interface UsersEntityAPIsApiUpdateEntityUsersRequest
 */
export declare interface UsersEntityAPIsApiUpdateEntityUsersRequest {
    /**
     *
     * @type {string}
     * @memberof UsersEntityAPIsApiUpdateEntityUsers
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiUserInDocument}
     * @memberof UsersEntityAPIsApiUpdateEntityUsers
     */
    readonly jsonApiUserInDocument: JsonApiUserInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof UsersEntityAPIsApiUpdateEntityUsers
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userGroups' | 'ALL'>}
     * @memberof UsersEntityAPIsApiUpdateEntityUsers
     */
    readonly include?: Array<"userGroups" | "ALL">;
}

/**
 * UserSettingsApi - object-oriented interface
 * @export
 * @class UserSettingsApi
 * @extends {BaseAPI}
 */
export declare class UserSettingsApi extends MetadataBaseApi implements UserSettingsApiInterface {
    /**
     *
     * @summary Post new user settings for the user
     * @param {UserSettingsApiCreateEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSettingsApi
     */
    createEntityUserSettings(requestParameters: UserSettingsApiCreateEntityUserSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserSettingOutDocument, any>>;
    /**
     *
     * @summary Delete a setting for a user
     * @param {UserSettingsApiDeleteEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSettingsApi
     */
    deleteEntityUserSettings(requestParameters: UserSettingsApiDeleteEntityUserSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary List all settings for a user
     * @param {UserSettingsApiGetAllEntitiesUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSettingsApi
     */
    getAllEntitiesUserSettings(requestParameters: UserSettingsApiGetAllEntitiesUserSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserSettingOutList, any>>;
    /**
     *
     * @summary Get a setting for a user
     * @param {UserSettingsApiGetEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSettingsApi
     */
    getEntityUserSettings(requestParameters: UserSettingsApiGetEntityUserSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserSettingOutDocument, any>>;
    /**
     *
     * @summary Put new user settings for the user
     * @param {UserSettingsApiUpdateEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSettingsApi
     */
    updateEntityUserSettings(requestParameters: UserSettingsApiUpdateEntityUserSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserSettingOutDocument, any>>;
}

/**
 * UserSettingsApi - axios parameter creator
 * @export
 */
export declare const UserSettingsApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post new user settings for the user
     * @param {string} userId
     * @param {JsonApiUserSettingInDocument} jsonApiUserSettingInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserSettings: (userId: string, jsonApiUserSettingInDocument: JsonApiUserSettingInDocument, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a setting for a user
     * @param {string} userId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserSettings: (userId: string, id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary List all settings for a user
     * @param {string} userId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserSettings: (userId: string, filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a setting for a user
     * @param {string} userId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserSettings: (userId: string, id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put new user settings for the user
     * @param {string} userId
     * @param {string} id
     * @param {JsonApiUserSettingInDocument} jsonApiUserSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserSettings: (userId: string, id: string, jsonApiUserSettingInDocument: JsonApiUserSettingInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * Request parameters for createEntityUserSettings operation in UserSettingsApi.
 * @export
 * @interface UserSettingsApiCreateEntityUserSettingsRequest
 */
export declare interface UserSettingsApiCreateEntityUserSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof UserSettingsApiCreateEntityUserSettings
     */
    readonly userId: string;
    /**
     *
     * @type {JsonApiUserSettingInDocument}
     * @memberof UserSettingsApiCreateEntityUserSettings
     */
    readonly jsonApiUserSettingInDocument: JsonApiUserSettingInDocument;
}

/**
 * Request parameters for deleteEntityUserSettings operation in UserSettingsApi.
 * @export
 * @interface UserSettingsApiDeleteEntityUserSettingsRequest
 */
export declare interface UserSettingsApiDeleteEntityUserSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof UserSettingsApiDeleteEntityUserSettings
     */
    readonly userId: string;
    /**
     *
     * @type {string}
     * @memberof UserSettingsApiDeleteEntityUserSettings
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof UserSettingsApiDeleteEntityUserSettings
     */
    readonly filter?: string;
}

/**
 * UserSettingsApi - factory interface
 * @export
 */
export declare const UserSettingsApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Post new user settings for the user
     * @param {UserSettingsApiCreateEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserSettings(requestParameters: UserSettingsApiCreateEntityUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserSettingOutDocument>;
    /**
     *
     * @summary Delete a setting for a user
     * @param {UserSettingsApiDeleteEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserSettings(requestParameters: UserSettingsApiDeleteEntityUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary List all settings for a user
     * @param {UserSettingsApiGetAllEntitiesUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserSettings(requestParameters: UserSettingsApiGetAllEntitiesUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserSettingOutList>;
    /**
     *
     * @summary Get a setting for a user
     * @param {UserSettingsApiGetEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserSettings(requestParameters: UserSettingsApiGetEntityUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserSettingOutDocument>;
    /**
     *
     * @summary Put new user settings for the user
     * @param {UserSettingsApiUpdateEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserSettings(requestParameters: UserSettingsApiUpdateEntityUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserSettingOutDocument>;
};

/**
 * UserSettingsApi - functional programming interface
 * @export
 */
export declare const UserSettingsApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post new user settings for the user
     * @param {string} userId
     * @param {JsonApiUserSettingInDocument} jsonApiUserSettingInDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserSettings(userId: string, jsonApiUserSettingInDocument: JsonApiUserSettingInDocument, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserSettingOutDocument>>;
    /**
     *
     * @summary Delete a setting for a user
     * @param {string} userId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserSettings(userId: string, id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary List all settings for a user
     * @param {string} userId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserSettings(userId: string, filter?: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserSettingOutList>>;
    /**
     *
     * @summary Get a setting for a user
     * @param {string} userId
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserSettings(userId: string, id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserSettingOutDocument>>;
    /**
     *
     * @summary Put new user settings for the user
     * @param {string} userId
     * @param {string} id
     * @param {JsonApiUserSettingInDocument} jsonApiUserSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserSettings(userId: string, id: string, jsonApiUserSettingInDocument: JsonApiUserSettingInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserSettingOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesUserSettings operation in UserSettingsApi.
 * @export
 * @interface UserSettingsApiGetAllEntitiesUserSettingsRequest
 */
export declare interface UserSettingsApiGetAllEntitiesUserSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof UserSettingsApiGetAllEntitiesUserSettings
     */
    readonly userId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof UserSettingsApiGetAllEntitiesUserSettings
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof UserSettingsApiGetAllEntitiesUserSettings
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof UserSettingsApiGetAllEntitiesUserSettings
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof UserSettingsApiGetAllEntitiesUserSettings
     */
    readonly sort?: Array<string>;
}

/**
 * Request parameters for getEntityUserSettings operation in UserSettingsApi.
 * @export
 * @interface UserSettingsApiGetEntityUserSettingsRequest
 */
export declare interface UserSettingsApiGetEntityUserSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof UserSettingsApiGetEntityUserSettings
     */
    readonly userId: string;
    /**
     *
     * @type {string}
     * @memberof UserSettingsApiGetEntityUserSettings
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof UserSettingsApiGetEntityUserSettings
     */
    readonly filter?: string;
}

/**
 * UserSettingsApi - interface
 * @export
 * @interface UserSettingsApi
 */
export declare interface UserSettingsApiInterface {
    /**
     *
     * @summary Post new user settings for the user
     * @param {UserSettingsApiCreateEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSettingsApiInterface
     */
    createEntityUserSettings(requestParameters: UserSettingsApiCreateEntityUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserSettingOutDocument>;
    /**
     *
     * @summary Delete a setting for a user
     * @param {UserSettingsApiDeleteEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSettingsApiInterface
     */
    deleteEntityUserSettings(requestParameters: UserSettingsApiDeleteEntityUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary List all settings for a user
     * @param {UserSettingsApiGetAllEntitiesUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSettingsApiInterface
     */
    getAllEntitiesUserSettings(requestParameters: UserSettingsApiGetAllEntitiesUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserSettingOutList>;
    /**
     *
     * @summary Get a setting for a user
     * @param {UserSettingsApiGetEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSettingsApiInterface
     */
    getEntityUserSettings(requestParameters: UserSettingsApiGetEntityUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserSettingOutDocument>;
    /**
     *
     * @summary Put new user settings for the user
     * @param {UserSettingsApiUpdateEntityUserSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSettingsApiInterface
     */
    updateEntityUserSettings(requestParameters: UserSettingsApiUpdateEntityUserSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserSettingOutDocument>;
}

/**
 * Request parameters for updateEntityUserSettings operation in UserSettingsApi.
 * @export
 * @interface UserSettingsApiUpdateEntityUserSettingsRequest
 */
export declare interface UserSettingsApiUpdateEntityUserSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof UserSettingsApiUpdateEntityUserSettings
     */
    readonly userId: string;
    /**
     *
     * @type {string}
     * @memberof UserSettingsApiUpdateEntityUserSettings
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiUserSettingInDocument}
     * @memberof UserSettingsApiUpdateEntityUserSettings
     */
    readonly jsonApiUserSettingInDocument: JsonApiUserSettingInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof UserSettingsApiUpdateEntityUserSettings
     */
    readonly filter?: string;
}

export declare const ValidateRelationsHeader: {
    "X-GDC-VALIDATE-RELATIONS": string;
};

/**
 * VisualizationObjectApi - object-oriented interface
 * @export
 * @class VisualizationObjectApi
 * @extends {BaseAPI}
 */
export declare class VisualizationObjectApi extends MetadataBaseApi implements VisualizationObjectApiInterface {
    /**
     *
     * @summary Post Visualization Objects
     * @param {VisualizationObjectApiCreateEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisualizationObjectApi
     */
    createEntityVisualizationObjects(requestParameters: VisualizationObjectApiCreateEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiVisualizationObjectOutDocument, any>>;
    /**
     *
     * @summary Delete a Visualization Object
     * @param {VisualizationObjectApiDeleteEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisualizationObjectApi
     */
    deleteEntityVisualizationObjects(requestParameters: VisualizationObjectApiDeleteEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Get all Visualization Objects
     * @param {VisualizationObjectApiGetAllEntitiesVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisualizationObjectApi
     */
    getAllEntitiesVisualizationObjects(requestParameters: VisualizationObjectApiGetAllEntitiesVisualizationObjectsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiVisualizationObjectOutList, any>>;
    /**
     *
     * @summary Get a Visualization Object
     * @param {VisualizationObjectApiGetEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisualizationObjectApi
     */
    getEntityVisualizationObjects(requestParameters: VisualizationObjectApiGetEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiVisualizationObjectOutDocument, any>>;
    /**
     *
     * @summary Patch a Visualization Object
     * @param {VisualizationObjectApiPatchEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisualizationObjectApi
     */
    patchEntityVisualizationObjects(requestParameters: VisualizationObjectApiPatchEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiVisualizationObjectOutDocument, any>>;
    /**
     *
     * @summary Put a Visualization Object
     * @param {VisualizationObjectApiUpdateEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisualizationObjectApi
     */
    updateEntityVisualizationObjects(requestParameters: VisualizationObjectApiUpdateEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiVisualizationObjectOutDocument, any>>;
}

/**
 * VisualizationObjectApi - axios parameter creator
 * @export
 */
export declare const VisualizationObjectApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post Visualization Objects
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectPostOptionalIdDocument} jsonApiVisualizationObjectPostOptionalIdDocument
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityVisualizationObjects: (workspaceId: string, jsonApiVisualizationObjectPostOptionalIdDocument: JsonApiVisualizationObjectPostOptionalIdDocument, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Visualization Object
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityVisualizationObjects: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Visualization Objects
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesVisualizationObjects: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Visualization Object
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityVisualizationObjects: (workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Visualization Object
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectPatchDocument} jsonApiVisualizationObjectPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityVisualizationObjects: (workspaceId: string, objectId: string, jsonApiVisualizationObjectPatchDocument: JsonApiVisualizationObjectPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a Visualization Object
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityVisualizationObjects: (workspaceId: string, objectId: string, jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * Request parameters for createEntityVisualizationObjects operation in VisualizationObjectApi.
 * @export
 * @interface VisualizationObjectApiCreateEntityVisualizationObjectsRequest
 */
export declare interface VisualizationObjectApiCreateEntityVisualizationObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof VisualizationObjectApiCreateEntityVisualizationObjects
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiVisualizationObjectPostOptionalIdDocument}
     * @memberof VisualizationObjectApiCreateEntityVisualizationObjects
     */
    readonly jsonApiVisualizationObjectPostOptionalIdDocument: JsonApiVisualizationObjectPostOptionalIdDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof VisualizationObjectApiCreateEntityVisualizationObjects
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof VisualizationObjectApiCreateEntityVisualizationObjects
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for deleteEntityVisualizationObjects operation in VisualizationObjectApi.
 * @export
 * @interface VisualizationObjectApiDeleteEntityVisualizationObjectsRequest
 */
export declare interface VisualizationObjectApiDeleteEntityVisualizationObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof VisualizationObjectApiDeleteEntityVisualizationObjects
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof VisualizationObjectApiDeleteEntityVisualizationObjects
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof VisualizationObjectApiDeleteEntityVisualizationObjects
     */
    readonly filter?: string;
}

/**
 * VisualizationObjectApi - factory interface
 * @export
 */
export declare const VisualizationObjectApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Post Visualization Objects
     * @param {VisualizationObjectApiCreateEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityVisualizationObjects(requestParameters: VisualizationObjectApiCreateEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @summary Delete a Visualization Object
     * @param {VisualizationObjectApiDeleteEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityVisualizationObjects(requestParameters: VisualizationObjectApiDeleteEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all Visualization Objects
     * @param {VisualizationObjectApiGetAllEntitiesVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesVisualizationObjects(requestParameters: VisualizationObjectApiGetAllEntitiesVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutList>;
    /**
     *
     * @summary Get a Visualization Object
     * @param {VisualizationObjectApiGetEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityVisualizationObjects(requestParameters: VisualizationObjectApiGetEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @summary Patch a Visualization Object
     * @param {VisualizationObjectApiPatchEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityVisualizationObjects(requestParameters: VisualizationObjectApiPatchEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @summary Put a Visualization Object
     * @param {VisualizationObjectApiUpdateEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityVisualizationObjects(requestParameters: VisualizationObjectApiUpdateEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
};

/**
 * VisualizationObjectApi - functional programming interface
 * @export
 */
export declare const VisualizationObjectApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post Visualization Objects
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectPostOptionalIdDocument} jsonApiVisualizationObjectPostOptionalIdDocument
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityVisualizationObjects(workspaceId: string, jsonApiVisualizationObjectPostOptionalIdDocument: JsonApiVisualizationObjectPostOptionalIdDocument, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutDocument>>;
    /**
     *
     * @summary Delete a Visualization Object
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityVisualizationObjects(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get all Visualization Objects
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesVisualizationObjects(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutList>>;
    /**
     *
     * @summary Get a Visualization Object
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityVisualizationObjects(workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutDocument>>;
    /**
     *
     * @summary Patch a Visualization Object
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectPatchDocument} jsonApiVisualizationObjectPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityVisualizationObjects(workspaceId: string, objectId: string, jsonApiVisualizationObjectPatchDocument: JsonApiVisualizationObjectPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutDocument>>;
    /**
     *
     * @summary Put a Visualization Object
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityVisualizationObjects(workspaceId: string, objectId: string, jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesVisualizationObjects operation in VisualizationObjectApi.
 * @export
 * @interface VisualizationObjectApiGetAllEntitiesVisualizationObjectsRequest
 */
export declare interface VisualizationObjectApiGetAllEntitiesVisualizationObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof VisualizationObjectApiGetAllEntitiesVisualizationObjects
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof VisualizationObjectApiGetAllEntitiesVisualizationObjects
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof VisualizationObjectApiGetAllEntitiesVisualizationObjects
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof VisualizationObjectApiGetAllEntitiesVisualizationObjects
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof VisualizationObjectApiGetAllEntitiesVisualizationObjects
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof VisualizationObjectApiGetAllEntitiesVisualizationObjects
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof VisualizationObjectApiGetAllEntitiesVisualizationObjects
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof VisualizationObjectApiGetAllEntitiesVisualizationObjects
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof VisualizationObjectApiGetAllEntitiesVisualizationObjects
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityVisualizationObjects operation in VisualizationObjectApi.
 * @export
 * @interface VisualizationObjectApiGetEntityVisualizationObjectsRequest
 */
export declare interface VisualizationObjectApiGetEntityVisualizationObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof VisualizationObjectApiGetEntityVisualizationObjects
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof VisualizationObjectApiGetEntityVisualizationObjects
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof VisualizationObjectApiGetEntityVisualizationObjects
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof VisualizationObjectApiGetEntityVisualizationObjects
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof VisualizationObjectApiGetEntityVisualizationObjects
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof VisualizationObjectApiGetEntityVisualizationObjects
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * VisualizationObjectApi - interface
 * @export
 * @interface VisualizationObjectApi
 */
export declare interface VisualizationObjectApiInterface {
    /**
     *
     * @summary Post Visualization Objects
     * @param {VisualizationObjectApiCreateEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisualizationObjectApiInterface
     */
    createEntityVisualizationObjects(requestParameters: VisualizationObjectApiCreateEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @summary Delete a Visualization Object
     * @param {VisualizationObjectApiDeleteEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisualizationObjectApiInterface
     */
    deleteEntityVisualizationObjects(requestParameters: VisualizationObjectApiDeleteEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all Visualization Objects
     * @param {VisualizationObjectApiGetAllEntitiesVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisualizationObjectApiInterface
     */
    getAllEntitiesVisualizationObjects(requestParameters: VisualizationObjectApiGetAllEntitiesVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutList>;
    /**
     *
     * @summary Get a Visualization Object
     * @param {VisualizationObjectApiGetEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisualizationObjectApiInterface
     */
    getEntityVisualizationObjects(requestParameters: VisualizationObjectApiGetEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @summary Patch a Visualization Object
     * @param {VisualizationObjectApiPatchEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisualizationObjectApiInterface
     */
    patchEntityVisualizationObjects(requestParameters: VisualizationObjectApiPatchEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @summary Put a Visualization Object
     * @param {VisualizationObjectApiUpdateEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VisualizationObjectApiInterface
     */
    updateEntityVisualizationObjects(requestParameters: VisualizationObjectApiUpdateEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
}

/**
 * Request parameters for patchEntityVisualizationObjects operation in VisualizationObjectApi.
 * @export
 * @interface VisualizationObjectApiPatchEntityVisualizationObjectsRequest
 */
export declare interface VisualizationObjectApiPatchEntityVisualizationObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof VisualizationObjectApiPatchEntityVisualizationObjects
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof VisualizationObjectApiPatchEntityVisualizationObjects
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiVisualizationObjectPatchDocument}
     * @memberof VisualizationObjectApiPatchEntityVisualizationObjects
     */
    readonly jsonApiVisualizationObjectPatchDocument: JsonApiVisualizationObjectPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof VisualizationObjectApiPatchEntityVisualizationObjects
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof VisualizationObjectApiPatchEntityVisualizationObjects
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for updateEntityVisualizationObjects operation in VisualizationObjectApi.
 * @export
 * @interface VisualizationObjectApiUpdateEntityVisualizationObjectsRequest
 */
export declare interface VisualizationObjectApiUpdateEntityVisualizationObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof VisualizationObjectApiUpdateEntityVisualizationObjects
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof VisualizationObjectApiUpdateEntityVisualizationObjects
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiVisualizationObjectInDocument}
     * @memberof VisualizationObjectApiUpdateEntityVisualizationObjects
     */
    readonly jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof VisualizationObjectApiUpdateEntityVisualizationObjects
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof VisualizationObjectApiUpdateEntityVisualizationObjects
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
}

declare namespace VisualizationObjectModelV1 {
    export {
        isVisualizationObject,
        IVisualizationObject,
        IAttribute,
        IMeasure,
        IDimension,
        ITotalItem,
        SortKey_2 as SortKey,
        TotalType,
        Identifier
    }
}
export { VisualizationObjectModelV1 }

declare namespace VisualizationObjectModelV2 {
    export {
        isVisualizationObject_2 as isVisualizationObject,
        IVisualizationObject_2 as IVisualizationObject
    }
}
export { VisualizationObjectModelV2 }

/**
 * A workspace identifier.
 * @export
 * @interface WorkspaceIdentifier
 */
export declare interface WorkspaceIdentifier {
    /**
     * Identifier of the workspace.
     * @type {string}
     * @memberof WorkspaceIdentifier
     */
    id: string;
    /**
     * A type.
     * @type {string}
     * @memberof WorkspaceIdentifier
     */
    type: WorkspaceIdentifierTypeEnum;
}

export declare const WorkspaceIdentifierTypeEnum: {
    readonly WORKSPACE: "workspace";
};

export declare type WorkspaceIdentifierTypeEnum = typeof WorkspaceIdentifierTypeEnum[keyof typeof WorkspaceIdentifierTypeEnum];

/**
 * WorkspaceObjectControllerApi - object-oriented interface
 * @export
 * @class WorkspaceObjectControllerApi
 * @extends {BaseAPI}
 */
export declare class WorkspaceObjectControllerApi extends MetadataBaseApi implements WorkspaceObjectControllerApiInterface {
    /**
     *
     * @summary Post Dashboards
     * @param {WorkspaceObjectControllerApiCreateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    createEntityAnalyticalDashboards(requestParameters: WorkspaceObjectControllerApiCreateEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAnalyticalDashboardOutDocument, any>>;
    /**
     *
     * @summary Post Attribute Hierarchies
     * @param {WorkspaceObjectControllerApiCreateEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    createEntityAttributeHierarchies(requestParameters: WorkspaceObjectControllerApiCreateEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAttributeHierarchyOutDocument, any>>;
    /**
     *
     * @summary Post Custom Application Settings
     * @param {WorkspaceObjectControllerApiCreateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    createEntityCustomApplicationSettings(requestParameters: WorkspaceObjectControllerApiCreateEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCustomApplicationSettingOutDocument, any>>;
    /**
     *
     * @summary Post Plugins
     * @param {WorkspaceObjectControllerApiCreateEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    createEntityDashboardPlugins(requestParameters: WorkspaceObjectControllerApiCreateEntityDashboardPluginsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDashboardPluginOutDocument, any>>;
    /**
     *
     * @summary Post Context Filters
     * @param {WorkspaceObjectControllerApiCreateEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    createEntityFilterContexts(requestParameters: WorkspaceObjectControllerApiCreateEntityFilterContextsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiFilterContextOutDocument, any>>;
    /**
     *
     * @summary Post Metrics
     * @param {WorkspaceObjectControllerApiCreateEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    createEntityMetrics(requestParameters: WorkspaceObjectControllerApiCreateEntityMetricsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiMetricOutDocument, any>>;
    /**
     *
     * @summary Post User Data Filters
     * @param {WorkspaceObjectControllerApiCreateEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    createEntityUserDataFilters(requestParameters: WorkspaceObjectControllerApiCreateEntityUserDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserDataFilterOutDocument, any>>;
    /**
     *
     * @summary Post Visualization Objects
     * @param {WorkspaceObjectControllerApiCreateEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    createEntityVisualizationObjects(requestParameters: WorkspaceObjectControllerApiCreateEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiVisualizationObjectOutDocument, any>>;
    /**
     *
     * @summary Post Settings for Workspace Data Filters
     * @param {WorkspaceObjectControllerApiCreateEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    createEntityWorkspaceDataFilterSettings(requestParameters: WorkspaceObjectControllerApiCreateEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterSettingOutDocument, any>>;
    /**
     *
     * @summary Post Workspace Data Filters
     * @param {WorkspaceObjectControllerApiCreateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    createEntityWorkspaceDataFilters(requestParameters: WorkspaceObjectControllerApiCreateEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterOutDocument, any>>;
    /**
     *
     * @summary Post Settings for Workspaces
     * @param {WorkspaceObjectControllerApiCreateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    createEntityWorkspaceSettings(requestParameters: WorkspaceObjectControllerApiCreateEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceSettingOutDocument, any>>;
    /**
     *
     * @summary Delete a Dashboard
     * @param {WorkspaceObjectControllerApiDeleteEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    deleteEntityAnalyticalDashboards(requestParameters: WorkspaceObjectControllerApiDeleteEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete an Attribute Hierarchy
     * @param {WorkspaceObjectControllerApiDeleteEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    deleteEntityAttributeHierarchies(requestParameters: WorkspaceObjectControllerApiDeleteEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a Custom Application Setting
     * @param {WorkspaceObjectControllerApiDeleteEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    deleteEntityCustomApplicationSettings(requestParameters: WorkspaceObjectControllerApiDeleteEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a Plugin
     * @param {WorkspaceObjectControllerApiDeleteEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    deleteEntityDashboardPlugins(requestParameters: WorkspaceObjectControllerApiDeleteEntityDashboardPluginsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a Context Filter
     * @param {WorkspaceObjectControllerApiDeleteEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    deleteEntityFilterContexts(requestParameters: WorkspaceObjectControllerApiDeleteEntityFilterContextsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a Metric
     * @param {WorkspaceObjectControllerApiDeleteEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    deleteEntityMetrics(requestParameters: WorkspaceObjectControllerApiDeleteEntityMetricsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a User Data Filter
     * @param {WorkspaceObjectControllerApiDeleteEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    deleteEntityUserDataFilters(requestParameters: WorkspaceObjectControllerApiDeleteEntityUserDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a Visualization Object
     * @param {WorkspaceObjectControllerApiDeleteEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    deleteEntityVisualizationObjects(requestParameters: WorkspaceObjectControllerApiDeleteEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a Settings for Workspace Data Filter
     * @param {WorkspaceObjectControllerApiDeleteEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    deleteEntityWorkspaceDataFilterSettings(requestParameters: WorkspaceObjectControllerApiDeleteEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a Workspace Data Filter
     * @param {WorkspaceObjectControllerApiDeleteEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    deleteEntityWorkspaceDataFilters(requestParameters: WorkspaceObjectControllerApiDeleteEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a Setting for Workspace
     * @param {WorkspaceObjectControllerApiDeleteEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    deleteEntityWorkspaceSettings(requestParameters: WorkspaceObjectControllerApiDeleteEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Get all Dashboards
     * @param {WorkspaceObjectControllerApiGetAllEntitiesAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesAnalyticalDashboards(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesAnalyticalDashboardsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAnalyticalDashboardOutList, any>>;
    /**
     *
     * @summary Get all Attribute Hierarchies
     * @param {WorkspaceObjectControllerApiGetAllEntitiesAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesAttributeHierarchies(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesAttributeHierarchiesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAttributeHierarchyOutList, any>>;
    /**
     *
     * @summary Get all Attributes
     * @param {WorkspaceObjectControllerApiGetAllEntitiesAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesAttributes(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesAttributesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAttributeOutList, any>>;
    /**
     *
     * @summary Get all Custom Application Settings
     * @param {WorkspaceObjectControllerApiGetAllEntitiesCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesCustomApplicationSettings(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesCustomApplicationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCustomApplicationSettingOutList, any>>;
    /**
     *
     * @summary Get all Plugins
     * @param {WorkspaceObjectControllerApiGetAllEntitiesDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesDashboardPlugins(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesDashboardPluginsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDashboardPluginOutList, any>>;
    /**
     *
     * @summary Get all Datasets
     * @param {WorkspaceObjectControllerApiGetAllEntitiesDatasetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesDatasets(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesDatasetsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDatasetOutList, any>>;
    /**
     *
     * @summary Get all Facts
     * @param {WorkspaceObjectControllerApiGetAllEntitiesFactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesFacts(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesFactsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiFactOutList, any>>;
    /**
     *
     * @summary Get all Context Filters
     * @param {WorkspaceObjectControllerApiGetAllEntitiesFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesFilterContexts(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesFilterContextsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiFilterContextOutList, any>>;
    /**
     *
     * @summary Get all Labels
     * @param {WorkspaceObjectControllerApiGetAllEntitiesLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesLabels(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesLabelsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiLabelOutList, any>>;
    /**
     *
     * @summary Get all Metrics
     * @param {WorkspaceObjectControllerApiGetAllEntitiesMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesMetrics(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesMetricsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiMetricOutList, any>>;
    /**
     *
     * @summary Get all User Data Filters
     * @param {WorkspaceObjectControllerApiGetAllEntitiesUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesUserDataFilters(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesUserDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserDataFilterOutList, any>>;
    /**
     *
     * @summary Get all Visualization Objects
     * @param {WorkspaceObjectControllerApiGetAllEntitiesVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesVisualizationObjects(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesVisualizationObjectsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiVisualizationObjectOutList, any>>;
    /**
     *
     * @summary Get all Settings for Workspace Data Filters
     * @param {WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesWorkspaceDataFilterSettings(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterSettingOutList, any>>;
    /**
     *
     * @summary Get all Workspace Data Filters
     * @param {WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesWorkspaceDataFilters(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterOutList, any>>;
    /**
     *
     * @summary Get all Setting for Workspaces
     * @param {WorkspaceObjectControllerApiGetAllEntitiesWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getAllEntitiesWorkspaceSettings(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesWorkspaceSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceSettingOutList, any>>;
    /**
     *
     * @summary Get a Dashboard
     * @param {WorkspaceObjectControllerApiGetEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityAnalyticalDashboards(requestParameters: WorkspaceObjectControllerApiGetEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAnalyticalDashboardOutDocument, any>>;
    /**
     *
     * @summary Get an Attribute Hierarchy
     * @param {WorkspaceObjectControllerApiGetEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityAttributeHierarchies(requestParameters: WorkspaceObjectControllerApiGetEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAttributeHierarchyOutDocument, any>>;
    /**
     *
     * @summary Get an Attribute
     * @param {WorkspaceObjectControllerApiGetEntityAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityAttributes(requestParameters: WorkspaceObjectControllerApiGetEntityAttributesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAttributeOutDocument, any>>;
    /**
     *
     * @summary Get a Custom Application Setting
     * @param {WorkspaceObjectControllerApiGetEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityCustomApplicationSettings(requestParameters: WorkspaceObjectControllerApiGetEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCustomApplicationSettingOutDocument, any>>;
    /**
     *
     * @summary Get a Plugin
     * @param {WorkspaceObjectControllerApiGetEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityDashboardPlugins(requestParameters: WorkspaceObjectControllerApiGetEntityDashboardPluginsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDashboardPluginOutDocument, any>>;
    /**
     *
     * @summary Get a Dataset
     * @param {WorkspaceObjectControllerApiGetEntityDatasetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityDatasets(requestParameters: WorkspaceObjectControllerApiGetEntityDatasetsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDatasetOutDocument, any>>;
    /**
     *
     * @summary Get a Fact
     * @param {WorkspaceObjectControllerApiGetEntityFactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityFacts(requestParameters: WorkspaceObjectControllerApiGetEntityFactsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiFactOutDocument, any>>;
    /**
     *
     * @summary Get a Context Filter
     * @param {WorkspaceObjectControllerApiGetEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityFilterContexts(requestParameters: WorkspaceObjectControllerApiGetEntityFilterContextsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiFilterContextOutDocument, any>>;
    /**
     *
     * @summary Get a Label
     * @param {WorkspaceObjectControllerApiGetEntityLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityLabels(requestParameters: WorkspaceObjectControllerApiGetEntityLabelsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiLabelOutDocument, any>>;
    /**
     *
     * @summary Get a Metric
     * @param {WorkspaceObjectControllerApiGetEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityMetrics(requestParameters: WorkspaceObjectControllerApiGetEntityMetricsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiMetricOutDocument, any>>;
    /**
     *
     * @summary Get a User Data Filter
     * @param {WorkspaceObjectControllerApiGetEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityUserDataFilters(requestParameters: WorkspaceObjectControllerApiGetEntityUserDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserDataFilterOutDocument, any>>;
    /**
     *
     * @summary Get a Visualization Object
     * @param {WorkspaceObjectControllerApiGetEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityVisualizationObjects(requestParameters: WorkspaceObjectControllerApiGetEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiVisualizationObjectOutDocument, any>>;
    /**
     *
     * @summary Get a Setting for Workspace Data Filter
     * @param {WorkspaceObjectControllerApiGetEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityWorkspaceDataFilterSettings(requestParameters: WorkspaceObjectControllerApiGetEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterSettingOutDocument, any>>;
    /**
     *
     * @summary Get a Workspace Data Filter
     * @param {WorkspaceObjectControllerApiGetEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityWorkspaceDataFilters(requestParameters: WorkspaceObjectControllerApiGetEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterOutDocument, any>>;
    /**
     *
     * @summary Get a Setting for Workspace
     * @param {WorkspaceObjectControllerApiGetEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    getEntityWorkspaceSettings(requestParameters: WorkspaceObjectControllerApiGetEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceSettingOutDocument, any>>;
    /**
     *
     * @summary Patch a Dashboard
     * @param {WorkspaceObjectControllerApiPatchEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    patchEntityAnalyticalDashboards(requestParameters: WorkspaceObjectControllerApiPatchEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAnalyticalDashboardOutDocument, any>>;
    /**
     *
     * @summary Patch an Attribute Hierarchy
     * @param {WorkspaceObjectControllerApiPatchEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    patchEntityAttributeHierarchies(requestParameters: WorkspaceObjectControllerApiPatchEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAttributeHierarchyOutDocument, any>>;
    /**
     *
     * @summary Patch a Custom Application Setting
     * @param {WorkspaceObjectControllerApiPatchEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    patchEntityCustomApplicationSettings(requestParameters: WorkspaceObjectControllerApiPatchEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCustomApplicationSettingOutDocument, any>>;
    /**
     *
     * @summary Patch a Plugin
     * @param {WorkspaceObjectControllerApiPatchEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    patchEntityDashboardPlugins(requestParameters: WorkspaceObjectControllerApiPatchEntityDashboardPluginsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDashboardPluginOutDocument, any>>;
    /**
     *
     * @summary Patch a Context Filter
     * @param {WorkspaceObjectControllerApiPatchEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    patchEntityFilterContexts(requestParameters: WorkspaceObjectControllerApiPatchEntityFilterContextsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiFilterContextOutDocument, any>>;
    /**
     *
     * @summary Patch a Metric
     * @param {WorkspaceObjectControllerApiPatchEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    patchEntityMetrics(requestParameters: WorkspaceObjectControllerApiPatchEntityMetricsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiMetricOutDocument, any>>;
    /**
     *
     * @summary Patch a User Data Filter
     * @param {WorkspaceObjectControllerApiPatchEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    patchEntityUserDataFilters(requestParameters: WorkspaceObjectControllerApiPatchEntityUserDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserDataFilterOutDocument, any>>;
    /**
     *
     * @summary Patch a Visualization Object
     * @param {WorkspaceObjectControllerApiPatchEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    patchEntityVisualizationObjects(requestParameters: WorkspaceObjectControllerApiPatchEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiVisualizationObjectOutDocument, any>>;
    /**
     *
     * @summary Patch a Settings for Workspace Data Filter
     * @param {WorkspaceObjectControllerApiPatchEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    patchEntityWorkspaceDataFilterSettings(requestParameters: WorkspaceObjectControllerApiPatchEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterSettingOutDocument, any>>;
    /**
     *
     * @summary Patch a Workspace Data Filter
     * @param {WorkspaceObjectControllerApiPatchEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    patchEntityWorkspaceDataFilters(requestParameters: WorkspaceObjectControllerApiPatchEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterOutDocument, any>>;
    /**
     *
     * @summary Patch a Setting for Workspace
     * @param {WorkspaceObjectControllerApiPatchEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    patchEntityWorkspaceSettings(requestParameters: WorkspaceObjectControllerApiPatchEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceSettingOutDocument, any>>;
    /**
     *
     * @summary Put Dashboards
     * @param {WorkspaceObjectControllerApiUpdateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    updateEntityAnalyticalDashboards(requestParameters: WorkspaceObjectControllerApiUpdateEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAnalyticalDashboardOutDocument, any>>;
    /**
     *
     * @summary Put an Attribute Hierarchy
     * @param {WorkspaceObjectControllerApiUpdateEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    updateEntityAttributeHierarchies(requestParameters: WorkspaceObjectControllerApiUpdateEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiAttributeHierarchyOutDocument, any>>;
    /**
     *
     * @summary Put a Custom Application Setting
     * @param {WorkspaceObjectControllerApiUpdateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    updateEntityCustomApplicationSettings(requestParameters: WorkspaceObjectControllerApiUpdateEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCustomApplicationSettingOutDocument, any>>;
    /**
     *
     * @summary Put a Plugin
     * @param {WorkspaceObjectControllerApiUpdateEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    updateEntityDashboardPlugins(requestParameters: WorkspaceObjectControllerApiUpdateEntityDashboardPluginsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiDashboardPluginOutDocument, any>>;
    /**
     *
     * @summary Put a Context Filter
     * @param {WorkspaceObjectControllerApiUpdateEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    updateEntityFilterContexts(requestParameters: WorkspaceObjectControllerApiUpdateEntityFilterContextsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiFilterContextOutDocument, any>>;
    /**
     *
     * @summary Put a Metric
     * @param {WorkspaceObjectControllerApiUpdateEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    updateEntityMetrics(requestParameters: WorkspaceObjectControllerApiUpdateEntityMetricsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiMetricOutDocument, any>>;
    /**
     *
     * @summary Put a User Data Filter
     * @param {WorkspaceObjectControllerApiUpdateEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    updateEntityUserDataFilters(requestParameters: WorkspaceObjectControllerApiUpdateEntityUserDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiUserDataFilterOutDocument, any>>;
    /**
     *
     * @summary Put a Visualization Object
     * @param {WorkspaceObjectControllerApiUpdateEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    updateEntityVisualizationObjects(requestParameters: WorkspaceObjectControllerApiUpdateEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiVisualizationObjectOutDocument, any>>;
    /**
     *
     * @summary Put a Settings for Workspace Data Filter
     * @param {WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    updateEntityWorkspaceDataFilterSettings(requestParameters: WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterSettingOutDocument, any>>;
    /**
     *
     * @summary Put a Workspace Data Filter
     * @param {WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    updateEntityWorkspaceDataFilters(requestParameters: WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceDataFilterOutDocument, any>>;
    /**
     *
     * @summary Put a Setting for a Workspace
     * @param {WorkspaceObjectControllerApiUpdateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    updateEntityWorkspaceSettings(requestParameters: WorkspaceObjectControllerApiUpdateEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceSettingOutDocument, any>>;
}

/**
 * WorkspaceObjectControllerApi - axios parameter creator
 * @export
 */
export declare const WorkspaceObjectControllerApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post Dashboards
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardPostOptionalIdDocument} jsonApiAnalyticalDashboardPostOptionalIdDocument
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityAnalyticalDashboards: (workspaceId: string, jsonApiAnalyticalDashboardPostOptionalIdDocument: JsonApiAnalyticalDashboardPostOptionalIdDocument, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Attribute Hierarchies
     * @param {string} workspaceId
     * @param {JsonApiAttributeHierarchyInDocument} jsonApiAttributeHierarchyInDocument
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityAttributeHierarchies: (workspaceId: string, jsonApiAttributeHierarchyInDocument: JsonApiAttributeHierarchyInDocument, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Custom Application Settings
     * @param {string} workspaceId
     * @param {JsonApiCustomApplicationSettingPostOptionalIdDocument} jsonApiCustomApplicationSettingPostOptionalIdDocument
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityCustomApplicationSettings: (workspaceId: string, jsonApiCustomApplicationSettingPostOptionalIdDocument: JsonApiCustomApplicationSettingPostOptionalIdDocument, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Plugins
     * @param {string} workspaceId
     * @param {JsonApiDashboardPluginPostOptionalIdDocument} jsonApiDashboardPluginPostOptionalIdDocument
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDashboardPlugins: (workspaceId: string, jsonApiDashboardPluginPostOptionalIdDocument: JsonApiDashboardPluginPostOptionalIdDocument, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Context Filters
     * @param {string} workspaceId
     * @param {JsonApiFilterContextPostOptionalIdDocument} jsonApiFilterContextPostOptionalIdDocument
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityFilterContexts: (workspaceId: string, jsonApiFilterContextPostOptionalIdDocument: JsonApiFilterContextPostOptionalIdDocument, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Metrics
     * @param {string} workspaceId
     * @param {JsonApiMetricPostOptionalIdDocument} jsonApiMetricPostOptionalIdDocument
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityMetrics: (workspaceId: string, jsonApiMetricPostOptionalIdDocument: JsonApiMetricPostOptionalIdDocument, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post User Data Filters
     * @param {string} workspaceId
     * @param {JsonApiUserDataFilterPostOptionalIdDocument} jsonApiUserDataFilterPostOptionalIdDocument
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserDataFilters: (workspaceId: string, jsonApiUserDataFilterPostOptionalIdDocument: JsonApiUserDataFilterPostOptionalIdDocument, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Visualization Objects
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectPostOptionalIdDocument} jsonApiVisualizationObjectPostOptionalIdDocument
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityVisualizationObjects: (workspaceId: string, jsonApiVisualizationObjectPostOptionalIdDocument: JsonApiVisualizationObjectPostOptionalIdDocument, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Settings for Workspace Data Filters
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterSettingInDocument} jsonApiWorkspaceDataFilterSettingInDocument
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceDataFilterSettings: (workspaceId: string, jsonApiWorkspaceDataFilterSettingInDocument: JsonApiWorkspaceDataFilterSettingInDocument, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Workspace Data Filters
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceDataFilters: (workspaceId: string, jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Settings for Workspaces
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceSettingPostOptionalIdDocument} jsonApiWorkspaceSettingPostOptionalIdDocument
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceSettings: (workspaceId: string, jsonApiWorkspaceSettingPostOptionalIdDocument: JsonApiWorkspaceSettingPostOptionalIdDocument, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Dashboard
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityAnalyticalDashboards: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete an Attribute Hierarchy
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityAttributeHierarchies: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Custom Application Setting
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityCustomApplicationSettings: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Plugin
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDashboardPlugins: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Context Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityFilterContexts: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Metric
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityMetrics: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a User Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserDataFilters: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Visualization Object
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityVisualizationObjects: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Settings for Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceDataFilterSettings: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceDataFilters: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Setting for Workspace
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceSettings: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Dashboards
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAnalyticalDashboards: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Attribute Hierarchies
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAttributeHierarchies: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Attributes
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'attributeHierarchies' | 'dataset' | 'defaultView' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAttributes: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"datasets" | "labels" | "attributeHierarchies" | "dataset" | "defaultView" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Custom Application Settings
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesCustomApplicationSettings: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Plugins
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDashboardPlugins: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Datasets
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'workspaceDataFilters' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDatasets: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"attributes" | "facts" | "datasets" | "workspaceDataFilters" | "references" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Facts
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFacts: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"datasets" | "dataset" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Context Filters
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFilterContexts: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Labels
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesLabels: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"attributes" | "attribute" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Metrics
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesMetrics: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all User Data Filters
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserDataFilters: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Visualization Objects
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesVisualizationObjects: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Settings for Workspace Data Filters
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilterSettings: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Workspace Data Filters
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilters: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Setting for Workspaces
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceSettings: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Dashboard
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAnalyticalDashboards: (workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get an Attribute Hierarchy
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAttributeHierarchies: (workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get an Attribute
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'attributeHierarchies' | 'dataset' | 'defaultView' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAttributes: (workspaceId: string, objectId: string, filter?: string, include?: Array<"datasets" | "labels" | "attributeHierarchies" | "dataset" | "defaultView" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Custom Application Setting
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCustomApplicationSettings: (workspaceId: string, objectId: string, filter?: string, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Plugin
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDashboardPlugins: (workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Dataset
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'workspaceDataFilters' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDatasets: (workspaceId: string, objectId: string, filter?: string, include?: Array<"attributes" | "facts" | "datasets" | "workspaceDataFilters" | "references" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Fact
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFacts: (workspaceId: string, objectId: string, filter?: string, include?: Array<"datasets" | "dataset" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Context Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFilterContexts: (workspaceId: string, objectId: string, filter?: string, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Label
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityLabels: (workspaceId: string, objectId: string, filter?: string, include?: Array<"attributes" | "attribute" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Metric
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityMetrics: (workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a User Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserDataFilters: (workspaceId: string, objectId: string, filter?: string, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Visualization Object
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityVisualizationObjects: (workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Setting for Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilterSettings: (workspaceId: string, objectId: string, filter?: string, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, xGDCVALIDATERELATIONS?: boolean, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilters: (workspaceId: string, objectId: string, filter?: string, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, xGDCVALIDATERELATIONS?: boolean, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Setting for Workspace
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceSettings: (workspaceId: string, objectId: string, filter?: string, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Dashboard
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardPatchDocument} jsonApiAnalyticalDashboardPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityAnalyticalDashboards: (workspaceId: string, objectId: string, jsonApiAnalyticalDashboardPatchDocument: JsonApiAnalyticalDashboardPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch an Attribute Hierarchy
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAttributeHierarchyPatchDocument} jsonApiAttributeHierarchyPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityAttributeHierarchies: (workspaceId: string, objectId: string, jsonApiAttributeHierarchyPatchDocument: JsonApiAttributeHierarchyPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Custom Application Setting
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiCustomApplicationSettingPatchDocument} jsonApiCustomApplicationSettingPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCustomApplicationSettings: (workspaceId: string, objectId: string, jsonApiCustomApplicationSettingPatchDocument: JsonApiCustomApplicationSettingPatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Plugin
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiDashboardPluginPatchDocument} jsonApiDashboardPluginPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityDashboardPlugins: (workspaceId: string, objectId: string, jsonApiDashboardPluginPatchDocument: JsonApiDashboardPluginPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Context Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextPatchDocument} jsonApiFilterContextPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityFilterContexts: (workspaceId: string, objectId: string, jsonApiFilterContextPatchDocument: JsonApiFilterContextPatchDocument, filter?: string, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Metric
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricPatchDocument} jsonApiMetricPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityMetrics: (workspaceId: string, objectId: string, jsonApiMetricPatchDocument: JsonApiMetricPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a User Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiUserDataFilterPatchDocument} jsonApiUserDataFilterPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUserDataFilters: (workspaceId: string, objectId: string, jsonApiUserDataFilterPatchDocument: JsonApiUserDataFilterPatchDocument, filter?: string, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Visualization Object
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectPatchDocument} jsonApiVisualizationObjectPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityVisualizationObjects: (workspaceId: string, objectId: string, jsonApiVisualizationObjectPatchDocument: JsonApiVisualizationObjectPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Settings for Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterSettingPatchDocument} jsonApiWorkspaceDataFilterSettingPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceDataFilterSettings: (workspaceId: string, objectId: string, jsonApiWorkspaceDataFilterSettingPatchDocument: JsonApiWorkspaceDataFilterSettingPatchDocument, filter?: string, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterPatchDocument} jsonApiWorkspaceDataFilterPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceDataFilters: (workspaceId: string, objectId: string, jsonApiWorkspaceDataFilterPatchDocument: JsonApiWorkspaceDataFilterPatchDocument, filter?: string, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Setting for Workspace
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceSettingPatchDocument} jsonApiWorkspaceSettingPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceSettings: (workspaceId: string, objectId: string, jsonApiWorkspaceSettingPatchDocument: JsonApiWorkspaceSettingPatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put Dashboards
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityAnalyticalDashboards: (workspaceId: string, objectId: string, jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument, filter?: string, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put an Attribute Hierarchy
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAttributeHierarchyInDocument} jsonApiAttributeHierarchyInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityAttributeHierarchies: (workspaceId: string, objectId: string, jsonApiAttributeHierarchyInDocument: JsonApiAttributeHierarchyInDocument, filter?: string, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a Custom Application Setting
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiCustomApplicationSettingInDocument} jsonApiCustomApplicationSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCustomApplicationSettings: (workspaceId: string, objectId: string, jsonApiCustomApplicationSettingInDocument: JsonApiCustomApplicationSettingInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a Plugin
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDashboardPlugins: (workspaceId: string, objectId: string, jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument, filter?: string, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a Context Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityFilterContexts: (workspaceId: string, objectId: string, jsonApiFilterContextInDocument: JsonApiFilterContextInDocument, filter?: string, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a Metric
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityMetrics: (workspaceId: string, objectId: string, jsonApiMetricInDocument: JsonApiMetricInDocument, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a User Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiUserDataFilterInDocument} jsonApiUserDataFilterInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserDataFilters: (workspaceId: string, objectId: string, jsonApiUserDataFilterInDocument: JsonApiUserDataFilterInDocument, filter?: string, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a Visualization Object
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityVisualizationObjects: (workspaceId: string, objectId: string, jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a Settings for Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterSettingInDocument} jsonApiWorkspaceDataFilterSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceDataFilterSettings: (workspaceId: string, objectId: string, jsonApiWorkspaceDataFilterSettingInDocument: JsonApiWorkspaceDataFilterSettingInDocument, filter?: string, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceDataFilters: (workspaceId: string, objectId: string, jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument, filter?: string, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a Setting for a Workspace
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceSettingInDocument} jsonApiWorkspaceSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceSettings: (workspaceId: string, objectId: string, jsonApiWorkspaceSettingInDocument: JsonApiWorkspaceSettingInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * Request parameters for createEntityAnalyticalDashboards operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiCreateEntityAnalyticalDashboardsRequest
 */
export declare interface WorkspaceObjectControllerApiCreateEntityAnalyticalDashboardsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiCreateEntityAnalyticalDashboards
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPostOptionalIdDocument}
     * @memberof WorkspaceObjectControllerApiCreateEntityAnalyticalDashboards
     */
    readonly jsonApiAnalyticalDashboardPostOptionalIdDocument: JsonApiAnalyticalDashboardPostOptionalIdDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiCreateEntityAnalyticalDashboards
     */
    readonly include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiCreateEntityAnalyticalDashboards
     */
    readonly metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">;
}

/**
 * Request parameters for createEntityAttributeHierarchies operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiCreateEntityAttributeHierarchiesRequest
 */
export declare interface WorkspaceObjectControllerApiCreateEntityAttributeHierarchiesRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiCreateEntityAttributeHierarchies
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyInDocument}
     * @memberof WorkspaceObjectControllerApiCreateEntityAttributeHierarchies
     */
    readonly jsonApiAttributeHierarchyInDocument: JsonApiAttributeHierarchyInDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiCreateEntityAttributeHierarchies
     */
    readonly include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiCreateEntityAttributeHierarchies
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for createEntityCustomApplicationSettings operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiCreateEntityCustomApplicationSettingsRequest
 */
export declare interface WorkspaceObjectControllerApiCreateEntityCustomApplicationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiCreateEntityCustomApplicationSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiCustomApplicationSettingPostOptionalIdDocument}
     * @memberof WorkspaceObjectControllerApiCreateEntityCustomApplicationSettings
     */
    readonly jsonApiCustomApplicationSettingPostOptionalIdDocument: JsonApiCustomApplicationSettingPostOptionalIdDocument;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiCreateEntityCustomApplicationSettings
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for createEntityDashboardPlugins operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiCreateEntityDashboardPluginsRequest
 */
export declare interface WorkspaceObjectControllerApiCreateEntityDashboardPluginsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiCreateEntityDashboardPlugins
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiDashboardPluginPostOptionalIdDocument}
     * @memberof WorkspaceObjectControllerApiCreateEntityDashboardPlugins
     */
    readonly jsonApiDashboardPluginPostOptionalIdDocument: JsonApiDashboardPluginPostOptionalIdDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiCreateEntityDashboardPlugins
     */
    readonly include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiCreateEntityDashboardPlugins
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for createEntityFilterContexts operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiCreateEntityFilterContextsRequest
 */
export declare interface WorkspaceObjectControllerApiCreateEntityFilterContextsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiCreateEntityFilterContexts
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiFilterContextPostOptionalIdDocument}
     * @memberof WorkspaceObjectControllerApiCreateEntityFilterContexts
     */
    readonly jsonApiFilterContextPostOptionalIdDocument: JsonApiFilterContextPostOptionalIdDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiCreateEntityFilterContexts
     */
    readonly include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiCreateEntityFilterContexts
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for createEntityMetrics operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiCreateEntityMetricsRequest
 */
export declare interface WorkspaceObjectControllerApiCreateEntityMetricsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiCreateEntityMetrics
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiMetricPostOptionalIdDocument}
     * @memberof WorkspaceObjectControllerApiCreateEntityMetrics
     */
    readonly jsonApiMetricPostOptionalIdDocument: JsonApiMetricPostOptionalIdDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiCreateEntityMetrics
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiCreateEntityMetrics
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for createEntityUserDataFilters operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiCreateEntityUserDataFiltersRequest
 */
export declare interface WorkspaceObjectControllerApiCreateEntityUserDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiCreateEntityUserDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiUserDataFilterPostOptionalIdDocument}
     * @memberof WorkspaceObjectControllerApiCreateEntityUserDataFilters
     */
    readonly jsonApiUserDataFilterPostOptionalIdDocument: JsonApiUserDataFilterPostOptionalIdDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiCreateEntityUserDataFilters
     */
    readonly include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiCreateEntityUserDataFilters
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for createEntityVisualizationObjects operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiCreateEntityVisualizationObjectsRequest
 */
export declare interface WorkspaceObjectControllerApiCreateEntityVisualizationObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiCreateEntityVisualizationObjects
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiVisualizationObjectPostOptionalIdDocument}
     * @memberof WorkspaceObjectControllerApiCreateEntityVisualizationObjects
     */
    readonly jsonApiVisualizationObjectPostOptionalIdDocument: JsonApiVisualizationObjectPostOptionalIdDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiCreateEntityVisualizationObjects
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiCreateEntityVisualizationObjects
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for createEntityWorkspaceDataFilterSettings operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiCreateEntityWorkspaceDataFilterSettingsRequest
 */
export declare interface WorkspaceObjectControllerApiCreateEntityWorkspaceDataFilterSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiCreateEntityWorkspaceDataFilterSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingInDocument}
     * @memberof WorkspaceObjectControllerApiCreateEntityWorkspaceDataFilterSettings
     */
    readonly jsonApiWorkspaceDataFilterSettingInDocument: JsonApiWorkspaceDataFilterSettingInDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiCreateEntityWorkspaceDataFilterSettings
     */
    readonly include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;
}

/**
 * Request parameters for createEntityWorkspaceDataFilters operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiCreateEntityWorkspaceDataFiltersRequest
 */
export declare interface WorkspaceObjectControllerApiCreateEntityWorkspaceDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiCreateEntityWorkspaceDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInDocument}
     * @memberof WorkspaceObjectControllerApiCreateEntityWorkspaceDataFilters
     */
    readonly jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiCreateEntityWorkspaceDataFilters
     */
    readonly include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
}

/**
 * Request parameters for createEntityWorkspaceSettings operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiCreateEntityWorkspaceSettingsRequest
 */
export declare interface WorkspaceObjectControllerApiCreateEntityWorkspaceSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiCreateEntityWorkspaceSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPostOptionalIdDocument}
     * @memberof WorkspaceObjectControllerApiCreateEntityWorkspaceSettings
     */
    readonly jsonApiWorkspaceSettingPostOptionalIdDocument: JsonApiWorkspaceSettingPostOptionalIdDocument;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiCreateEntityWorkspaceSettings
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for deleteEntityAnalyticalDashboards operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiDeleteEntityAnalyticalDashboardsRequest
 */
export declare interface WorkspaceObjectControllerApiDeleteEntityAnalyticalDashboardsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityAnalyticalDashboards
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityAnalyticalDashboards
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityAnalyticalDashboards
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityAttributeHierarchies operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiDeleteEntityAttributeHierarchiesRequest
 */
export declare interface WorkspaceObjectControllerApiDeleteEntityAttributeHierarchiesRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityAttributeHierarchies
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityAttributeHierarchies
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityAttributeHierarchies
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityCustomApplicationSettings operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiDeleteEntityCustomApplicationSettingsRequest
 */
export declare interface WorkspaceObjectControllerApiDeleteEntityCustomApplicationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityCustomApplicationSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityCustomApplicationSettings
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityCustomApplicationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityDashboardPlugins operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiDeleteEntityDashboardPluginsRequest
 */
export declare interface WorkspaceObjectControllerApiDeleteEntityDashboardPluginsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityDashboardPlugins
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityDashboardPlugins
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityDashboardPlugins
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityFilterContexts operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiDeleteEntityFilterContextsRequest
 */
export declare interface WorkspaceObjectControllerApiDeleteEntityFilterContextsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityFilterContexts
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityFilterContexts
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityFilterContexts
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityMetrics operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiDeleteEntityMetricsRequest
 */
export declare interface WorkspaceObjectControllerApiDeleteEntityMetricsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityMetrics
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityMetrics
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityMetrics
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityUserDataFilters operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiDeleteEntityUserDataFiltersRequest
 */
export declare interface WorkspaceObjectControllerApiDeleteEntityUserDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityUserDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityUserDataFilters
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityUserDataFilters
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityVisualizationObjects operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiDeleteEntityVisualizationObjectsRequest
 */
export declare interface WorkspaceObjectControllerApiDeleteEntityVisualizationObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityVisualizationObjects
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityVisualizationObjects
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityVisualizationObjects
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityWorkspaceDataFilterSettings operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiDeleteEntityWorkspaceDataFilterSettingsRequest
 */
export declare interface WorkspaceObjectControllerApiDeleteEntityWorkspaceDataFilterSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityWorkspaceDataFilterSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityWorkspaceDataFilterSettings
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityWorkspaceDataFilterSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityWorkspaceDataFilters operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiDeleteEntityWorkspaceDataFiltersRequest
 */
export declare interface WorkspaceObjectControllerApiDeleteEntityWorkspaceDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityWorkspaceDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityWorkspaceDataFilters
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityWorkspaceDataFilters
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityWorkspaceSettings operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiDeleteEntityWorkspaceSettingsRequest
 */
export declare interface WorkspaceObjectControllerApiDeleteEntityWorkspaceSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityWorkspaceSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityWorkspaceSettings
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiDeleteEntityWorkspaceSettings
     */
    readonly filter?: string;
}

/**
 * WorkspaceObjectControllerApi - factory interface
 * @export
 */
export declare const WorkspaceObjectControllerApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Post Dashboards
     * @param {WorkspaceObjectControllerApiCreateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityAnalyticalDashboards(requestParameters: WorkspaceObjectControllerApiCreateEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @summary Post Attribute Hierarchies
     * @param {WorkspaceObjectControllerApiCreateEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityAttributeHierarchies(requestParameters: WorkspaceObjectControllerApiCreateEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutDocument>;
    /**
     *
     * @summary Post Custom Application Settings
     * @param {WorkspaceObjectControllerApiCreateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityCustomApplicationSettings(requestParameters: WorkspaceObjectControllerApiCreateEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;
    /**
     *
     * @summary Post Plugins
     * @param {WorkspaceObjectControllerApiCreateEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDashboardPlugins(requestParameters: WorkspaceObjectControllerApiCreateEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @summary Post Context Filters
     * @param {WorkspaceObjectControllerApiCreateEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityFilterContexts(requestParameters: WorkspaceObjectControllerApiCreateEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @summary Post Metrics
     * @param {WorkspaceObjectControllerApiCreateEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityMetrics(requestParameters: WorkspaceObjectControllerApiCreateEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @summary Post User Data Filters
     * @param {WorkspaceObjectControllerApiCreateEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserDataFilters(requestParameters: WorkspaceObjectControllerApiCreateEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutDocument>;
    /**
     *
     * @summary Post Visualization Objects
     * @param {WorkspaceObjectControllerApiCreateEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityVisualizationObjects(requestParameters: WorkspaceObjectControllerApiCreateEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @summary Post Settings for Workspace Data Filters
     * @param {WorkspaceObjectControllerApiCreateEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceDataFilterSettings(requestParameters: WorkspaceObjectControllerApiCreateEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @summary Post Workspace Data Filters
     * @param {WorkspaceObjectControllerApiCreateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceDataFilters(requestParameters: WorkspaceObjectControllerApiCreateEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @summary Post Settings for Workspaces
     * @param {WorkspaceObjectControllerApiCreateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceSettings(requestParameters: WorkspaceObjectControllerApiCreateEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;
    /**
     *
     * @summary Delete a Dashboard
     * @param {WorkspaceObjectControllerApiDeleteEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityAnalyticalDashboards(requestParameters: WorkspaceObjectControllerApiDeleteEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete an Attribute Hierarchy
     * @param {WorkspaceObjectControllerApiDeleteEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityAttributeHierarchies(requestParameters: WorkspaceObjectControllerApiDeleteEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Custom Application Setting
     * @param {WorkspaceObjectControllerApiDeleteEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityCustomApplicationSettings(requestParameters: WorkspaceObjectControllerApiDeleteEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Plugin
     * @param {WorkspaceObjectControllerApiDeleteEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDashboardPlugins(requestParameters: WorkspaceObjectControllerApiDeleteEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Context Filter
     * @param {WorkspaceObjectControllerApiDeleteEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityFilterContexts(requestParameters: WorkspaceObjectControllerApiDeleteEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Metric
     * @param {WorkspaceObjectControllerApiDeleteEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityMetrics(requestParameters: WorkspaceObjectControllerApiDeleteEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a User Data Filter
     * @param {WorkspaceObjectControllerApiDeleteEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserDataFilters(requestParameters: WorkspaceObjectControllerApiDeleteEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Visualization Object
     * @param {WorkspaceObjectControllerApiDeleteEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityVisualizationObjects(requestParameters: WorkspaceObjectControllerApiDeleteEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Settings for Workspace Data Filter
     * @param {WorkspaceObjectControllerApiDeleteEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceDataFilterSettings(requestParameters: WorkspaceObjectControllerApiDeleteEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Workspace Data Filter
     * @param {WorkspaceObjectControllerApiDeleteEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceDataFilters(requestParameters: WorkspaceObjectControllerApiDeleteEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Setting for Workspace
     * @param {WorkspaceObjectControllerApiDeleteEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceSettings(requestParameters: WorkspaceObjectControllerApiDeleteEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all Dashboards
     * @param {WorkspaceObjectControllerApiGetAllEntitiesAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAnalyticalDashboards(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutList>;
    /**
     *
     * @summary Get all Attribute Hierarchies
     * @param {WorkspaceObjectControllerApiGetAllEntitiesAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAttributeHierarchies(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutList>;
    /**
     *
     * @summary Get all Attributes
     * @param {WorkspaceObjectControllerApiGetAllEntitiesAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAttributes(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeOutList>;
    /**
     *
     * @summary Get all Custom Application Settings
     * @param {WorkspaceObjectControllerApiGetAllEntitiesCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesCustomApplicationSettings(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutList>;
    /**
     *
     * @summary Get all Plugins
     * @param {WorkspaceObjectControllerApiGetAllEntitiesDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDashboardPlugins(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutList>;
    /**
     *
     * @summary Get all Datasets
     * @param {WorkspaceObjectControllerApiGetAllEntitiesDatasetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDatasets(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesDatasetsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDatasetOutList>;
    /**
     *
     * @summary Get all Facts
     * @param {WorkspaceObjectControllerApiGetAllEntitiesFactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFacts(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesFactsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFactOutList>;
    /**
     *
     * @summary Get all Context Filters
     * @param {WorkspaceObjectControllerApiGetAllEntitiesFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFilterContexts(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutList>;
    /**
     *
     * @summary Get all Labels
     * @param {WorkspaceObjectControllerApiGetAllEntitiesLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesLabels(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesLabelsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiLabelOutList>;
    /**
     *
     * @summary Get all Metrics
     * @param {WorkspaceObjectControllerApiGetAllEntitiesMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesMetrics(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutList>;
    /**
     *
     * @summary Get all User Data Filters
     * @param {WorkspaceObjectControllerApiGetAllEntitiesUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserDataFilters(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutList>;
    /**
     *
     * @summary Get all Visualization Objects
     * @param {WorkspaceObjectControllerApiGetAllEntitiesVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesVisualizationObjects(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutList>;
    /**
     *
     * @summary Get all Settings for Workspace Data Filters
     * @param {WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilterSettings(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList>;
    /**
     *
     * @summary Get all Workspace Data Filters
     * @param {WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilters(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutList>;
    /**
     *
     * @summary Get all Setting for Workspaces
     * @param {WorkspaceObjectControllerApiGetAllEntitiesWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceSettings(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutList>;
    /**
     *
     * @summary Get a Dashboard
     * @param {WorkspaceObjectControllerApiGetEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAnalyticalDashboards(requestParameters: WorkspaceObjectControllerApiGetEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @summary Get an Attribute Hierarchy
     * @param {WorkspaceObjectControllerApiGetEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAttributeHierarchies(requestParameters: WorkspaceObjectControllerApiGetEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutDocument>;
    /**
     *
     * @summary Get an Attribute
     * @param {WorkspaceObjectControllerApiGetEntityAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAttributes(requestParameters: WorkspaceObjectControllerApiGetEntityAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeOutDocument>;
    /**
     *
     * @summary Get a Custom Application Setting
     * @param {WorkspaceObjectControllerApiGetEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCustomApplicationSettings(requestParameters: WorkspaceObjectControllerApiGetEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;
    /**
     *
     * @summary Get a Plugin
     * @param {WorkspaceObjectControllerApiGetEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDashboardPlugins(requestParameters: WorkspaceObjectControllerApiGetEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @summary Get a Dataset
     * @param {WorkspaceObjectControllerApiGetEntityDatasetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDatasets(requestParameters: WorkspaceObjectControllerApiGetEntityDatasetsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDatasetOutDocument>;
    /**
     *
     * @summary Get a Fact
     * @param {WorkspaceObjectControllerApiGetEntityFactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFacts(requestParameters: WorkspaceObjectControllerApiGetEntityFactsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFactOutDocument>;
    /**
     *
     * @summary Get a Context Filter
     * @param {WorkspaceObjectControllerApiGetEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFilterContexts(requestParameters: WorkspaceObjectControllerApiGetEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @summary Get a Label
     * @param {WorkspaceObjectControllerApiGetEntityLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityLabels(requestParameters: WorkspaceObjectControllerApiGetEntityLabelsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiLabelOutDocument>;
    /**
     *
     * @summary Get a Metric
     * @param {WorkspaceObjectControllerApiGetEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityMetrics(requestParameters: WorkspaceObjectControllerApiGetEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @summary Get a User Data Filter
     * @param {WorkspaceObjectControllerApiGetEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserDataFilters(requestParameters: WorkspaceObjectControllerApiGetEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutDocument>;
    /**
     *
     * @summary Get a Visualization Object
     * @param {WorkspaceObjectControllerApiGetEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityVisualizationObjects(requestParameters: WorkspaceObjectControllerApiGetEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @summary Get a Setting for Workspace Data Filter
     * @param {WorkspaceObjectControllerApiGetEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilterSettings(requestParameters: WorkspaceObjectControllerApiGetEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @summary Get a Workspace Data Filter
     * @param {WorkspaceObjectControllerApiGetEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilters(requestParameters: WorkspaceObjectControllerApiGetEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @summary Get a Setting for Workspace
     * @param {WorkspaceObjectControllerApiGetEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceSettings(requestParameters: WorkspaceObjectControllerApiGetEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;
    /**
     *
     * @summary Patch a Dashboard
     * @param {WorkspaceObjectControllerApiPatchEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityAnalyticalDashboards(requestParameters: WorkspaceObjectControllerApiPatchEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @summary Patch an Attribute Hierarchy
     * @param {WorkspaceObjectControllerApiPatchEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityAttributeHierarchies(requestParameters: WorkspaceObjectControllerApiPatchEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutDocument>;
    /**
     *
     * @summary Patch a Custom Application Setting
     * @param {WorkspaceObjectControllerApiPatchEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCustomApplicationSettings(requestParameters: WorkspaceObjectControllerApiPatchEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;
    /**
     *
     * @summary Patch a Plugin
     * @param {WorkspaceObjectControllerApiPatchEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityDashboardPlugins(requestParameters: WorkspaceObjectControllerApiPatchEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @summary Patch a Context Filter
     * @param {WorkspaceObjectControllerApiPatchEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityFilterContexts(requestParameters: WorkspaceObjectControllerApiPatchEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @summary Patch a Metric
     * @param {WorkspaceObjectControllerApiPatchEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityMetrics(requestParameters: WorkspaceObjectControllerApiPatchEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @summary Patch a User Data Filter
     * @param {WorkspaceObjectControllerApiPatchEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUserDataFilters(requestParameters: WorkspaceObjectControllerApiPatchEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutDocument>;
    /**
     *
     * @summary Patch a Visualization Object
     * @param {WorkspaceObjectControllerApiPatchEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityVisualizationObjects(requestParameters: WorkspaceObjectControllerApiPatchEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @summary Patch a Settings for Workspace Data Filter
     * @param {WorkspaceObjectControllerApiPatchEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceDataFilterSettings(requestParameters: WorkspaceObjectControllerApiPatchEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @summary Patch a Workspace Data Filter
     * @param {WorkspaceObjectControllerApiPatchEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceDataFilters(requestParameters: WorkspaceObjectControllerApiPatchEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @summary Patch a Setting for Workspace
     * @param {WorkspaceObjectControllerApiPatchEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceSettings(requestParameters: WorkspaceObjectControllerApiPatchEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;
    /**
     *
     * @summary Put Dashboards
     * @param {WorkspaceObjectControllerApiUpdateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityAnalyticalDashboards(requestParameters: WorkspaceObjectControllerApiUpdateEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @summary Put an Attribute Hierarchy
     * @param {WorkspaceObjectControllerApiUpdateEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityAttributeHierarchies(requestParameters: WorkspaceObjectControllerApiUpdateEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutDocument>;
    /**
     *
     * @summary Put a Custom Application Setting
     * @param {WorkspaceObjectControllerApiUpdateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCustomApplicationSettings(requestParameters: WorkspaceObjectControllerApiUpdateEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;
    /**
     *
     * @summary Put a Plugin
     * @param {WorkspaceObjectControllerApiUpdateEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDashboardPlugins(requestParameters: WorkspaceObjectControllerApiUpdateEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @summary Put a Context Filter
     * @param {WorkspaceObjectControllerApiUpdateEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityFilterContexts(requestParameters: WorkspaceObjectControllerApiUpdateEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @summary Put a Metric
     * @param {WorkspaceObjectControllerApiUpdateEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityMetrics(requestParameters: WorkspaceObjectControllerApiUpdateEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @summary Put a User Data Filter
     * @param {WorkspaceObjectControllerApiUpdateEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserDataFilters(requestParameters: WorkspaceObjectControllerApiUpdateEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutDocument>;
    /**
     *
     * @summary Put a Visualization Object
     * @param {WorkspaceObjectControllerApiUpdateEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityVisualizationObjects(requestParameters: WorkspaceObjectControllerApiUpdateEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @summary Put a Settings for Workspace Data Filter
     * @param {WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceDataFilterSettings(requestParameters: WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @summary Put a Workspace Data Filter
     * @param {WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceDataFilters(requestParameters: WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @summary Put a Setting for a Workspace
     * @param {WorkspaceObjectControllerApiUpdateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceSettings(requestParameters: WorkspaceObjectControllerApiUpdateEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;
};

/**
 * WorkspaceObjectControllerApi - functional programming interface
 * @export
 */
export declare const WorkspaceObjectControllerApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post Dashboards
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardPostOptionalIdDocument} jsonApiAnalyticalDashboardPostOptionalIdDocument
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityAnalyticalDashboards(workspaceId: string, jsonApiAnalyticalDashboardPostOptionalIdDocument: JsonApiAnalyticalDashboardPostOptionalIdDocument, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument>>;
    /**
     *
     * @summary Post Attribute Hierarchies
     * @param {string} workspaceId
     * @param {JsonApiAttributeHierarchyInDocument} jsonApiAttributeHierarchyInDocument
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityAttributeHierarchies(workspaceId: string, jsonApiAttributeHierarchyInDocument: JsonApiAttributeHierarchyInDocument, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeHierarchyOutDocument>>;
    /**
     *
     * @summary Post Custom Application Settings
     * @param {string} workspaceId
     * @param {JsonApiCustomApplicationSettingPostOptionalIdDocument} jsonApiCustomApplicationSettingPostOptionalIdDocument
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityCustomApplicationSettings(workspaceId: string, jsonApiCustomApplicationSettingPostOptionalIdDocument: JsonApiCustomApplicationSettingPostOptionalIdDocument, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCustomApplicationSettingOutDocument>>;
    /**
     *
     * @summary Post Plugins
     * @param {string} workspaceId
     * @param {JsonApiDashboardPluginPostOptionalIdDocument} jsonApiDashboardPluginPostOptionalIdDocument
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityDashboardPlugins(workspaceId: string, jsonApiDashboardPluginPostOptionalIdDocument: JsonApiDashboardPluginPostOptionalIdDocument, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDashboardPluginOutDocument>>;
    /**
     *
     * @summary Post Context Filters
     * @param {string} workspaceId
     * @param {JsonApiFilterContextPostOptionalIdDocument} jsonApiFilterContextPostOptionalIdDocument
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityFilterContexts(workspaceId: string, jsonApiFilterContextPostOptionalIdDocument: JsonApiFilterContextPostOptionalIdDocument, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutDocument>>;
    /**
     *
     * @summary Post Metrics
     * @param {string} workspaceId
     * @param {JsonApiMetricPostOptionalIdDocument} jsonApiMetricPostOptionalIdDocument
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityMetrics(workspaceId: string, jsonApiMetricPostOptionalIdDocument: JsonApiMetricPostOptionalIdDocument, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutDocument>>;
    /**
     *
     * @summary Post User Data Filters
     * @param {string} workspaceId
     * @param {JsonApiUserDataFilterPostOptionalIdDocument} jsonApiUserDataFilterPostOptionalIdDocument
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityUserDataFilters(workspaceId: string, jsonApiUserDataFilterPostOptionalIdDocument: JsonApiUserDataFilterPostOptionalIdDocument, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserDataFilterOutDocument>>;
    /**
     *
     * @summary Post Visualization Objects
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectPostOptionalIdDocument} jsonApiVisualizationObjectPostOptionalIdDocument
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityVisualizationObjects(workspaceId: string, jsonApiVisualizationObjectPostOptionalIdDocument: JsonApiVisualizationObjectPostOptionalIdDocument, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutDocument>>;
    /**
     *
     * @summary Post Settings for Workspace Data Filters
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterSettingInDocument} jsonApiWorkspaceDataFilterSettingInDocument
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceDataFilterSettings(workspaceId: string, jsonApiWorkspaceDataFilterSettingInDocument: JsonApiWorkspaceDataFilterSettingInDocument, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>>;
    /**
     *
     * @summary Post Workspace Data Filters
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceDataFilters(workspaceId: string, jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>>;
    /**
     *
     * @summary Post Settings for Workspaces
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceSettingPostOptionalIdDocument} jsonApiWorkspaceSettingPostOptionalIdDocument
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceSettings(workspaceId: string, jsonApiWorkspaceSettingPostOptionalIdDocument: JsonApiWorkspaceSettingPostOptionalIdDocument, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceSettingOutDocument>>;
    /**
     *
     * @summary Delete a Dashboard
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityAnalyticalDashboards(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete an Attribute Hierarchy
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityAttributeHierarchies(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a Custom Application Setting
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityCustomApplicationSettings(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a Plugin
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityDashboardPlugins(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a Context Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityFilterContexts(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a Metric
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityMetrics(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a User Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityUserDataFilters(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a Visualization Object
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityVisualizationObjects(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a Settings for Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceDataFilterSettings(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceDataFilters(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a Setting for Workspace
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceSettings(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get all Dashboards
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAnalyticalDashboards(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutList>>;
    /**
     *
     * @summary Get all Attribute Hierarchies
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAttributeHierarchies(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeHierarchyOutList>>;
    /**
     *
     * @summary Get all Attributes
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'attributeHierarchies' | 'dataset' | 'defaultView' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesAttributes(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"datasets" | "labels" | "attributeHierarchies" | "dataset" | "defaultView" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeOutList>>;
    /**
     *
     * @summary Get all Custom Application Settings
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesCustomApplicationSettings(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCustomApplicationSettingOutList>>;
    /**
     *
     * @summary Get all Plugins
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDashboardPlugins(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDashboardPluginOutList>>;
    /**
     *
     * @summary Get all Datasets
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'workspaceDataFilters' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesDatasets(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"attributes" | "facts" | "datasets" | "workspaceDataFilters" | "references" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDatasetOutList>>;
    /**
     *
     * @summary Get all Facts
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFacts(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"datasets" | "dataset" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFactOutList>>;
    /**
     *
     * @summary Get all Context Filters
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesFilterContexts(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutList>>;
    /**
     *
     * @summary Get all Labels
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesLabels(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"attributes" | "attribute" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiLabelOutList>>;
    /**
     *
     * @summary Get all Metrics
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesMetrics(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutList>>;
    /**
     *
     * @summary Get all User Data Filters
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesUserDataFilters(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserDataFilterOutList>>;
    /**
     *
     * @summary Get all Visualization Objects
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesVisualizationObjects(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutList>>;
    /**
     *
     * @summary Get all Settings for Workspace Data Filters
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilterSettings(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList>>;
    /**
     *
     * @summary Get all Workspace Data Filters
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceDataFilters(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutList>>;
    /**
     *
     * @summary Get all Setting for Workspaces
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceSettings(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceSettingOutList>>;
    /**
     *
     * @summary Get a Dashboard
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAnalyticalDashboards(workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument>>;
    /**
     *
     * @summary Get an Attribute Hierarchy
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAttributeHierarchies(workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeHierarchyOutDocument>>;
    /**
     *
     * @summary Get an Attribute
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'labels' | 'attributeHierarchies' | 'dataset' | 'defaultView' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityAttributes(workspaceId: string, objectId: string, filter?: string, include?: Array<"datasets" | "labels" | "attributeHierarchies" | "dataset" | "defaultView" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeOutDocument>>;
    /**
     *
     * @summary Get a Custom Application Setting
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCustomApplicationSettings(workspaceId: string, objectId: string, filter?: string, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCustomApplicationSettingOutDocument>>;
    /**
     *
     * @summary Get a Plugin
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDashboardPlugins(workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDashboardPluginOutDocument>>;
    /**
     *
     * @summary Get a Dataset
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'facts' | 'datasets' | 'workspaceDataFilters' | 'references' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityDatasets(workspaceId: string, objectId: string, filter?: string, include?: Array<"attributes" | "facts" | "datasets" | "workspaceDataFilters" | "references" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDatasetOutDocument>>;
    /**
     *
     * @summary Get a Fact
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'datasets' | 'dataset' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFacts(workspaceId: string, objectId: string, filter?: string, include?: Array<"datasets" | "dataset" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFactOutDocument>>;
    /**
     *
     * @summary Get a Context Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityFilterContexts(workspaceId: string, objectId: string, filter?: string, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutDocument>>;
    /**
     *
     * @summary Get a Label
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'attribute' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityLabels(workspaceId: string, objectId: string, filter?: string, include?: Array<"attributes" | "attribute" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiLabelOutDocument>>;
    /**
     *
     * @summary Get a Metric
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityMetrics(workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutDocument>>;
    /**
     *
     * @summary Get a User Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityUserDataFilters(workspaceId: string, objectId: string, filter?: string, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserDataFilterOutDocument>>;
    /**
     *
     * @summary Get a Visualization Object
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityVisualizationObjects(workspaceId: string, objectId: string, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutDocument>>;
    /**
     *
     * @summary Get a Setting for Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilterSettings(workspaceId: string, objectId: string, filter?: string, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, xGDCVALIDATERELATIONS?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>>;
    /**
     *
     * @summary Get a Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceDataFilters(workspaceId: string, objectId: string, filter?: string, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, xGDCVALIDATERELATIONS?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>>;
    /**
     *
     * @summary Get a Setting for Workspace
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceSettings(workspaceId: string, objectId: string, filter?: string, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceSettingOutDocument>>;
    /**
     *
     * @summary Patch a Dashboard
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardPatchDocument} jsonApiAnalyticalDashboardPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityAnalyticalDashboards(workspaceId: string, objectId: string, jsonApiAnalyticalDashboardPatchDocument: JsonApiAnalyticalDashboardPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument>>;
    /**
     *
     * @summary Patch an Attribute Hierarchy
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAttributeHierarchyPatchDocument} jsonApiAttributeHierarchyPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityAttributeHierarchies(workspaceId: string, objectId: string, jsonApiAttributeHierarchyPatchDocument: JsonApiAttributeHierarchyPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeHierarchyOutDocument>>;
    /**
     *
     * @summary Patch a Custom Application Setting
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiCustomApplicationSettingPatchDocument} jsonApiCustomApplicationSettingPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCustomApplicationSettings(workspaceId: string, objectId: string, jsonApiCustomApplicationSettingPatchDocument: JsonApiCustomApplicationSettingPatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCustomApplicationSettingOutDocument>>;
    /**
     *
     * @summary Patch a Plugin
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiDashboardPluginPatchDocument} jsonApiDashboardPluginPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityDashboardPlugins(workspaceId: string, objectId: string, jsonApiDashboardPluginPatchDocument: JsonApiDashboardPluginPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDashboardPluginOutDocument>>;
    /**
     *
     * @summary Patch a Context Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextPatchDocument} jsonApiFilterContextPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityFilterContexts(workspaceId: string, objectId: string, jsonApiFilterContextPatchDocument: JsonApiFilterContextPatchDocument, filter?: string, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutDocument>>;
    /**
     *
     * @summary Patch a Metric
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricPatchDocument} jsonApiMetricPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityMetrics(workspaceId: string, objectId: string, jsonApiMetricPatchDocument: JsonApiMetricPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutDocument>>;
    /**
     *
     * @summary Patch a User Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiUserDataFilterPatchDocument} jsonApiUserDataFilterPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityUserDataFilters(workspaceId: string, objectId: string, jsonApiUserDataFilterPatchDocument: JsonApiUserDataFilterPatchDocument, filter?: string, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserDataFilterOutDocument>>;
    /**
     *
     * @summary Patch a Visualization Object
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectPatchDocument} jsonApiVisualizationObjectPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityVisualizationObjects(workspaceId: string, objectId: string, jsonApiVisualizationObjectPatchDocument: JsonApiVisualizationObjectPatchDocument, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutDocument>>;
    /**
     *
     * @summary Patch a Settings for Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterSettingPatchDocument} jsonApiWorkspaceDataFilterSettingPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceDataFilterSettings(workspaceId: string, objectId: string, jsonApiWorkspaceDataFilterSettingPatchDocument: JsonApiWorkspaceDataFilterSettingPatchDocument, filter?: string, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>>;
    /**
     *
     * @summary Patch a Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterPatchDocument} jsonApiWorkspaceDataFilterPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceDataFilters(workspaceId: string, objectId: string, jsonApiWorkspaceDataFilterPatchDocument: JsonApiWorkspaceDataFilterPatchDocument, filter?: string, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>>;
    /**
     *
     * @summary Patch a Setting for Workspace
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceSettingPatchDocument} jsonApiWorkspaceSettingPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceSettings(workspaceId: string, objectId: string, jsonApiWorkspaceSettingPatchDocument: JsonApiWorkspaceSettingPatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceSettingOutDocument>>;
    /**
     *
     * @summary Put Dashboards
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardInDocument} jsonApiAnalyticalDashboardInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityAnalyticalDashboards(workspaceId: string, objectId: string, jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument, filter?: string, include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardOutDocument>>;
    /**
     *
     * @summary Put an Attribute Hierarchy
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAttributeHierarchyInDocument} jsonApiAttributeHierarchyInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityAttributeHierarchies(workspaceId: string, objectId: string, jsonApiAttributeHierarchyInDocument: JsonApiAttributeHierarchyInDocument, filter?: string, include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeHierarchyOutDocument>>;
    /**
     *
     * @summary Put a Custom Application Setting
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiCustomApplicationSettingInDocument} jsonApiCustomApplicationSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCustomApplicationSettings(workspaceId: string, objectId: string, jsonApiCustomApplicationSettingInDocument: JsonApiCustomApplicationSettingInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCustomApplicationSettingOutDocument>>;
    /**
     *
     * @summary Put a Plugin
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiDashboardPluginInDocument} jsonApiDashboardPluginInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityDashboardPlugins(workspaceId: string, objectId: string, jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument, filter?: string, include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDashboardPluginOutDocument>>;
    /**
     *
     * @summary Put a Context Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextInDocument} jsonApiFilterContextInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityFilterContexts(workspaceId: string, objectId: string, jsonApiFilterContextInDocument: JsonApiFilterContextInDocument, filter?: string, include?: Array<"attributes" | "datasets" | "labels" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextOutDocument>>;
    /**
     *
     * @summary Put a Metric
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricInDocument} jsonApiMetricInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityMetrics(workspaceId: string, objectId: string, jsonApiMetricInDocument: JsonApiMetricInDocument, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricOutDocument>>;
    /**
     *
     * @summary Put a User Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiUserDataFilterInDocument} jsonApiUserDataFilterInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityUserDataFilters(workspaceId: string, objectId: string, jsonApiUserDataFilterInDocument: JsonApiUserDataFilterInDocument, filter?: string, include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserDataFilterOutDocument>>;
    /**
     *
     * @summary Put a Visualization Object
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectInDocument} jsonApiVisualizationObjectInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityVisualizationObjects(workspaceId: string, objectId: string, jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument, filter?: string, include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectOutDocument>>;
    /**
     *
     * @summary Put a Settings for Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterSettingInDocument} jsonApiWorkspaceDataFilterSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceDataFilterSettings(workspaceId: string, objectId: string, jsonApiWorkspaceDataFilterSettingInDocument: JsonApiWorkspaceDataFilterSettingInDocument, filter?: string, include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>>;
    /**
     *
     * @summary Put a Workspace Data Filter
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceDataFilterInDocument} jsonApiWorkspaceDataFilterInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceDataFilters(workspaceId: string, objectId: string, jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument, filter?: string, include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>>;
    /**
     *
     * @summary Put a Setting for a Workspace
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceSettingInDocument} jsonApiWorkspaceSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceSettings(workspaceId: string, objectId: string, jsonApiWorkspaceSettingInDocument: JsonApiWorkspaceSettingInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceSettingOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesAnalyticalDashboards operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetAllEntitiesAnalyticalDashboardsRequest
 */
export declare interface WorkspaceObjectControllerApiGetAllEntitiesAnalyticalDashboardsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAnalyticalDashboards
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAnalyticalDashboards
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAnalyticalDashboards
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAnalyticalDashboards
     */
    readonly include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAnalyticalDashboards
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAnalyticalDashboards
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAnalyticalDashboards
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAnalyticalDashboards
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAnalyticalDashboards
     */
    readonly metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesAttributeHierarchies operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetAllEntitiesAttributeHierarchiesRequest
 */
export declare interface WorkspaceObjectControllerApiGetAllEntitiesAttributeHierarchiesRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAttributeHierarchies
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAttributeHierarchies
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAttributeHierarchies
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAttributeHierarchies
     */
    readonly include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAttributeHierarchies
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAttributeHierarchies
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAttributeHierarchies
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAttributeHierarchies
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAttributeHierarchies
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesAttributes operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetAllEntitiesAttributesRequest
 */
export declare interface WorkspaceObjectControllerApiGetAllEntitiesAttributesRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAttributes
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAttributes
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAttributes
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'datasets' | 'labels' | 'attributeHierarchies' | 'dataset' | 'defaultView' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAttributes
     */
    readonly include?: Array<"datasets" | "labels" | "attributeHierarchies" | "dataset" | "defaultView" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAttributes
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAttributes
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAttributes
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAttributes
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesAttributes
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesCustomApplicationSettings operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetAllEntitiesCustomApplicationSettingsRequest
 */
export declare interface WorkspaceObjectControllerApiGetAllEntitiesCustomApplicationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesCustomApplicationSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesCustomApplicationSettings
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesCustomApplicationSettings
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesCustomApplicationSettings
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesCustomApplicationSettings
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesCustomApplicationSettings
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesCustomApplicationSettings
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesCustomApplicationSettings
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesDashboardPlugins operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetAllEntitiesDashboardPluginsRequest
 */
export declare interface WorkspaceObjectControllerApiGetAllEntitiesDashboardPluginsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesDashboardPlugins
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesDashboardPlugins
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesDashboardPlugins
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesDashboardPlugins
     */
    readonly include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesDashboardPlugins
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesDashboardPlugins
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesDashboardPlugins
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesDashboardPlugins
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesDashboardPlugins
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesDatasets operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetAllEntitiesDatasetsRequest
 */
export declare interface WorkspaceObjectControllerApiGetAllEntitiesDatasetsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesDatasets
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesDatasets
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesDatasets
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'facts' | 'datasets' | 'workspaceDataFilters' | 'references' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesDatasets
     */
    readonly include?: Array<"attributes" | "facts" | "datasets" | "workspaceDataFilters" | "references" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesDatasets
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesDatasets
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesDatasets
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesDatasets
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesDatasets
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesFacts operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetAllEntitiesFactsRequest
 */
export declare interface WorkspaceObjectControllerApiGetAllEntitiesFactsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesFacts
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesFacts
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesFacts
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'datasets' | 'dataset' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesFacts
     */
    readonly include?: Array<"datasets" | "dataset" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesFacts
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesFacts
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesFacts
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesFacts
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesFacts
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesFilterContexts operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetAllEntitiesFilterContextsRequest
 */
export declare interface WorkspaceObjectControllerApiGetAllEntitiesFilterContextsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesFilterContexts
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesFilterContexts
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesFilterContexts
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesFilterContexts
     */
    readonly include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesFilterContexts
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesFilterContexts
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesFilterContexts
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesFilterContexts
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesFilterContexts
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesLabels operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetAllEntitiesLabelsRequest
 */
export declare interface WorkspaceObjectControllerApiGetAllEntitiesLabelsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesLabels
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesLabels
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesLabels
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'attribute' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesLabels
     */
    readonly include?: Array<"attributes" | "attribute" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesLabels
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesLabels
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesLabels
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesLabels
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesLabels
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesMetrics operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetAllEntitiesMetricsRequest
 */
export declare interface WorkspaceObjectControllerApiGetAllEntitiesMetricsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesMetrics
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesMetrics
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesMetrics
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesMetrics
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesMetrics
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesMetrics
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesMetrics
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesMetrics
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesMetrics
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesUserDataFilters operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetAllEntitiesUserDataFiltersRequest
 */
export declare interface WorkspaceObjectControllerApiGetAllEntitiesUserDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesUserDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesUserDataFilters
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesUserDataFilters
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesUserDataFilters
     */
    readonly include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesUserDataFilters
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesUserDataFilters
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesUserDataFilters
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesUserDataFilters
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesUserDataFilters
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesVisualizationObjects operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetAllEntitiesVisualizationObjectsRequest
 */
export declare interface WorkspaceObjectControllerApiGetAllEntitiesVisualizationObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesVisualizationObjects
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesVisualizationObjects
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesVisualizationObjects
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesVisualizationObjects
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesVisualizationObjects
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesVisualizationObjects
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesVisualizationObjects
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesVisualizationObjects
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesVisualizationObjects
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesWorkspaceDataFilterSettings operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFilterSettingsRequest
 */
export declare interface WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFilterSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFilterSettings
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getAllEntitiesWorkspaceDataFilters operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFiltersRequest
 */
export declare interface WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFilters
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getAllEntitiesWorkspaceSettings operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetAllEntitiesWorkspaceSettingsRequest
 */
export declare interface WorkspaceObjectControllerApiGetAllEntitiesWorkspaceSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesWorkspaceSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesWorkspaceSettings
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesWorkspaceSettings
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesWorkspaceSettings
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesWorkspaceSettings
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesWorkspaceSettings
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesWorkspaceSettings
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetAllEntitiesWorkspaceSettings
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityAnalyticalDashboards operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetEntityAnalyticalDashboardsRequest
 */
export declare interface WorkspaceObjectControllerApiGetEntityAnalyticalDashboardsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityAnalyticalDashboards
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityAnalyticalDashboards
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityAnalyticalDashboards
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityAnalyticalDashboards
     */
    readonly include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetEntityAnalyticalDashboards
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'permissions' | 'origin' | 'accessInfo' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityAnalyticalDashboards
     */
    readonly metaInclude?: Array<"permissions" | "origin" | "accessInfo" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityAttributeHierarchies operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetEntityAttributeHierarchiesRequest
 */
export declare interface WorkspaceObjectControllerApiGetEntityAttributeHierarchiesRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityAttributeHierarchies
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityAttributeHierarchies
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityAttributeHierarchies
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityAttributeHierarchies
     */
    readonly include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetEntityAttributeHierarchies
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityAttributeHierarchies
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityAttributes operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetEntityAttributesRequest
 */
export declare interface WorkspaceObjectControllerApiGetEntityAttributesRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityAttributes
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityAttributes
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityAttributes
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'datasets' | 'labels' | 'attributeHierarchies' | 'dataset' | 'defaultView' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityAttributes
     */
    readonly include?: Array<"datasets" | "labels" | "attributeHierarchies" | "dataset" | "defaultView" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetEntityAttributes
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityAttributes
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityCustomApplicationSettings operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetEntityCustomApplicationSettingsRequest
 */
export declare interface WorkspaceObjectControllerApiGetEntityCustomApplicationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityCustomApplicationSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityCustomApplicationSettings
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityCustomApplicationSettings
     */
    readonly filter?: string;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetEntityCustomApplicationSettings
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityCustomApplicationSettings
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityDashboardPlugins operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetEntityDashboardPluginsRequest
 */
export declare interface WorkspaceObjectControllerApiGetEntityDashboardPluginsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityDashboardPlugins
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityDashboardPlugins
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityDashboardPlugins
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityDashboardPlugins
     */
    readonly include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetEntityDashboardPlugins
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityDashboardPlugins
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityDatasets operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetEntityDatasetsRequest
 */
export declare interface WorkspaceObjectControllerApiGetEntityDatasetsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityDatasets
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityDatasets
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityDatasets
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'facts' | 'datasets' | 'workspaceDataFilters' | 'references' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityDatasets
     */
    readonly include?: Array<"attributes" | "facts" | "datasets" | "workspaceDataFilters" | "references" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetEntityDatasets
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityDatasets
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityFacts operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetEntityFactsRequest
 */
export declare interface WorkspaceObjectControllerApiGetEntityFactsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityFacts
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityFacts
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityFacts
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'datasets' | 'dataset' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityFacts
     */
    readonly include?: Array<"datasets" | "dataset" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetEntityFacts
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityFacts
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityFilterContexts operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetEntityFilterContextsRequest
 */
export declare interface WorkspaceObjectControllerApiGetEntityFilterContextsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityFilterContexts
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityFilterContexts
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityFilterContexts
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityFilterContexts
     */
    readonly include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetEntityFilterContexts
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityFilterContexts
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityLabels operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetEntityLabelsRequest
 */
export declare interface WorkspaceObjectControllerApiGetEntityLabelsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityLabels
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityLabels
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityLabels
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'attribute' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityLabels
     */
    readonly include?: Array<"attributes" | "attribute" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetEntityLabels
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityLabels
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityMetrics operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetEntityMetricsRequest
 */
export declare interface WorkspaceObjectControllerApiGetEntityMetricsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityMetrics
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityMetrics
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityMetrics
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityMetrics
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetEntityMetrics
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityMetrics
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityUserDataFilters operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetEntityUserDataFiltersRequest
 */
export declare interface WorkspaceObjectControllerApiGetEntityUserDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityUserDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityUserDataFilters
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityUserDataFilters
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityUserDataFilters
     */
    readonly include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetEntityUserDataFilters
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityUserDataFilters
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityVisualizationObjects operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetEntityVisualizationObjectsRequest
 */
export declare interface WorkspaceObjectControllerApiGetEntityVisualizationObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityVisualizationObjects
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityVisualizationObjects
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityVisualizationObjects
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityVisualizationObjects
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetEntityVisualizationObjects
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityVisualizationObjects
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityWorkspaceDataFilterSettings operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetEntityWorkspaceDataFilterSettingsRequest
 */
export declare interface WorkspaceObjectControllerApiGetEntityWorkspaceDataFilterSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityWorkspaceDataFilterSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityWorkspaceDataFilterSettings
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityWorkspaceDataFilterSettings
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityWorkspaceDataFilterSettings
     */
    readonly include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetEntityWorkspaceDataFilterSettings
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getEntityWorkspaceDataFilters operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetEntityWorkspaceDataFiltersRequest
 */
export declare interface WorkspaceObjectControllerApiGetEntityWorkspaceDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityWorkspaceDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityWorkspaceDataFilters
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityWorkspaceDataFilters
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityWorkspaceDataFilters
     */
    readonly include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetEntityWorkspaceDataFilters
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
}

/**
 * Request parameters for getEntityWorkspaceSettings operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiGetEntityWorkspaceSettingsRequest
 */
export declare interface WorkspaceObjectControllerApiGetEntityWorkspaceSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityWorkspaceSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityWorkspaceSettings
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiGetEntityWorkspaceSettings
     */
    readonly filter?: string;
    /**
     *
     * @type {boolean}
     * @memberof WorkspaceObjectControllerApiGetEntityWorkspaceSettings
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiGetEntityWorkspaceSettings
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * WorkspaceObjectControllerApi - interface
 * @export
 * @interface WorkspaceObjectControllerApi
 */
export declare interface WorkspaceObjectControllerApiInterface {
    /**
     *
     * @summary Post Dashboards
     * @param {WorkspaceObjectControllerApiCreateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityAnalyticalDashboards(requestParameters: WorkspaceObjectControllerApiCreateEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @summary Post Attribute Hierarchies
     * @param {WorkspaceObjectControllerApiCreateEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityAttributeHierarchies(requestParameters: WorkspaceObjectControllerApiCreateEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutDocument>;
    /**
     *
     * @summary Post Custom Application Settings
     * @param {WorkspaceObjectControllerApiCreateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityCustomApplicationSettings(requestParameters: WorkspaceObjectControllerApiCreateEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;
    /**
     *
     * @summary Post Plugins
     * @param {WorkspaceObjectControllerApiCreateEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityDashboardPlugins(requestParameters: WorkspaceObjectControllerApiCreateEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @summary Post Context Filters
     * @param {WorkspaceObjectControllerApiCreateEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityFilterContexts(requestParameters: WorkspaceObjectControllerApiCreateEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @summary Post Metrics
     * @param {WorkspaceObjectControllerApiCreateEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityMetrics(requestParameters: WorkspaceObjectControllerApiCreateEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @summary Post User Data Filters
     * @param {WorkspaceObjectControllerApiCreateEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityUserDataFilters(requestParameters: WorkspaceObjectControllerApiCreateEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutDocument>;
    /**
     *
     * @summary Post Visualization Objects
     * @param {WorkspaceObjectControllerApiCreateEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityVisualizationObjects(requestParameters: WorkspaceObjectControllerApiCreateEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @summary Post Settings for Workspace Data Filters
     * @param {WorkspaceObjectControllerApiCreateEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityWorkspaceDataFilterSettings(requestParameters: WorkspaceObjectControllerApiCreateEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @summary Post Workspace Data Filters
     * @param {WorkspaceObjectControllerApiCreateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityWorkspaceDataFilters(requestParameters: WorkspaceObjectControllerApiCreateEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @summary Post Settings for Workspaces
     * @param {WorkspaceObjectControllerApiCreateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityWorkspaceSettings(requestParameters: WorkspaceObjectControllerApiCreateEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;
    /**
     *
     * @summary Delete a Dashboard
     * @param {WorkspaceObjectControllerApiDeleteEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityAnalyticalDashboards(requestParameters: WorkspaceObjectControllerApiDeleteEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete an Attribute Hierarchy
     * @param {WorkspaceObjectControllerApiDeleteEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityAttributeHierarchies(requestParameters: WorkspaceObjectControllerApiDeleteEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Custom Application Setting
     * @param {WorkspaceObjectControllerApiDeleteEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityCustomApplicationSettings(requestParameters: WorkspaceObjectControllerApiDeleteEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Plugin
     * @param {WorkspaceObjectControllerApiDeleteEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityDashboardPlugins(requestParameters: WorkspaceObjectControllerApiDeleteEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Context Filter
     * @param {WorkspaceObjectControllerApiDeleteEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityFilterContexts(requestParameters: WorkspaceObjectControllerApiDeleteEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Metric
     * @param {WorkspaceObjectControllerApiDeleteEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityMetrics(requestParameters: WorkspaceObjectControllerApiDeleteEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a User Data Filter
     * @param {WorkspaceObjectControllerApiDeleteEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityUserDataFilters(requestParameters: WorkspaceObjectControllerApiDeleteEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Visualization Object
     * @param {WorkspaceObjectControllerApiDeleteEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityVisualizationObjects(requestParameters: WorkspaceObjectControllerApiDeleteEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Settings for Workspace Data Filter
     * @param {WorkspaceObjectControllerApiDeleteEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityWorkspaceDataFilterSettings(requestParameters: WorkspaceObjectControllerApiDeleteEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Workspace Data Filter
     * @param {WorkspaceObjectControllerApiDeleteEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityWorkspaceDataFilters(requestParameters: WorkspaceObjectControllerApiDeleteEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Setting for Workspace
     * @param {WorkspaceObjectControllerApiDeleteEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityWorkspaceSettings(requestParameters: WorkspaceObjectControllerApiDeleteEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all Dashboards
     * @param {WorkspaceObjectControllerApiGetAllEntitiesAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesAnalyticalDashboards(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutList>;
    /**
     *
     * @summary Get all Attribute Hierarchies
     * @param {WorkspaceObjectControllerApiGetAllEntitiesAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesAttributeHierarchies(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutList>;
    /**
     *
     * @summary Get all Attributes
     * @param {WorkspaceObjectControllerApiGetAllEntitiesAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesAttributes(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeOutList>;
    /**
     *
     * @summary Get all Custom Application Settings
     * @param {WorkspaceObjectControllerApiGetAllEntitiesCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesCustomApplicationSettings(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutList>;
    /**
     *
     * @summary Get all Plugins
     * @param {WorkspaceObjectControllerApiGetAllEntitiesDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesDashboardPlugins(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutList>;
    /**
     *
     * @summary Get all Datasets
     * @param {WorkspaceObjectControllerApiGetAllEntitiesDatasetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesDatasets(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesDatasetsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDatasetOutList>;
    /**
     *
     * @summary Get all Facts
     * @param {WorkspaceObjectControllerApiGetAllEntitiesFactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesFacts(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesFactsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFactOutList>;
    /**
     *
     * @summary Get all Context Filters
     * @param {WorkspaceObjectControllerApiGetAllEntitiesFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesFilterContexts(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutList>;
    /**
     *
     * @summary Get all Labels
     * @param {WorkspaceObjectControllerApiGetAllEntitiesLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesLabels(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesLabelsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiLabelOutList>;
    /**
     *
     * @summary Get all Metrics
     * @param {WorkspaceObjectControllerApiGetAllEntitiesMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesMetrics(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutList>;
    /**
     *
     * @summary Get all User Data Filters
     * @param {WorkspaceObjectControllerApiGetAllEntitiesUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesUserDataFilters(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutList>;
    /**
     *
     * @summary Get all Visualization Objects
     * @param {WorkspaceObjectControllerApiGetAllEntitiesVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesVisualizationObjects(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutList>;
    /**
     *
     * @summary Get all Settings for Workspace Data Filters
     * @param {WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesWorkspaceDataFilterSettings(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutList>;
    /**
     *
     * @summary Get all Workspace Data Filters
     * @param {WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesWorkspaceDataFilters(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutList>;
    /**
     *
     * @summary Get all Setting for Workspaces
     * @param {WorkspaceObjectControllerApiGetAllEntitiesWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getAllEntitiesWorkspaceSettings(requestParameters: WorkspaceObjectControllerApiGetAllEntitiesWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutList>;
    /**
     *
     * @summary Get a Dashboard
     * @param {WorkspaceObjectControllerApiGetEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityAnalyticalDashboards(requestParameters: WorkspaceObjectControllerApiGetEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @summary Get an Attribute Hierarchy
     * @param {WorkspaceObjectControllerApiGetEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityAttributeHierarchies(requestParameters: WorkspaceObjectControllerApiGetEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutDocument>;
    /**
     *
     * @summary Get an Attribute
     * @param {WorkspaceObjectControllerApiGetEntityAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityAttributes(requestParameters: WorkspaceObjectControllerApiGetEntityAttributesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeOutDocument>;
    /**
     *
     * @summary Get a Custom Application Setting
     * @param {WorkspaceObjectControllerApiGetEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityCustomApplicationSettings(requestParameters: WorkspaceObjectControllerApiGetEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;
    /**
     *
     * @summary Get a Plugin
     * @param {WorkspaceObjectControllerApiGetEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityDashboardPlugins(requestParameters: WorkspaceObjectControllerApiGetEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @summary Get a Dataset
     * @param {WorkspaceObjectControllerApiGetEntityDatasetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityDatasets(requestParameters: WorkspaceObjectControllerApiGetEntityDatasetsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDatasetOutDocument>;
    /**
     *
     * @summary Get a Fact
     * @param {WorkspaceObjectControllerApiGetEntityFactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityFacts(requestParameters: WorkspaceObjectControllerApiGetEntityFactsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFactOutDocument>;
    /**
     *
     * @summary Get a Context Filter
     * @param {WorkspaceObjectControllerApiGetEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityFilterContexts(requestParameters: WorkspaceObjectControllerApiGetEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @summary Get a Label
     * @param {WorkspaceObjectControllerApiGetEntityLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityLabels(requestParameters: WorkspaceObjectControllerApiGetEntityLabelsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiLabelOutDocument>;
    /**
     *
     * @summary Get a Metric
     * @param {WorkspaceObjectControllerApiGetEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityMetrics(requestParameters: WorkspaceObjectControllerApiGetEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @summary Get a User Data Filter
     * @param {WorkspaceObjectControllerApiGetEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityUserDataFilters(requestParameters: WorkspaceObjectControllerApiGetEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutDocument>;
    /**
     *
     * @summary Get a Visualization Object
     * @param {WorkspaceObjectControllerApiGetEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityVisualizationObjects(requestParameters: WorkspaceObjectControllerApiGetEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @summary Get a Setting for Workspace Data Filter
     * @param {WorkspaceObjectControllerApiGetEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityWorkspaceDataFilterSettings(requestParameters: WorkspaceObjectControllerApiGetEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @summary Get a Workspace Data Filter
     * @param {WorkspaceObjectControllerApiGetEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityWorkspaceDataFilters(requestParameters: WorkspaceObjectControllerApiGetEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @summary Get a Setting for Workspace
     * @param {WorkspaceObjectControllerApiGetEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityWorkspaceSettings(requestParameters: WorkspaceObjectControllerApiGetEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;
    /**
     *
     * @summary Patch a Dashboard
     * @param {WorkspaceObjectControllerApiPatchEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    patchEntityAnalyticalDashboards(requestParameters: WorkspaceObjectControllerApiPatchEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @summary Patch an Attribute Hierarchy
     * @param {WorkspaceObjectControllerApiPatchEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    patchEntityAttributeHierarchies(requestParameters: WorkspaceObjectControllerApiPatchEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutDocument>;
    /**
     *
     * @summary Patch a Custom Application Setting
     * @param {WorkspaceObjectControllerApiPatchEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    patchEntityCustomApplicationSettings(requestParameters: WorkspaceObjectControllerApiPatchEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;
    /**
     *
     * @summary Patch a Plugin
     * @param {WorkspaceObjectControllerApiPatchEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    patchEntityDashboardPlugins(requestParameters: WorkspaceObjectControllerApiPatchEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @summary Patch a Context Filter
     * @param {WorkspaceObjectControllerApiPatchEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    patchEntityFilterContexts(requestParameters: WorkspaceObjectControllerApiPatchEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @summary Patch a Metric
     * @param {WorkspaceObjectControllerApiPatchEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    patchEntityMetrics(requestParameters: WorkspaceObjectControllerApiPatchEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @summary Patch a User Data Filter
     * @param {WorkspaceObjectControllerApiPatchEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    patchEntityUserDataFilters(requestParameters: WorkspaceObjectControllerApiPatchEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutDocument>;
    /**
     *
     * @summary Patch a Visualization Object
     * @param {WorkspaceObjectControllerApiPatchEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    patchEntityVisualizationObjects(requestParameters: WorkspaceObjectControllerApiPatchEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @summary Patch a Settings for Workspace Data Filter
     * @param {WorkspaceObjectControllerApiPatchEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    patchEntityWorkspaceDataFilterSettings(requestParameters: WorkspaceObjectControllerApiPatchEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @summary Patch a Workspace Data Filter
     * @param {WorkspaceObjectControllerApiPatchEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    patchEntityWorkspaceDataFilters(requestParameters: WorkspaceObjectControllerApiPatchEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @summary Patch a Setting for Workspace
     * @param {WorkspaceObjectControllerApiPatchEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    patchEntityWorkspaceSettings(requestParameters: WorkspaceObjectControllerApiPatchEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;
    /**
     *
     * @summary Put Dashboards
     * @param {WorkspaceObjectControllerApiUpdateEntityAnalyticalDashboardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityAnalyticalDashboards(requestParameters: WorkspaceObjectControllerApiUpdateEntityAnalyticalDashboardsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAnalyticalDashboardOutDocument>;
    /**
     *
     * @summary Put an Attribute Hierarchy
     * @param {WorkspaceObjectControllerApiUpdateEntityAttributeHierarchiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityAttributeHierarchies(requestParameters: WorkspaceObjectControllerApiUpdateEntityAttributeHierarchiesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiAttributeHierarchyOutDocument>;
    /**
     *
     * @summary Put a Custom Application Setting
     * @param {WorkspaceObjectControllerApiUpdateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityCustomApplicationSettings(requestParameters: WorkspaceObjectControllerApiUpdateEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;
    /**
     *
     * @summary Put a Plugin
     * @param {WorkspaceObjectControllerApiUpdateEntityDashboardPluginsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityDashboardPlugins(requestParameters: WorkspaceObjectControllerApiUpdateEntityDashboardPluginsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiDashboardPluginOutDocument>;
    /**
     *
     * @summary Put a Context Filter
     * @param {WorkspaceObjectControllerApiUpdateEntityFilterContextsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityFilterContexts(requestParameters: WorkspaceObjectControllerApiUpdateEntityFilterContextsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiFilterContextOutDocument>;
    /**
     *
     * @summary Put a Metric
     * @param {WorkspaceObjectControllerApiUpdateEntityMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityMetrics(requestParameters: WorkspaceObjectControllerApiUpdateEntityMetricsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiMetricOutDocument>;
    /**
     *
     * @summary Put a User Data Filter
     * @param {WorkspaceObjectControllerApiUpdateEntityUserDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityUserDataFilters(requestParameters: WorkspaceObjectControllerApiUpdateEntityUserDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiUserDataFilterOutDocument>;
    /**
     *
     * @summary Put a Visualization Object
     * @param {WorkspaceObjectControllerApiUpdateEntityVisualizationObjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityVisualizationObjects(requestParameters: WorkspaceObjectControllerApiUpdateEntityVisualizationObjectsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiVisualizationObjectOutDocument>;
    /**
     *
     * @summary Put a Settings for Workspace Data Filter
     * @param {WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFilterSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityWorkspaceDataFilterSettings(requestParameters: WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFilterSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterSettingOutDocument>;
    /**
     *
     * @summary Put a Workspace Data Filter
     * @param {WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityWorkspaceDataFilters(requestParameters: WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceDataFilterOutDocument>;
    /**
     *
     * @summary Put a Setting for a Workspace
     * @param {WorkspaceObjectControllerApiUpdateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityWorkspaceSettings(requestParameters: WorkspaceObjectControllerApiUpdateEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;
}

/**
 * Request parameters for patchEntityAnalyticalDashboards operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiPatchEntityAnalyticalDashboardsRequest
 */
export declare interface WorkspaceObjectControllerApiPatchEntityAnalyticalDashboardsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityAnalyticalDashboards
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityAnalyticalDashboards
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardPatchDocument}
     * @memberof WorkspaceObjectControllerApiPatchEntityAnalyticalDashboards
     */
    readonly jsonApiAnalyticalDashboardPatchDocument: JsonApiAnalyticalDashboardPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityAnalyticalDashboards
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiPatchEntityAnalyticalDashboards
     */
    readonly include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for patchEntityAttributeHierarchies operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiPatchEntityAttributeHierarchiesRequest
 */
export declare interface WorkspaceObjectControllerApiPatchEntityAttributeHierarchiesRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityAttributeHierarchies
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityAttributeHierarchies
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyPatchDocument}
     * @memberof WorkspaceObjectControllerApiPatchEntityAttributeHierarchies
     */
    readonly jsonApiAttributeHierarchyPatchDocument: JsonApiAttributeHierarchyPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityAttributeHierarchies
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiPatchEntityAttributeHierarchies
     */
    readonly include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for patchEntityCustomApplicationSettings operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiPatchEntityCustomApplicationSettingsRequest
 */
export declare interface WorkspaceObjectControllerApiPatchEntityCustomApplicationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityCustomApplicationSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityCustomApplicationSettings
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiCustomApplicationSettingPatchDocument}
     * @memberof WorkspaceObjectControllerApiPatchEntityCustomApplicationSettings
     */
    readonly jsonApiCustomApplicationSettingPatchDocument: JsonApiCustomApplicationSettingPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityCustomApplicationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityDashboardPlugins operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiPatchEntityDashboardPluginsRequest
 */
export declare interface WorkspaceObjectControllerApiPatchEntityDashboardPluginsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityDashboardPlugins
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityDashboardPlugins
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiDashboardPluginPatchDocument}
     * @memberof WorkspaceObjectControllerApiPatchEntityDashboardPlugins
     */
    readonly jsonApiDashboardPluginPatchDocument: JsonApiDashboardPluginPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityDashboardPlugins
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiPatchEntityDashboardPlugins
     */
    readonly include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for patchEntityFilterContexts operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiPatchEntityFilterContextsRequest
 */
export declare interface WorkspaceObjectControllerApiPatchEntityFilterContextsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityFilterContexts
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityFilterContexts
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiFilterContextPatchDocument}
     * @memberof WorkspaceObjectControllerApiPatchEntityFilterContexts
     */
    readonly jsonApiFilterContextPatchDocument: JsonApiFilterContextPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityFilterContexts
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiPatchEntityFilterContexts
     */
    readonly include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
}

/**
 * Request parameters for patchEntityMetrics operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiPatchEntityMetricsRequest
 */
export declare interface WorkspaceObjectControllerApiPatchEntityMetricsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityMetrics
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityMetrics
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiMetricPatchDocument}
     * @memberof WorkspaceObjectControllerApiPatchEntityMetrics
     */
    readonly jsonApiMetricPatchDocument: JsonApiMetricPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityMetrics
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiPatchEntityMetrics
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for patchEntityUserDataFilters operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiPatchEntityUserDataFiltersRequest
 */
export declare interface WorkspaceObjectControllerApiPatchEntityUserDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityUserDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityUserDataFilters
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiUserDataFilterPatchDocument}
     * @memberof WorkspaceObjectControllerApiPatchEntityUserDataFilters
     */
    readonly jsonApiUserDataFilterPatchDocument: JsonApiUserDataFilterPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityUserDataFilters
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiPatchEntityUserDataFilters
     */
    readonly include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">;
}

/**
 * Request parameters for patchEntityVisualizationObjects operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiPatchEntityVisualizationObjectsRequest
 */
export declare interface WorkspaceObjectControllerApiPatchEntityVisualizationObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityVisualizationObjects
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityVisualizationObjects
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiVisualizationObjectPatchDocument}
     * @memberof WorkspaceObjectControllerApiPatchEntityVisualizationObjects
     */
    readonly jsonApiVisualizationObjectPatchDocument: JsonApiVisualizationObjectPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityVisualizationObjects
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiPatchEntityVisualizationObjects
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for patchEntityWorkspaceDataFilterSettings operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiPatchEntityWorkspaceDataFilterSettingsRequest
 */
export declare interface WorkspaceObjectControllerApiPatchEntityWorkspaceDataFilterSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityWorkspaceDataFilterSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityWorkspaceDataFilterSettings
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingPatchDocument}
     * @memberof WorkspaceObjectControllerApiPatchEntityWorkspaceDataFilterSettings
     */
    readonly jsonApiWorkspaceDataFilterSettingPatchDocument: JsonApiWorkspaceDataFilterSettingPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityWorkspaceDataFilterSettings
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiPatchEntityWorkspaceDataFilterSettings
     */
    readonly include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;
}

/**
 * Request parameters for patchEntityWorkspaceDataFilters operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiPatchEntityWorkspaceDataFiltersRequest
 */
export declare interface WorkspaceObjectControllerApiPatchEntityWorkspaceDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityWorkspaceDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityWorkspaceDataFilters
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterPatchDocument}
     * @memberof WorkspaceObjectControllerApiPatchEntityWorkspaceDataFilters
     */
    readonly jsonApiWorkspaceDataFilterPatchDocument: JsonApiWorkspaceDataFilterPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityWorkspaceDataFilters
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiPatchEntityWorkspaceDataFilters
     */
    readonly include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
}

/**
 * Request parameters for patchEntityWorkspaceSettings operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiPatchEntityWorkspaceSettingsRequest
 */
export declare interface WorkspaceObjectControllerApiPatchEntityWorkspaceSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityWorkspaceSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityWorkspaceSettings
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPatchDocument}
     * @memberof WorkspaceObjectControllerApiPatchEntityWorkspaceSettings
     */
    readonly jsonApiWorkspaceSettingPatchDocument: JsonApiWorkspaceSettingPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiPatchEntityWorkspaceSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityAnalyticalDashboards operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiUpdateEntityAnalyticalDashboardsRequest
 */
export declare interface WorkspaceObjectControllerApiUpdateEntityAnalyticalDashboardsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityAnalyticalDashboards
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityAnalyticalDashboards
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardInDocument}
     * @memberof WorkspaceObjectControllerApiUpdateEntityAnalyticalDashboards
     */
    readonly jsonApiAnalyticalDashboardInDocument: JsonApiAnalyticalDashboardInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityAnalyticalDashboards
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'visualizationObjects' | 'analyticalDashboards' | 'labels' | 'metrics' | 'datasets' | 'filterContexts' | 'dashboardPlugins' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiUpdateEntityAnalyticalDashboards
     */
    readonly include?: Array<"userIdentifiers" | "visualizationObjects" | "analyticalDashboards" | "labels" | "metrics" | "datasets" | "filterContexts" | "dashboardPlugins" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for updateEntityAttributeHierarchies operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiUpdateEntityAttributeHierarchiesRequest
 */
export declare interface WorkspaceObjectControllerApiUpdateEntityAttributeHierarchiesRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityAttributeHierarchies
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityAttributeHierarchies
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiAttributeHierarchyInDocument}
     * @memberof WorkspaceObjectControllerApiUpdateEntityAttributeHierarchies
     */
    readonly jsonApiAttributeHierarchyInDocument: JsonApiAttributeHierarchyInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityAttributeHierarchies
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'attributes' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiUpdateEntityAttributeHierarchies
     */
    readonly include?: Array<"userIdentifiers" | "attributes" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for updateEntityCustomApplicationSettings operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiUpdateEntityCustomApplicationSettingsRequest
 */
export declare interface WorkspaceObjectControllerApiUpdateEntityCustomApplicationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityCustomApplicationSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityCustomApplicationSettings
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiCustomApplicationSettingInDocument}
     * @memberof WorkspaceObjectControllerApiUpdateEntityCustomApplicationSettings
     */
    readonly jsonApiCustomApplicationSettingInDocument: JsonApiCustomApplicationSettingInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityCustomApplicationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityDashboardPlugins operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiUpdateEntityDashboardPluginsRequest
 */
export declare interface WorkspaceObjectControllerApiUpdateEntityDashboardPluginsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityDashboardPlugins
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityDashboardPlugins
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiDashboardPluginInDocument}
     * @memberof WorkspaceObjectControllerApiUpdateEntityDashboardPlugins
     */
    readonly jsonApiDashboardPluginInDocument: JsonApiDashboardPluginInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityDashboardPlugins
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiUpdateEntityDashboardPlugins
     */
    readonly include?: Array<"userIdentifiers" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for updateEntityFilterContexts operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiUpdateEntityFilterContextsRequest
 */
export declare interface WorkspaceObjectControllerApiUpdateEntityFilterContextsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityFilterContexts
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityFilterContexts
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiFilterContextInDocument}
     * @memberof WorkspaceObjectControllerApiUpdateEntityFilterContexts
     */
    readonly jsonApiFilterContextInDocument: JsonApiFilterContextInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityFilterContexts
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'attributes' | 'datasets' | 'labels' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiUpdateEntityFilterContexts
     */
    readonly include?: Array<"attributes" | "datasets" | "labels" | "ALL">;
}

/**
 * Request parameters for updateEntityMetrics operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiUpdateEntityMetricsRequest
 */
export declare interface WorkspaceObjectControllerApiUpdateEntityMetricsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityMetrics
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityMetrics
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiMetricInDocument}
     * @memberof WorkspaceObjectControllerApiUpdateEntityMetrics
     */
    readonly jsonApiMetricInDocument: JsonApiMetricInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityMetrics
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiUpdateEntityMetrics
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for updateEntityUserDataFilters operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiUpdateEntityUserDataFiltersRequest
 */
export declare interface WorkspaceObjectControllerApiUpdateEntityUserDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityUserDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityUserDataFilters
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiUserDataFilterInDocument}
     * @memberof WorkspaceObjectControllerApiUpdateEntityUserDataFilters
     */
    readonly jsonApiUserDataFilterInDocument: JsonApiUserDataFilterInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityUserDataFilters
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'users' | 'userGroups' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'user' | 'userGroup' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiUpdateEntityUserDataFilters
     */
    readonly include?: Array<"users" | "userGroups" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "user" | "userGroup" | "ALL">;
}

/**
 * Request parameters for updateEntityVisualizationObjects operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiUpdateEntityVisualizationObjectsRequest
 */
export declare interface WorkspaceObjectControllerApiUpdateEntityVisualizationObjectsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityVisualizationObjects
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityVisualizationObjects
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiVisualizationObjectInDocument}
     * @memberof WorkspaceObjectControllerApiUpdateEntityVisualizationObjects
     */
    readonly jsonApiVisualizationObjectInDocument: JsonApiVisualizationObjectInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityVisualizationObjects
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'userIdentifiers' | 'facts' | 'attributes' | 'labels' | 'metrics' | 'datasets' | 'createdBy' | 'modifiedBy' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiUpdateEntityVisualizationObjects
     */
    readonly include?: Array<"userIdentifiers" | "facts" | "attributes" | "labels" | "metrics" | "datasets" | "createdBy" | "modifiedBy" | "ALL">;
}

/**
 * Request parameters for updateEntityWorkspaceDataFilterSettings operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFilterSettingsRequest
 */
export declare interface WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFilterSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFilterSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFilterSettings
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterSettingInDocument}
     * @memberof WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFilterSettings
     */
    readonly jsonApiWorkspaceDataFilterSettingInDocument: JsonApiWorkspaceDataFilterSettingInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFilterSettings
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilters' | 'workspaceDataFilter' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFilterSettings
     */
    readonly include?: Array<"workspaceDataFilters" | "workspaceDataFilter" | "ALL">;
}

/**
 * Request parameters for updateEntityWorkspaceDataFilters operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFiltersRequest
 */
export declare interface WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFiltersRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFilters
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFilters
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiWorkspaceDataFilterInDocument}
     * @memberof WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFilters
     */
    readonly jsonApiWorkspaceDataFilterInDocument: JsonApiWorkspaceDataFilterInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFilters
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaceDataFilterSettings' | 'filterSettings' | 'ALL'>}
     * @memberof WorkspaceObjectControllerApiUpdateEntityWorkspaceDataFilters
     */
    readonly include?: Array<"workspaceDataFilterSettings" | "filterSettings" | "ALL">;
}

/**
 * Request parameters for updateEntityWorkspaceSettings operation in WorkspaceObjectControllerApi.
 * @export
 * @interface WorkspaceObjectControllerApiUpdateEntityWorkspaceSettingsRequest
 */
export declare interface WorkspaceObjectControllerApiUpdateEntityWorkspaceSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityWorkspaceSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityWorkspaceSettings
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingInDocument}
     * @memberof WorkspaceObjectControllerApiUpdateEntityWorkspaceSettings
     */
    readonly jsonApiWorkspaceSettingInDocument: JsonApiWorkspaceSettingInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspaceObjectControllerApiUpdateEntityWorkspaceSettings
     */
    readonly filter?: string;
}

/**
 * WorkspacesDeclarativeAPIsApi - object-oriented interface
 * @export
 * @class WorkspacesDeclarativeAPIsApi
 * @extends {BaseAPI}
 */
export declare class WorkspacesDeclarativeAPIsApi extends MetadataBaseApi implements WorkspacesDeclarativeAPIsApiInterface {
    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {WorkspacesDeclarativeAPIsApiGetWorkspaceLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesDeclarativeAPIsApi
     */
    getWorkspaceLayout(requestParameters: WorkspacesDeclarativeAPIsApiGetWorkspaceLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeWorkspaceModel, any>>;
    /**
     * Gets complete layout of workspaces, their hierarchy, models.
     * @summary Get all workspaces layout
     * @param {WorkspacesDeclarativeAPIsApiGetWorkspacesLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesDeclarativeAPIsApi
     */
    getWorkspacesLayout(requestParameters?: WorkspacesDeclarativeAPIsApiGetWorkspacesLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DeclarativeWorkspaces, any>>;
    /**
     * Set complete layout of workspace, like model, authorization, etc.
     * @summary Set workspace layout
     * @param {WorkspacesDeclarativeAPIsApiPutWorkspaceLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesDeclarativeAPIsApi
     */
    putWorkspaceLayout(requestParameters: WorkspacesDeclarativeAPIsApiPutWorkspaceLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {WorkspacesDeclarativeAPIsApiSetWorkspacesLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesDeclarativeAPIsApi
     */
    setWorkspacesLayout(requestParameters: WorkspacesDeclarativeAPIsApiSetWorkspacesLayoutRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
}

/**
 * WorkspacesDeclarativeAPIsApi - axios parameter creator
 * @export
 */
export declare const WorkspacesDeclarativeAPIsApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {string} workspaceId
     * @param {Array<'ACTIVITY_INFO'>} [exclude]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceLayout: (workspaceId: string, exclude?: Array<"ACTIVITY_INFO">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Gets complete layout of workspaces, their hierarchy, models.
     * @summary Get all workspaces layout
     * @param {Array<'ACTIVITY_INFO'>} [exclude]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspacesLayout: (exclude?: Array<"ACTIVITY_INFO">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Set complete layout of workspace, like model, authorization, etc.
     * @summary Set workspace layout
     * @param {string} workspaceId
     * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putWorkspaceLayout: (workspaceId: string, declarativeWorkspaceModel: DeclarativeWorkspaceModel, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {DeclarativeWorkspaces} declarativeWorkspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspacesLayout: (declarativeWorkspaces: DeclarativeWorkspaces, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * WorkspacesDeclarativeAPIsApi - factory interface
 * @export
 */
export declare const WorkspacesDeclarativeAPIsApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {WorkspacesDeclarativeAPIsApiGetWorkspaceLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceLayout(requestParameters: WorkspacesDeclarativeAPIsApiGetWorkspaceLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeWorkspaceModel>;
    /**
     * Gets complete layout of workspaces, their hierarchy, models.
     * @summary Get all workspaces layout
     * @param {WorkspacesDeclarativeAPIsApiGetWorkspacesLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspacesLayout(requestParameters: WorkspacesDeclarativeAPIsApiGetWorkspacesLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeWorkspaces>;
    /**
     * Set complete layout of workspace, like model, authorization, etc.
     * @summary Set workspace layout
     * @param {WorkspacesDeclarativeAPIsApiPutWorkspaceLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putWorkspaceLayout(requestParameters: WorkspacesDeclarativeAPIsApiPutWorkspaceLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {WorkspacesDeclarativeAPIsApiSetWorkspacesLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspacesLayout(requestParameters: WorkspacesDeclarativeAPIsApiSetWorkspacesLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
};

/**
 * WorkspacesDeclarativeAPIsApi - functional programming interface
 * @export
 */
export declare const WorkspacesDeclarativeAPIsApiFp: (configuration?: MetadataConfiguration) => {
    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {string} workspaceId
     * @param {Array<'ACTIVITY_INFO'>} [exclude]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspaceLayout(workspaceId: string, exclude?: Array<"ACTIVITY_INFO">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeWorkspaceModel>>;
    /**
     * Gets complete layout of workspaces, their hierarchy, models.
     * @summary Get all workspaces layout
     * @param {Array<'ACTIVITY_INFO'>} [exclude]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkspacesLayout(exclude?: Array<"ACTIVITY_INFO">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeWorkspaces>>;
    /**
     * Set complete layout of workspace, like model, authorization, etc.
     * @summary Set workspace layout
     * @param {string} workspaceId
     * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putWorkspaceLayout(workspaceId: string, declarativeWorkspaceModel: DeclarativeWorkspaceModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {DeclarativeWorkspaces} declarativeWorkspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setWorkspacesLayout(declarativeWorkspaces: DeclarativeWorkspaces, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};

/**
 * Request parameters for getWorkspaceLayout operation in WorkspacesDeclarativeAPIsApi.
 * @export
 * @interface WorkspacesDeclarativeAPIsApiGetWorkspaceLayoutRequest
 */
export declare interface WorkspacesDeclarativeAPIsApiGetWorkspaceLayoutRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspacesDeclarativeAPIsApiGetWorkspaceLayout
     */
    readonly workspaceId: string;
    /**
     *
     * @type {Array<'ACTIVITY_INFO'>}
     * @memberof WorkspacesDeclarativeAPIsApiGetWorkspaceLayout
     */
    readonly exclude?: Array<"ACTIVITY_INFO">;
}

/**
 * Request parameters for getWorkspacesLayout operation in WorkspacesDeclarativeAPIsApi.
 * @export
 * @interface WorkspacesDeclarativeAPIsApiGetWorkspacesLayoutRequest
 */
export declare interface WorkspacesDeclarativeAPIsApiGetWorkspacesLayoutRequest {
    /**
     *
     * @type {Array<'ACTIVITY_INFO'>}
     * @memberof WorkspacesDeclarativeAPIsApiGetWorkspacesLayout
     */
    readonly exclude?: Array<"ACTIVITY_INFO">;
}

/**
 * WorkspacesDeclarativeAPIsApi - interface
 * @export
 * @interface WorkspacesDeclarativeAPIsApi
 */
export declare interface WorkspacesDeclarativeAPIsApiInterface {
    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {WorkspacesDeclarativeAPIsApiGetWorkspaceLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesDeclarativeAPIsApiInterface
     */
    getWorkspaceLayout(requestParameters: WorkspacesDeclarativeAPIsApiGetWorkspaceLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeWorkspaceModel>;
    /**
     * Gets complete layout of workspaces, their hierarchy, models.
     * @summary Get all workspaces layout
     * @param {WorkspacesDeclarativeAPIsApiGetWorkspacesLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesDeclarativeAPIsApiInterface
     */
    getWorkspacesLayout(requestParameters: WorkspacesDeclarativeAPIsApiGetWorkspacesLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<DeclarativeWorkspaces>;
    /**
     * Set complete layout of workspace, like model, authorization, etc.
     * @summary Set workspace layout
     * @param {WorkspacesDeclarativeAPIsApiPutWorkspaceLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesDeclarativeAPIsApiInterface
     */
    putWorkspaceLayout(requestParameters: WorkspacesDeclarativeAPIsApiPutWorkspaceLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {WorkspacesDeclarativeAPIsApiSetWorkspacesLayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesDeclarativeAPIsApiInterface
     */
    setWorkspacesLayout(requestParameters: WorkspacesDeclarativeAPIsApiSetWorkspacesLayoutRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
}

/**
 * Request parameters for putWorkspaceLayout operation in WorkspacesDeclarativeAPIsApi.
 * @export
 * @interface WorkspacesDeclarativeAPIsApiPutWorkspaceLayoutRequest
 */
export declare interface WorkspacesDeclarativeAPIsApiPutWorkspaceLayoutRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspacesDeclarativeAPIsApiPutWorkspaceLayout
     */
    readonly workspaceId: string;
    /**
     *
     * @type {DeclarativeWorkspaceModel}
     * @memberof WorkspacesDeclarativeAPIsApiPutWorkspaceLayout
     */
    readonly declarativeWorkspaceModel: DeclarativeWorkspaceModel;
}

/**
 * Request parameters for setWorkspacesLayout operation in WorkspacesDeclarativeAPIsApi.
 * @export
 * @interface WorkspacesDeclarativeAPIsApiSetWorkspacesLayoutRequest
 */
export declare interface WorkspacesDeclarativeAPIsApiSetWorkspacesLayoutRequest {
    /**
     *
     * @type {DeclarativeWorkspaces}
     * @memberof WorkspacesDeclarativeAPIsApiSetWorkspacesLayout
     */
    readonly declarativeWorkspaces: DeclarativeWorkspaces;
}

/**
 * WorkspacesEntityAPIsApi - object-oriented interface
 * @export
 * @class WorkspacesEntityAPIsApi
 * @extends {BaseAPI}
 */
export declare class WorkspacesEntityAPIsApi extends MetadataBaseApi implements WorkspacesEntityAPIsApiInterface {
    /**
     * Space of the shared interest
     * @summary Post Workspace entities
     * @param {WorkspacesEntityAPIsApiCreateEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesEntityAPIsApi
     */
    createEntityWorkspaces(requestParameters: WorkspacesEntityAPIsApiCreateEntityWorkspacesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceOutDocument, any>>;
    /**
     * Space of the shared interest
     * @summary Delete Workspace entity
     * @param {WorkspacesEntityAPIsApiDeleteEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesEntityAPIsApi
     */
    deleteEntityWorkspaces(requestParameters: WorkspacesEntityAPIsApiDeleteEntityWorkspacesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entities
     * @param {WorkspacesEntityAPIsApiGetAllEntitiesWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesEntityAPIsApi
     */
    getAllEntitiesWorkspaces(requestParameters?: WorkspacesEntityAPIsApiGetAllEntitiesWorkspacesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceOutList, any>>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entity
     * @param {WorkspacesEntityAPIsApiGetEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesEntityAPIsApi
     */
    getEntityWorkspaces(requestParameters: WorkspacesEntityAPIsApiGetEntityWorkspacesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceOutDocument, any>>;
    /**
     * Space of the shared interest
     * @summary Patch Workspace entity
     * @param {WorkspacesEntityAPIsApiPatchEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesEntityAPIsApi
     */
    patchEntityWorkspaces(requestParameters: WorkspacesEntityAPIsApiPatchEntityWorkspacesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceOutDocument, any>>;
    /**
     * Space of the shared interest
     * @summary Put Workspace entity
     * @param {WorkspacesEntityAPIsApiUpdateEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesEntityAPIsApi
     */
    updateEntityWorkspaces(requestParameters: WorkspacesEntityAPIsApiUpdateEntityWorkspacesRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceOutDocument, any>>;
}

/**
 * WorkspacesEntityAPIsApi - axios parameter creator
 * @export
 */
export declare const WorkspacesEntityAPIsApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     * Space of the shared interest
     * @summary Post Workspace entities
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaces: (jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument, include?: Array<"workspaces" | "parent" | "ALL">, metaInclude?: Array<"config" | "permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Space of the shared interest
     * @summary Delete Workspace entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaces: (id: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaces: (filter?: string, include?: Array<"workspaces" | "parent" | "ALL">, page?: number, size?: number, sort?: Array<string>, metaInclude?: Array<"config" | "permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaces: (id: string, filter?: string, include?: Array<"workspaces" | "parent" | "ALL">, metaInclude?: Array<"config" | "permissions" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Space of the shared interest
     * @summary Patch Workspace entity
     * @param {string} id
     * @param {JsonApiWorkspacePatchDocument} jsonApiWorkspacePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaces: (id: string, jsonApiWorkspacePatchDocument: JsonApiWorkspacePatchDocument, filter?: string, include?: Array<"workspaces" | "parent" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Space of the shared interest
     * @summary Put Workspace entity
     * @param {string} id
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaces: (id: string, jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument, filter?: string, include?: Array<"workspaces" | "parent" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * Request parameters for createEntityWorkspaces operation in WorkspacesEntityAPIsApi.
 * @export
 * @interface WorkspacesEntityAPIsApiCreateEntityWorkspacesRequest
 */
export declare interface WorkspacesEntityAPIsApiCreateEntityWorkspacesRequest {
    /**
     *
     * @type {JsonApiWorkspaceInDocument}
     * @memberof WorkspacesEntityAPIsApiCreateEntityWorkspaces
     */
    readonly jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaces' | 'parent' | 'ALL'>}
     * @memberof WorkspacesEntityAPIsApiCreateEntityWorkspaces
     */
    readonly include?: Array<"workspaces" | "parent" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'config' | 'permissions' | 'all' | 'ALL'>}
     * @memberof WorkspacesEntityAPIsApiCreateEntityWorkspaces
     */
    readonly metaInclude?: Array<"config" | "permissions" | "all" | "ALL">;
}

/**
 * Request parameters for deleteEntityWorkspaces operation in WorkspacesEntityAPIsApi.
 * @export
 * @interface WorkspacesEntityAPIsApiDeleteEntityWorkspacesRequest
 */
export declare interface WorkspacesEntityAPIsApiDeleteEntityWorkspacesRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspacesEntityAPIsApiDeleteEntityWorkspaces
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspacesEntityAPIsApiDeleteEntityWorkspaces
     */
    readonly filter?: string;
}

/**
 * WorkspacesEntityAPIsApi - factory interface
 * @export
 */
export declare const WorkspacesEntityAPIsApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Space of the shared interest
     * @summary Post Workspace entities
     * @param {WorkspacesEntityAPIsApiCreateEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaces(requestParameters: WorkspacesEntityAPIsApiCreateEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     * Space of the shared interest
     * @summary Delete Workspace entity
     * @param {WorkspacesEntityAPIsApiDeleteEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaces(requestParameters: WorkspacesEntityAPIsApiDeleteEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entities
     * @param {WorkspacesEntityAPIsApiGetAllEntitiesWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaces(requestParameters: WorkspacesEntityAPIsApiGetAllEntitiesWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutList>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entity
     * @param {WorkspacesEntityAPIsApiGetEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaces(requestParameters: WorkspacesEntityAPIsApiGetEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     * Space of the shared interest
     * @summary Patch Workspace entity
     * @param {WorkspacesEntityAPIsApiPatchEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaces(requestParameters: WorkspacesEntityAPIsApiPatchEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     * Space of the shared interest
     * @summary Put Workspace entity
     * @param {WorkspacesEntityAPIsApiUpdateEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaces(requestParameters: WorkspacesEntityAPIsApiUpdateEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutDocument>;
};

/**
 * WorkspacesEntityAPIsApi - functional programming interface
 * @export
 */
export declare const WorkspacesEntityAPIsApiFp: (configuration?: MetadataConfiguration) => {
    /**
     * Space of the shared interest
     * @summary Post Workspace entities
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaces(jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument, include?: Array<"workspaces" | "parent" | "ALL">, metaInclude?: Array<"config" | "permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutDocument>>;
    /**
     * Space of the shared interest
     * @summary Delete Workspace entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaces(id: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entities
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaces(filter?: string, include?: Array<"workspaces" | "parent" | "ALL">, page?: number, size?: number, sort?: Array<string>, metaInclude?: Array<"config" | "permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutList>>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entity
     * @param {string} id
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {Array<'config' | 'permissions' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaces(id: string, filter?: string, include?: Array<"workspaces" | "parent" | "ALL">, metaInclude?: Array<"config" | "permissions" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutDocument>>;
    /**
     * Space of the shared interest
     * @summary Patch Workspace entity
     * @param {string} id
     * @param {JsonApiWorkspacePatchDocument} jsonApiWorkspacePatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaces(id: string, jsonApiWorkspacePatchDocument: JsonApiWorkspacePatchDocument, filter?: string, include?: Array<"workspaces" | "parent" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutDocument>>;
    /**
     * Space of the shared interest
     * @summary Put Workspace entity
     * @param {string} id
     * @param {JsonApiWorkspaceInDocument} jsonApiWorkspaceInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {Array<'workspaces' | 'parent' | 'ALL'>} [include] Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaces(id: string, jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument, filter?: string, include?: Array<"workspaces" | "parent" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceOutDocument>>;
};

/**
 * Request parameters for getAllEntitiesWorkspaces operation in WorkspacesEntityAPIsApi.
 * @export
 * @interface WorkspacesEntityAPIsApiGetAllEntitiesWorkspacesRequest
 */
export declare interface WorkspacesEntityAPIsApiGetAllEntitiesWorkspacesRequest {
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspacesEntityAPIsApiGetAllEntitiesWorkspaces
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaces' | 'parent' | 'ALL'>}
     * @memberof WorkspacesEntityAPIsApiGetAllEntitiesWorkspaces
     */
    readonly include?: Array<"workspaces" | "parent" | "ALL">;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof WorkspacesEntityAPIsApiGetAllEntitiesWorkspaces
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof WorkspacesEntityAPIsApiGetAllEntitiesWorkspaces
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof WorkspacesEntityAPIsApiGetAllEntitiesWorkspaces
     */
    readonly sort?: Array<string>;
    /**
     * Include Meta objects.
     * @type {Array<'config' | 'permissions' | 'all' | 'ALL'>}
     * @memberof WorkspacesEntityAPIsApiGetAllEntitiesWorkspaces
     */
    readonly metaInclude?: Array<"config" | "permissions" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityWorkspaces operation in WorkspacesEntityAPIsApi.
 * @export
 * @interface WorkspacesEntityAPIsApiGetEntityWorkspacesRequest
 */
export declare interface WorkspacesEntityAPIsApiGetEntityWorkspacesRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspacesEntityAPIsApiGetEntityWorkspaces
     */
    readonly id: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspacesEntityAPIsApiGetEntityWorkspaces
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaces' | 'parent' | 'ALL'>}
     * @memberof WorkspacesEntityAPIsApiGetEntityWorkspaces
     */
    readonly include?: Array<"workspaces" | "parent" | "ALL">;
    /**
     * Include Meta objects.
     * @type {Array<'config' | 'permissions' | 'all' | 'ALL'>}
     * @memberof WorkspacesEntityAPIsApiGetEntityWorkspaces
     */
    readonly metaInclude?: Array<"config" | "permissions" | "all" | "ALL">;
}

/**
 * WorkspacesEntityAPIsApi - interface
 * @export
 * @interface WorkspacesEntityAPIsApi
 */
export declare interface WorkspacesEntityAPIsApiInterface {
    /**
     * Space of the shared interest
     * @summary Post Workspace entities
     * @param {WorkspacesEntityAPIsApiCreateEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesEntityAPIsApiInterface
     */
    createEntityWorkspaces(requestParameters: WorkspacesEntityAPIsApiCreateEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     * Space of the shared interest
     * @summary Delete Workspace entity
     * @param {WorkspacesEntityAPIsApiDeleteEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesEntityAPIsApiInterface
     */
    deleteEntityWorkspaces(requestParameters: WorkspacesEntityAPIsApiDeleteEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entities
     * @param {WorkspacesEntityAPIsApiGetAllEntitiesWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesEntityAPIsApiInterface
     */
    getAllEntitiesWorkspaces(requestParameters: WorkspacesEntityAPIsApiGetAllEntitiesWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutList>;
    /**
     * Space of the shared interest
     * @summary Get Workspace entity
     * @param {WorkspacesEntityAPIsApiGetEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesEntityAPIsApiInterface
     */
    getEntityWorkspaces(requestParameters: WorkspacesEntityAPIsApiGetEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     * Space of the shared interest
     * @summary Patch Workspace entity
     * @param {WorkspacesEntityAPIsApiPatchEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesEntityAPIsApiInterface
     */
    patchEntityWorkspaces(requestParameters: WorkspacesEntityAPIsApiPatchEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutDocument>;
    /**
     * Space of the shared interest
     * @summary Put Workspace entity
     * @param {WorkspacesEntityAPIsApiUpdateEntityWorkspacesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesEntityAPIsApiInterface
     */
    updateEntityWorkspaces(requestParameters: WorkspacesEntityAPIsApiUpdateEntityWorkspacesRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceOutDocument>;
}

/**
 * Request parameters for patchEntityWorkspaces operation in WorkspacesEntityAPIsApi.
 * @export
 * @interface WorkspacesEntityAPIsApiPatchEntityWorkspacesRequest
 */
export declare interface WorkspacesEntityAPIsApiPatchEntityWorkspacesRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspacesEntityAPIsApiPatchEntityWorkspaces
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiWorkspacePatchDocument}
     * @memberof WorkspacesEntityAPIsApiPatchEntityWorkspaces
     */
    readonly jsonApiWorkspacePatchDocument: JsonApiWorkspacePatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspacesEntityAPIsApiPatchEntityWorkspaces
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaces' | 'parent' | 'ALL'>}
     * @memberof WorkspacesEntityAPIsApiPatchEntityWorkspaces
     */
    readonly include?: Array<"workspaces" | "parent" | "ALL">;
}

/**
 * Request parameters for updateEntityWorkspaces operation in WorkspacesEntityAPIsApi.
 * @export
 * @interface WorkspacesEntityAPIsApiUpdateEntityWorkspacesRequest
 */
export declare interface WorkspacesEntityAPIsApiUpdateEntityWorkspacesRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspacesEntityAPIsApiUpdateEntityWorkspaces
     */
    readonly id: string;
    /**
     *
     * @type {JsonApiWorkspaceInDocument}
     * @memberof WorkspacesEntityAPIsApiUpdateEntityWorkspaces
     */
    readonly jsonApiWorkspaceInDocument: JsonApiWorkspaceInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspacesEntityAPIsApiUpdateEntityWorkspaces
     */
    readonly filter?: string;
    /**
     * Array of included collections or individual relationships. Includes are separated by commas (e.g. include&#x3D;entity1s,entity2s). Collection include represents the inclusion of every relationship between this entity and the given collection. Relationship include represents the inclusion of the particular relationships only. If single parameter \&quot;ALL\&quot; is present, all possible includes are used (include&#x3D;ALL).  __WARNING:__ Individual include types (collection, relationship or ALL) cannot be combined together.
     * @type {Array<'workspaces' | 'parent' | 'ALL'>}
     * @memberof WorkspacesEntityAPIsApiUpdateEntityWorkspaces
     */
    readonly include?: Array<"workspaces" | "parent" | "ALL">;
}

/**
 * WorkspacesSettingsApi - object-oriented interface
 * @export
 * @class WorkspacesSettingsApi
 * @extends {BaseAPI}
 */
export declare class WorkspacesSettingsApi extends MetadataBaseApi implements WorkspacesSettingsApiInterface {
    /**
     *
     * @summary Post Custom Application Settings
     * @param {WorkspacesSettingsApiCreateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApi
     */
    createEntityCustomApplicationSettings(requestParameters: WorkspacesSettingsApiCreateEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCustomApplicationSettingOutDocument, any>>;
    /**
     *
     * @summary Post Settings for Workspaces
     * @param {WorkspacesSettingsApiCreateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApi
     */
    createEntityWorkspaceSettings(requestParameters: WorkspacesSettingsApiCreateEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceSettingOutDocument, any>>;
    /**
     *
     * @summary Delete a Custom Application Setting
     * @param {WorkspacesSettingsApiDeleteEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApi
     */
    deleteEntityCustomApplicationSettings(requestParameters: WorkspacesSettingsApiDeleteEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a Setting for Workspace
     * @param {WorkspacesSettingsApiDeleteEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApi
     */
    deleteEntityWorkspaceSettings(requestParameters: WorkspacesSettingsApiDeleteEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<void, any>>;
    /**
     *
     * @summary Get all Custom Application Settings
     * @param {WorkspacesSettingsApiGetAllEntitiesCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApi
     */
    getAllEntitiesCustomApplicationSettings(requestParameters: WorkspacesSettingsApiGetAllEntitiesCustomApplicationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCustomApplicationSettingOutList, any>>;
    /**
     *
     * @summary Get all Setting for Workspaces
     * @param {WorkspacesSettingsApiGetAllEntitiesWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApi
     */
    getAllEntitiesWorkspaceSettings(requestParameters: WorkspacesSettingsApiGetAllEntitiesWorkspaceSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceSettingOutList, any>>;
    /**
     *
     * @summary Get a Custom Application Setting
     * @param {WorkspacesSettingsApiGetEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApi
     */
    getEntityCustomApplicationSettings(requestParameters: WorkspacesSettingsApiGetEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCustomApplicationSettingOutDocument, any>>;
    /**
     *
     * @summary Get a Setting for Workspace
     * @param {WorkspacesSettingsApiGetEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApi
     */
    getEntityWorkspaceSettings(requestParameters: WorkspacesSettingsApiGetEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceSettingOutDocument, any>>;
    /**
     *
     * @summary Patch a Custom Application Setting
     * @param {WorkspacesSettingsApiPatchEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApi
     */
    patchEntityCustomApplicationSettings(requestParameters: WorkspacesSettingsApiPatchEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCustomApplicationSettingOutDocument, any>>;
    /**
     *
     * @summary Patch a Setting for Workspace
     * @param {WorkspacesSettingsApiPatchEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApi
     */
    patchEntityWorkspaceSettings(requestParameters: WorkspacesSettingsApiPatchEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceSettingOutDocument, any>>;
    /**
     *
     * @summary Put a Custom Application Setting
     * @param {WorkspacesSettingsApiUpdateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApi
     */
    updateEntityCustomApplicationSettings(requestParameters: WorkspacesSettingsApiUpdateEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiCustomApplicationSettingOutDocument, any>>;
    /**
     *
     * @summary Put a Setting for a Workspace
     * @param {WorkspacesSettingsApiUpdateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApi
     */
    updateEntityWorkspaceSettings(requestParameters: WorkspacesSettingsApiUpdateEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<JsonApiWorkspaceSettingOutDocument, any>>;
    /**
     * Resolves values for all settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for all settings.
     * @param {WorkspacesSettingsApiWorkspaceResolveAllSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApi
     */
    workspaceResolveAllSettings(requestParameters: WorkspacesSettingsApiWorkspaceResolveAllSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ResolvedSetting[], any>>;
    /**
     * Resolves value for selected settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for selected settings.
     * @param {WorkspacesSettingsApiWorkspaceResolveSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApi
     */
    workspaceResolveSettings(requestParameters: WorkspacesSettingsApiWorkspaceResolveSettingsRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<ResolvedSetting[], any>>;
}

/**
 * WorkspacesSettingsApi - axios parameter creator
 * @export
 */
export declare const WorkspacesSettingsApiAxiosParamCreator: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post Custom Application Settings
     * @param {string} workspaceId
     * @param {JsonApiCustomApplicationSettingPostOptionalIdDocument} jsonApiCustomApplicationSettingPostOptionalIdDocument
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityCustomApplicationSettings: (workspaceId: string, jsonApiCustomApplicationSettingPostOptionalIdDocument: JsonApiCustomApplicationSettingPostOptionalIdDocument, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Post Settings for Workspaces
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceSettingPostOptionalIdDocument} jsonApiWorkspaceSettingPostOptionalIdDocument
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceSettings: (workspaceId: string, jsonApiWorkspaceSettingPostOptionalIdDocument: JsonApiWorkspaceSettingPostOptionalIdDocument, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Custom Application Setting
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityCustomApplicationSettings: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Delete a Setting for Workspace
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceSettings: (workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Custom Application Settings
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesCustomApplicationSettings: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get all Setting for Workspaces
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceSettings: (workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Custom Application Setting
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCustomApplicationSettings: (workspaceId: string, objectId: string, filter?: string, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Get a Setting for Workspace
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceSettings: (workspaceId: string, objectId: string, filter?: string, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Custom Application Setting
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiCustomApplicationSettingPatchDocument} jsonApiCustomApplicationSettingPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCustomApplicationSettings: (workspaceId: string, objectId: string, jsonApiCustomApplicationSettingPatchDocument: JsonApiCustomApplicationSettingPatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Patch a Setting for Workspace
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceSettingPatchDocument} jsonApiWorkspaceSettingPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceSettings: (workspaceId: string, objectId: string, jsonApiWorkspaceSettingPatchDocument: JsonApiWorkspaceSettingPatchDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a Custom Application Setting
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiCustomApplicationSettingInDocument} jsonApiCustomApplicationSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCustomApplicationSettings: (workspaceId: string, objectId: string, jsonApiCustomApplicationSettingInDocument: JsonApiCustomApplicationSettingInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     *
     * @summary Put a Setting for a Workspace
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceSettingInDocument} jsonApiWorkspaceSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceSettings: (workspaceId: string, objectId: string, jsonApiWorkspaceSettingInDocument: JsonApiWorkspaceSettingInDocument, filter?: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Resolves values for all settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for all settings.
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceResolveAllSettings: (workspaceId: string, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
    /**
     * Resolves value for selected settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for selected settings.
     * @param {string} workspaceId
     * @param {ResolveSettingsRequest} resolveSettingsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceResolveSettings: (workspaceId: string, resolveSettingsRequest: ResolveSettingsRequest, options?: AxiosRequestConfig) => Promise<MetadataRequestArgs>;
};

/**
 * Request parameters for createEntityCustomApplicationSettings operation in WorkspacesSettingsApi.
 * @export
 * @interface WorkspacesSettingsApiCreateEntityCustomApplicationSettingsRequest
 */
export declare interface WorkspacesSettingsApiCreateEntityCustomApplicationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspacesSettingsApiCreateEntityCustomApplicationSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiCustomApplicationSettingPostOptionalIdDocument}
     * @memberof WorkspacesSettingsApiCreateEntityCustomApplicationSettings
     */
    readonly jsonApiCustomApplicationSettingPostOptionalIdDocument: JsonApiCustomApplicationSettingPostOptionalIdDocument;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspacesSettingsApiCreateEntityCustomApplicationSettings
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for createEntityWorkspaceSettings operation in WorkspacesSettingsApi.
 * @export
 * @interface WorkspacesSettingsApiCreateEntityWorkspaceSettingsRequest
 */
export declare interface WorkspacesSettingsApiCreateEntityWorkspaceSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspacesSettingsApiCreateEntityWorkspaceSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPostOptionalIdDocument}
     * @memberof WorkspacesSettingsApiCreateEntityWorkspaceSettings
     */
    readonly jsonApiWorkspaceSettingPostOptionalIdDocument: JsonApiWorkspaceSettingPostOptionalIdDocument;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspacesSettingsApiCreateEntityWorkspaceSettings
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for deleteEntityCustomApplicationSettings operation in WorkspacesSettingsApi.
 * @export
 * @interface WorkspacesSettingsApiDeleteEntityCustomApplicationSettingsRequest
 */
export declare interface WorkspacesSettingsApiDeleteEntityCustomApplicationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspacesSettingsApiDeleteEntityCustomApplicationSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspacesSettingsApiDeleteEntityCustomApplicationSettings
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspacesSettingsApiDeleteEntityCustomApplicationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for deleteEntityWorkspaceSettings operation in WorkspacesSettingsApi.
 * @export
 * @interface WorkspacesSettingsApiDeleteEntityWorkspaceSettingsRequest
 */
export declare interface WorkspacesSettingsApiDeleteEntityWorkspaceSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspacesSettingsApiDeleteEntityWorkspaceSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspacesSettingsApiDeleteEntityWorkspaceSettings
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspacesSettingsApiDeleteEntityWorkspaceSettings
     */
    readonly filter?: string;
}

/**
 * WorkspacesSettingsApi - factory interface
 * @export
 */
export declare const WorkspacesSettingsApiFactory: (configuration?: MetadataConfiguration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Post Custom Application Settings
     * @param {WorkspacesSettingsApiCreateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityCustomApplicationSettings(requestParameters: WorkspacesSettingsApiCreateEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;
    /**
     *
     * @summary Post Settings for Workspaces
     * @param {WorkspacesSettingsApiCreateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceSettings(requestParameters: WorkspacesSettingsApiCreateEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;
    /**
     *
     * @summary Delete a Custom Application Setting
     * @param {WorkspacesSettingsApiDeleteEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityCustomApplicationSettings(requestParameters: WorkspacesSettingsApiDeleteEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Setting for Workspace
     * @param {WorkspacesSettingsApiDeleteEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceSettings(requestParameters: WorkspacesSettingsApiDeleteEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all Custom Application Settings
     * @param {WorkspacesSettingsApiGetAllEntitiesCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesCustomApplicationSettings(requestParameters: WorkspacesSettingsApiGetAllEntitiesCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutList>;
    /**
     *
     * @summary Get all Setting for Workspaces
     * @param {WorkspacesSettingsApiGetAllEntitiesWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceSettings(requestParameters: WorkspacesSettingsApiGetAllEntitiesWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutList>;
    /**
     *
     * @summary Get a Custom Application Setting
     * @param {WorkspacesSettingsApiGetEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCustomApplicationSettings(requestParameters: WorkspacesSettingsApiGetEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;
    /**
     *
     * @summary Get a Setting for Workspace
     * @param {WorkspacesSettingsApiGetEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceSettings(requestParameters: WorkspacesSettingsApiGetEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;
    /**
     *
     * @summary Patch a Custom Application Setting
     * @param {WorkspacesSettingsApiPatchEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCustomApplicationSettings(requestParameters: WorkspacesSettingsApiPatchEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;
    /**
     *
     * @summary Patch a Setting for Workspace
     * @param {WorkspacesSettingsApiPatchEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceSettings(requestParameters: WorkspacesSettingsApiPatchEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;
    /**
     *
     * @summary Put a Custom Application Setting
     * @param {WorkspacesSettingsApiUpdateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCustomApplicationSettings(requestParameters: WorkspacesSettingsApiUpdateEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;
    /**
     *
     * @summary Put a Setting for a Workspace
     * @param {WorkspacesSettingsApiUpdateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceSettings(requestParameters: WorkspacesSettingsApiUpdateEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;
    /**
     * Resolves values for all settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for all settings.
     * @param {WorkspacesSettingsApiWorkspaceResolveAllSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceResolveAllSettings(requestParameters: WorkspacesSettingsApiWorkspaceResolveAllSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ResolvedSetting>>;
    /**
     * Resolves value for selected settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for selected settings.
     * @param {WorkspacesSettingsApiWorkspaceResolveSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceResolveSettings(requestParameters: WorkspacesSettingsApiWorkspaceResolveSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ResolvedSetting>>;
};

/**
 * WorkspacesSettingsApi - functional programming interface
 * @export
 */
export declare const WorkspacesSettingsApiFp: (configuration?: MetadataConfiguration) => {
    /**
     *
     * @summary Post Custom Application Settings
     * @param {string} workspaceId
     * @param {JsonApiCustomApplicationSettingPostOptionalIdDocument} jsonApiCustomApplicationSettingPostOptionalIdDocument
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityCustomApplicationSettings(workspaceId: string, jsonApiCustomApplicationSettingPostOptionalIdDocument: JsonApiCustomApplicationSettingPostOptionalIdDocument, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCustomApplicationSettingOutDocument>>;
    /**
     *
     * @summary Post Settings for Workspaces
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceSettingPostOptionalIdDocument} jsonApiWorkspaceSettingPostOptionalIdDocument
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEntityWorkspaceSettings(workspaceId: string, jsonApiWorkspaceSettingPostOptionalIdDocument: JsonApiWorkspaceSettingPostOptionalIdDocument, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceSettingOutDocument>>;
    /**
     *
     * @summary Delete a Custom Application Setting
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityCustomApplicationSettings(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a Setting for Workspace
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEntityWorkspaceSettings(workspaceId: string, objectId: string, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get all Custom Application Settings
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesCustomApplicationSettings(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCustomApplicationSettingOutList>>;
    /**
     *
     * @summary Get all Setting for Workspaces
     * @param {string} workspaceId
     * @param {'ALL' | 'PARENTS' | 'NATIVE'} [origin]
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllEntitiesWorkspaceSettings(workspaceId: string, origin?: "ALL" | "PARENTS" | "NATIVE", filter?: string, page?: number, size?: number, sort?: Array<string>, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceSettingOutList>>;
    /**
     *
     * @summary Get a Custom Application Setting
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityCustomApplicationSettings(workspaceId: string, objectId: string, filter?: string, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCustomApplicationSettingOutDocument>>;
    /**
     *
     * @summary Get a Setting for Workspace
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {boolean} [xGDCVALIDATERELATIONS]
     * @param {Array<'origin' | 'all' | 'ALL'>} [metaInclude] Include Meta objects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityWorkspaceSettings(workspaceId: string, objectId: string, filter?: string, xGDCVALIDATERELATIONS?: boolean, metaInclude?: Array<"origin" | "all" | "ALL">, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceSettingOutDocument>>;
    /**
     *
     * @summary Patch a Custom Application Setting
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiCustomApplicationSettingPatchDocument} jsonApiCustomApplicationSettingPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityCustomApplicationSettings(workspaceId: string, objectId: string, jsonApiCustomApplicationSettingPatchDocument: JsonApiCustomApplicationSettingPatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCustomApplicationSettingOutDocument>>;
    /**
     *
     * @summary Patch a Setting for Workspace
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceSettingPatchDocument} jsonApiWorkspaceSettingPatchDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchEntityWorkspaceSettings(workspaceId: string, objectId: string, jsonApiWorkspaceSettingPatchDocument: JsonApiWorkspaceSettingPatchDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceSettingOutDocument>>;
    /**
     *
     * @summary Put a Custom Application Setting
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiCustomApplicationSettingInDocument} jsonApiCustomApplicationSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityCustomApplicationSettings(workspaceId: string, objectId: string, jsonApiCustomApplicationSettingInDocument: JsonApiCustomApplicationSettingInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiCustomApplicationSettingOutDocument>>;
    /**
     *
     * @summary Put a Setting for a Workspace
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiWorkspaceSettingInDocument} jsonApiWorkspaceSettingInDocument
     * @param {string} [filter] Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEntityWorkspaceSettings(workspaceId: string, objectId: string, jsonApiWorkspaceSettingInDocument: JsonApiWorkspaceSettingInDocument, filter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceSettingOutDocument>>;
    /**
     * Resolves values for all settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for all settings.
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceResolveAllSettings(workspaceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResolvedSetting>>>;
    /**
     * Resolves value for selected settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for selected settings.
     * @param {string} workspaceId
     * @param {ResolveSettingsRequest} resolveSettingsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceResolveSettings(workspaceId: string, resolveSettingsRequest: ResolveSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResolvedSetting>>>;
};

/**
 * Request parameters for getAllEntitiesCustomApplicationSettings operation in WorkspacesSettingsApi.
 * @export
 * @interface WorkspacesSettingsApiGetAllEntitiesCustomApplicationSettingsRequest
 */
export declare interface WorkspacesSettingsApiGetAllEntitiesCustomApplicationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspacesSettingsApiGetAllEntitiesCustomApplicationSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof WorkspacesSettingsApiGetAllEntitiesCustomApplicationSettings
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspacesSettingsApiGetAllEntitiesCustomApplicationSettings
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof WorkspacesSettingsApiGetAllEntitiesCustomApplicationSettings
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof WorkspacesSettingsApiGetAllEntitiesCustomApplicationSettings
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof WorkspacesSettingsApiGetAllEntitiesCustomApplicationSettings
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof WorkspacesSettingsApiGetAllEntitiesCustomApplicationSettings
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspacesSettingsApiGetAllEntitiesCustomApplicationSettings
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getAllEntitiesWorkspaceSettings operation in WorkspacesSettingsApi.
 * @export
 * @interface WorkspacesSettingsApiGetAllEntitiesWorkspaceSettingsRequest
 */
export declare interface WorkspacesSettingsApiGetAllEntitiesWorkspaceSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspacesSettingsApiGetAllEntitiesWorkspaceSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {'ALL' | 'PARENTS' | 'NATIVE'}
     * @memberof WorkspacesSettingsApiGetAllEntitiesWorkspaceSettings
     */
    readonly origin?: "ALL" | "PARENTS" | "NATIVE";
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspacesSettingsApiGetAllEntitiesWorkspaceSettings
     */
    readonly filter?: string;
    /**
     * Zero-based page index (0..N)
     * @type {number}
     * @memberof WorkspacesSettingsApiGetAllEntitiesWorkspaceSettings
     */
    readonly page?: number;
    /**
     * The size of the page to be returned
     * @type {number}
     * @memberof WorkspacesSettingsApiGetAllEntitiesWorkspaceSettings
     */
    readonly size?: number;
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof WorkspacesSettingsApiGetAllEntitiesWorkspaceSettings
     */
    readonly sort?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof WorkspacesSettingsApiGetAllEntitiesWorkspaceSettings
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspacesSettingsApiGetAllEntitiesWorkspaceSettings
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityCustomApplicationSettings operation in WorkspacesSettingsApi.
 * @export
 * @interface WorkspacesSettingsApiGetEntityCustomApplicationSettingsRequest
 */
export declare interface WorkspacesSettingsApiGetEntityCustomApplicationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspacesSettingsApiGetEntityCustomApplicationSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspacesSettingsApiGetEntityCustomApplicationSettings
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspacesSettingsApiGetEntityCustomApplicationSettings
     */
    readonly filter?: string;
    /**
     *
     * @type {boolean}
     * @memberof WorkspacesSettingsApiGetEntityCustomApplicationSettings
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspacesSettingsApiGetEntityCustomApplicationSettings
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * Request parameters for getEntityWorkspaceSettings operation in WorkspacesSettingsApi.
 * @export
 * @interface WorkspacesSettingsApiGetEntityWorkspaceSettingsRequest
 */
export declare interface WorkspacesSettingsApiGetEntityWorkspaceSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspacesSettingsApiGetEntityWorkspaceSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspacesSettingsApiGetEntityWorkspaceSettings
     */
    readonly objectId: string;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspacesSettingsApiGetEntityWorkspaceSettings
     */
    readonly filter?: string;
    /**
     *
     * @type {boolean}
     * @memberof WorkspacesSettingsApiGetEntityWorkspaceSettings
     */
    readonly xGDCVALIDATERELATIONS?: boolean;
    /**
     * Include Meta objects.
     * @type {Array<'origin' | 'all' | 'ALL'>}
     * @memberof WorkspacesSettingsApiGetEntityWorkspaceSettings
     */
    readonly metaInclude?: Array<"origin" | "all" | "ALL">;
}

/**
 * WorkspacesSettingsApi - interface
 * @export
 * @interface WorkspacesSettingsApi
 */
export declare interface WorkspacesSettingsApiInterface {
    /**
     *
     * @summary Post Custom Application Settings
     * @param {WorkspacesSettingsApiCreateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApiInterface
     */
    createEntityCustomApplicationSettings(requestParameters: WorkspacesSettingsApiCreateEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;
    /**
     *
     * @summary Post Settings for Workspaces
     * @param {WorkspacesSettingsApiCreateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApiInterface
     */
    createEntityWorkspaceSettings(requestParameters: WorkspacesSettingsApiCreateEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;
    /**
     *
     * @summary Delete a Custom Application Setting
     * @param {WorkspacesSettingsApiDeleteEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApiInterface
     */
    deleteEntityCustomApplicationSettings(requestParameters: WorkspacesSettingsApiDeleteEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a Setting for Workspace
     * @param {WorkspacesSettingsApiDeleteEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApiInterface
     */
    deleteEntityWorkspaceSettings(requestParameters: WorkspacesSettingsApiDeleteEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get all Custom Application Settings
     * @param {WorkspacesSettingsApiGetAllEntitiesCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApiInterface
     */
    getAllEntitiesCustomApplicationSettings(requestParameters: WorkspacesSettingsApiGetAllEntitiesCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutList>;
    /**
     *
     * @summary Get all Setting for Workspaces
     * @param {WorkspacesSettingsApiGetAllEntitiesWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApiInterface
     */
    getAllEntitiesWorkspaceSettings(requestParameters: WorkspacesSettingsApiGetAllEntitiesWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutList>;
    /**
     *
     * @summary Get a Custom Application Setting
     * @param {WorkspacesSettingsApiGetEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApiInterface
     */
    getEntityCustomApplicationSettings(requestParameters: WorkspacesSettingsApiGetEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;
    /**
     *
     * @summary Get a Setting for Workspace
     * @param {WorkspacesSettingsApiGetEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApiInterface
     */
    getEntityWorkspaceSettings(requestParameters: WorkspacesSettingsApiGetEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;
    /**
     *
     * @summary Patch a Custom Application Setting
     * @param {WorkspacesSettingsApiPatchEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApiInterface
     */
    patchEntityCustomApplicationSettings(requestParameters: WorkspacesSettingsApiPatchEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;
    /**
     *
     * @summary Patch a Setting for Workspace
     * @param {WorkspacesSettingsApiPatchEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApiInterface
     */
    patchEntityWorkspaceSettings(requestParameters: WorkspacesSettingsApiPatchEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;
    /**
     *
     * @summary Put a Custom Application Setting
     * @param {WorkspacesSettingsApiUpdateEntityCustomApplicationSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApiInterface
     */
    updateEntityCustomApplicationSettings(requestParameters: WorkspacesSettingsApiUpdateEntityCustomApplicationSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiCustomApplicationSettingOutDocument>;
    /**
     *
     * @summary Put a Setting for a Workspace
     * @param {WorkspacesSettingsApiUpdateEntityWorkspaceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApiInterface
     */
    updateEntityWorkspaceSettings(requestParameters: WorkspacesSettingsApiUpdateEntityWorkspaceSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<JsonApiWorkspaceSettingOutDocument>;
    /**
     * Resolves values for all settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for all settings.
     * @param {WorkspacesSettingsApiWorkspaceResolveAllSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApiInterface
     */
    workspaceResolveAllSettings(requestParameters: WorkspacesSettingsApiWorkspaceResolveAllSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ResolvedSetting>>;
    /**
     * Resolves value for selected settings in a workspace by current user, workspace, organization, or default settings.
     * @summary Values for selected settings.
     * @param {WorkspacesSettingsApiWorkspaceResolveSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesSettingsApiInterface
     */
    workspaceResolveSettings(requestParameters: WorkspacesSettingsApiWorkspaceResolveSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ResolvedSetting>>;
}

/**
 * Request parameters for patchEntityCustomApplicationSettings operation in WorkspacesSettingsApi.
 * @export
 * @interface WorkspacesSettingsApiPatchEntityCustomApplicationSettingsRequest
 */
export declare interface WorkspacesSettingsApiPatchEntityCustomApplicationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspacesSettingsApiPatchEntityCustomApplicationSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspacesSettingsApiPatchEntityCustomApplicationSettings
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiCustomApplicationSettingPatchDocument}
     * @memberof WorkspacesSettingsApiPatchEntityCustomApplicationSettings
     */
    readonly jsonApiCustomApplicationSettingPatchDocument: JsonApiCustomApplicationSettingPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspacesSettingsApiPatchEntityCustomApplicationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for patchEntityWorkspaceSettings operation in WorkspacesSettingsApi.
 * @export
 * @interface WorkspacesSettingsApiPatchEntityWorkspaceSettingsRequest
 */
export declare interface WorkspacesSettingsApiPatchEntityWorkspaceSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspacesSettingsApiPatchEntityWorkspaceSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspacesSettingsApiPatchEntityWorkspaceSettings
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingPatchDocument}
     * @memberof WorkspacesSettingsApiPatchEntityWorkspaceSettings
     */
    readonly jsonApiWorkspaceSettingPatchDocument: JsonApiWorkspaceSettingPatchDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspacesSettingsApiPatchEntityWorkspaceSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityCustomApplicationSettings operation in WorkspacesSettingsApi.
 * @export
 * @interface WorkspacesSettingsApiUpdateEntityCustomApplicationSettingsRequest
 */
export declare interface WorkspacesSettingsApiUpdateEntityCustomApplicationSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspacesSettingsApiUpdateEntityCustomApplicationSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspacesSettingsApiUpdateEntityCustomApplicationSettings
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiCustomApplicationSettingInDocument}
     * @memberof WorkspacesSettingsApiUpdateEntityCustomApplicationSettings
     */
    readonly jsonApiCustomApplicationSettingInDocument: JsonApiCustomApplicationSettingInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspacesSettingsApiUpdateEntityCustomApplicationSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for updateEntityWorkspaceSettings operation in WorkspacesSettingsApi.
 * @export
 * @interface WorkspacesSettingsApiUpdateEntityWorkspaceSettingsRequest
 */
export declare interface WorkspacesSettingsApiUpdateEntityWorkspaceSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspacesSettingsApiUpdateEntityWorkspaceSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {string}
     * @memberof WorkspacesSettingsApiUpdateEntityWorkspaceSettings
     */
    readonly objectId: string;
    /**
     *
     * @type {JsonApiWorkspaceSettingInDocument}
     * @memberof WorkspacesSettingsApiUpdateEntityWorkspaceSettings
     */
    readonly jsonApiWorkspaceSettingInDocument: JsonApiWorkspaceSettingInDocument;
    /**
     * Filtering parameter in RSQL. See https://github.com/jirutka/rsql-parser. You can specify any object parameter and parameter of related entity (for example title&#x3D;&#x3D;\&#39;Some Title\&#39;;description&#x3D;&#x3D;\&#39;desc\&#39;). Additionally, if the entity relationship represents a polymorphic entity type, it can be casted to its subtypes (for example relatedEntity::subtype.subtypeProperty&#x3D;&#x3D;\&#39;Value 123\&#39;).
     * @type {string}
     * @memberof WorkspacesSettingsApiUpdateEntityWorkspaceSettings
     */
    readonly filter?: string;
}

/**
 * Request parameters for workspaceResolveAllSettings operation in WorkspacesSettingsApi.
 * @export
 * @interface WorkspacesSettingsApiWorkspaceResolveAllSettingsRequest
 */
export declare interface WorkspacesSettingsApiWorkspaceResolveAllSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspacesSettingsApiWorkspaceResolveAllSettings
     */
    readonly workspaceId: string;
}

/**
 * Request parameters for workspaceResolveSettings operation in WorkspacesSettingsApi.
 * @export
 * @interface WorkspacesSettingsApiWorkspaceResolveSettingsRequest
 */
export declare interface WorkspacesSettingsApiWorkspaceResolveSettingsRequest {
    /**
     *
     * @type {string}
     * @memberof WorkspacesSettingsApiWorkspaceResolveSettings
     */
    readonly workspaceId: string;
    /**
     *
     * @type {ResolveSettingsRequest}
     * @memberof WorkspacesSettingsApiWorkspaceResolveSettings
     */
    readonly resolveSettingsRequest: ResolveSettingsRequest;
}

export { }
