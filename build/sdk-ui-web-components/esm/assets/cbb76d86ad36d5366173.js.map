{"version":3,"file":"assets/cbb76d86ad36d5366173.js","mappings":"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","sources":["webpack://@gooddata/sdk-ui-web-components/../sdk-backend-base/esm/ldmFactories/catalog/attributeFactory.js","webpack://@gooddata/sdk-ui-web-components/../sdk-backend-base/esm/ldmFactories/catalog/dateDatasetFactory.js","webpack://@gooddata/sdk-ui-web-components/../sdk-model/esm/ldm/metadata/dataSet/index.js","webpack://@gooddata/sdk-ui-web-components/../sdk-backend-base/esm/ldmFactories/catalog/factFactory.js","webpack://@gooddata/sdk-ui-web-components/../sdk-model/esm/ldm/metadata/fact/index.js","webpack://@gooddata/sdk-ui-web-components/../sdk-backend-base/esm/ldmFactories/catalog/groupFactory.js","webpack://@gooddata/sdk-ui-web-components/../sdk-backend-base/esm/ldmFactories/catalog/measureFactory.js","webpack://@gooddata/sdk-ui-web-components/../sdk-backend-base/esm/ldmFactories/metadata/attributeFactory.js","webpack://@gooddata/sdk-ui-web-components/../sdk-backend-base/esm/ldmFactories/metadata/dataSetFactory.js","webpack://@gooddata/sdk-ui-web-components/../sdk-backend-base/esm/ldmFactories/metadata/displayFormFactory.js","webpack://@gooddata/sdk-ui-web-components/../sdk-backend-base/esm/ldmFactories/metadata/factFactory.js","webpack://@gooddata/sdk-ui-web-components/../sdk-backend-base/esm/ldmFactories/metadata/factory.js","webpack://@gooddata/sdk-ui-web-components/../sdk-backend-base/esm/ldmFactories/metadata/measureFactory.js","webpack://@gooddata/sdk-ui-web-components/../sdk-backend-base/esm/toolkit/auth.js","webpack://@gooddata/sdk-ui-web-components/../sdk-backend-base/esm/toolkit/paging.js","webpack://@gooddata/sdk-ui-web-components/../sdk-backend-base/esm/toolkit/pluginUrlValidation.js","webpack://@gooddata/sdk-ui-web-components/../sdk-model/esm/ldm/catalog/attribute/index.js","webpack://@gooddata/sdk-ui-web-components/../sdk-model/esm/ldm/catalog/attributeHierarchy/index.js","webpack://@gooddata/sdk-ui-web-components/../sdk-model/esm/ldm/catalog/fact/index.js","webpack://@gooddata/sdk-ui-web-components/../sdk-model/esm/ldm/catalog/measure/index.js","webpack://@gooddata/sdk-ui-web-components/../sdk-model/esm/ldm/metadata/attributeDisplayForm/index.js","webpack://@gooddata/sdk-ui-web-components/../sdk-model/esm/ldm/metadata/measure/index.js"],"sourcesContent":["// (C) 2019-2022 GoodData Corporation\nimport identity from \"lodash/identity.js\";\nimport { newAttribute, isAttributeDisplayFormMetadataObject, isAttributeMetadataObject, } from \"@gooddata/sdk-model\";\nimport { GroupableCatalogItemBuilder } from \"./groupFactory.js\";\nimport { builderFactory } from \"../builder.js\";\nimport { newAttributeMetadataObject } from \"../metadata/attributeFactory.js\";\nimport { newAttributeDisplayFormMetadataObject, } from \"../metadata/displayFormFactory.js\";\n/**\n * Catalog attribute builder\n * See {@link Builder}\n *\n * @beta\n */\nexport class CatalogAttributeBuilder extends GroupableCatalogItemBuilder {\n    attribute(attributeOrRef, modifications) {\n        if (!isAttributeMetadataObject(attributeOrRef)) {\n            this.item.attribute = newAttributeMetadataObject(attributeOrRef, modifications);\n        }\n        else {\n            this.item.attribute = attributeOrRef;\n        }\n        return this;\n    }\n    defaultDisplayForm(displayFormOrRef, modifications) {\n        if (!isAttributeDisplayFormMetadataObject(displayFormOrRef)) {\n            this.item.defaultDisplayForm = newAttributeDisplayFormMetadataObject(displayFormOrRef, modifications);\n        }\n        else {\n            this.item.defaultDisplayForm = displayFormOrRef;\n        }\n        return this;\n    }\n    displayForms(displayForms) {\n        this.item.displayForms = displayForms;\n        return this;\n    }\n    geoPinDisplayForms(displayForms) {\n        this.item.geoPinDisplayForms = displayForms;\n        return this;\n    }\n    toExecutionModel(modifications = identity) {\n        if (!this.item.defaultDisplayForm) {\n            throw new Error(\"Cannot convert catalog attribute to execution model, no displayForm found!\");\n        }\n        const defaultModifications = (a) => { var _a; return a.alias((_a = this.item.defaultDisplayForm) === null || _a === void 0 ? void 0 : _a.title); };\n        return newAttribute(this.item.defaultDisplayForm.ref, (m) => modifications(defaultModifications(m)));\n    }\n}\n/**\n * Catalog attribute factory\n *\n * @param modifications - catalog attribute builder modifications to perform\n * @returns created catalog attribute\n * @beta\n */\nexport const newCatalogAttribute = (modifications = identity) => builderFactory(CatalogAttributeBuilder, { type: \"attribute\" }, modifications);\n//# sourceMappingURL=attributeFactory.js.map","// (C) 2019-2022 GoodData Corporation\nimport identity from \"lodash/identity.js\";\nimport { isAttributeDisplayFormMetadataObject, isAttributeMetadataObject, isDataSetMetadataObject, } from \"@gooddata/sdk-model\";\nimport { Builder, builderFactory } from \"../builder.js\";\nimport { newAttributeMetadataObject } from \"../metadata/attributeFactory.js\";\nimport { newAttributeDisplayFormMetadataObject, } from \"../metadata/displayFormFactory.js\";\nimport { newDataSetMetadataObject } from \"../metadata/dataSetFactory.js\";\n/**\n * Catalog date attribute builder\n * See {@link Builder}\n *\n * @beta\n */\nexport class CatalogDateAttributeBuilder extends Builder {\n    granularity(granularity) {\n        this.item.granularity = granularity;\n        return this;\n    }\n    attribute(attributeOrRef, modifications) {\n        if (!isAttributeMetadataObject(attributeOrRef)) {\n            this.item.attribute = newAttributeMetadataObject(attributeOrRef, modifications);\n        }\n        else {\n            this.item.attribute = attributeOrRef;\n        }\n        return this;\n    }\n    defaultDisplayForm(displayFormOrRef, modifications) {\n        if (!isAttributeDisplayFormMetadataObject(displayFormOrRef)) {\n            this.item.defaultDisplayForm = newAttributeDisplayFormMetadataObject(displayFormOrRef, modifications);\n        }\n        else {\n            this.item.defaultDisplayForm = displayFormOrRef;\n        }\n        return this;\n    }\n}\n/**\n * Catalog date attribute factory\n *\n * @param modifications - catalog date attribute builder modifications to perform\n * @returns created catalog date attribute\n * @beta\n */\nexport const newCatalogDateAttribute = (modifications = identity) => builderFactory(CatalogDateAttributeBuilder, {}, modifications);\n/**\n * Catalog date dataset builder\n * See {@link Builder}\n *\n * @beta\n */\nexport class CatalogDateDatasetBuilder extends Builder {\n    relevance(relevance) {\n        this.item.relevance = relevance;\n        return this;\n    }\n    dateAttributes(dateAttributes) {\n        this.item.dateAttributes = dateAttributes;\n        return this;\n    }\n    dataSet(dataSetOrRef, modifications) {\n        if (!isDataSetMetadataObject(dataSetOrRef)) {\n            this.item.dataSet = newDataSetMetadataObject(dataSetOrRef, modifications);\n        }\n        else {\n            this.item.dataSet = dataSetOrRef;\n        }\n        return this;\n    }\n}\n/**\n * Catalog date dataset factory\n *\n * @param modifications - catalog date dataset builder modifications to perform\n * @returns created catalog date dataset\n * @beta\n */\nexport const newCatalogDateDataset = (modifications = identity) => builderFactory(CatalogDateDatasetBuilder, { type: \"dateDataset\" }, modifications);\n//# sourceMappingURL=dateDatasetFactory.js.map","// (C) 2019-2020 GoodData Corporation\nimport { isMetadataObject } from \"../types.js\";\n/**\n * Tests whether the provided object is of type {@link IDataSetMetadataObject}.\n *\n * @param obj - object to test\n * @public\n */\nexport function isDataSetMetadataObject(obj) {\n    return isMetadataObject(obj) && obj.type === \"dataSet\";\n}\n//# sourceMappingURL=index.js.map","// (C) 2019-2022 GoodData Corporation\nimport identity from \"lodash/identity.js\";\nimport { isFactMetadataObject } from \"@gooddata/sdk-model\";\nimport { GroupableCatalogItemBuilder } from \"./groupFactory.js\";\nimport { builderFactory } from \"../builder.js\";\nimport { newFactMetadataObject } from \"../metadata/factFactory.js\";\n/**\n * Catalog fact builder\n * See {@link Builder}\n *\n * @beta\n */\nexport class CatalogFactBuilder extends GroupableCatalogItemBuilder {\n    fact(factOrRef, modifications) {\n        if (!isFactMetadataObject(factOrRef)) {\n            this.item.fact = newFactMetadataObject(factOrRef, modifications);\n        }\n        else {\n            this.item.fact = factOrRef;\n        }\n        return this;\n    }\n}\n/**\n * Catalog fact factory\n *\n * @param modifications - catalog fact builder modifications to perform\n * @returns created catalog fact\n * @beta\n */\nexport const newCatalogFact = (modifications = identity) => builderFactory(CatalogFactBuilder, { type: \"fact\" }, modifications);\n//# sourceMappingURL=factFactory.js.map","// (C) 2019-2020 GoodData Corporation\nimport { isMetadataObject } from \"../types.js\";\n/**\n * Tests whether the provided object is of type {@link IFactMetadataObject}.\n *\n * @param obj - object to test\n * @public\n */\nexport function isFactMetadataObject(obj) {\n    return isMetadataObject(obj) && obj.type === \"fact\";\n}\n//# sourceMappingURL=index.js.map","// (C) 2019-2022 GoodData Corporation\nimport identity from \"lodash/identity.js\";\nimport { Builder, builderFactory } from \"../builder.js\";\n/**\n * Groupable catalog item builder\n * See {@link Builder}\n *\n * @beta\n */\nexport class GroupableCatalogItemBuilder extends Builder {\n    groups(tagRefs) {\n        this.item.groups = tagRefs;\n        return this;\n    }\n}\n/**\n * Catalog group builder\n * See {@link Builder}\n *\n * @beta\n */\nexport class CatalogGroupBuilder extends Builder {\n    title(title) {\n        this.item.title = title;\n        return this;\n    }\n    tag(tagRef) {\n        this.item.tag = tagRef;\n        return this;\n    }\n}\n/**\n * Catalog group factory\n *\n * @param modifications - catalog group builder modifications to perform\n * @returns created catalog group\n * @beta\n */\nexport const newCatalogGroup = (modifications = identity) => builderFactory(CatalogGroupBuilder, {}, modifications);\n//# sourceMappingURL=groupFactory.js.map","// (C) 2019-2022 GoodData Corporation\nimport identity from \"lodash/identity.js\";\nimport { GroupableCatalogItemBuilder } from \"./groupFactory.js\";\nimport { newMeasure, isMeasureMetadataObject, } from \"@gooddata/sdk-model\";\nimport { builderFactory } from \"../builder.js\";\nimport { newMeasureMetadataObject } from \"../metadata/measureFactory.js\";\n/**\n * Catalog measure builder\n * See {@link Builder}\n *\n * @beta\n */\nexport class CatalogMeasureBuilder extends GroupableCatalogItemBuilder {\n    measure(measureOrRef, modifications) {\n        if (!isMeasureMetadataObject(measureOrRef)) {\n            this.item.measure = newMeasureMetadataObject(measureOrRef, modifications);\n        }\n        else {\n            this.item.measure = measureOrRef;\n        }\n        return this;\n    }\n    toExecutionModel(modifications = identity) {\n        if (!this.item.measure) {\n            throw new Error(\"Cannot convert catalog measure to execution model, no measure found!\");\n        }\n        const defaultModifications = (m) => { var _a, _b; return m.alias((_a = this.item.measure) === null || _a === void 0 ? void 0 : _a.title).format((_b = this.item.measure) === null || _b === void 0 ? void 0 : _b.format); };\n        return newMeasure(this.item.measure.ref, (m) => modifications(defaultModifications(m)));\n    }\n}\n/**\n * Catalog measure factory\n *\n * @param modifications - catalog measure builder modifications to perform\n * @returns created catalog measure\n * @beta\n */\nexport const newCatalogMeasure = (modifications = identity) => builderFactory(CatalogMeasureBuilder, { type: \"measure\" }, modifications);\n//# sourceMappingURL=measureFactory.js.map","// (C) 2019-2022 GoodData Corporation\nimport identity from \"lodash/identity.js\";\nimport { MetadataObjectBuilder } from \"./factory.js\";\nimport { builderFactory } from \"../builder.js\";\n/**\n * Attribute metadata object builder\n * See {@link Builder}\n *\n * @beta\n */\nexport class AttributeMetadataObjectBuilder extends MetadataObjectBuilder {\n    drillDownStep(ref) {\n        if (ref) {\n            this.item.drillDownStep = ref;\n        }\n        return this;\n    }\n    drillToAttributeLink(ref) {\n        if (ref) {\n            this.item.drillToAttributeLink = ref;\n        }\n        return this;\n    }\n    displayForms(displayForms) {\n        this.item.displayForms = displayForms;\n        return this;\n    }\n}\n/**\n * Attribute metadata object factory\n *\n * @param ref - attribute reference\n * @param modifications - attribute builder modifications to perform\n * @returns created attribute metadata object\n * @beta\n */\nexport const newAttributeMetadataObject = (ref, modifications = identity) => builderFactory(AttributeMetadataObjectBuilder, { type: \"attribute\", ref }, modifications);\n//# sourceMappingURL=attributeFactory.js.map","// (C) 2019-2022 GoodData Corporation\nimport identity from \"lodash/identity.js\";\nimport { MetadataObjectBuilder } from \"./factory.js\";\nimport { builderFactory } from \"../builder.js\";\n/**\n * DataSet metadata object builder\n * See {@link Builder}\n *\n * @beta\n */\nexport class DataSetMetadataObjectBuilder extends MetadataObjectBuilder {\n}\n/**\n * DataSet metadata object factory\n *\n * @param ref - dataset reference\n * @param modifications - dataset builder modifications to perform\n * @returns created dataset metadata object\n * @beta\n */\nexport const newDataSetMetadataObject = (ref, modifications = identity) => builderFactory(DataSetMetadataObjectBuilder, { type: \"dataSet\", ref }, modifications);\n//# sourceMappingURL=dataSetFactory.js.map","// (C) 2019-2022 GoodData Corporation\nimport identity from \"lodash/identity.js\";\nimport { MetadataObjectBuilder } from \"./factory.js\";\nimport { builderFactory } from \"../builder.js\";\n/**\n * Attribute display form metadata object builder\n * See {@link Builder}\n *\n * @beta\n */\nexport class AttributeDisplayFormMetadataObjectBuilder extends MetadataObjectBuilder {\n    attribute(ref) {\n        this.item.attribute = ref;\n        return this;\n    }\n    displayFormType(type) {\n        this.item.displayFormType = type;\n        return this;\n    }\n    isDefault(value) {\n        this.item.isDefault = value;\n        return this;\n    }\n}\n/**\n * Attribute display form metadata object factory\n *\n * @param ref - attribute display form reference\n * @param modifications - attribute diplay form builder modifications to perform\n * @returns created attribute display form metadata object\n * @beta\n */\nexport const newAttributeDisplayFormMetadataObject = (ref, modifications = identity) => builderFactory(AttributeDisplayFormMetadataObjectBuilder, { type: \"displayForm\", ref }, modifications);\n//# sourceMappingURL=displayFormFactory.js.map","// (C) 2019-2022 GoodData Corporation\nimport identity from \"lodash/identity.js\";\nimport { MetadataObjectBuilder } from \"./factory.js\";\nimport { builderFactory } from \"../builder.js\";\n/**\n * Fact metadata object builder\n * See {@link Builder}\n *\n * @beta\n */\nexport class FactMetadataObjectBuilder extends MetadataObjectBuilder {\n}\n/**\n * Fact metadata object factory\n *\n * @param ref - fact reference\n * @param modifications - fact builder modifications to perform\n * @returns created fact metadata object\n * @beta\n */\nexport const newFactMetadataObject = (ref, modifications = identity) => builderFactory(FactMetadataObjectBuilder, { type: \"fact\", ref }, modifications);\n//# sourceMappingURL=factFactory.js.map","// (C) 2019-2022 GoodData Corporation\nimport { Builder } from \"../builder.js\";\n/**\n * Metadata object builder\n * See {@link Builder}\n *\n * @beta\n */\nexport class MetadataObjectBuilder extends Builder {\n    title(title) {\n        this.item.title = title;\n        return this;\n    }\n    description(description) {\n        this.item.description = description;\n        return this;\n    }\n    id(identifier) {\n        this.item.id = identifier;\n        return this;\n    }\n    uri(uri) {\n        this.item.uri = uri;\n        return this;\n    }\n    unlisted(value) {\n        this.item.unlisted = value;\n        return this;\n    }\n    production(isProduction) {\n        this.item.production = isProduction;\n        return this;\n    }\n    deprecated(isDeprecated) {\n        this.item.deprecated = isDeprecated;\n        return this;\n    }\n}\n//# sourceMappingURL=factory.js.map","// (C) 2019-2022 GoodData Corporation\nimport identity from \"lodash/identity.js\";\nimport { MetadataObjectBuilder } from \"./factory.js\";\nimport { builderFactory } from \"../builder.js\";\n/**\n * Measure metadata object builder\n * See {@link Builder}\n *\n * @beta\n */\nexport class MeasureMetadataObjectBuilder extends MetadataObjectBuilder {\n    expression(maql) {\n        this.item.expression = maql;\n        return this;\n    }\n    format(format) {\n        this.item.format = format;\n        return this;\n    }\n    isLocked(isLocked) {\n        this.item.isLocked = isLocked;\n        return this;\n    }\n    created(createdAt) {\n        this.item.created = createdAt;\n        return this;\n    }\n    createdBy(createdBy) {\n        this.item.createdBy = createdBy;\n        return this;\n    }\n    updated(updatedAt) {\n        this.item.updated = updatedAt;\n        return this;\n    }\n    updatedBy(updatedBy) {\n        this.item.updatedBy = updatedBy;\n        return this;\n    }\n}\n/**\n * Measure metadata object factory\n *\n * @param ref - measure reference\n * @param modifications - measure builder modifications to perform\n * @returns created measure metadata object\n * @beta\n */\nexport const newMeasureMetadataObject = (ref, modifications = identity) => builderFactory(MeasureMetadataObjectBuilder, { type: \"measure\", ref }, modifications);\n//# sourceMappingURL=measureFactory.js.map","// (C) 2019-2021 GoodData Corporation\nimport { NotSupported, } from \"@gooddata/sdk-backend-spi\";\n/**\n * This implementation of auth provider ensures, that the auth provider is called exactly once in the happy path\n * execution where provider successfully authenticates a principal.\n *\n * If underlying provider fails, subsequent calls that need authentication will land in the provider.\n *\n * This class encapsulates the stateful nature of interaction of the provider across multiple different instances\n * of the bear backend, all of which are set with the same provider. All instances of the backend should be\n * subject to the same authentication flow AND the call to the authentication provider should be synchronized\n * through this scoped instance.\n *\n * @internal\n */\nexport class AuthProviderCallGuard {\n    constructor(realProvider) {\n        this.realProvider = realProvider;\n        this.reset = () => {\n            this.principal = undefined;\n        };\n        // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n        this.initializeClient = (client) => {\n            var _a, _b;\n            (_b = (_a = this.realProvider).initializeClient) === null || _b === void 0 ? void 0 : _b.call(_a, client);\n        };\n        this.onNotAuthenticated = (context, error) => {\n            var _a, _b;\n            (_b = (_a = this.realProvider).onNotAuthenticated) === null || _b === void 0 ? void 0 : _b.call(_a, context, error);\n        };\n        this.authenticate = (context) => {\n            if (this.principal) {\n                return Promise.resolve(this.principal);\n            }\n            if (this.inflightRequest) {\n                return this.inflightRequest;\n            }\n            this.inflightRequest = this.realProvider\n                .authenticate(context)\n                .then((res) => {\n                this.principal = res;\n                this.inflightRequest = undefined;\n                return res;\n            })\n                .catch((err) => {\n                this.inflightRequest = undefined;\n                throw err;\n            });\n            return this.inflightRequest;\n        };\n    }\n    getCurrentPrincipal(context) {\n        return this.realProvider.getCurrentPrincipal(context);\n    }\n    async deauthenticate(context) {\n        return this.realProvider.deauthenticate(context);\n    }\n}\n/**\n * This implementation serves as a Null object for IAuthProviderCallGuard.\n *\n * @internal\n */\nexport class NoopAuthProvider {\n    authenticate(_context) {\n        throw new NotSupported(\"NoopAuthProvider does not support authenticate\");\n    }\n    getCurrentPrincipal(_context) {\n        throw new NotSupported(\"NoopAuthProvider does not support getCurrentPrincipal\");\n    }\n    deauthenticate(_context) {\n        throw new NotSupported(\"NoopAuthProvider does not support deauthenticate\");\n    }\n    reset() {\n        throw new NotSupported(\"NoopAuthProvider does not support reset\");\n    }\n}\nexport const AnonymousUser = {\n    userId: \"anonymous\",\n};\n/**\n * This is a noop implementation of authentication provider - it does nothing and assumes anonymous user.\n *\n * @public\n */\nexport class AnonymousAuthProvider {\n    authenticate(_context) {\n        return Promise.resolve(AnonymousUser);\n    }\n    getCurrentPrincipal(_context) {\n        return Promise.resolve(AnonymousUser);\n    }\n    deauthenticate(_context) {\n        return Promise.resolve();\n    }\n    reset() {\n        return;\n    }\n}\n//# sourceMappingURL=auth.js.map","import { invariant } from \"ts-invariant\";\nimport range from \"lodash/range.js\";\nimport flatMap from \"lodash/flatMap.js\";\nimport isNil from \"lodash/isNil.js\";\n/**\n * This implementation of {@link @gooddata/sdk-backend-spi#IPagedResource} pages over a list of items\n * provided at construction time. The paging is done using pre-configured page limit and starts at particular offset.\n *\n * @internal\n */\nexport class InMemoryPaging {\n    constructor(allItems, limit = 50, offset = 0) {\n        this.allItems = allItems;\n        invariant(offset >= 0, `paging offset must be non-negative, got: ${offset}`);\n        invariant(limit > 0, `limit must be a positive number, got: ${limit}`);\n        // this will naturally return empty items if at the end of data; limit will always be positive\n        this.items = allItems.slice(offset, offset + limit);\n        // offset is at most at the end of all available elements\n        this.offset = Math.min(offset, allItems.length);\n        // limit is always kept as-requested\n        this.limit = limit;\n        this.totalCount = allItems.length;\n    }\n    async next() {\n        if (this.items.length === 0) {\n            return this;\n        }\n        return new InMemoryPaging(this.allItems, this.limit, this.offset + this.items.length);\n    }\n    async goTo(pageIndex) {\n        if (this.items.length === 0) {\n            return this;\n        }\n        return new InMemoryPaging(this.allItems, this.limit, pageIndex * this.items.length);\n    }\n    async all() {\n        return [...this.allItems];\n    }\n    async allSorted(compareFn) {\n        return [...this.allItems].sort(compareFn);\n    }\n}\n/**\n * Common implementation of the {@link @gooddata/sdk-backend-spi#IPagedResource} for the server-side paging.\n *\n * @internal\n */\nexport class ServerPaging {\n    static async for(getData, limit = 50, offset = 0) {\n        invariant(offset >= 0, `paging offset must be non-negative, got: ${offset}`);\n        invariant(limit > 0, `limit must be a positive number, got: ${limit}`);\n        const { totalCount, items } = await getData({ limit, offset });\n        // must use isNil, totalCount: 0 is a valid case (e.g. when searching for a nonsensical string)\n        invariant(!isNil(totalCount), `total count must be specified, got: ${totalCount}`);\n        return new ServerPaging(getData, limit, offset, totalCount, items);\n    }\n    constructor(getData, limit = 50, offset = 0, totalCount, items) {\n        this.getData = getData;\n        this.limit = limit;\n        this.offset = offset;\n        this.totalCount = totalCount;\n        this.items = items;\n        this.next = async () => {\n            // No items = we are on the last page.\n            if (this.items.length === 0) {\n                return this;\n            }\n            // We are on the last page with the items - return empty result for the next page immediately\n            if (this.items.length < this.limit || this.offset + this.items.length === this.totalCount) {\n                return new ServerPaging(this.getData, this.limit, this.offset + this.limit, this.totalCount, []);\n            }\n            const pageData = await this.getData({ limit: this.limit, offset: this.offset + this.limit });\n            return new ServerPaging(this.getData, this.limit, this.offset + this.limit, pageData.totalCount, pageData.items);\n        };\n        this.goTo = async (pageIndex) => {\n            const offset = pageIndex * this.limit;\n            const pageData = await this.getData({ limit: this.limit, offset });\n            return new ServerPaging(this.getData, this.limit, offset, pageData.totalCount, pageData.items);\n        };\n        this.all = async () => {\n            const results = [];\n            const maxRequests = 6;\n            const allPagesToLoad = range(0, this.totalCount / this.limit);\n            // if the paged resource is already at the 0 offset, use it directly to save a duplicate request\n            if (this.offset === 0) {\n                results.push(...this.items);\n                allPagesToLoad.shift();\n            }\n            while (allPagesToLoad.length > 0) {\n                const pagesToLoad = allPagesToLoad.slice(0, maxRequests);\n                allPagesToLoad.splice(0, maxRequests);\n                const loadedPages = await Promise.all(pagesToLoad.map((page) => this.goTo(page)));\n                results.push(...flatMap(loadedPages, (page) => page.items));\n            }\n            return results;\n        };\n        this.allSorted = async (compareFn) => {\n            const all = await this.all();\n            return all.sort(compareFn);\n        };\n    }\n}\n//# sourceMappingURL=paging.js.map","// (C) 2021 GoodData Corporation\nimport { sanitizeUrl } from \"@braintree/sanitize-url\";\nconst AboutBlank = \"about:blank\";\nfunction validateUrl(url, messagePrefix) {\n    const sanitized = sanitizeUrl(url);\n    if (url !== sanitized) {\n        // sanitized URL being different from the input means there was something fishy with the URL\n        if (sanitized === AboutBlank) {\n            // sanitization about return about:blank in case the url contains javascript/vbscript/data schemas\n            return `${messagePrefix} contains invalid schema; possible XSS detected`;\n        }\n        return `${messagePrefix} contains invalid characters`;\n    }\n    // explicitly check for '/.' and '/..'\n    if (url.search(/\\/\\.+/) > -1) {\n        return `${messagePrefix} contains reserved filename characters`;\n    }\n    return undefined;\n}\n/**\n * Performs validation of dashboard plugin URL. This is purely client-side and checks that the URL does\n * not contain invalid characters and contains correct protocol.\n *\n * @param url - url to validate\n * @alpha\n */\nexport function validatePluginUrlIsSane(url) {\n    var _a;\n    try {\n        // ensure URL is valid and is https\n        const parsedUrl = new URL(url);\n        if (parsedUrl.protocol !== \"https:\") {\n            return `url does not use https`;\n        }\n    }\n    catch (e) {\n        return \"url is malformed\";\n    }\n    // validate URL as is; then decode from percent-encoded URL and do one more round with the same validations\n    const validationError = (_a = validateUrl(url, \"url\")) !== null && _a !== void 0 ? _a : validateUrl(decodeURIComponent(url), \"decoded url\");\n    if (validationError) {\n        return validationError;\n    }\n    return undefined;\n}\n//# sourceMappingURL=pluginUrlValidation.js.map","// (C) 2019-2020 GoodData Corporation\nimport isEmpty from \"lodash/isEmpty.js\";\n/**\n * Type guard checking whether the provided object is a {@link ICatalogAttribute}\n *\n * @public\n */\nexport function isCatalogAttribute(obj) {\n    return !isEmpty(obj) && obj.type === \"attribute\";\n}\n//# sourceMappingURL=index.js.map","// (C) 2023 GoodData Corporation\nimport isEmpty from \"lodash/isEmpty.js\";\n/**\n * Type guard checking whether the provided object is a {@link ICatalogAttributeHierarchy}.\n *\n * @public\n */\nexport function isCatalogAttributeHierarchy(obj) {\n    return !isEmpty(obj) && obj.type === \"attributeHierarchy\";\n}\n//# sourceMappingURL=index.js.map","// (C) 2019-2020 GoodData Corporation\nimport isEmpty from \"lodash/isEmpty.js\";\n/**\n * Type guard checking whether the provided object is a {@link ICatalogFact}\n *\n * @public\n */\nexport function isCatalogFact(obj) {\n    return !isEmpty(obj) && obj.type === \"fact\";\n}\n//# sourceMappingURL=index.js.map","// (C) 2019-2020 GoodData Corporation\nimport isEmpty from \"lodash/isEmpty.js\";\n/**\n * Type guard checking whether the provided object is a {@link ICatalogMeasure}\n *\n * @public\n */\nexport function isCatalogMeasure(obj) {\n    return !isEmpty(obj) && obj.type === \"measure\";\n}\n//# sourceMappingURL=index.js.map","// (C) 2019-2023 GoodData Corporation\nimport { invariant } from \"ts-invariant\";\nimport { isMetadataObject } from \"../types.js\";\n/**\n * Gets the attribute display form's ObjRef\n * @param displayForm - attribute display form to work with\n * @returns ObjRef of the attribute display form\n * @public\n */\nexport function attributeDisplayFormMetadataObjectRef(displayForm) {\n    invariant(displayForm, \"displayForm must be specified\");\n    return displayForm.ref;\n}\n/**\n * Gets the attribute display form's title.\n * @param displayForm - attribute display form to work with\n * @returns title of the attribute display form\n * @public\n */\nexport function attributeDisplayFormMetadataObjectTitle(displayForm) {\n    invariant(displayForm, \"displayForm must be specified\");\n    return displayForm.title;\n}\n/**\n * Gets ObjRef of the attribute the display form is a form of.\n *\n * @param displayForm - attribute display form to work with\n * @returns display form ObjRef\n * @public\n */\nexport function attributeDisplayFormMetadataObjectAttributeRef(displayForm) {\n    invariant(displayForm, \"displayForm must be specified\");\n    return displayForm.attribute;\n}\n/**\n * Tests whether the provided object is of type {@link IAttributeDisplayFormMetadataObject}.\n *\n * @param obj - object to test\n * @public\n */\nexport function isAttributeDisplayFormMetadataObject(obj) {\n    return isMetadataObject(obj) && obj.type === \"displayForm\";\n}\n//# sourceMappingURL=index.js.map","// (C) 2019-2021 GoodData Corporation\nimport { isMetadataObject } from \"../types.js\";\n/**\n * Tests whether the provided object is of type {@link IMeasureMetadataObject}.\n *\n * @param obj - object to test\n * @public\n */\nexport function isMeasureMetadataObject(obj) {\n    return isMetadataObject(obj) && obj.type === \"measure\";\n}\n/**\n * Tests whether the provided object is of type {@link IMeasureMetadataObjectDefinition}.\n *\n * @param obj - object to test\n * @public\n */\nexport function isMeasureMetadataObjectDefinition(obj) {\n    return obj.type === \"measure\" && obj.ref === undefined;\n}\n//# sourceMappingURL=index.js.map"],"names":["CatalogAttributeBuilder","attribute","attributeOrRef","modifications","this","item","defaultDisplayForm","displayFormOrRef","displayForms","geoPinDisplayForms","toExecutionModel","Error","defaultModifications","a","_a","alias","title","ref","m","newCatalogAttribute","type","CatalogDateAttributeBuilder","granularity","newCatalogDateAttribute","builder","CatalogDateDatasetBuilder","relevance","dateAttributes","dataSet","dataSetOrRef","obj","newCatalogDateDataset","CatalogFactBuilder","fact","factOrRef","newCatalogFact","GroupableCatalogItemBuilder","groups","tagRefs","CatalogGroupBuilder","tag","tagRef","newCatalogGroup","CatalogMeasureBuilder","measure","measureOrRef","i","_b","format","newCatalogMeasure","AttributeMetadataObjectBuilder","drillDownStep","drillToAttributeLink","newAttributeMetadataObject","DataSetMetadataObjectBuilder","newDataSetMetadataObject","AttributeDisplayFormMetadataObjectBuilder","displayFormType","isDefault","value","newAttributeDisplayFormMetadataObject","FactMetadataObjectBuilder","newFactMetadataObject","MetadataObjectBuilder","description","id","identifier","uri","unlisted","production","isProduction","deprecated","isDeprecated","MeasureMetadataObjectBuilder","expression","maql","isLocked","created","createdAt","createdBy","updated","updatedAt","updatedBy","newMeasureMetadataObject","AuthProviderCallGuard","constructor","realProvider","reset","principal","undefined","initializeClient","client","call","onNotAuthenticated","context","error","authenticate","Promise","resolve","inflightRequest","then","res","catch","err","getCurrentPrincipal","async","deauthenticate","NoopAuthProvider","_context","AnonymousUser","userId","AnonymousAuthProvider","InMemoryPaging","allItems","limit","offset","items","slice","Math","min","length","totalCount","pageIndex","compareFn","sort","ServerPaging","static","getData","next","pageData","goTo","all","results","allPagesToLoad","push","shift","pagesToLoad","splice","loadedPages","map","page","allSorted","AboutBlank","validateUrl","url","messagePrefix","sanitized","search","validatePluginUrlIsSane","URL","protocol","e","validationError","decodeURIComponent","isCatalogAttribute","isCatalogAttributeHierarchy","isCatalogFact","isCatalogMeasure","isAttributeDisplayFormMetadataObject","isMeasureMetadataObject"],"sourceRoot":""}